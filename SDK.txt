Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 1]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 1]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 1]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 1]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 1]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 1]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 1]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 1]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 1]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 1]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 1]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 1]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 1]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 1]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 1]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 1]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 1]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 1]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 1]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 1]
	Level*[] Levels;//[Offset: 0x1e0, Size: 1]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 1]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 1]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 1]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 1]
	WorldComposition* WorldComposition;//[Offset: 0x660, Size: 1]
	WorldPSCPool PSCPool;//[Offset: 0x6f0, Size: 1]
	WorldSettings* K2_GetWorldSettings();// 0x3f2bc70
	void HandleTimelineScrubbed();// 0x3f2bc50

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2649560

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 1]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x238, Size: 1]
	FilePath[] MapsToScan;//[Offset: 0x248, Size: 1]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x258, Size: 1]
	FilePath[] MapsToNeverScan;//[Offset: 0x268, Size: 1]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x278, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x288, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x288, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x290, Size: 1]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x298, Size: 1]
	float WorldToMeters;//[Offset: 0x2a0, Size: 1]
	float KillZ;//[Offset: 0x2a4, Size: 1]
	class DamageType* KillZDamageType;//[Offset: 0x2a8, Size: 1]
	float WorldGravityZ;//[Offset: 0x2b0, Size: 1]
	float GlobalGravityZ;//[Offset: 0x2b4, Size: 1]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2b8, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c0, Size: 1]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2c8, Size: 1]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d0, Size: 1]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2d8, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x2dc, Size: 1]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2e8, Size: 1]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2ec, Size: 1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f0, Size: 1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2f8, Size: 1]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x318, Size: 1]
	float MonoCullingDistance;//[Offset: 0x33c, Size: 1]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x340, Size: 1]
	float TimeDilation;//[Offset: 0x348, Size: 1]
	float MatineeTimeDilation;//[Offset: 0x34c, Size: 1]
	float DemoPlayTimeDilation;//[Offset: 0x350, Size: 1]
	float MinGlobalTimeDilation;//[Offset: 0x354, Size: 1]
	float MaxGlobalTimeDilation;//[Offset: 0x358, Size: 1]
	float MinUndilatedFrameTime;//[Offset: 0x35c, Size: 1]
	float MaxUndilatedFrameTime;//[Offset: 0x360, Size: 1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x364, Size: 1]
	PlayerState* Pauser;//[Offset: 0x3a8, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b0, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c0, Size: 1]
	PlayerState* PauserPlayerState;//[Offset: 0x3d0, Size: 1]
	int MaxNumberOfBookmarks;//[Offset: 0x3d8, Size: 1]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e0, Size: 1]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3e8, Size: 1]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3f8, Size: 1]
	void OnRep_WorldGravityZ();// 0x1570d30

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x62, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x63, Size: 1]
	byte RemoteRole;//[Offset: 0x64, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 1]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 1]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 1]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 1]
	Actor* Owner;//[Offset: 0xe8, Size: 1]
	FName NetDriverName;//[Offset: 0xf0, Size: 1]
	byte Role;//[Offset: 0xf8, Size: 1]
	byte NetDormancy;//[Offset: 0xf9, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 1]
	int InputPriority;//[Offset: 0xfc, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 1]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 1]
	int NetTag;//[Offset: 0x10c, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 1]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 1]
	float NetPriority;//[Offset: 0x118, Size: 1]
	Pawn* Instigator;//[Offset: 0x120, Size: 1]
	Actor*[] Children;//[Offset: 0x128, Size: 1]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 1]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 1]
	FName[] Layers;//[Offset: 0x158, Size: 1]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 1]
	FName[] Tags;//[Offset: 0x178, Size: 1]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 1]
	delegate OnClicked;//[Offset: 0x18f, Size: 1]
	delegate OnReleased;//[Offset: 0x190, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 1]
	delegate OnActorHit;//[Offset: 0x195, Size: 1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 1]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3dc1430
	void UserConstructionScript();// 0x2649560
	void TearOff();// 0x30f3d30
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x3dc1360
	void SetTickGroup(byte NewTickGroup);// 0x3dc1250
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3dc12d0
	void SetReplicates(bool bInReplicates);// 0x3dc11c0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x3dc1130
	void SetOwner(Actor* NewOwner);// 0x3dc10a0
	void SetNetDormancy(byte NewDormancy);// 0x3dc1020
	void SetLifeSpan(float InLifespan);// 0x3dc0f90
	void SetAutoDestroyWhenFinished(bool bVal);// 0x3dc0f00
	void SetActorTickInterval(float TickInterval);// 0x3dc0e80
	void SetActorTickEnabled(bool bEnabled);// 0x3dc0df0
	void SetActorScale3D(Vector NewScale3D);// 0x3dc0d60
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x3dc0cd0
	void SetActorHiddenInGame(bool bNewHidden);// 0x3dc0c40
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x3dc0bb0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3dc0b20
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3dc0a90
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x2649560
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2649560
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x2649560
	void ReceiveEndPlay(byte EndPlayReason);// 0x2649560
	void ReceiveDestroyed();// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2649560
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x2649560
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x2649560
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x2649560
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x2649560
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x2649560
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x2649560
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x2649560
	void ReceiveActorEndCursorOver();// 0x2649560
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2649560
	void ReceiveActorBeginCursorOver();// 0x2649560
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x3dc0970
	void OnRep_ReplicateMovement();// 0x1ff1f20
	void OnRep_ReplicatedMovement();// 0x1564a40
	void OnRep_Owner();// 0x7d44c0
	void OnRep_Instigator();// 0x3dc0950
	void OnRep_AttachmentReplication();// 0x3dc0930
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x3dc0790
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x3dc06f0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x3dc0600
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dc03f0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x3dc0300
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dc00f0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbff40
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbfd90
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbfb80
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbf9c0
	void K2_OnReset();// 0x2649560
	void K2_OnEndViewTarget(PlayerController* PC);// 0x2649560
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x2649560
	SceneComponent* K2_GetRootComponent();// 0x3dbf9a0
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x3dbf8c0
	Rotator K2_GetActorRotation();// 0x3dbf7d0
	Vector K2_GetActorLocation();// 0x3dbf750
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3dbf640
	void K2_DestroyComponent(ActorComponent* Component);// 0x3dbf5b0
	void K2_DestroyActor();// 0x217bdd0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3dbf3e0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3dbf210
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x3dbf0b0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x3dbef50
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbed40
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbeb90
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbe9e0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbe7d0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbe620
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3dbe470
	bool IsOverlappingActor(const Actor* Other);// 0x3dbe3d0
	bool IsChildActor();// 0x3dbe3a0
	bool IsActorTickEnabled();// 0x3dbe370
	bool IsActorBeingDestroyed();// 0x3dbe350
	bool HasAuthority();// 0x3dbe320
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x3dbe280
	Vector GetVelocity();// 0x3dbe240
	Transform GetTransform();// 0x3dbe1f0
	bool GetTickableWhenPaused();// 0x3dbe1c0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x3dbe120
	byte GetRemoteRole();// 0x204af10
	ChildActorComponent* GetParentComponent();// 0x3dbe0f0
	Actor* GetParentActor();// 0x3dbe0c0
	Actor* GetOwner();// 0x3107280
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x3dbe010
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x3dbdf10
	byte GetLocalRole();// 0x3dbdef0
	float GetLifeSpan();// 0x3dbdeb0
	Controller* GetInstigatorController();// 0x3dbde80
	Pawn* GetInstigator();// 0x3dbde50
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x3dbdd40
	float GetInputAxisValue(const FName InputAxisName);// 0x3dbdca0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x3dbdba0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x3dbdb00
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x3dbda60
	float GetGameTimeSinceCreation();// 0x3dbda30
	float GetDotProductTo(const Actor* OtherActor);// 0x3dbd990
	float GetDistanceTo(const Actor* OtherActor);// 0x3dbd8f0
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x3dbd7e0
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x3dbd700
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x3dbd660
	FName GetAttachParentSocketName();// 0x3dbd520
	Actor* GetAttachParentActor();// 0x3dbd4f0
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x3dbd560
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x3dbd3f0
	Vector GetActorUpVector();// 0x3dbd380
	float GetActorTimeDilation();// 0x3dbd350
	float GetActorTickInterval();// 0x3dbd320
	Vector GetActorScale3D();// 0x3dbd2e0
	Vector GetActorRightVector();// 0x3dbd270
	Vector GetActorRelativeScale3D();// 0x3dbd230
	Vector GetActorForwardVector();// 0x3dbd1c0
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x3dbd0d0
	bool GetActorEnableCollision();// 0x3dbd0a0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x3dbcf10
	void ForceNetUpdate();// 0x1571a10
	void FlushNetDormancy();// 0x3dbcef0
	void EnableInput(PlayerController* PlayerController);// 0xbc1fa0
	void DisableInput(PlayerController* PlayerController);// 0x217c430
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x3dbce60
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x217bcb0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3dbcdd0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x3dbcc00
	bool ActorHasTag(FName Tag);// 0x3dbcb60

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 1]
	void ToggleActive();// 0x7d44c0
	void SetTickGroup(byte NewTickGroup);// 0x3dc4da0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x3dc4e20
	void SetIsReplicated(bool ShouldReplicate);// 0x3dc4d10
	void SetComponentTickInterval(float TickInterval);// 0x3dc4c90
	void SetComponentTickEnabled(bool bEnabled);// 0x3dc4c00
	void SetAutoActivate(bool bNewAutoActivate);// 0x3dc1130
	void SetActive(bool bNewActive, bool bReset);// 0x3dc4b30
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3dc4aa0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3dc4a10
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void ReceiveEndPlay(byte EndPlayReason);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnRep_IsActive();// 0x1ff1f20
	void K2_DestroyComponent(Object* Object);// 0x3dc4900
	bool IsComponentTickEnabled();// 0x3dc48d0
	bool IsBeingDestroyed();// 0x3dc48a0
	bool IsActive();// 0x3dc4870
	Actor* GetOwner();// 0x3dc4850
	float GetComponentTickInterval();// 0x3dc4820
	void Deactivate();// 0x30f3d10
	bool ComponentHasTag(FName Tag);// 0x3dc45e0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x3dc4480
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x3dc43f0
	void Activate(bool bReset);// 0x3527d70

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 1]
	FName MemberName;//[Offset: 0x8, Size: 1]
	Guid MemberGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 1]
	int B;//[Offset: 0x4, Size: 1]
	int C;//[Offset: 0x8, Size: 1]
	int D;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 1]
	float DestructibleImpulse;//[Offset: 0x30, Size: 1]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 1]
	float DamageFalloff;//[Offset: 0x38, Size: 1]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	int FaceIndex;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	float Distance;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 1]
	float PenetrationDepth;//[Offset: 0x58, Size: 1]
	int Item;//[Offset: 0x5c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 1]
	Actor* Actor;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	FName BoneName;//[Offset: 0x78, Size: 1]
	FName MyBoneName;//[Offset: 0x80, Size: 1]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 1]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float Restitution;//[Offset: 0x30, Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float Density;//[Offset: 0x38, Size: 1]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 1]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 1]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	float TireFrictionScale;//[Offset: 0x54, Size: 1]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 1]
	float FrictionScale;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x320, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x324, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x328, Size: 1]
	float MinScreenSizeCulling;//[Offset: 0x32c, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x330, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x331, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x332, Size: 1]
	enum LightmapType;//[Offset: 0x333, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x334, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x336, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x336, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x336, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x336, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x336, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x336, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x336, Size: 1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x337, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x337, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x337, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x337, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x337, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x337, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x337, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x337, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 1]
	bool bForceGenLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x339, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x339, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x339, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x339, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x339, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x339, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33a, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33a, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33a, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33a, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33a, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33a, Size: 1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33a, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x33c, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x33e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x33f, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x340, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x344, Size: 1]
	int MainPassDepthStencilValue;//[Offset: 0x348, Size: 1]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x350, Size: 1]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x360, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x370, Size: 1]
	int VisibilityId;//[Offset: 0x374, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x378, Size: 1]
	int8 VirtualTextureLodBias;//[Offset: 0x388, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x389, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x38a, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x38b, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x390, Size: 1]
	float BoundsScale;//[Offset: 0x39c, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3b0, Size: 1]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3c0, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x3e0, Size: 1]
	delegate OnComponentHit;//[Offset: 0x510, Size: 1]
	delegate OnComponentBeginOverlap;//[Offset: 0x511, Size: 1]
	delegate OnComponentEndOverlap;//[Offset: 0x512, Size: 1]
	delegate OnComponentWake;//[Offset: 0x513, Size: 1]
	delegate OnComponentSleep;//[Offset: 0x514, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x516, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x517, Size: 1]
	delegate OnClicked;//[Offset: 0x518, Size: 1]
	delegate OnReleased;//[Offset: 0x519, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x51a, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x51b, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x51c, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x51d, Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x538, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x3eeb540
	void WakeRigidBody(FName BoneName);// 0x3eeb4b0
	void WakeAllRigidBodies();// 0x15710d0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x3eeb400
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x3eeb330
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x3eeb2a0
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x3eeb090
	void SetSimulatePhysics(bool bSimulate);// 0x3eeb000
	void SetRenderMainPassStencil(bool bValue);// 0x3eeaf70
	void SetRenderInMainPass(bool bValue);// 0x3eeaee0
	void SetRenderCustomDepth(bool bValue);// 0x3eeae50
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x3eeadc0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x3eea6c0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3eeac20
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3eeab00
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3eeab00
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x3eea9d0
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3eea8a0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3eea750
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3eea750
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x3eea630
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x3eea5a0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x3eea510
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x3eea3b0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x3eea2e0
	void SetMassScale(FName BoneName, float InMassScale);// 0x3eea200
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x3eea0f0
	void SetMainPassStencilValue(int Value);// 0x3eea060
	void SetLinearDamping(float InDamping);// 0x3e06f90
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x3ee9f30
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x3ee9da0
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x3ee9d10
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x3ee9c80
	void SetEnableGravity(bool bGravityEnabled);// 0x3ee9bf0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x3ee9b10
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x3ee9a30
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x3ee9960
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x3ee9890
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x3ee9810
	void SetCustomDepthStencilValue(int Value);// 0x3ee9780
	void SetCullDistance(float NewCullDistance);// 0x3ee9700
	void SetConstraintMode(byte ConstraintMode);// 0x3ee9680
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x3ee95b0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x3ee9530
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x3ee9460
	void SetCollisionObjectType(byte Channel);// 0x3ee93e0
	void SetCollisionEnabled(byte NewType);// 0x3ee9360
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x3ee9280
	void SetCastShadow(bool NewCastShadow);// 0x3ee91f0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x3ee9160
	void SetBoundsScale(float NewBoundsScale);// 0x3ee90e0
	void SetAngularDamping(float InDamping);// 0x3e06de0
	void SetAllUseCCD(bool InUseCCD);// 0x3ee8ab0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x3ee89d0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x3ee88e0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x3ee87c0
	void SetAllMassScale(float InMassScale);// 0x3ee8730
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x3ee8630
	void PutRigidBodyToSleep(FName BoneName);// 0x3ee8510
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3ee8160
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3ee7e00
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3ee7aa0
	bool K2_IsQueryCollisionEnabled();// 0x3ee7a60
	bool K2_IsPhysicsCollisionEnabled();// 0x3ee7a20
	bool K2_IsCollisionEnabled();// 0x3ee79e0
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x3ee7670
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x3ee75d0
	bool IsOverlappingActor(const Actor* Other);// 0x3ee7530
	bool IsGravityEnabled();// 0x219eb80
	bool IsAnyRigidBodyAwake();// 0x3ee7500
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x3ee72c0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x3ee71f0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x3ee71c0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x3ee7040
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x3ee6f90
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x3ee6ee0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x3ee6e10
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x3ee6e10
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x3ee6d60
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x3ee6c60
	int GetNumMaterials();// 0x3ee6c30
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x3ee6b50
	MaterialInterface* GetMaterial(int ElementIndex);// 0x3ee6ab0
	float GetMassScale(FName BoneName);// 0x3ee6a10
	float GetMass();// 0x3ee69d0
	float GetLinearDamping();// 0x3ee6990
	Vector GetInertiaTensor(FName BoneName);// 0x3ee68e0
	bool GetGenerateOverlapEvents();// 0x3ee68b0
	byte GetCollisionResponseToChannel(byte Channel);// 0x3ee6820
	FName GetCollisionProfileName();// 0x3ee67e0
	byte GetCollisionObjectType();// 0x233b0c0
	byte GetCollisionEnabled();// 0x3ee67b0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x3ee6670
	Vector GetCenterOfMass(FName BoneName);// 0x3ee65c0
	float GetAngularDamping();// 0x3ee61d0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x3ee60b0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x3ee5fe0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x3ee5f40
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x3ee5e30
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x3ee5db0
	void ClearMoveIgnoreComponents();// 0x3ee5d60
	void ClearMoveIgnoreActors();// 0x3ee5d40
	bool CanCharacterStepUp(Pawn* Pawn);// 0x3ee5ca0
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x3ee5a20
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x3ee5b50
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x3ee5a20
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x3ee5840
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x3ee5660
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x3ee5260
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x3ee5130
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x3ee4ff0
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x3ee4eb0
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x3ee4d80
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x3ee4c50
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x3ee4b00
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x3ee49d0

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 1]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 1]
	FName AttachSocketName;//[Offset: 0xc8, Size: 1]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 1]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 1]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 1]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x3ef8d20
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x3ef8c50
	void SetWorldScale3D(Vector NewScale);// 0x3ef8a60
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x3ef8940
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x3ef8860
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x3ef87d0
	void SetRelativeScale3D(Vector NewScale3D);// 0x3ef8740
	void SetMobility(byte NewMobility);// 0x3ef86c0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x3ef85f0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x3ef8430
	void ResetRelativeTransform();// 0x3ef8410
	void OnRep_Visibility(bool OldValue);// 0x3ef8220
	void OnRep_Transform();// 0x3ef8200
	void OnRep_AttachSocketName();// 0x3ef81e0
	void OnRep_AttachParent();// 0x3ef81e0
	void OnRep_AttachChildren();// 0x3ef81c0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7fb0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7e00
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7c00
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7a50
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7840
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7690
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef7490
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef72e0
	Transform K2_GetComponentToWorld();// 0x3ef7280
	Vector K2_GetComponentScale();// 0x3ef7240
	Rotator K2_GetComponentRotation();// 0x3ef7200
	Vector K2_GetComponentLocation();// 0x3ef71c0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x3ef7060
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x3ef6e90
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x3ef6d30
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef6b20
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef6970
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef67c0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef6610
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef6460
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef6250
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef60a0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x3ef5ef0
	bool IsVisible();// 0x3ef5ec0
	bool IsSimulatingPhysics(FName BoneName);// 0x3ef5e20
	bool IsAnySimulatingPhysics();// 0x3ef5df0
	Vector GetUpVector();// 0x3ef5c50
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x3ef5af0
	Rotator GetSocketRotation(FName InSocketName);// 0x3ef5a40
	Quat GetSocketQuaternion(FName InSocketName);// 0x3ef5990
	Vector GetSocketLocation(FName InSocketName);// 0x3ef58e0
	bool GetShouldUpdatePhysicsVolume();// 0x3ef58b0
	Vector GetRightVector();// 0x3ef5870
	Transform GetRelativeTransform();// 0x3ef5810
	PhysicsVolume* GetPhysicsVolume();// 0x3ef57e0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x3ef5730
	int GetNumChildrenComponents();// 0x3ef5700
	Vector GetForwardVector();// 0x3ed1d40
	Vector GetComponentVelocity();// 0x3ef56c0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x3ef55c0
	SceneComponent* GetChildComponent(int ChildIndex);// 0x3ef5520
	FName GetAttachSocketName();// 0x3680de0
	SceneComponent* GetAttachParent();// 0x3ef5500
	FName[] GetAllSocketNames();// 0x3ef5480
	bool DoesSocketExist(FName InSocketName);// 0x3ef53e0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x3ef5310

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 1]
	int Priority;//[Offset: 0x264, Size: 1]
	float FluidFriction;//[Offset: 0x268, Size: 1]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 1]
	Color BrushColor;//[Offset: 0x22c, Size: 1]
	int PolyFlags;//[Offset: 0x230, Size: 1]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 1]
	Model* Brush;//[Offset: 0x238, Size: 1]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 1]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 1]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x540, Size: 1]
	BodySetup* BrushBodySetup;//[Offset: 0x548, Size: 1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x80, Size: 1]
	byte PhysicsType;//[Offset: 0x88, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 1]
	Vector BuildScale3D;//[Offset: 0x258, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 1]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 1]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 1]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 1]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	float Radius;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 1]
	FName Name;//[Offset: 0xc, Size: 1]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float X;//[Offset: 0x48, Size: 1]
	float Y;//[Offset: 0x4c, Size: 1]
	float Z;//[Offset: 0x50, Size: 1]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]
	float Roll;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius;//[Offset: 0x48, Size: 1]
	float Length;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 1]
	int[] IndexData;//[Offset: 0x40, Size: 1]
	Box ElemBox;//[Offset: 0x50, Size: 1]
	Transform Transform;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 1]
	Vector Max;//[Offset: 0xc, Size: 1]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 1]
	Vector Translation;//[Offset: 0x10, Size: 1]
	Vector Scale3D;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius0;//[Offset: 0x48, Size: 1]
	float Radius1;//[Offset: 0x4c, Size: 1]
	float Length;//[Offset: 0x50, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 1]
	enum SleepFamily;//[Offset: 0xa, Size: 1]
	byte DOFMode;//[Offset: 0xb, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 1]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 1]
	float MassInKgOverride;//[Offset: 0x5c, Size: 1]
	float LinearDamping;//[Offset: 0x68, Size: 1]
	float AngularDamping;//[Offset: 0x6c, Size: 1]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 1]
	Vector COMNudge;//[Offset: 0x7c, Size: 1]
	float MassScale;//[Offset: 0x88, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 1]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 1]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 1]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 1]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 1]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 1]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 1]
	int Index;//[Offset: 0x4, Size: 1]
	int SelectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 1]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x3eb17c0
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x3eb0fd0
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x3eb0f30
	PhysicalMaterial* GetPhysicalMaterial();// 0x3527400
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x3eb0e10
	Material* GetBaseMaterial();// 0x3eb0de0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 1]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 1]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 1]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 1]
	float WorldUnitScale;//[Offset: 0x24, Size: 1]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 1]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 1]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 1]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 1]
	float ExtinctionScale;//[Offset: 0x60, Size: 1]
	float NormalScale;//[Offset: 0x64, Size: 1]
	float ScatteringDistribution;//[Offset: 0x68, Size: 1]
	float IOR;//[Offset: 0x6c, Size: 1]
	float Roughness0;//[Offset: 0x70, Size: 1]
	float Roughness1;//[Offset: 0x74, Size: 1]
	float LobeMix;//[Offset: 0x78, Size: 1]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 1]
	float G;//[Offset: 0x4, Size: 1]
	float B;//[Offset: 0x8, Size: 1]
	float A;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 1]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 1]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 1]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 1]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 1]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 1]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 1]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 1]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 1]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 1]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 1]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 1]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 1]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 1]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 1]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 1]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 1]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 1]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x209, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20a, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20a, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20a, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20a, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20a, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20a, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20a, Size: 1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20b, Size: 1]
	byte DepthCompare;//[Offset: 0x20c, Size: 1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 1]
	byte MainPassStencilCompare;//[Offset: 0x20e, Size: 1]
	byte MainPassStencilRefValue;//[Offset: 0x20f, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 1]
	byte BlendableLocation;//[Offset: 0x211, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 1]
	byte StencilCompare;//[Offset: 0x213, Size: 1]
	byte StencilRefValue;//[Offset: 0x214, Size: 1]
	byte RefractionMode;//[Offset: 0x215, Size: 1]
	int BlendablePriority;//[Offset: 0x218, Size: 1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x220, Size: 1]
	float RefractionDepthBias;//[Offset: 0x224, Size: 1]
	Guid StateId;//[Offset: 0x228, Size: 1]
	float MaxDisplacement;//[Offset: 0x238, Size: 1]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2c8, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName ExpressionName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName ExpressionName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 1]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 1]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 1]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 1]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 1]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 1]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 1]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 1]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 5]
	float[] ScalarValues;//[Offset: 0x140, Size: 1]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 1]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 1]
	Font*[] FontValues;//[Offset: 0x170, Size: 1]
	int[] FontPageValues;//[Offset: 0x180, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 1]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 1]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 1]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 1]
	bool[] Overrides;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 1]
	int LODBias;//[Offset: 0x58, Size: 1]
	byte CompressionSettings;//[Offset: 0x5c, Size: 1]
	byte Filter;//[Offset: 0x5d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 1]
	byte LODGroup;//[Offset: 0x5f, Size: 1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 1]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 1]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 1]
	int StreamingIndex;//[Offset: 0x34, Size: 1]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 1]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 1]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 1]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 1]
	int IsRemapped;//[Offset: 0x58, Size: 1]
	float EmScale;//[Offset: 0x5c, Size: 1]
	float Ascent;//[Offset: 0x60, Size: 1]
	float Descent;//[Offset: 0x64, Size: 1]
	float Leading;//[Offset: 0x68, Size: 1]
	int Kerning;//[Offset: 0x6c, Size: 1]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 1]
	int NumCharacters;//[Offset: 0x120, Size: 1]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 1]
	float ScalingFactor;//[Offset: 0x138, Size: 1]
	int LegacyFontSize;//[Offset: 0x13c, Size: 1]
	FName LegacyFontName;//[Offset: 0x140, Size: 1]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 1]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 1]
	int StartV;//[Offset: 0x4, Size: 1]
	int USize;//[Offset: 0x8, Size: 1]
	int VSize;//[Offset: 0xc, Size: 1]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 1]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 1]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte AddressX;//[Offset: 0xc1, Size: 1]
	byte AddressY;//[Offset: 0xc2, Size: 1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x3f20f20
	int Blueprint_GetSizeX();// 0x3f20ef0

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 1]
	float Height;//[Offset: 0x10, Size: 1]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x18, Size: 1]
	FString Chars;//[Offset: 0x20, Size: 1]
	FString UnicodeRange;//[Offset: 0x30, Size: 1]
	FString CharsFilePath;//[Offset: 0x40, Size: 1]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 1]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 1]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	int TexturePageWidth;//[Offset: 0x78, Size: 1]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 1]
	int XPadding;//[Offset: 0x80, Size: 1]
	int YPadding;//[Offset: 0x84, Size: 1]
	int ExtendBoxTop;//[Offset: 0x88, Size: 1]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 1]
	int ExtendBoxRight;//[Offset: 0x90, Size: 1]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 1]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int Kerning;//[Offset: 0x9c, Size: 1]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 1]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 1]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 1]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 1]
	FontData Font;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 1]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 1]
	float ScalingFactor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 1]
	FString Cultures;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 1]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	int Size;//[Offset: 0x30, Size: 1]
	int TileCount;//[Offset: 0x34, Size: 1]
	int TileSize;//[Offset: 0x38, Size: 1]
	int TileBorderSize;//[Offset: 0x3c, Size: 1]
	int StreamLowMips;//[Offset: 0x40, Size: 1]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int RemoveLowMips;//[Offset: 0x54, Size: 1]
	int GetTileSize();// 0x3ef0f40
	int GetTileCount();// 0x3ef0f00
	int GetTileBorderSize();// 0x3ef0ec0
	int GetSize();// 0x3ef0e50

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	uint32 BuildHash;//[Offset: 0x100, Size: 1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 1]
	int TileBorderSize;//[Offset: 0x4, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 1]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 1]
	Guid ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 1]
	float GrassDensity;//[Offset: 0x48, Size: 1]
	float PlacementJitter;//[Offset: 0x4c, Size: 1]
	int StartCullDistance;//[Offset: 0x50, Size: 1]
	int EndCullDistance;//[Offset: 0x54, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 1]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 1]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PlacementJitter;//[Offset: 0x10, Size: 1]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 1]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 1]
	int MinLOD;//[Offset: 0x1c, Size: 1]
	enum Scaling;//[Offset: 0x20, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 1]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 1]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 1]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 1]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 1]
	float LightmapUVDensity;//[Offset: 0x90, Size: 1]
	int LightMapResolution;//[Offset: 0x94, Size: 1]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 1]
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa0, Size: 1]
	float MinScreenSize;//[Offset: 0xa4, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 1]
	int LODForCollision;//[Offset: 0xb0, Size: 1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 1]
	Object* EditableMesh;//[Offset: 0x148, Size: 1]
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 1]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x3f19ab0
	int GetNumSections(int InLOD);// 0x3f19830
	int GetNumLODs();// 0x3f19800
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x3f19690
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x3f19610
	int GetMaterialIndex(FName MaterialSlotName);// 0x3f19570
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x3f194d0
	BoxSphereBounds GetBounds();// 0x3f19320
	Box GetBoundingBox();// 0x3f192d0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x3f191d0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x3f19140
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x3f19040
	void AddSocket(StaticMeshSocket* Socket);// 0x3f18fb0
	FName AddMaterial(MaterialInterface* Material);// 0x3f18f20

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	Vector RelativeLocation;//[Offset: 0x30, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 1]
	Vector RelativeScale;//[Offset: 0x48, Size: 1]
	FString Tag;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 1]
	Vector BoxExtent;//[Offset: 0xc, Size: 1]
	float SphereRadius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x360ed50
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x360ec70
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x360eb90
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x360e850

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x3606630
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x3606510
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x3606440
	void ReversePolygonFacing(PolygonID PolygonID);// 0x36063c0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x3606330
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x36060f0
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x36062a0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x3606210
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x3606180
	void ReserveNewEdges(int NumberOfNewEdges);// 0x36060f0
	bool IsVertexValid(VertexID VertexID);// 0x3606060
	bool IsVertexOrphaned(VertexID VertexID);// 0x3605fd0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x3605f40
	bool IsTriangleValid(const TriangleID TriangleID);// 0x3605eb0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x3605e20
	bool IsPolygonValid(PolygonID PolygonID);// 0x3605d90
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x3605d00
	bool IsEmpty();// 0x3605cd0
	bool IsEdgeValid(EdgeID EdgeID);// 0x3605c40
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x3605b60
	bool IsEdgeInternal(EdgeID EdgeID);// 0x3605ad0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x36059e0
	Vector GetVertexPosition(VertexID VertexID);// 0x3605940
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x3605860
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x36057c0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x36056e0
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x3605600
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x3605520
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x3605430
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x3605340
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x3605250
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x3605160
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x3605070
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x3604f80
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x3604e90
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3604da0
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x3604cc0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x3604c20
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x3604b80
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x3604a90
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x36049a0
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x36048b0
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x36047c0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x36046d0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x3604630
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3604540
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3604450
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x3604360
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x3604270
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x36041e0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x3604150
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x36040c0
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x3604030
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x3603fa0
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x3603f10
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x3603e80
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x3603df0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x3603d60
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x3603cd0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x3603c40
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x3603bb0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x3603ac0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x36039e0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x36038f0
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x3603800
	void Empty();// 0x36037e0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x36036f0
	void DeleteVertex(VertexID VertexID);// 0x3603670
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x36034b0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x3603430
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x3603270
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x3603180
	void CreateVertexWithID(VertexID VertexID);// 0x3603100
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x3603030
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x3602f90
	VertexID CreateVertex();// 0x3602f50
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3602da0
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3602c30
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3602a80
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x3602a00
	PolygonGroupID CreatePolygonGroup();// 0x36029c0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3602850
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x3602730
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x3602650
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x36025d0

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 1]
	float DiffuseBoost;//[Offset: 0x4, Size: 1]
	float ExportResolutionScale;//[Offset: 0x8, Size: 1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 1]
	int UVChannelIndex;//[Offset: 0x4, Size: 1]
	FName TextureName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x3eb1dd0
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x3eb1d00
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x3eb1c10
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x3eb1b40
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x3eb1a50
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x3eb1980
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x3eb16a0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3eb15f0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x3eb1550
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3eb1400
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x3eb1360
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x3eb1210
	float K2_GetScalarParameterValue(FName ParameterName);// 0x3eb1170
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x3eb1000
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x3eb0d50
	void CopyInterpParameters(MaterialInstance* Source);// 0x3eb0cc0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 1]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 1]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 1]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 1]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 1]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 1]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 1]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 1]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	float ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Texture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Font* FontValue;//[Offset: 0x10, Size: 1]
	int FontPage;//[Offset: 0x18, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 1]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 1]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 1]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 1]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 1]
	bool[] LayerStates;//[Offset: 0x20, Size: 1]
	FString KeyString;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 1]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 1]
	Controller* LastHitBy;//[Offset: 0x258, Size: 1]
	Controller* Controller;//[Offset: 0x260, Size: 1]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 1]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 1]
	void SpawnDefaultController();// 0x7c4a30
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x3ecb430
	void ReceiveUnpossessed(Controller* OldController);// 0x2649560
	void ReceivePossessed(Controller* NewController);// 0x2649560
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x3eca6b0
	void OnRep_PlayerState();// 0x7e5fd0
	void OnRep_Controller();// 0x15711d0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3eca590
	Vector K2_GetMovementInputVector();// 0x3eca4c0
	bool IsPlayerControlled();// 0x3e1ae90
	bool IsPawnControlled();// 0x3eca560
	bool IsMoveInputIgnored();// 0x21de140
	bool IsLocallyControlled();// 0x202d080
	bool IsControlled();// 0x3eca530
	bool IsBotControlled();// 0x3eca500
	Vector GetPendingMovementInputVector();// 0x3eca4c0
	Vector GetNavAgentLocation();// 0x3eca440
	PawnMovementComponent* GetMovementComponent();// 0x3e06390
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x3eca310
	Vector GetLastMovementInputVector();// 0x2206720
	Rotator GetControlRotation();// 0x3eca280
	Controller* GetController();// 0x3eca2c0
	Rotator GetBaseAimRotation();// 0x3ec9a90
	void DetachFromControllerPendingDestroy();// 0x15726d0
	Vector ConsumeMovementInputVector();// 0x3ec97a0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x3ec9510
	void AddControllerYawInput(float val);// 0x3ec9480
	void AddControllerRollInput(float val);// 0x3ec93f0
	void AddControllerPitchInput(float val);// 0x3ec9360

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 1]
	FName StateName;//[Offset: 0x250, Size: 1]
	Pawn* Pawn;//[Offset: 0x258, Size: 1]
	Character* Character;//[Offset: 0x268, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 1]
	Rotator ControlRotation;//[Offset: 0x2a8, Size: 1]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 1]
	void UnPossess();// 0x3e03500
	void StopMovement();// 0x7c4a10
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x3e03410
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x3e03380
	void SetIgnoreLookInput(bool bNewLookInput);// 0x3e032f0
	void SetControlRotation(out const Rotator NewRotation);// 0x3e03260
	void ResetIgnoreMoveInput();// 0x15714d0
	void ResetIgnoreLookInput();// 0x1571970
	void ResetIgnoreInputFlags();// 0x1571bf0
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x2649560
	void ReceivePossess(Pawn* PossessedPawn);// 0x2649560
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2649560
	void Possess(Pawn* InPawn);// 0x3e031d0
	void OnRep_PlayerState();// 0x1571a30
	void OnRep_Pawn();// 0x7e5fd0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x3e030a0
	Pawn* K2_GetPawn();// 0x3e03070
	bool IsPlayerController();// 0x3e03040
	bool IsMoveInputIgnored();// 0x3e03010
	bool IsLookInputIgnored();// 0x3e02fe0
	bool IsLocalPlayerController();// 0x3e02f90
	bool IsLocalController();// 0x3e02f60
	Actor* GetViewTarget();// 0x3e02f30
	Rotator GetDesiredRotation();// 0x3e02b50
	Rotator GetControlRotation();// 0x3e028e0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x3e02720
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x3e02630
	PlayerController* CastToPlayerController();// 0x3e02600

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 1]
	int PlayerId;//[Offset: 0x22c, Size: 1]
	byte Ping;//[Offset: 0x230, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 1]
	int StartTime;//[Offset: 0x234, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 1]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 1]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 1]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 1]
	FString PlayerNamePrivate;//[Offset: 0x310, Size: 1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x2649560
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2649560
	void OnRep_UniqueId();// 0x7debc0
	void OnRep_Score();// 0x1570d30
	void OnRep_PlayerName();// 0x816980
	void OnRep_PlayerId();// 0x7debe0
	void OnRep_bIsInactive();// 0x1571170
	FString GetPlayerName();// 0x3ee7140

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 1]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 1]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 1]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 1]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 1]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 1]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 1]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 1]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 1]
	int JumpMaxCount;//[Offset: 0x344, Size: 1]
	int JumpCurrentCount;//[Offset: 0x348, Size: 1]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 1]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 1]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 1]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 1]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 1]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 1]
	void UnCrouch(bool bClientSimulation);// 0x3df9150
	void StopJumping();// 0x15715d0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x22cd6c0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x3df8c70
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3df89d0
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x3df85d0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3df8140
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3df7cb0
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3df7970
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x3df78d0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x3df7720
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x3df7560
	void OnRep_RootMotion();// 0x3df7540
	void OnRep_ReplicatedBasedMovement();// 0x1571190
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x3df7520
	void OnRep_IsCrouched();// 0x1572930
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2649560
	void OnLanded(out const HitResult Hit);// 0x2649560
	void OnJumped();// 0x1570e90
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3df73f0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2649560
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2649560
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2649560
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2649560
	void Jump();// 0x1570f70
	bool IsPlayingRootMotion();// 0x3df5bc0
	bool IsPlayingNetworkedRootMotionMontage();// 0x3df5b90
	bool IsJumpProvidingForce();// 0x21de110
	bool HasAnyRootMotion();// 0x3df5b60
	AnimMontage* GetCurrentMontage();// 0x3df54f0
	Vector GetBaseTranslationOffset();// 0x3df54c0
	Rotator GetBaseRotationOffsetRotator();// 0x3df5470
	float GetAnimRootMotionTranslationScale();// 0x3df53a0
	void Crouch(bool bClientSimulation);// 0x3df5310
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3df4f90
	void ClientCheatWalk();// 0x1572730
	void ClientCheatGhost();// 0x1572010
	void ClientCheatFly();// 0x1572030
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3df4ab0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3df4780
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3df44f0
	void ClientAckGoodMove(float Timestamp);// 0x3df4470
	bool CanJumpInternal();// 0x2095ea0
	bool CanJump();// 0x3df4440
	bool CanCrouch();// 0x3df4410
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x3df4320

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x790, Size: 1]
	class AnimInstance* AnimClass;//[Offset: 0x798, Size: 1]
	AnimInstance* AnimScriptInstance;//[Offset: 0x7a0, Size: 1]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x7a8, Size: 1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x7b0, Size: 1]
	Vector RootBoneTranslation;//[Offset: 0x7d8, Size: 1]
	Vector LineCheckBoundsScale;//[Offset: 0x7e4, Size: 1]
	AnimInstance*[] LinkedInstances;//[Offset: 0x810, Size: 1]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x820, Size: 1]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x830, Size: 1]
	float GlobalAnimRateScale;//[Offset: 0x860, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x864, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x865, Size: 1]
	byte AnimationMode;//[Offset: 0x867, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x869, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x869, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x869, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x869, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x869, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86a, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86a, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86a, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86a, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86a, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86b, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86b, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86b, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86b, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86b, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86b, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86b, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x874, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x874, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x874, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x874, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x874, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x874, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x874, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x874, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x875, Size: 1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x875, Size: 1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x875, Size: 1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x875, Size: 1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x875, Size: 1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x875, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x875, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x875, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x876, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x876, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x878, Size: 1]
	enum MassMode;//[Offset: 0x87a, Size: 1]
	float UniformMass;//[Offset: 0x87c, Size: 1]
	float TotalMass;//[Offset: 0x880, Size: 1]
	float Density;//[Offset: 0x884, Size: 1]
	float MinPerParticleMass;//[Offset: 0x888, Size: 1]
	float ClothBlendWeight;//[Offset: 0x88c, Size: 1]
	float EdgeStiffness;//[Offset: 0x890, Size: 1]
	float BendingStiffness;//[Offset: 0x894, Size: 1]
	float AreaStiffness;//[Offset: 0x898, Size: 1]
	float VolumeStiffness;//[Offset: 0x89c, Size: 1]
	float StrainLimitingStiffness;//[Offset: 0x8a0, Size: 1]
	float ShapeTargetStiffness;//[Offset: 0x8a4, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8a8, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x8b8, Size: 1]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 1]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x8d8, Size: 1]
	float TeleportDistanceThreshold;//[Offset: 0x9a8, Size: 1]
	float TeleportRotationThreshold;//[Offset: 0x9ac, Size: 1]
	uint32 LastPoseTickFrame;//[Offset: 0x9b8, Size: 1]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa10, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3f01250
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3f011c0
	void ToggleDisablePostProcessBlueprint();// 0x3f011a0
	void TermBodiesBelow(FName ParentBoneName);// 0x3f01110
	void SuspendClothingSimulation();// 0x3f010f0
	void Stop();// 0x3f010d0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3f01000
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1ff2470
	void SetTeleportRotationThreshold(float Threshold);// 0x3f00f80
	void SetTeleportDistanceThreshold(float Threshold);// 0x3f00f00
	void SetPosition(float InPos, bool bFireNotifies);// 0x3f00e20
	void SetPlayRate(float Rate);// 0x3f00da0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x3f00d20
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x3f00c00
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x3f00ae0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x3f00a50
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x3f00940
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x3f00870
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3f007e0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3f00750
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3f00680
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3f00570
	void SetClothMaxDistanceScale(float Scale);// 0x3f004f0
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3f00420
	void SetAnimClass(class Object NewClass);// 0x3f00280
	void SetAnimationMode(byte InAnimationMode);// 0x3f003a0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3f00310
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3f00120
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3efff50
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3f00020
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x3effec0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3effd90
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3effc60
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3effaf0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3effa60
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3eff980
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3eff850
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3eff6d0
	void ResumeClothingSimulation();// 0x3eff6b0
	void ResetClothTeleportMode();// 0x3eff690
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3eff610
	void ResetAllowedAnimCurveEvaluation();// 0x3eff5f0
	void ResetAllBodiesSimulatePhysics();// 0x3eff5d0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3eff500
	void Play(bool bLooping);// 0x3eff470
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x3eff2b0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3eff1e0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3eff150
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x3efef50
	bool IsPlaying();// 0x3efef20
	bool IsClothingSimulationSuspended();// 0x3efeef0
	bool IsBodyGravityEnabled(FName BoneName);// 0x3efee50
	bool HasValidAnimationInstance();// 0x3efee20
	float GetTeleportRotationThreshold();// 0x3680960
	float GetTeleportDistanceThreshold();// 0x3680960
	Vector GetSkeletalCenterOfMass();// 0x3efede0
	AnimInstance* GetPostProcessInstance();// 0x3efedb0
	float GetPosition();// 0x3efed80
	float GetPlayRate();// 0x3efed50
	float GetMorphTarget(FName MorphTargetName);// 0x3efecb0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3efec10
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3efeb70
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3efea80
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3efe9e0
	bool GetDisablePostProcessBlueprint();// 0x3efe9b0
	bool GetDisableAnimCurves();// 0x3efe980
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3efe800
	float GetClothMaxDistanceScale();// 0x3efe7a0
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3efe7d0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3efe6d0
	AnimInstance* GetAnimInstance();// 0x3efe670
	class Object GetAnimClass();// 0x3efe640
	byte GetAnimationMode();// 0x3efe6a0
	bool GetAllowRigidBodyAnimNode();// 0x3efe5e0
	bool GetAllowedAnimCurveEvaluate();// 0x3efe610
	void ForceClothNextUpdateTeleportAndReset();// 0x3efe5c0
	void ForceClothNextUpdateTeleport();// 0x3efe5a0
	FName FindConstraintBoneName(int ConstraintIndex);// 0x3efe510
	void ClearMorphTargets();// 0x3efe4f0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3efe3c0
	void BindClothToMasterPoseComponent();// 0x3efe3a0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3efe2d0
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3efe150
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3efdfd0
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3efdeb0

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x578, Size: 1]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x580, Size: 1]
	enum[] SkinCacheUsage;//[Offset: 0x588, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x690, Size: 1]
	int ForcedLodModel;//[Offset: 0x698, Size: 1]
	int MinLodModel;//[Offset: 0x69c, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x6ac, Size: 1]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6b8, Size: 1]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6ec, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ee, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ee, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ee, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ee, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ee, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ee, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ef, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ef, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ef, Size: 1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ef, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ef, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ef, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ef, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ef, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f0, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f0, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f0, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f0, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f0, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f1, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f1, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6f4, Size: 1]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x708, Size: 1]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x730, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3f06630
	void UnHideBoneByName(FName BoneName);// 0x3f065a0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3f063d0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3f06200
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x3f060b0
	void ShowAllMaterialSections(int LODIndex);// 0x3f06020
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x3f05f30
	bool SetSkinWeightProfile(FName InProfileName);// 0x3f05e90
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x3f05da0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x3f05c80
	void SetRenderStatic(bool bNewValue);// 0x3f05bf0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x3f05b20
	void SetMinLOD(int InNewMinLOD);// 0x3f05a90
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3f059c0
	void SetForcedLOD(int InNewForcedLOD);// 0x3f05930
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3f058a0
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x3f05810
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x3f05790
	bool IsUsingSkinWeightProfile();// 0x3f05760
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x3f05690
	bool IsBoneHiddenByName(FName BoneName);// 0x3f055f0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x3f053f0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x3f052d0
	FName GetSocketBoneName(FName InSocketName);// 0x3f05190
	Vector GetRefPosePosition(int BoneIndex);// 0x3f050e0
	FName GetParentBone(FName BoneName);// 0x3f05050
	int GetNumLODs();// 0x3f05020
	int GetNumBones();// 0x3f04ff0
	int GetForcedLOD();// 0x3f04fc0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x3f04ec0
	FName GetCurrentSkinWeightProfileName();// 0x3f04ea0
	FName GetBoneName(int BoneIndex);// 0x3f04e10
	int GetBoneIndex(FName BoneName);// 0x3f04d70
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x3f04bd0
	void ClearVertexColorOverride(int LODIndex);// 0x3f04b40
	void ClearSkinWeightProfile();// 0x3f04b20
	void ClearSkinWeightOverride(int LODIndex);// 0x3f04a90
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x3f049c0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x540, Size: 1]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	MaterialInterface* MultiplePassMaterial;//[Offset: 0x558, Size: 1]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x3eb5310
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x3eb5240
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x3eb5040
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x3eb4fa0
	FName[] GetMaterialSlotNames();// 0x3eb4ea0
	MaterialInterface*[] GetMaterials();// 0x3eb4f20
	int GetMaterialIndex(FName MaterialSlotName);// 0x3eb4e00

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 1]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 1]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3dcb710
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3dccdf0
	Pawn* TryGetPawnOwner();// 0x3dccdc0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x3dcccf0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3dccc20
	void SetRootMotionMode(byte Value);// 0x3dc1250
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x3dccb90
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x3dccb00
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3dcca30
	void SavePoseSnapshot(FName SnapshotName);// 0x3dcc9a0
	void ResetDynamics(enum InTeleportType);// 0x3dcc920
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3dcc6c0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3dcc4f0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3dcc420
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3dcc350
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3dcc280
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3dcc1b0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3dcc0a0
	void Montage_Resume(const AnimMontage* Montage);// 0x3dcc010
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x3dcbe60
	void Montage_Pause(const AnimMontage* Montage);// 0x3dcbdd0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x3dcbd00
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x3dcbc30
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x3dcbb90
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3dcbaf0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3dcba50
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3dcb9b0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3dcb910
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3dcb880
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3dcb7e0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3dcb710
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3dcb640
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3dcb5b0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3dcb450
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3dcb380
	bool IsAnyMontagePlaying();// 0x3dcb350
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3dcb280
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3dcb160
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3dcb0b0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3dcafe0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3dcaf10
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3dcae40
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3dcad70
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3dcaca0
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3dcac70
	bool GetPropagateNotifiesToLinkedInstances();// 0x3dcac40
	SkeletalMeshComponent* GetOwningComponent();// 0x3dcac10
	Actor* GetOwningActor();// 0x3dcabe0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3dcab40
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3dcaaa0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3dca9b0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3dca910
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3dca840
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3dca770
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3dca6a0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3dca5d0
	float GetInstanceMachineWeight(int MachineIndex);// 0x3dca530
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3dca490
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3dca3f0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3dca350
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3dca2b0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3dca210
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3dca170
	float GetCurveValue(FName CurveName);// 0x3dca0d0
	FName GetCurrentStateName(int MachineIndex);// 0x3dca040
	AnimMontage* GetCurrentActiveMontage();// 0x3dca010
	void GetAllCurveNames(out FName[] OutNames);// 0x3dc9f60
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3dc9e70
	void ClearMorphTargets();// 0x3dc9e50
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3dc9d50
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2649560
	void BlueprintPostEvaluateAnimation();// 0x2649560
	void BlueprintLinkedAnimationLayersInitialized();// 0x2649560
	void BlueprintInitializeAnimation();// 0x2649560
	void BlueprintBeginPlay();// 0x2649560

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 1]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 1]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 1]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 1]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 1]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 1]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 1]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 1]
	int ParentIndex;//[Offset: 0x8, Size: 1]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 1]
	FName TargetBoneName;//[Offset: 0x8, Size: 1]
	FName VirtualBoneName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x30, Size: 1]
	Vector RelativeLocation;//[Offset: 0x38, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 1]
	Vector RelativeScale;//[Offset: 0x50, Size: 1]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x3f054c0
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x3f05220

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 1]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float BlendScale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	FName[] SlotNames;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 1]
	FName[] BoneNames;//[Offset: 0x10, Size: 1]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 1]
	FName SnapshotName;//[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 1]
	float SequenceLength;//[Offset: 0x90, Size: 1]
	float RateScale;//[Offset: 0x94, Size: 1]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 1]
	float GetPlayLength();// 0x3dd6480

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 1]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 1]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 1]
	FName NotifyName;//[Offset: 0x40, Size: 1]
	AnimNotify* Notify;//[Offset: 0x48, Size: 1]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 1]
	float Duration;//[Offset: 0x58, Size: 1]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 1]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 1]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 1]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 1]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	int TrackIndex;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 1]
	int SlotIndex;//[Offset: 0x10, Size: 1]
	int SegmentIndex;//[Offset: 0x14, Size: 1]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 1]
	float SegmentLength;//[Offset: 0x20, Size: 1]
	float LinkValue;//[Offset: 0x24, Size: 1]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2649560
	FString GetNotifyName();// 0x3681570

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2649560
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2649560
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2649560
	FString GetNotifyName();// 0x3681570

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 1]
	float BlendInTime;//[Offset: 0xd8, Size: 1]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 1]
	float BlendOutTime;//[Offset: 0x110, Size: 1]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 1]
	FName SyncGroup;//[Offset: 0x118, Size: 1]
	int SyncSlotIndex;//[Offset: 0x120, Size: 1]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 1]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 1]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 1]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 1]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 1]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 1]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 1]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 1]
	float GetDefaultBlendOutTime();// 0x3452d40

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 1]
	float BlendTime;//[Offset: 0x8, Size: 1]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 1]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0x3e02b90

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x3e02db0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x3e02cd0

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 1]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	float ArriveTangent;//[Offset: 0xc, Size: 1]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 1]
	float LeaveTangent;//[Offset: 0x14, Size: 1]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 1]
	float StartTime;//[Offset: 0x38, Size: 1]
	FName NextSectionName;//[Offset: 0x3c, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 1]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 1]
	float StartPos;//[Offset: 0x8, Size: 1]
	float AnimStartTime;//[Offset: 0xc, Size: 1]
	float AnimEndTime;//[Offset: 0x10, Size: 1]
	float AnimPlayRate;//[Offset: 0x14, Size: 1]
	int LoopingCount;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 1]
	float DisplayTime;//[Offset: 0x38, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 1]
	float TriggerTime;//[Offset: 0x4, Size: 1]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 1]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 1]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 1]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 3]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 3]
	float Alpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 1]
	SmartName Name;//[Offset: 0x8, Size: 1]
	int CurveTypeFlags;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 1]
	FName NextMarkerName;//[Offset: 0x8, Size: 1]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 1]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 1]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 1]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 1]
	byte LODGroup;//[Offset: 0x13c, Size: 1]
	float MinScreenSize;//[Offset: 0x140, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x144, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x145, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x146, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x147, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x147, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x147, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x147, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x147, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 1]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 1]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 1]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 1]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 1]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 1]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 1]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x91ba60
	int NumSockets();// 0x3efc2c0
	FString[] K2_GetAllMorphTargetNames();// 0x3efc1e0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x3efc110
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x3efc070
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x3efbfd0
	BoxSphereBounds GetImportedBounds();// 0x3efbf80
	BoxSphereBounds GetBounds();// 0x3efbf30
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x3efbd60
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x3efbc80
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x3efbbe0

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 1]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 1]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 1]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 1]
	int RefFrameIndex;//[Offset: 0x160, Size: 1]
	FName RetargetSource;//[Offset: 0x164, Size: 1]
	enum Interpolation;//[Offset: 0x16c, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 1]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 1]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 1]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 1]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 1]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 1]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 1]
	float NormalsThreshold;//[Offset: 0x24, Size: 1]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 1]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 1]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 1]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 1]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 1]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 1]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 1]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 1]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 1]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 1]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 1]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 1]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 1]
	FName AttachToName;//[Offset: 0x80, Size: 1]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 1]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 1]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 1]
	Guid VariableGuid;//[Offset: 0xc0, Size: 1]
	FName InternalVariableName;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 1]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* PropertyScope;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 1]
	FString DataValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 1]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 1]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 1]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 1]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 1]
	Guid TimelineGuid;//[Offset: 0x80, Size: 1]
	FName VariableName;//[Offset: 0x90, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 1]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 1]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 1]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 1]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 3]
	Vector GetVectorValue(float InTime);// 0x3e02e90

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 4]
	float AdjustHue;//[Offset: 0x230, Size: 1]
	float AdjustSaturation;//[Offset: 0x234, Size: 1]
	float AdjustBrightness;//[Offset: 0x238, Size: 1]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 1]
	float AdjustVibrance;//[Offset: 0x240, Size: 1]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 1]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 1]
	LinearColor GetLinearColorValue(float InTime);// 0x3e02c30
	LinearColor GetClampedLinearColorValue(float InTime);// 0x3e02840

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 1]
	class Object* ComponentClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 1]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 1]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 1]
	FName SCSVariableName;//[Offset: 0x8, Size: 1]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 1]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 1]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 1]
	Object* SourceAsset;//[Offset: 0x118, Size: 1]
	Object* TargetAsset;//[Offset: 0x140, Size: 1]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 1]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 1]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 1]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 1]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 1]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 1]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 1]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 1]
	float ThresholdUV;//[Offset: 0xc, Size: 1]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 1]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 1]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 1]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 1]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 1]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 1]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 1]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 1]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 1]
	float PositionStrength;//[Offset: 0x14, Size: 1]
	float VelocityStrength;//[Offset: 0x18, Size: 1]
	float MaxLinearForce;//[Offset: 0x1c, Size: 1]
	float MaxAngularForce;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 1]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 1]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 1]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 1]
	FName ConstraintBone1;//[Offset: 0x20, Size: 1]
	FName ConstraintBone2;//[Offset: 0x28, Size: 1]
	Vector Pos1;//[Offset: 0x30, Size: 1]
	Vector PriAxis1;//[Offset: 0x3c, Size: 1]
	Vector SecAxis1;//[Offset: 0x48, Size: 1]
	Vector Pos2;//[Offset: 0x54, Size: 1]
	Vector PriAxis2;//[Offset: 0x60, Size: 1]
	Vector SecAxis2;//[Offset: 0x6c, Size: 1]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 1]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 1]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 1]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 1]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 1]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 1]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 1]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 1]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 1]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 1]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float Restitution;//[Offset: 0x8, Size: 1]
	float ContactDistance;//[Offset: 0xc, Size: 1]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 1]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 1]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 1]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 1]
	Vector VelocityTarget;//[Offset: 0xc, Size: 1]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 1]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 1]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float MaxForce;//[Offset: 0x8, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 1]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 1]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 1]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 1]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 1]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 1]
	FName ProfileName;//[Offset: 0x104, Size: 1]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 1]
	int JointIterations;//[Offset: 0x4, Size: 1]
	int CollisionIterations;//[Offset: 0x8, Size: 1]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 1]
	int JointPushOutIterations;//[Offset: 0x10, Size: 1]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 1]
	Guid AssetGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 1]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 1]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x36634d0
	void PhysicsAssetUpdated();// 0x1ff1f20
	void EnableGravityOverride(out const Vector InVector);// 0x3663440
	void DisableGravityOverride();// 0x220b940
	void ClothConfigUpdated();// 0x30f3d30

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 1]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 1]
	float SavedPlayRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 1]
	Plane YPlane;//[Offset: 0x10, Size: 1]
	Plane ZPlane;//[Offset: 0x20, Size: 1]
	Plane WPlane;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 12]
	byte Weights;//[Offset: 0x30, Size: 12]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 1]
	float GravityScale;//[Offset: 0x150, Size: 1]
	float MaxStepHeight;//[Offset: 0x154, Size: 1]
	float JumpZVelocity;//[Offset: 0x158, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 1]
	float WalkableFloorZ;//[Offset: 0x164, Size: 1]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 1]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 1]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 1]
	float MaxFlySpeed;//[Offset: 0x198, Size: 1]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 1]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 1]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 1]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 1]
	float BrakingFriction;//[Offset: 0x1ac, Size: 1]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 1]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 1]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 1]
	float AirControl;//[Offset: 0x1c4, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 1]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 1]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 1]
	float Buoyancy;//[Offset: 0x1d8, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 1]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 1]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkEnableProxyPrediction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 1]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 1]
	float OutofWaterZ;//[Offset: 0x204, Size: 1]
	float Mass;//[Offset: 0x208, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 1]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 1]
	float PushForceFactor;//[Offset: 0x214, Size: 1]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 1]
	float TouchForceFactor;//[Offset: 0x21c, Size: 1]
	float MinTouchForce;//[Offset: 0x220, Size: 1]
	float MaxTouchForce;//[Offset: 0x224, Size: 1]
	float RepulsionForce;//[Offset: 0x228, Size: 1]
	Vector Acceleration;//[Offset: 0x22c, Size: 1]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 1]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 1]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 1]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 1]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 1]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 1]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 1]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 1]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 1]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 1]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 1]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 1]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 1]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 1]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 1]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 1]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 1]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 1]
	float NetworkLinearSmoothingLerpLimit;//[Offset: 0x2d8, Size: 1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2dc, Size: 1]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2e0, Size: 1]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e4, Size: 1]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e8, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2ec, Size: 1]
	float JumpOutOfWaterPitch;//[Offset: 0x2f0, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x2f4, Size: 1]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 1]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 1]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 1]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 1]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 1]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 1]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 1]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 1]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 1]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 1]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 1]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 1]
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 1]
	bool bCanAdjustWalkingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	bool bCanAdjustFallingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 1]
	float LimitedNewVelocityZOnTwoWallAdjust;//[Offset: 0x614, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3dfb1e0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3dfb160
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3dfb090
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x3dfb000
	void SetGroupsToIgnore(int GroupFlags);// 0x3dfaf70
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x3dfaee0
	void SetGroupsToAvoid(int GroupFlags);// 0x3dfae50
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x3dfadc0
	void SetAvoidanceGroup(int GroupFlags);// 0x3dfad30
	void SetAvoidanceEnabled(bool bEnable);// 0x3dfaca0
	float K2_GetWalkableFloorZ();// 0x3dfac70
	float K2_GetWalkableFloorAngle();// 0xbc18b0
	float K2_GetModifiedMaxAcceleration();// 0x3dfac30
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3dfaae0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3dfa8c0
	bool IsWalking();// 0x3dfa890
	bool IsWalkable(out const HitResult Hit);// 0x3dfa7a0
	float GetValidPerchRadius();// 0x3dfa770
	float GetPerchRadiusThreshold();// 0x3dfa740
	PrimitiveComponent* GetMovementBase();// 0x3dfa710
	float GetMinAnalogSpeed();// 0x21f9f70
	float GetMaxJumpHeightWithJumpTime();// 0x3dfa6d0
	float GetMaxJumpHeight();// 0x21f9580
	float GetMaxBrakingDeceleration();// 0x3dfa690
	float GetMaxAcceleration();// 0x21f96a0
	Vector GetLastUpdateVelocity();// 0x3dfa660
	Rotator GetLastUpdateRotation();// 0x3dfa610
	Vector GetLastUpdateLocation();// 0x3dfa5e0
	Vector GetImpartedMovementBaseVelocity();// 0x3dfa5a0
	Vector GetCurrentAcceleration();// 0x3dfa560
	Character* GetCharacterOwner();// 0x3dfa540
	float GetAnalogInputModifier();// 0x3dfa510
	void DisableMovement();// 0x1571d50
	void ClearAccumulatedForces();// 0x1571ab0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3dfa2f0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3dfa180
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x3dfa0a0
	void AddForce(Vector Force);// 0x3dfa010

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 1]
	Vector K2_GetInputVector();// 0x3ece4d0
	bool IsMoveInputIgnored();// 0x3ece540
	Vector GetPendingInputVector();// 0x3ece4d0
	Pawn* GetPawnOwner();// 0x3ece4a0
	Vector GetLastInputVector();// 0x3ece460
	Vector ConsumeInputVector();// 0x3ece1f0
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3ecdd60

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 1]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 1]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 1]
	void StopMovementKeepPathing();// 0x3ebc750
	void StopActiveMovement();// 0xbb74a0
	bool IsSwimming();// 0x3ebc560
	bool IsMovingOnGround();// 0x3dfa890
	bool IsFlying();// 0x3ebc530
	bool IsFalling();// 0x3ebc500
	bool IsCrouching();// 0x3ddd000

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 1]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 1]
	Vector Velocity;//[Offset: 0xc4, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 1]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 1]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0x1564ba0
	void SnapUpdatedComponentToPlane();// 0x1571830
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x3eb9000
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x3eb8f70
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x3eb8ee0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x3eb8df0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x3eb8d60
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x3eb8ce0
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x3eb8bd0
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x3eb86e0
	float K2_GetModifiedMaxSpeed();// 0x3eb86a0
	float K2_GetMaxSpeedModifier();// 0x3eb8660
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x3eb85c0
	Vector GetPlaneConstraintOrigin();// 0x3eb8580
	Vector GetPlaneConstraintNormal();// 0x3eb8540
	enum GetPlaneConstraintAxisSetting();// 0x3eb8520
	PhysicsVolume* GetPhysicsVolume();// 0x3eb84f0
	float GetMaxSpeed();// 0x3eb84b0
	float GetGravityZ();// 0x3eb8470
	Vector ConstrainNormalToPlane(Vector Normal);// 0x3eb83c0
	Vector ConstrainLocationToPlane(Vector Location);// 0x3eb8310
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x3eb8260

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 1]
	float AgentHeight;//[Offset: 0x8, Size: 1]
	float AgentStepHeight;//[Offset: 0xc, Size: 1]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 1]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 1]
	FString SubPathString;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 1]
	float LineDist;//[Offset: 0x8, Size: 1]
	HitResult HitResult;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 1]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x558, Size: 1]
	float CapsuleRadius;//[Offset: 0x55c, Size: 1]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x3df8fa0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x3df8ec0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x3df8de0
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3df5a70
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3df5980
	float GetUnscaledCapsuleRadius();// 0x3df5960
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3df5930
	float GetUnscaledCapsuleHalfHeight();// 0x216e960
	float GetShapeScale();// 0x3df5810
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3df56f0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3df55e0
	float GetScaledCapsuleRadius();// 0x3df55a0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3df5550
	float GetScaledCapsuleHalfHeight();// 0x3df5520

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x540, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x548, Size: 1]
	Color ShapeColor;//[Offset: 0x550, Size: 1]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 1]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 1]
	Rotator Rotation;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 1]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 1]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 1]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2b8, Size: 1]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c0, Size: 1]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2c8, Size: 1]
	HUD* MyHUD;//[Offset: 0x2d0, Size: 1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2d8, Size: 1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e0, Size: 1]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2ec, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x304, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x310, Size: 1]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x320, Size: 1]
	float LastSpectatorStateSynchTime;//[Offset: 0x334, Size: 1]
	Vector LastSpectatorSyncLocation;//[Offset: 0x338, Size: 1]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x344, Size: 1]
	int ClientCap;//[Offset: 0x350, Size: 1]
	CheatManager* CheatManager;//[Offset: 0x358, Size: 1]
	class CheatManager* CheatClass;//[Offset: 0x360, Size: 1]
	PlayerInput* PlayerInput;//[Offset: 0x368, Size: 1]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x370, Size: 1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3f4, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430, Size: 1]
	NetConnection* NetConnection;//[Offset: 0x438, Size: 1]
	float InputYawScale;//[Offset: 0x44c, Size: 1]
	float InputPitchScale;//[Offset: 0x450, Size: 1]
	float InputRollScale;//[Offset: 0x454, Size: 1]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 1]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 1]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x478, Size: 1]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x47a, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 1]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x528, Size: 1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x580, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	Vector SpawnLocation;//[Offset: 0x590, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x3edec30
	bool WasInputKeyJustPressed(Key Key);// 0x3edeb40
	void ToggleSpeaking(bool bInSpeaking);// 0x3edeab0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x3ede9e0
	void SwitchLevel(FString URL);// 0x3ede940
	void StopHapticEffect(enum Hand);// 0x3ede8c0
	void StartFire(byte FireModeNum);// 0x3ede310
	void SetVirtualJoystickVisibility(bool bVisible);// 0x3ede090
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x3eddef0
	void SetName(FString S);// 0x3edde50
	void SetMouseLocation(const int X, const int Y);// 0x3eddd80
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x3eddcb0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x3edda70
	void SetDisableHaptics(bool bNewDisabled);// 0x3edd9c0
	void SetControllerLightColor(Color Color);// 0x3edd940
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3edd760
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x3edd630
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x3edd550
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x3edd460
	void ServerViewPrevPlayer();// 0x3edd410
	void ServerViewNextPlayer();// 0x3edd3c0
	void ServerVerifyViewTarget();// 0x3edd370
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x3edd2b0
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x3edd1f0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x3edd0c0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3edcf60
	void ServerToggleAILogging();// 0x3edcf10
	void ServerShortTimeout();// 0x3edcec0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x3edce00
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x3edccc0
	void ServerRestartPlayer();// 0x3edcc70
	void ServerPause();// 0x3edcc20
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x3edcb60
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x3edca00
	void ServerExecRPC(FString Msg);// 0x3edc940
	void ServerExec(FString Msg);// 0x2100560
	void ServerCheckClientPossessionReliable();// 0x3edc8f0
	void ServerCheckClientPossession();// 0x3edc8a0
	void ServerChangeName(FString S);// 0x3edc7e0
	void ServerCamera(FName NewMode);// 0x3edc720
	void ServerAcknowledgePossession(Pawn* P);// 0x3edc660
	void SendToConsole(FString Command);// 0x3edc5c0
	void RestartLevel();// 0x15728f0
	void ResetControllerLightColor();// 0x3edc5a0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x3edc3c0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x3edc260
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x3edbfb0
	void Pause();// 0x1571b70
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x3edb830
	void LocalTravel(FString URL);// 0x3edb790
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x3edb5d0
	bool IsInputKeyDown(Key Key);// 0x3edb4e0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x3edb400
	SpectatorPawn* GetSpectatorPawn();// 0x3edb3e0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x3edb290
	Vector GetInputVectorKeyState(Key Key);// 0x3edb180
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3edaff0
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x3edaf10
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x3edad80
	float GetInputKeyTimeDown(Key Key);// 0x3edac80
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3edab50
	float GetInputAnalogKeyState(Key Key);// 0x3edaa50
	HUD* GetHUD();// 0x3ed9df0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3eda880
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3eda6d0
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3eda520
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x3eda390
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3eda200
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x3eda070
	Vector GetFocalLocation();// 0x3ed9db0
	void FOV(float NewFOV);// 0x3ed9bc0
	void EnableCheats();// 0x15724f0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x3ed9a30
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x3ed9930
	void ConsoleKey(Key Key);// 0x3ed9840
	void ClientWasKicked(const FText KickReason);// 0x3ed9780
	void ClientVoiceHandshakeComplete();// 0x1571f10
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x3ed96e0
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x3ed9520
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3ed9400
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3ed9280
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x3ed9100
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x3ed8f90
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x3ed8ec0
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3ed8df0
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x3ed8d20
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3ed8c90
	void ClientStartOnlineSession();// 0x15722b0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3ed8c00
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x3ed8b00
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x3ed8a70
	void ClientSetHUD(class HUD NewHUDClass);// 0x3ed89e0
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x3ed88d0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x3ed8750
	void ClientSetCameraMode(FName NewCamMode);// 0x3ed86c0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x3ed8510
	void ClientSetBlockOnAsyncLoading();// 0x1572b70
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x3ed8450
	void ClientReturnToMainMenu(FString ReturnReason);// 0x3ed83b0
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x3ed8320
	void ClientRestart(Pawn* NewPawn);// 0x3ed8290
	void ClientReset();// 0x15723b0
	void ClientRepObjRef(Object* Object);// 0x3ed8200
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x3ed8060
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x3ed7f00
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x3ed7de0
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x3ed7c70
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x3ed7b60
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x3ed7a70
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x3ed79a0
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3ed7830
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x3ed7560
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x3ed7440
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x3ed7310
	void ClientIgnoreMoveInput(bool bIgnore);// 0x3ed7280
	void ClientIgnoreLookInput(bool bIgnore);// 0x3ed71f0
	void ClientGotoState(FName NewState);// 0x3ed7160
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x3ed7090
	void ClientForceGarbageCollection();// 0x1572a90
	void ClientFlushLevelStreaming();// 0x3ed7070
	void ClientEndOnlineSession();// 0x15723d0
	void ClientEnableNetworkVoice(bool bEnable);// 0x3ed6fe0
	void ClientCommitMapChange();// 0x1572950
	void ClientClearCameraLensEffects();// 0x1572890
	void ClientCapBandwidth(int Cap);// 0x3ed6f50
	void ClientCancelPendingMapChange();// 0x1572a50
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x3ed6e20
	void ClearAudioListenerOverride();// 0x3ed6e00
	void ClearAudioListenerAttenuationOverride();// 0x3ed6de0
	bool CanRestartPlayer();// 0x3ed6db0
	void Camera(FName NewMode);// 0x3ed6d20
	void AddYawInput(float val);// 0x3ed6c90
	void AddRollInput(float val);// 0x3ed6c00
	void AddPitchInput(float val);// 0x3ed6b70
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x210d010

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 1]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 1]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 1]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x228, Size: 1]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x234, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x240, Size: 1]
	FName[] DebugDisplay;//[Offset: 0x258, Size: 1]
	FName[] ToggledDebugCategories;//[Offset: 0x268, Size: 1]
	Canvas* Canvas;//[Offset: 0x278, Size: 1]
	Canvas* DebugCanvas;//[Offset: 0x280, Size: 1]
	DebugTextInfo[] DebugTextList;//[Offset: 0x288, Size: 1]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x298, Size: 1]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a0, Size: 1]
	void ShowHUD();// 0x1570d30
	void ShowDebugToggleSubCategory(FName Category);// 0x3e30d00
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x3e30c70
	void ShowDebug(FName DebugType);// 0x3e30be0
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x3e30a50
	void RemoveAllDebugStrings();// 0x3e30a30
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2649560
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2649560
	void ReceiveHitBoxClick(const FName BoxName);// 0x2649560
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2649560
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2649560
	Vector Project(Vector Location);// 0x3e30580
	void PreviousDebugTarget();// 0x15710b0
	void NextDebugTarget();// 0xa85650
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x3e2fa60
	PlayerController* GetOwningPlayerController();// 0x17572e0
	Pawn* GetOwningPawn();// 0x3e2fa30
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x3e2f810
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x3e2f660
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3e2f200
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x3e2efc0
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x3e2ee00
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x3e2eb10
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x3e2e8f0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3e2e520
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x3e2e320
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x3e2e1a0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x3e2de80
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x3e2dac0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 1]
	float OrgY;//[Offset: 0x2c, Size: 1]
	float ClipX;//[Offset: 0x30, Size: 1]
	float ClipY;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 1]
	int SizeY;//[Offset: 0x44, Size: 1]
	Plane ColorModulate;//[Offset: 0x50, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 1]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 1]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 1]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x3df72c0
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x3df71d0
	Vector K2_Project(Vector WorldLocation);// 0x3df7120
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x3df6ff0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x3df6d40
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x3df6980
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x3df67d0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x3df66a0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x3df6460
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x3df6300
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x3df61a0
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x3df5d10
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x3df5bf0

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 1]
	Vector2D V0_UV;//[Offset: 0x8, Size: 1]
	LinearColor V0_Color;//[Offset: 0x10, Size: 1]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 1]
	Vector2D V1_UV;//[Offset: 0x28, Size: 1]
	LinearColor V1_Color;//[Offset: 0x30, Size: 1]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 1]
	Vector2D V2_UV;//[Offset: 0x48, Size: 1]
	LinearColor V2_Color;//[Offset: 0x50, Size: 1]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 1]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 1]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 1]
	FString DebugText;//[Offset: 0x20, Size: 1]
	float TimeRemaining;//[Offset: 0x30, Size: 1]
	float Duration;//[Offset: 0x34, Size: 1]
	Color TextColor;//[Offset: 0x38, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 1]
	Font* Font;//[Offset: 0x50, Size: 1]
	float FontScale;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 1]
	float DefaultFOV;//[Offset: 0x240, Size: 1]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 1]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 1]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 1]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 1]
	TViewTarget ViewTarget;//[Offset: 0xf20, Size: 1]
	TViewTarget PendingViewTarget;//[Offset: 0x1570, Size: 1]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1bf0, Size: 1]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2230, Size: 1]
	CameraModifier*[] ModifierList;//[Offset: 0x2870, Size: 1]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2880, Size: 1]
	float FreeCamDistance;//[Offset: 0x2890, Size: 1]
	Vector FreeCamOffset;//[Offset: 0x2894, Size: 1]
	Vector ViewTargetOffset;//[Offset: 0x28a0, Size: 1]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x28c0, Size: 1]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x28d0, Size: 1]
	CameraAnimInst* AnimInstPool;//[Offset: 0x28d8, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2918, Size: 1]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2938, Size: 1]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2948, Size: 1]
	CameraActor* AnimCameraActor;//[Offset: 0x2958, Size: 1]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2960, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2960, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2960, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2960, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2961, Size: 1]
	float ViewPitchMin;//[Offset: 0x2964, Size: 1]
	float ViewPitchMax;//[Offset: 0x2968, Size: 1]
	float ViewYawMin;//[Offset: 0x296c, Size: 1]
	float ViewYawMax;//[Offset: 0x2970, Size: 1]
	float ViewRollMin;//[Offset: 0x2974, Size: 1]
	float ViewRollMax;//[Offset: 0x2978, Size: 1]
	float ServerUpdateCameraTimeout;//[Offset: 0x2980, Size: 1]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x3ede7f0
	void StopCameraFade();// 0x1572750
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3ede720
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3ede650
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x3ede580
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3ede4b0
	void StopAllCameraShakes(bool bImmediately);// 0x3ede420
	void StopAllCameraAnims(bool bImmediate);// 0x3ede390
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x3ede120
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3eddb80
	void SetGameCameraCutThisFrame();// 0x3edda50
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3edc500
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3e1b180
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x3edbee0
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3edbd60
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x3edba50
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3edb8c0
	void OnPhotographySessionStart();// 0x7debe0
	void OnPhotographySessionEnd();// 0x1571170
	void OnPhotographyMultiPartCaptureStart();// 0x816980
	void OnPhotographyMultiPartCaptureEnd();// 0x1570d30
	PlayerController* GetOwningPlayerController();// 0x3edb3b0
	float GetFOVAngle();// 0x3ed9d70
	Rotator GetCameraRotation();// 0x3ed9d30
	Vector GetCameraLocation();// 0x3ed9cf0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x3ed9c50
	void ClearCameraLensEffects();// 0x1572930
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2649560
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x3ed6ad0
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x3ed6a30

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float OscillationDuration;//[Offset: 0x2c, Size: 1]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 1]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 1]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 1]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 1]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 1]
	float AnimPlayRate;//[Offset: 0x8c, Size: 1]
	float AnimScale;//[Offset: 0x90, Size: 1]
	float AnimBlendInTime;//[Offset: 0x94, Size: 1]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 1]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 1]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 1]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xc0, Size: 1]
	float ShakeScale;//[Offset: 0x148, Size: 1]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 1]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 1]
	void ReceiveStopShake(bool bImmediately);// 0x2649560
	void ReceivePlayShake(float Scale);// 0x2649560
	bool ReceiveIsFinished();// 0x8f2200
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x2649560

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 1]
	FOscillator Yaw;//[Offset: 0xc, Size: 1]
	FOscillator Roll;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 1]
	float Frequency;//[Offset: 0x4, Size: 1]
	byte InitialOffset;//[Offset: 0x8, Size: 1]
	enum Waveform;//[Offset: 0x9, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 1]
	FOscillator Y;//[Offset: 0xc, Size: 1]
	FOscillator Z;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 1]
	float AnimLength;//[Offset: 0x30, Size: 1]
	Box BoundingBox;//[Offset: 0x34, Size: 1]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 1]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1]
	float BasePostProcessBlendWeight;//[Offset: 0x600, Size: 1]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 1]
	FName GroupName;//[Offset: 0x40, Size: 1]
	Color GroupColor;//[Offset: 0x48, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 1]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 1]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 1]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_NightfellOpacity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_NightfellFadeness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_NightfellRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_NightfellSecondRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_NightfellLocation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_NightfellSecondLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	byte BloomMethod;//[Offset: 0x21, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 1]
	float WhiteTemp;//[Offset: 0x24, Size: 1]
	float WhiteTint;//[Offset: 0x28, Size: 1]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 1]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 1]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 1]
	float NightfellRadius;//[Offset: 0x60, Size: 1]
	float NightfellSecondRadius;//[Offset: 0x64, Size: 1]
	float NightfellOpacity;//[Offset: 0x68, Size: 1]
	float NightfellFadeness;//[Offset: 0x6c, Size: 1]
	Vector4 NightfellLocation;//[Offset: 0x70, Size: 1]
	Vector4 NightfellSecondLocation;//[Offset: 0x80, Size: 1]
	Vector4 ColorSaturation;//[Offset: 0x90, Size: 1]
	Vector4 ColorContrast;//[Offset: 0xa0, Size: 1]
	Vector4 ColorGamma;//[Offset: 0xb0, Size: 1]
	Vector4 ColorGain;//[Offset: 0xc0, Size: 1]
	Vector4 ColorOffset;//[Offset: 0xd0, Size: 1]
	Vector4 ColorSaturationShadows;//[Offset: 0xe0, Size: 1]
	Vector4 ColorContrastShadows;//[Offset: 0xf0, Size: 1]
	Vector4 ColorGammaShadows;//[Offset: 0x100, Size: 1]
	Vector4 ColorGainShadows;//[Offset: 0x110, Size: 1]
	Vector4 ColorOffsetShadows;//[Offset: 0x120, Size: 1]
	Vector4 ColorSaturationMidtones;//[Offset: 0x130, Size: 1]
	Vector4 ColorContrastMidtones;//[Offset: 0x140, Size: 1]
	Vector4 ColorGammaMidtones;//[Offset: 0x150, Size: 1]
	Vector4 ColorGainMidtones;//[Offset: 0x160, Size: 1]
	Vector4 ColorOffsetMidtones;//[Offset: 0x170, Size: 1]
	Vector4 ColorSaturationHighlights;//[Offset: 0x180, Size: 1]
	Vector4 ColorContrastHighlights;//[Offset: 0x190, Size: 1]
	Vector4 ColorGammaHighlights;//[Offset: 0x1a0, Size: 1]
	Vector4 ColorGainHighlights;//[Offset: 0x1b0, Size: 1]
	Vector4 ColorOffsetHighlights;//[Offset: 0x1c0, Size: 1]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1d0, Size: 1]
	float ColorCorrectionShadowsMax;//[Offset: 0x1d4, Size: 1]
	float BlueCorrection;//[Offset: 0x1d8, Size: 1]
	float ExpandGamut;//[Offset: 0x1dc, Size: 1]
	float FilmSlope;//[Offset: 0x1e0, Size: 1]
	float FilmToe;//[Offset: 0x1e4, Size: 1]
	float FilmShoulder;//[Offset: 0x1e8, Size: 1]
	float FilmBlackClip;//[Offset: 0x1ec, Size: 1]
	float FilmWhiteClip;//[Offset: 0x1f0, Size: 1]
	LinearColor FilmWhitePoint;//[Offset: 0x1f4, Size: 1]
	LinearColor FilmShadowTint;//[Offset: 0x204, Size: 1]
	float FilmShadowTintBlend;//[Offset: 0x214, Size: 1]
	float FilmShadowTintAmount;//[Offset: 0x218, Size: 1]
	float FilmSaturation;//[Offset: 0x21c, Size: 1]
	LinearColor FilmChannelMixerRed;//[Offset: 0x220, Size: 1]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x230, Size: 1]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x240, Size: 1]
	float FilmContrast;//[Offset: 0x250, Size: 1]
	float FilmToeAmount;//[Offset: 0x254, Size: 1]
	float FilmHealAmount;//[Offset: 0x258, Size: 1]
	float FilmDynamicRange;//[Offset: 0x25c, Size: 1]
	LinearColor SceneColorTint;//[Offset: 0x260, Size: 1]
	float SceneFringeIntensity;//[Offset: 0x270, Size: 1]
	float ChromaticAberrationStartOffset;//[Offset: 0x274, Size: 1]
	float BloomIntensity;//[Offset: 0x278, Size: 1]
	float BloomThreshold;//[Offset: 0x27c, Size: 1]
	float BloomSizeScale;//[Offset: 0x280, Size: 1]
	float Bloom1Size;//[Offset: 0x284, Size: 1]
	float Bloom2Size;//[Offset: 0x288, Size: 1]
	float Bloom3Size;//[Offset: 0x28c, Size: 1]
	float Bloom4Size;//[Offset: 0x290, Size: 1]
	float Bloom5Size;//[Offset: 0x294, Size: 1]
	float Bloom6Size;//[Offset: 0x298, Size: 1]
	LinearColor Bloom1Tint;//[Offset: 0x29c, Size: 1]
	LinearColor Bloom2Tint;//[Offset: 0x2ac, Size: 1]
	LinearColor Bloom3Tint;//[Offset: 0x2bc, Size: 1]
	LinearColor Bloom4Tint;//[Offset: 0x2cc, Size: 1]
	LinearColor Bloom5Tint;//[Offset: 0x2dc, Size: 1]
	LinearColor Bloom6Tint;//[Offset: 0x2ec, Size: 1]
	float BloomConvolutionSize;//[Offset: 0x2fc, Size: 1]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x300, Size: 1]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x308, Size: 1]
	float BloomConvolutionPreFilterMin;//[Offset: 0x310, Size: 1]
	float BloomConvolutionPreFilterMax;//[Offset: 0x314, Size: 1]
	float BloomConvolutionPreFilterMult;//[Offset: 0x318, Size: 1]
	float BloomConvolutionBufferScale;//[Offset: 0x31c, Size: 1]
	Texture* BloomDirtMask;//[Offset: 0x320, Size: 1]
	float BloomDirtMaskIntensity;//[Offset: 0x328, Size: 1]
	LinearColor BloomDirtMaskTint;//[Offset: 0x32c, Size: 1]
	LinearColor AmbientCubemapTint;//[Offset: 0x33c, Size: 1]
	float AmbientCubemapIntensity;//[Offset: 0x34c, Size: 1]
	TextureCube* AmbientCubemap;//[Offset: 0x350, Size: 1]
	float CameraShutterSpeed;//[Offset: 0x358, Size: 1]
	float CameraISO;//[Offset: 0x35c, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x360, Size: 1]
	float DepthOfFieldMinFstop;//[Offset: 0x364, Size: 1]
	int DepthOfFieldBladeCount;//[Offset: 0x368, Size: 1]
	float AutoExposureBias;//[Offset: 0x36c, Size: 1]
	float AutoExposureBiasBackup;//[Offset: 0x370, Size: 1]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x380, Size: 1]
	Texture* AutoExposureMeterMask;//[Offset: 0x388, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x390, Size: 1]
	float AutoExposureHighPercent;//[Offset: 0x394, Size: 1]
	float AutoExposureMinBrightness;//[Offset: 0x398, Size: 1]
	float AutoExposureMaxBrightness;//[Offset: 0x39c, Size: 1]
	float AutoExposureSpeedUp;//[Offset: 0x3a0, Size: 1]
	float AutoExposureSpeedDown;//[Offset: 0x3a4, Size: 1]
	float HistogramLogMin;//[Offset: 0x3a8, Size: 1]
	float HistogramLogMax;//[Offset: 0x3ac, Size: 1]
	float AutoExposureCalibrationConstant;//[Offset: 0x3b0, Size: 1]
	float LensFlareIntensity;//[Offset: 0x3b4, Size: 1]
	LinearColor LensFlareTint;//[Offset: 0x3b8, Size: 1]
	float LensFlareBokehSize;//[Offset: 0x3c8, Size: 1]
	float LensFlareThreshold;//[Offset: 0x3cc, Size: 1]
	Texture* LensFlareBokehShape;//[Offset: 0x3d0, Size: 1]
	LinearColor LensFlareTints;//[Offset: 0x3d8, Size: 8]
	float VignetteIntensity;//[Offset: 0x458, Size: 1]
	float GrainJitter;//[Offset: 0x45c, Size: 1]
	float GrainIntensity;//[Offset: 0x460, Size: 1]
	float AmbientOcclusionIntensity;//[Offset: 0x464, Size: 1]
	float AmbientOcclusionStaticFraction;//[Offset: 0x468, Size: 1]
	float AmbientOcclusionRadius;//[Offset: 0x46c, Size: 1]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x474, Size: 1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x478, Size: 1]
	float AmbientOcclusionDistance;//[Offset: 0x47c, Size: 1]
	float AmbientOcclusionPower;//[Offset: 0x480, Size: 1]
	float AmbientOcclusionBias;//[Offset: 0x484, Size: 1]
	float AmbientOcclusionQuality;//[Offset: 0x488, Size: 1]
	float AmbientOcclusionMipBlend;//[Offset: 0x48c, Size: 1]
	float AmbientOcclusionMipScale;//[Offset: 0x490, Size: 1]
	float AmbientOcclusionMipThreshold;//[Offset: 0x494, Size: 1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x49c, Size: 1]
	LinearColor IndirectLightingColor;//[Offset: 0x4a0, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x4b0, Size: 1]
	enum RayTracingGIType;//[Offset: 0x4b4, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x4b8, Size: 1]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4bc, Size: 1]
	float ColorGradingIntensity;//[Offset: 0x4c0, Size: 1]
	Texture* ColorGradingLUT;//[Offset: 0x4c8, Size: 1]
	float DepthOfFieldSensorWidth;//[Offset: 0x4d0, Size: 1]
	float DepthOfFieldFocalDistance;//[Offset: 0x4d4, Size: 1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4d8, Size: 1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4dc, Size: 1]
	float DepthOfFieldFocalRegion;//[Offset: 0x4e0, Size: 1]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4e4, Size: 1]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4e8, Size: 1]
	float DepthOfFieldScale;//[Offset: 0x4ec, Size: 1]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4f0, Size: 1]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4f4, Size: 1]
	float DepthOfFieldOcclusion;//[Offset: 0x4f8, Size: 1]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4fc, Size: 1]
	float DepthOfFieldVignetteSize;//[Offset: 0x500, Size: 1]
	float MotionBlurAmount;//[Offset: 0x504, Size: 1]
	float MotionBlurMax;//[Offset: 0x508, Size: 1]
	int MotionBlurTargetFPS;//[Offset: 0x50c, Size: 1]
	float MotionBlurPerObjectSize;//[Offset: 0x510, Size: 1]
	float LPVIntensity;//[Offset: 0x514, Size: 1]
	float LPVVplInjectionBias;//[Offset: 0x518, Size: 1]
	float LPVSize;//[Offset: 0x51c, Size: 1]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x520, Size: 1]
	float LPVSecondaryBounceIntensity;//[Offset: 0x524, Size: 1]
	float LPVGeometryVolumeBias;//[Offset: 0x528, Size: 1]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x52c, Size: 1]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x530, Size: 1]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x534, Size: 1]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x538, Size: 1]
	float LPVSpecularOcclusionExponent;//[Offset: 0x53c, Size: 1]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x540, Size: 1]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x544, Size: 1]
	enum ReflectionsType;//[Offset: 0x548, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x54c, Size: 1]
	float ScreenSpaceReflectionQuality;//[Offset: 0x550, Size: 1]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x554, Size: 1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x558, Size: 1]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x55c, Size: 1]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x560, Size: 1]
	enum RayTracingReflectionsShadows;//[Offset: 0x564, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x565, Size: 1]
	enum TranslucencyType;//[Offset: 0x566, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x568, Size: 1]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x56c, Size: 1]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x570, Size: 1]
	enum RayTracingTranslucencyShadows;//[Offset: 0x574, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x575, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x578, Size: 1]
	int PathTracingSamplesPerPixel;//[Offset: 0x57c, Size: 1]
	float LPVFadeRange;//[Offset: 0x580, Size: 1]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x584, Size: 1]
	float ScreenPercentage;//[Offset: 0x588, Size: 1]
	WeightedBlendables WeightedBlendables;//[Offset: 0x590, Size: 1]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 1]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 1]
	float PlayRate;//[Offset: 0x50, Size: 1]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 1]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 1]
	byte PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x3df0a30
	void SetScale(float NewDuration);// 0x3df0910
	void SetDuration(float NewDuration);// 0x3df0580

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 1]
	Actor* GroupActor;//[Offset: 0x30, Size: 1]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 1]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 1]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 1]
	float LinCurveTension;//[Offset: 0xb8, Size: 1]
	float AngCurveTension;//[Offset: 0xbc, Size: 1]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 1]
	Vector OutVal;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 1]
	Rotator ResetRotation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	float FOV;//[Offset: 0x18, Size: 1]
	float DesiredFOV;//[Offset: 0x1c, Size: 1]
	float OrthoWidth;//[Offset: 0x20, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 1]
	float AspectRatio;//[Offset: 0x2c, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	byte ProjectionMode;//[Offset: 0x34, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5e0, Size: 1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x318, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x31c, Size: 1]
	float OuterAttenuationRadius;//[Offset: 0x320, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x328, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	void StopAllCameraShakes(bool bImmediately);// 0x3df90c0
	void PlayCameraShake(class CameraShake InCameraShake);// 0x3df7840
	void Play();// 0x3df7700
	float GetAttenuationFactor(out const Vector Location);// 0x3df53d0

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x2c, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 1]
	float AlphaInTime;//[Offset: 0x38, Size: 1]
	float AlphaOutTime;//[Offset: 0x3c, Size: 1]
	float Alpha;//[Offset: 0x40, Size: 1]
	bool IsDisabled();// 0x30f3cb0
	Actor* GetViewTarget();// 0x3527430
	void EnableModifier();// 0x3dc0930
	void DisableModifier(bool bImmediate);// 0x3df0110
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2649560
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2649560

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 1]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 1]
	Transform RelativeTransform;//[Offset: 0x290, Size: 1]
	float BaseFOV;//[Offset: 0x2c0, Size: 1]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 1]
	float DistFromCamera;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 1]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	void ToggleActive();// 0x3e0d920
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3e0d840
	void SetTemplate(ParticleSystem* NewTemplate);// 0x8169a0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3e0d770
	void SetFloatParameter(FName ParameterName, float Param);// 0x3e0d6a0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3e0d5d0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3e0d500
	void OnRep_bCurrentlyActive();// 0x816980
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x22b4590
	bool IsActive();// 0x3e0d4d0
	void Deactivate();// 0x3e0d4b0
	void Activate();// 0x3e0d490

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x540, Size: 1]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x548, Size: 1]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x558, Size: 1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x569, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x569, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x569, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x569, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x569, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56a, Size: 1]
	byte LODMethod;//[Offset: 0x575, Size: 1]
	enum RequiredSignificance;//[Offset: 0x576, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x578, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	Vector OldPosition;//[Offset: 0x5cc, Size: 1]
	Vector PartSysVelocity;//[Offset: 0x5d8, Size: 1]
	float WarmupTime;//[Offset: 0x5e4, Size: 1]
	float WarmupTickRate;//[Offset: 0x5e8, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x5f0, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5f8, Size: 1]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x618, Size: 1]
	float CustomTimeDilation;//[Offset: 0x630, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnPreSystemActivated;//[Size: 1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3ecb8f0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3ecb860
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3ecb790
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3ecb240
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3ecb130
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3ecb010
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3ecaef0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3ecade0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3ecacc0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x3ecabe0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x3eca910
	int GetNumActiveParticles();// 0x3eca490
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3eca3a0
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x3eca160
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x3eca040
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x3ec9f20
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x3ec9e00
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x3ec9ce0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x3ec9bc0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x3ec9ad0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x3ec98d0
	void EndTrails();// 0x3ec98b0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3ec97e0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3ec9640

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3ecbae0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3ecba50
	void SetFloatParameter(FName ParameterName, float Param);// 0x3ecb6b0
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x3ecb5e0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3ecb500
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3ecb360
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3ecaa40
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3eca840
	void ReleaseToPool();// 0x1571fb0
	FXSystemAsset* GetFXSystemAsset();// 0x3eca2e0

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 1]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 1]
	float WarmupTime;//[Offset: 0x38, Size: 1]
	float WarmupTickRate;//[Offset: 0x3c, Size: 1]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 1]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 1]
	float MacroUVRadius;//[Offset: 0x64, Size: 1]
	float[] LODDistances;//[Offset: 0x68, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 1]
	float Delay;//[Offset: 0xa8, Size: 1]
	float DelayLow;//[Offset: 0xac, Size: 1]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 1]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 1]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 1]
	bool ContainsEmitterType(class Object TypeData);// 0x3ec77f0

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 1]
	int SubUVDataOffset;//[Offset: 0x30, Size: 1]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 1]
	int PeakActiveParticles;//[Offset: 0x50, Size: 1]
	int InitialAllocationCount;//[Offset: 0x54, Size: 1]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 1]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 1]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 1]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 1]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 1]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 1]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 1]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 1]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 1]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 1]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 1]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 1]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 1]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 1]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 1]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 1]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 1]
	float EmitterDelay;//[Offset: 0xa0, Size: 1]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 1]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 1]
	float RandomImageTime;//[Offset: 0xb8, Size: 1]
	int RandomImageChanges;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	float MacroUVRadius;//[Offset: 0xcc, Size: 1]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 1]
	int EmitterLoops;//[Offset: 0xe4, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 1]
	int MaxDrawCount;//[Offset: 0xf0, Size: 1]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 1]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 1]
	float TimeBias;//[Offset: 0x4, Size: 1]
	float[] Values;//[Offset: 0x8, Size: 1]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 1]
	int CountLow;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 1]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 1]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 1]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 1]
	int ParticleFrequency;//[Offset: 0x8, Size: 1]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 1]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 1]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 1]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 1]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 1]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 1]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	Vector MinValueVec;//[Offset: 0x28, Size: 1]
	Vector MaxValueVec;//[Offset: 0x34, Size: 1]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 1]
	FName EventName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 1]
	int ActiveTab;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 1]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 1]
	float ViewStartInput;//[Offset: 0x20, Size: 1]
	float ViewEndInput;//[Offset: 0x24, Size: 1]
	float ViewStartOutput;//[Offset: 0x28, Size: 1]
	float ViewEndOutput;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 1]
	Color CurveColor;//[Offset: 0x8, Size: 1]
	FString CurveName;//[Offset: 0x10, Size: 1]
	int bHideCurve;//[Offset: 0x20, Size: 1]
	int bColorCurve;//[Offset: 0x24, Size: 1]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 1]
	int bClamp;//[Offset: 0x2c, Size: 1]
	float ClampLow;//[Offset: 0x30, Size: 1]
	float ClampHigh;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 1]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 1]
	float Scalar_Low;//[Offset: 0x10, Size: 1]
	Vector Vector;//[Offset: 0x14, Size: 1]
	Vector Vector_Low;//[Offset: 0x20, Size: 1]
	Color Color;//[Offset: 0x2c, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	MaterialInterface* Material;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x640, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 1]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 1]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 1]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 1]
	float AspectRatio;//[Offset: 0x24c, Size: 1]
	float FOVAngle;//[Offset: 0x250, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 1]
	int GetAutoActivatePlayerIndex();// 0x3df01a0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x318, Size: 1]
	float OrthoWidth;//[Offset: 0x31c, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x320, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x324, Size: 1]
	float AspectRatio;//[Offset: 0x328, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c, Size: 1]
	byte ProjectionMode;//[Offset: 0x32d, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x360, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x3df0990
	void SetProjectionMode(byte InProjectionMode);// 0x3df0890
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3df0810
	void SetOrthoWidth(float InOrthoWidth);// 0x3df0790
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3df0710
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x3df0690
	void SetFieldOfView(float InFieldOfView);// 0x3df0600
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x3df04f0
	void SetAspectRatio(float InAspectRatio);// 0x3df0470
	void RemoveBlendable(interface classNone InBlendableObject);// 0x3df0350
	void OnCameraMeshHiddenChanged();// 0x8f2720
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x3df01d0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3deffb0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 1]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 1]
	void Walk();// 0x30f3ba0
	void ViewSelf();// 0x3dff420
	void ViewPlayer(FString S);// 0x3dff380
	void ViewClass(class Actor DesiredClass);// 0x3dff2f0
	void ViewActor(FName ActorName);// 0x3dff260
	void UpdateSafeArea();// 0x3dff240
	void ToggleServerStatReplicatorUpdateStatNet();// 0x3dff220
	void ToggleServerStatReplicatorClientOverwrite();// 0x3dff200
	void ToggleDebugCamera();// 0x1564800
	void ToggleAILogging();// 0x1570c70
	void TestCollisionDistance();// 0x1564840
	void Teleport();// 0x3dff1e0
	void Summon(FString ClassName);// 0x3dff140
	void StreamLevelOut(FName PackageName);// 0x3dff0b0
	void StreamLevelIn(FName PackageName);// 0x3dff020
	void SpawnServerStatReplicator();// 0x3dff000
	void Slomo(float NewTimeDilation);// 0x3dfef70
	void SetWorldOrigin();// 0x3dfef50
	void SetMouseSensitivityToDefault();// 0x1564c80
	void ServerToggleAILogging();// 0x3dfee70
	void ReceiveInitCheatManager();// 0x2649560
	void ReceiveEndPlay();// 0x2649560
	void PlayersOnly();// 0x3dc0950
	void OnlyLoadLevel(FName PackageName);// 0x3dfede0
	void LogLoc();// 0x1564c60
	void InvertMouse();// 0x1564960
	void God();// 0x7c99c0
	void Ghost();// 0x3dc0930
	void FreezeFrame(float Delay);// 0x3dfed50
	void Fly();// 0x220b940
	void FlushLog();// 0x1564920
	void EnableDebugCamera();// 0x7d41a0
	void DumpVoiceMutingState();// 0x1564b40
	void DumpPartyState();// 0x1564620
	void DumpOnlineSessionState();// 0x1564820
	void DumpChatState();// 0x1570a10
	void DisableDebugCamera();// 0x15648a0
	void DestroyTarget();// 0x3dfed30
	void DestroyServerStatReplicator();// 0x3dfed10
	void DestroyPawns(class Pawn aClass);// 0x217c1c0
	void DestroyAllPawnsExceptTarget();// 0x219b4f0
	void DestroyAll(class Actor aClass);// 0x3dfec80
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x3dfebb0
	void DebugCapsuleSweepPawn();// 0x15646a0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x3dfeb20
	void DebugCapsuleSweepClear();// 0x1564680
	void DebugCapsuleSweepChannel(byte Channel);// 0x3dfeaa0
	void DebugCapsuleSweepCapture();// 0x1564600
	void DebugCapsuleSweep();// 0x15645c0
	void DamageTarget(float DamageAmount);// 0x3dfea10
	void CheatScript(FString ScriptName);// 0x3dfe920
	void ChangeSize(float F);// 0x3dfe890
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x3dfe6d0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x3dfe4e0
	void BugIt(FString ScreenShotDescription);// 0x3dfe440

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a8, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a8, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a8, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a8, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a8, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a8, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a8, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5b0, Size: 1]
	Actor* SelectedActor;//[Offset: 0x5b8, Size: 1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5c0, Size: 1]
	HitResult SelectedHitPoint;//[Offset: 0x5c8, Size: 1]
	PlayerController* OriginalControllerRef;//[Offset: 0x650, Size: 1]
	Player* OriginalPlayer;//[Offset: 0x658, Size: 1]
	float SpeedScale;//[Offset: 0x660, Size: 1]
	float InitialMaxSpeed;//[Offset: 0x664, Size: 1]
	float InitialAccel;//[Offset: 0x668, Size: 1]
	float InitialDecel;//[Offset: 0x66c, Size: 1]
	void ToggleDisplay();// 0x3e074e0
	void ShowDebugSelectedInfo();// 0x3e074c0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x3e073b0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2649560
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2649560
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2649560
	Actor* GetSelectedActor();// 0x3e06db0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x540, Size: 1]
	float FrustumAngle;//[Offset: 0x544, Size: 1]
	float FrustumAspectRatio;//[Offset: 0x548, Size: 1]
	float FrustumStartDist;//[Offset: 0x54c, Size: 1]
	float FrustumEndDist;//[Offset: 0x550, Size: 1]
	Texture* Texture;//[Offset: 0x558, Size: 1]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 1]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 1]
	void SetMouseSensitivity(const float Sensitivity);// 0x3eea480
	void SetBind(FName BindName, FString Command);// 0x3ee8b40
	void InvertAxisKey(const Key AxisKey);// 0x3ee7420
	void InvertAxis(const FName AxisName);// 0x3ee7390
	void ClearSmoothing();// 0x3ee5d90

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 1]
	FString Command;//[Offset: 0x18, Size: 1]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x140, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x160, Size: 1]
	delegate ForegroundColorDelegate;//[Offset: 0x188, Size: 1]
	Margin Padding;//[Offset: 0x198, Size: 1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a8, Size: 1]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 1]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 1]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 1]
	int Priority;//[Offset: 0x1e0, Size: 1]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 1]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 1]
	void UnregisterInputComponent();// 0x3525290
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x35251b0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x35250d0
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3525040
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x3524fb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3524ee0
	void StopListeningForAllInputActions();// 0x3524ec0
	void StopAnimationsAndLatentActions();// 0x3524ea0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3524e10
	void StopAllAnimations();// 0x3524df0
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x3524af0
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3524a20
	void SetPadding(Margin InPadding);// 0x3524990
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3524900
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3524830
	void SetInputActionPriority(int NewPriority);// 0x35245d0
	void SetInputActionBlocking(bool bShouldBlock);// 0x3524540
	void SetForegroundColor(SlateColor InForegroundColor);// 0x35243d0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3524250
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3524130
	void SetAnchorsInViewport(Anchors Anchors);// 0x35240a0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3524020
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3523f90
	void RemoveFromViewport();// 0x3523f70
	void RegisterInputComponent();// 0x3523f50
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void PlaySound(SoundBase* SoundToPlay);// 0x3523ec0
	void PlayEnterAnim();// 0x2649560
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x3523ca0
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3523b80
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3523a60
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x3523890
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x35237f0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2649560
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2649560
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x2649560
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2649560
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2649560
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x2649560
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2649560
	void OnPaint(out PaintContext Context);// 0x2649560
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x2649560
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	void OnMouseCaptureLost();// 0x2649560
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x2649560
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x2649560
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2649560
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2649560
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2649560
	void OnInitialized();// 0x2649560
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2649560
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2649560
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2649560
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2649560
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2649560
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2649560
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2649560
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2649560
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x217c1c0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x3523760
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x2649560
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x2649560
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x35235d0
	bool IsPlayingAnimation();// 0x35235a0
	bool IsListeningForInputAction(FName ActionName);// 0x3523500
	bool IsInViewport();// 0x35232e0
	bool IsInteractable();// 0x2649560
	bool IsAnyAnimationPlaying();// 0x35234d0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3523430
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3523390
	Pawn* GetOwningPlayerPawn();// 0x3523340
	HUD* GetOwningHUD();// 0x3523310
	bool GetIsVisible();// 0x35232e0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x3523240
	Anchors GetAnchorsInViewport();// 0x3523200
	Vector2D GetAlignmentInViewport();// 0x35231c0
	void DoPlayEnterAnim(bool InPlayFlag);// 0x3523110
	void Destruct();// 0x2649560
	void Construct();// 0x2649560
	void CancelLatentActions();// 0x35230d0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3522ff0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3522f10
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3522d90
	void AddToViewport(int ZOrder);// 0x3522d00
	bool AddToPlayerScreen(int ZOrder);// 0x3522c60

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 1]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 1]
	FText ToolTipText;//[Offset: 0x40, Size: 1]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 1]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 1]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 1]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 1]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte Cursor;//[Offset: 0xc1, Size: 1]
	enum Clipping;//[Offset: 0xc2, Size: 1]
	enum Visibility;//[Offset: 0xc3, Size: 1]
	float RenderOpacity;//[Offset: 0xc4, Size: 1]
	byte DetailMode;//[Offset: 0xc8, Size: 1]
	bool bSelectedDetailModeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	int WidthDivisor;//[Offset: 0xcc, Size: 1]
	int HeightDivisor;//[Offset: 0xd0, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xd8, Size: 1]
	enum FlowDirectionPreference;//[Offset: 0xe0, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x128, Size: 1]
	void SetWidthHeightDivisors(int InWidthDivisor, int InHeightDivisor);// 0x3528c50
	void SetVisibility(enum InVisibility);// 0x3528bd0
	void SetUserFocus(PlayerController* PlayerController);// 0x35289a0
	void SetToolTipText(out const FText InToolTipText);// 0x35288d0
	void SetToolTip(Widget* Widget);// 0x3528840
	void SetSelectedDetailModeOnly(bool InSelectedDetailModeOnly);// 0x3528720
	void SetRenderTranslation(Vector2D Translation);// 0x35286a0
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3528620
	void SetRenderTransformAngle(float Angle);// 0x35285a0
	void SetRenderTransform(WidgetTransform InTransform);// 0x35284c0
	void SetRenderShear(Vector2D Shear);// 0x3528440
	void SetRenderScale(Vector2D Scale);// 0x35283c0
	void SetRenderOpacity(float InOpacity);// 0x3528340
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x35281e0
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x35280f0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x3528000
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x3527f30
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3527e20
	void SetKeyboardFocus();// 0x3527e00
	void SetIsEnabled(bool bInIsEnabled);// 0x3527d70
	void SetFocus();// 0x3527cd0
	void SetDetailMode(byte InDetailMode);// 0x3527bc0
	void SetCursor(byte InCursor);// 0x3527b40
	void SetClipping(enum InClipping);// 0x3527ac0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x35279f0
	void ResetCursor();// 0x35279d0
	void RemoveFromParent();// 0x7d44c0
	EventReply OnReply__DelegateSignature();// 0x2649560
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2649560
	bool IsVisible();// 0x35279a0
	bool IsHovered();// 0x30f3ce0
	void InvalidateLayoutAndVolatility();// 0x3527980
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x35278e0
	bool HasUserFocus(PlayerController* PlayerController);// 0x3527840
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x3527770
	bool HasMouseCapture();// 0x3527740
	bool HasKeyboardFocus();// 0x3527710
	bool HasFocusedDescendants();// 0x35276e0
	bool HasAnyUserFocus();// 0x35276b0
	Widget* GetWidget__DelegateSignature();// 0x2649560
	enum GetVisibility();// 0x3527680
	Geometry GetTickSpaceGeometry();// 0x3527560
	FText GetText__DelegateSignature();// 0x2649560
	enum GetSlateVisibility__DelegateSignature();// 0x2649560
	SlateColor GetSlateColor__DelegateSignature();// 0x2649560
	SlateBrush GetSlateBrush__DelegateSignature();// 0x2649560
	float GetRenderTransformAngle();// 0x3527500
	float GetRenderOpacity();// 0x35274d0
	PanelWidget* GetParent();// 0x35274a0
	Geometry GetPaintSpaceGeometry();// 0x3527460
	PlayerController* GetOwningPlayer();// 0x3527430
	LocalPlayer* GetOwningLocalPlayer();// 0x3527400
	byte GetMouseCursor__DelegateSignature();// 0x2649560
	LinearColor GetLinearColor__DelegateSignature();// 0x2649560
	bool GetIsEnabled();// 0x35273d0
	int GetInt32__DelegateSignature();// 0x2649560
	GameInstance* GetGameInstance();// 0x35273a0
	float GetFloat__DelegateSignature();// 0x2649560
	Vector2D GetDesiredSize();// 0x3527330
	enum GetClipping();// 0x3527300
	enum GetCheckBoxState__DelegateSignature();// 0x2649560
	Geometry GetCachedGeometry();// 0x35272c0
	bool GetBool__DelegateSignature();// 0x2649560
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x2649560
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x2649560
	void ForceVolatile(bool bForce);// 0x3527230
	void ForceLayoutPrepass();// 0x3527210

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 1]
	Widget* Content;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x138, Size: 1]
	bool RemoveChildAt(int Index);// 0x3513e60
	bool RemoveChild(Widget* Content);// 0x3513dc0
	bool HasChild(Widget* Content);// 0x3513c30
	bool HasAnyChildren();// 0xbb73c0
	int GetChildrenCount();// 0x35138e0
	int GetChildIndex(const Widget* Content);// 0x3513840
	Widget* GetChildAt(int Index);// 0x35137a0
	Widget*[] GetAllChildren();// 0x3513720
	void ClearChildren();// 0x3513650
	PanelSlot* AddChild(Widget* Content);// 0x3513510

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 1]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 1]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	FString DisplayLabel;//[Offset: 0x368, Size: 1]
	byte DetailMode;//[Offset: 0x378, Size: 1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3528fc0
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3528ee0
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3528e50
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x3528dc0
	void SetDetailMode(byte InDetailMode);// 0x3527c40
	float GetStartTime();// 0x3527530
	float GetEndTime();// 0x3527370
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3527130
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3527050

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 1]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3397930
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3397880

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 1]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 1]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 1]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 1]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 1]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 1]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 1]
	FrameRate TickResolution;//[Offset: 0x108, Size: 1]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 1]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 1]
	FName[] Tags;//[Offset: 0x30, Size: 1]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Guid Guid;//[Offset: 0x44, Size: 1]
	FString Name;//[Offset: 0x58, Size: 1]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 1]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 1]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 1]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 1]
	Guid Guid;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x20, Size: 1]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 1]
	Guid ParentGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 1]
	FString BindingName;//[Offset: 0x10, Size: 1]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 1]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 1]
	int Denominator;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	FString Label;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 1]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 1]
	Guid SequenceSignature;//[Offset: 0x170, Size: 1]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 1]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 1]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 1]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 1]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 1]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 1]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 1]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 1]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 1]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 1]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 1]
	int NumInitPtrs;//[Offset: 0x4, Size: 1]
	int NumEvalPtrs;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 1]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 1]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 1]
	uint16 SetupIndex;//[Offset: 0xc, Size: 1]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 1]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]
	uint32 SectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 1]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 1]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 1]
	FrameRate TickResolution;//[Offset: 0x38, Size: 1]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 1]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 1]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 1]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 1]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 1]
	int HierarchicalBias;//[Offset: 0x94, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 1]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 1]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 1]
	FrameTime Offset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	float SubFrame;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 1]
	FrameNumber End;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 1]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 1]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 1]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 1]
	FName SlotWidgetName;//[Offset: 0x8, Size: 1]
	Guid AnimationGuid;//[Offset: 0x10, Size: 1]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 1]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 1]
	float Top;//[Offset: 0x4, Size: 1]
	float Right;//[Offset: 0x8, Size: 1]
	float Bottom;//[Offset: 0xc, Size: 1]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 1]
	void SetUserTag(FName InUserTag);// 0x3524ce0
	FName GetUserTag();// 0x3523370

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 1]
	Vector2D Scale;//[Offset: 0x8, Size: 1]
	Vector2D Shear;//[Offset: 0x10, Size: 1]
	float Angle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 1]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 1]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 1]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 1]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 1]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 1]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 1]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 1]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 1]
	Widget* Widget;//[Offset: 0xc, Size: 1]
	delegate CustomDelegate;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 1]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 1]
	FName DestinationProperty;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 1]
	Function* CachedFunction;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* Struct;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 1]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 1]
	Margin Margin;//[Offset: 0x1c, Size: 1]
	SlateColor TintColor;//[Offset: 0x30, Size: 1]
	Object* ResourceObject;//[Offset: 0x58, Size: 1]
	FName ResourceName;//[Offset: 0x60, Size: 1]
	Box2D UVRegion;//[Offset: 0x68, Size: 1]
	byte DrawAs;//[Offset: 0x7c, Size: 1]
	byte Tiling;//[Offset: 0x7d, Size: 1]
	byte Mirroring;//[Offset: 0x7e, Size: 1]
	byte ImageType;//[Offset: 0x7f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 1]
	Vector2D Max;//[Offset: 0x8, Size: 1]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 1]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 1]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 1]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 1]
	World* World;//[Offset: 0x78, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 1]
	void SSSwapControllers();// 0x1ff1f20
	void ShowTitleSafeArea();// 0x30f3d30
	void SetConsoleTarget(int PlayerIndex);// 0x3e2b160

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 1]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 1]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 1]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 1]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 1]
	class Object* WithinClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 1]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 1]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 1]
	void ReceiveShutdown();// 0x2649560
	void ReceiveInit();// 0x2649560
	void HandleTravelError(byte FailureType);// 0x2649560
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x2649560
	void DebugRemovePlayer(int ControllerId);// 0x3e1ab20
	void DebugCreatePlayer(int ControllerId);// 0x3e1aa90

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 1]
	Vector2D Maximum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 1]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 1]
	float Duration;//[Offset: 0xf8, Size: 1]
	float MaxDistance;//[Offset: 0xfc, Size: 1]
	float TotalSamples;//[Offset: 0x100, Size: 1]
	float Priority;//[Offset: 0x104, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 1]
	SoundModulation Modulation;//[Offset: 0x110, Size: 1]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 1]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 1]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 1]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 1]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 1]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 1]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 1]
	float StereoBleed;//[Offset: 0x10, Size: 1]
	float LFEBleed;//[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 1]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 1]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 1]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 1]
	byte OutputTarget;//[Offset: 0x2c, Size: 1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 1]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 1]
	float OutputVolume;//[Offset: 0x68, Size: 1]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 1]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x3f16e30
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x3f16da0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x3f16cd0
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x3f16c40
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x3f165e0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x3f11660

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 1]
	int StreamingPriority;//[Offset: 0x164, Size: 1]
	enum SampleRateQuality;//[Offset: 0x168, Size: 1]
	byte SoundGroup;//[Offset: 0x16a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 1]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 1]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 1]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 1]
	FString SpokenText;//[Offset: 0x1e8, Size: 1]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 1]
	float Volume;//[Offset: 0x1fc, Size: 1]
	float Pitch;//[Offset: 0x200, Size: 1]
	int NumChannels;//[Offset: 0x204, Size: 1]
	int SampleRate;//[Offset: 0x208, Size: 1]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 1]
	CurveTable* Curves;//[Offset: 0x228, Size: 1]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 1]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 1]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 1]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 1]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 1]
	float InitialDelay;//[Offset: 0x80, Size: 1]
	float FadeInTime;//[Offset: 0x84, Size: 1]
	float Duration;//[Offset: 0x88, Size: 1]
	float FadeOutTime;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 1]
	float Gain0;//[Offset: 0x14, Size: 1]
	float Bandwidth0;//[Offset: 0x18, Size: 1]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 1]
	float Gain1;//[Offset: 0x20, Size: 1]
	float Bandwidth1;//[Offset: 0x24, Size: 1]
	float FrequencyCenter2;//[Offset: 0x28, Size: 1]
	float Gain2;//[Offset: 0x2c, Size: 1]
	float Bandwidth2;//[Offset: 0x30, Size: 1]
	float FrequencyCenter3;//[Offset: 0x34, Size: 1]
	float Gain3;//[Offset: 0x38, Size: 1]
	float Bandwidth3;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 1]
	float VolumeAdjuster;//[Offset: 0x8, Size: 1]
	float PitchAdjuster;//[Offset: 0xc, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 1]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x8, Size: 1]
	float VolumeScale;//[Offset: 0xc, Size: 1]
	float VolumeScaleAttackTime;//[Offset: 0x10, Size: 1]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x18, Size: 1]
	float VoiceStealReleaseTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 1]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 1]
	float StereoSpread;//[Offset: 0xc0, Size: 1]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 1]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 1]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 1]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 1]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 1]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 1]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 1]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 1]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 1]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 1]
	float FocusPriorityScale;//[Offset: 0x200, Size: 1]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 1]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 1]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 1]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 1]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 1]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 1]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 1]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 1]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 1]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 1]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 1]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 1]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 1]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 1]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 1]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 1]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 1]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 1]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 1]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 1]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 1]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 1]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 1]
	float ConeOffset;//[Offset: 0x20, Size: 1]
	float FalloffDistance;//[Offset: 0x24, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 1]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 1]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 1]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 1]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 1]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 1]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 1]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 1]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 1]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 1]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x308, Size: 1]
	float SourceBusDuration;//[Offset: 0x30c, Size: 1]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 1]
	Object* Payload;//[Offset: 0x38, Size: 1]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 1]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnDragged;//[Size: 1]
	void Drop(out const PointerEvent PointerEvent);// 0x350a4c0
	void Dragged(out const PointerEvent PointerEvent);// 0x350a390
	void DragCancelled(out const PointerEvent PointerEvent);// 0x350a260

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 1]
	Widget* Content;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 1]
	bool WasControllerKeyJustReleased(Key Key);// 0x3e35ce0
	bool WasControllerKeyJustPressed(Key Key);// 0x3e35ce0
	bool IsControllerKeyDown(Key Key);// 0x3e35ce0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3e35b60
	Vector GetControllerVectorKeyState(Key Key);// 0x3e355e0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x3e35500
	float GetControllerKeyTimeDown(Key Key);// 0x3e352d0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3e353d0
	float GetControllerAnalogKeyState(Key Key);// 0x3e352d0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 1]
	delegate Delegate;//[Offset: 0x8, Size: 1]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 1]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 1]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 1]
	FName Filename;//[Offset: 0x8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 1]
	int UUID;//[Offset: 0x4, Size: 1]
	FName ExecutionFunction;//[Offset: 0x8, Size: 1]
	Object* CallbackTarget;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 1]
	float Duration;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x288, Size: 1]
	float BaseLookUpRate;//[Offset: 0x28c, Size: 1]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 1]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 1]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 1]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	void TurnAtRate(float Rate);// 0x3e07500
	void MoveUp_World(float val);// 0x3e06f90
	void MoveRight(float val);// 0x3e06f00
	void MoveForward(float val);// 0x3e06e70
	void LookUpAtRate(float Rate);// 0x3e06de0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x558, Size: 1]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x3f16160
	float GetUnscaledSphereRadius();// 0x216e960
	float GetShapeScale();// 0x3f145d0
	float GetScaledSphereRadius();// 0x3f14580

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x578, Size: 1]
	int PreviousLODLevel;//[Offset: 0x57c, Size: 1]
	int MinLOD;//[Offset: 0x580, Size: 1]
	int SubDivisionStepSize;//[Offset: 0x584, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x588, Size: 1]
	Color WireframeColorOverride;//[Offset: 0x590, Size: 1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x594, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x594, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x594, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x594, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x594, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x594, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x594, Size: 1]
	bool bOverrideShadowMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x595, Size: 1]
	bool bMinimizeLightmapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x598, Size: 1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59c, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59c, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59c, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59c, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59c, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x5a0, Size: 1]
	float LightmapPrecision;//[Offset: 0x5a4, Size: 1]
	float ShadowmapPrecision;//[Offset: 0x5a8, Size: 1]
	int OverriddenShadowMapRes;//[Offset: 0x5ac, Size: 1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5b0, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5b4, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x5b8, Size: 1]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5c0, Size: 1]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5d0, Size: 1]
	bool bClearStaticLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5e4, Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x16cb770
	void SetShadowmapPrecision(float InShadowMapPrecision);// 0x3f1e490
	void SetReverseCulling(bool ReverseCulling);// 0x3f1e400
	void SetOverrideShadowMapRes(int InOverridShadowMapRes);// 0x3f1e1e0
	void SetOverrideMinLOD(bool bInOverrideMinLOD, int InMinLOD);// 0x3f1e110
	void SetOverrideLightMapRes(int InOverrideLightMapRes);// 0x3f1e080
	void SetLightmapPrecision(float InLightMapPrecision);// 0x3f1df00
	void SetForcedLodModel(int NewForcedLodModel);// 0x3f1dd50
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3f1dad0
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3f1da40
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x3f1d8c0
	void EnableShadowmapResOverride(bool bInOverrideShadowMapRes);// 0x3f1d810
	void EnableLightmapResOverride(bool bInOverrideLightMapRes);// 0x3f1d780

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 1]
	int TextureLevelIndex;//[Offset: 0x4, Size: 1]
	float TexelFactor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 1]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 1]
	float EmissiveBoost;//[Offset: 0xc, Size: 1]
	float DiffuseBoost;//[Offset: 0x10, Size: 1]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 1]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 1]
	float ActiveOpacity;//[Offset: 0x38, Size: 1]
	float InactiveOpacity;//[Offset: 0x3c, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 1]
	float TimeUntilReset;//[Offset: 0x44, Size: 1]
	float ActivationDelay;//[Offset: 0x48, Size: 1]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 1]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 1]
	Texture2D* Image2;//[Offset: 0x8, Size: 1]
	Vector2D Center;//[Offset: 0x10, Size: 1]
	Vector2D VisualSize;//[Offset: 0x18, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 1]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 1]
	Vector2D InputScale;//[Offset: 0x30, Size: 1]
	Key MainInputKey;//[Offset: 0x38, Size: 1]
	Key AltInputKey;//[Offset: 0x50, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 1]
	NetDriver* Driver;//[Offset: 0x58, Size: 1]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 1]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 1]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 1]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 1]
	Actor* ViewTarget;//[Offset: 0x90, Size: 1]
	Actor* OwningActor;//[Offset: 0x98, Size: 1]
	int MaxPacket;//[Offset: 0xa0, Size: 1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x170, Size: 1]
	double LastReceiveTime;//[Offset: 0x1f0, Size: 1]
	Channel*[] ChannelsToTick;//[Offset: 0x1530, Size: 1]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b10, Size: 1]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 1]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 1]
	int MaxDownloadSize;//[Offset: 0x50, Size: 1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 1]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 1]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 1]
	int MaxClientRate;//[Offset: 0x64, Size: 1]
	float ServerTravelPause;//[Offset: 0x68, Size: 1]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 1]
	float RelevantTimeout;//[Offset: 0x70, Size: 1]
	float KeepAliveTime;//[Offset: 0x74, Size: 1]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 1]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 1]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 1]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 1]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 1]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 1]
	World* World;//[Offset: 0x140, Size: 1]
	Package* WorldPackage;//[Offset: 0x148, Size: 1]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 1]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 1]
	FName NetDriverName;//[Offset: 0x190, Size: 1]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 1]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 1]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 1]
	float Time;//[Offset: 0x210, Size: 1]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 1]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 1]
	FName ClassName;//[Offset: 0x8, Size: 1]
	class Object* ChannelClass;//[Offset: 0x10, Size: 1]
	int StaticChannelIndex;//[Offset: 0x18, Size: 1]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x318, Size: 1]
	Actor* ChildActor;//[Offset: 0x320, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x328, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x3dfeec0

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 1]
	Vector AngularVelocity;//[Offset: 0xc, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 1]
	Rotator RotationOffset;//[Offset: 0x20, Size: 1]
	FName AttachSocket;//[Offset: 0x2c, Size: 1]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 1]
	FName MatineeControllerName;//[Offset: 0x230, Size: 1]
	float PlayRate;//[Offset: 0x238, Size: 1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	float ForceStartPosition;//[Offset: 0x240, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 1]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 1]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 1]
	float InterpPosition;//[Offset: 0x28c, Size: 1]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	void Stop();// 0x1571170
	void SetPosition(float NewPosition, bool bJump);// 0x3eb5160
	void SetLoopingState(bool bNewLooping);// 0x22e70e0
	void Reverse();// 0x7debe0
	void Play();// 0x816980
	void Pause();// 0x7debc0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x3eb4cd0
	void ChangePlaybackDirection();// 0x15714b0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 1]
	float PathBuildTime;//[Offset: 0x2c, Size: 1]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 1]
	float EdSectionStart;//[Offset: 0x48, Size: 1]
	float EdSectionEnd;//[Offset: 0x4c, Size: 1]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 1]
	FName[] AllEventNames;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 1]
	Actor*[] Actors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	float Timestamp;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 1]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 1]
	FName DefaultAgentName;//[Offset: 0x44, Size: 1]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 1]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 1]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 1]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 1]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 1]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 1]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 1]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 1]
	class HUD* HUDClass;//[Offset: 0x258, Size: 1]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 1]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 1]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 1]
	GameSession* GameSession;//[Offset: 0x280, Size: 1]
	GameStateBase* GameState;//[Offset: 0x288, Size: 1]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 1]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 1]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 1]
	void StartPlay();// 0x1571650
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x3e1b800
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3e1b6e0
	bool ShouldReset(Actor* ActorToReset);// 0x3e1b640
	void ReturnToMainMenuHost();// 0x15711b0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3e1b2e0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3e1b210
	void RestartPlayer(Controller* NewPlayer);// 0x3e1b180
	void ResetLevel();// 0x1571630
	bool PlayerCanRestart(PlayerController* Player);// 0x3e1b080
	bool MustSpectate(PlayerController* NewPlayerController);// 0x21fa150
	void K2_PostLogin(PlayerController* NewPlayer);// 0x2649560
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x2649560
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x2649560
	void K2_OnLogout(Controller* ExitingController);// 0x2649560
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x2649560
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x3e1af90
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x3e1aec0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x22b4590
	bool HasMatchStarted();// 0x3e1ae90
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x3e1add0
	int GetNumSpectators();// 0x3e1ada0
	int GetNumPlayers();// 0x3e1ad70
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x3e1acb0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x3e1abb0
	Actor* ChoosePlayerStart(Controller* Player);// 0x3e1a9f0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x3e1a8c0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x3e1a7f0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 1]
	int MaxPlayers;//[Offset: 0x22c, Size: 1]
	int MaxPartySize;//[Offset: 0x230, Size: 1]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 1]
	FName SessionName;//[Offset: 0x238, Size: 1]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x230, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x238, Size: 1]
	PlayerState*[] PlayerArray;//[Offset: 0x240, Size: 1]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x254, Size: 1]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x258, Size: 1]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x25c, Size: 1]
	void OnRep_SpectatorClass();// 0x7c28e0
	void OnRep_ReplicatedWorldTimeSeconds();// 0x15710b0
	void OnRep_ReplicatedHasBegunPlay();// 0x7c2940
	void OnRep_GameModeClass();// 0x1571a30
	bool HasMatchStarted();// 0x3e2acc0
	bool HasBegunPlay();// 0x3e2ac90
	float GetServerWorldTimeSeconds();// 0x3e2ab60
	float GetPlayerStartTime(Controller* Controller);// 0x3e2a6a0
	float GetPlayerRespawnDelay(Controller* Controller);// 0x3e2a600

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	uint32 Channels;//[Offset: 0x22c, Size: 1]
	uint32 InRate;//[Offset: 0x230, Size: 1]
	uint32 OutRate;//[Offset: 0x234, Size: 1]
	uint32 MaxPacketOverhead;//[Offset: 0x23c, Size: 1]
	uint32 InRateClientMax;//[Offset: 0x240, Size: 1]
	uint32 InRateClientMin;//[Offset: 0x244, Size: 1]
	uint32 InRateClientAvg;//[Offset: 0x248, Size: 1]
	uint32 InPacketsClientMax;//[Offset: 0x24c, Size: 1]
	uint32 InPacketsClientMin;//[Offset: 0x250, Size: 1]
	uint32 InPacketsClientAvg;//[Offset: 0x254, Size: 1]
	uint32 OutRateClientMax;//[Offset: 0x258, Size: 1]
	uint32 OutRateClientMin;//[Offset: 0x25c, Size: 1]
	uint32 OutRateClientAvg;//[Offset: 0x260, Size: 1]
	uint32 OutPacketsClientMax;//[Offset: 0x264, Size: 1]
	uint32 OutPacketsClientMin;//[Offset: 0x268, Size: 1]
	uint32 OutPacketsClientAvg;//[Offset: 0x26c, Size: 1]
	uint32 NetNumClients;//[Offset: 0x270, Size: 1]
	uint32 InPackets;//[Offset: 0x274, Size: 1]
	uint32 OutPackets;//[Offset: 0x278, Size: 1]
	uint32 InBunches;//[Offset: 0x27c, Size: 1]
	uint32 OutBunches;//[Offset: 0x280, Size: 1]
	uint32 OutLoss;//[Offset: 0x284, Size: 1]
	uint32 InLoss;//[Offset: 0x288, Size: 1]
	uint32 VoiceBytesSent;//[Offset: 0x28c, Size: 1]
	uint32 VoiceBytesRecv;//[Offset: 0x290, Size: 1]
	uint32 VoicePacketsSent;//[Offset: 0x294, Size: 1]
	uint32 VoicePacketsRecv;//[Offset: 0x298, Size: 1]
	uint32 PercentInVoice;//[Offset: 0x29c, Size: 1]
	uint32 PercentOutVoice;//[Offset: 0x2a0, Size: 1]
	uint32 NumActorChannels;//[Offset: 0x2a4, Size: 1]
	uint32 NumConsideredActors;//[Offset: 0x2a8, Size: 1]
	uint32 PrioritizedActors;//[Offset: 0x2ac, Size: 1]
	uint32 NumRelevantActors;//[Offset: 0x2b0, Size: 1]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2b4, Size: 1]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b8, Size: 1]
	uint32 NumReplicatedActors;//[Offset: 0x2bc, Size: 1]
	uint32 NumActors;//[Offset: 0x2c0, Size: 1]
	uint32 NumNetActors;//[Offset: 0x2c4, Size: 1]
	uint32 NumDormantActors;//[Offset: 0x2c8, Size: 1]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2cc, Size: 1]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d0, Size: 1]
	uint32 NumNetGUIDsPending;//[Offset: 0x2d4, Size: 1]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d8, Size: 1]
	uint32 ObjPathBytes;//[Offset: 0x2dc, Size: 1]
	uint32 NetGUIDOutRate;//[Offset: 0x2e0, Size: 1]
	uint32 NetGUIDInRate;//[Offset: 0x2e4, Size: 1]
	uint32 NetSaturated;//[Offset: 0x2e8, Size: 1]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 1]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 1]
	int BadPingThreshold;//[Offset: 0x230, Size: 1]
	int SeverePingThreshold;//[Offset: 0x234, Size: 1]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 1]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 1]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 1]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 1]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 1]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 1]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 1]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 1]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 1]
	float PercentForBadPing;//[Offset: 0x260, Size: 1]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 1]
	float MoveRepSize;//[Offset: 0x268, Size: 1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 1]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 1]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 1]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 1]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 1]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 1]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 1]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 1]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 1]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 1]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 1]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 1]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 1]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 1]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 1]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 1]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 1]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 1]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 1]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 1]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 1]
	float Volume;//[Offset: 0x18, Size: 1]
	float FadeTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 1]
	float Diffusion;//[Offset: 0x2c, Size: 1]
	float Gain;//[Offset: 0x30, Size: 1]
	float GainHF;//[Offset: 0x34, Size: 1]
	float DecayTime;//[Offset: 0x38, Size: 1]
	float DecayHFRatio;//[Offset: 0x3c, Size: 1]
	float ReflectionsGain;//[Offset: 0x40, Size: 1]
	float ReflectionsDelay;//[Offset: 0x44, Size: 1]
	float LateGain;//[Offset: 0x48, Size: 1]
	float LateDelay;//[Offset: 0x4c, Size: 1]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 1]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 1]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 1]
	float ExteriorTime;//[Offset: 0x8, Size: 1]
	float ExteriorLPF;//[Offset: 0xc, Size: 1]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 1]
	float InteriorVolume;//[Offset: 0x14, Size: 1]
	float InteriorTime;//[Offset: 0x18, Size: 1]
	float InteriorLPF;//[Offset: 0x1c, Size: 1]
	float InteriorLPFTime;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 1]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 1]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 1]
	Actor* InViewer;//[Offset: 0x8, Size: 1]
	Actor* ViewTarget;//[Offset: 0x10, Size: 1]
	Vector ViewLocation;//[Offset: 0x18, Size: 1]
	Vector ViewDir;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 1]
	Model* Model;//[Offset: 0xc0, Size: 1]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 1]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 1]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 1]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 1]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 1]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 1]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 1]
	float LightmapTotalSize;//[Offset: 0x110, Size: 1]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 1]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 1]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 1]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 1]
	<FName,LevelSolarDecorationLightMapGUIDArray> LevelSolarDecorationLightMapGUIDs;//[Offset: 0x1e8, Size: 1]
	IntVector LightBuildLevelOffset;//[Offset: 0x238, Size: 1]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x298, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x2a8, Size: 1]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2c8, Size: 1]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x558, Size: 1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2649560
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3e9c020
	bool RemoteEvent(FName EventName);// 0x3e9b760
	void LevelReset();// 0x2649560

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]
	int Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 1]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 1]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 1]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x540, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 1]
	float ScreenSize;//[Offset: 0x54c, Size: 1]
	float U;//[Offset: 0x550, Size: 1]
	float UL;//[Offset: 0x554, Size: 1]
	float V;//[Offset: 0x558, Size: 1]
	float VL;//[Offset: 0x55c, Size: 1]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x3de20c0
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x3de1f30
	void SetSprite(Texture2D* NewSprite);// 0x3de1ea0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSolarDecorationLightMapGUIDArray
	Guid[] MapBuildDataIdArray;//[Offset: 0x0, Size: 1]
	uint32[] LODNumArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 1]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 1]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 1]
	Transform LevelTransform;//[Offset: 0x80, Size: 1]
	int LevelLODIndex;//[Offset: 0xb0, Size: 1]
	int StreamingPriority;//[Offset: 0xb4, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 1]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 1]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 1]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 1]
	Level* LoadedLevel;//[Offset: 0x130, Size: 1]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 1]
	bool ShouldBeLoaded();// 0xc90770
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x3e9ced0
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x3e2a1b0
	void SetPriority(int NewPriority);// 0x3e9ccb0
	void SetLevelLODIndex(int LODIndex);// 0x3e9c5c0
	bool IsStreamingStatePending();// 0x3e9b300
	bool IsLevelVisible();// 0x3e9b2d0
	bool IsLevelLoaded();// 0x3e9b2a0
	FName GetWorldAssetPackageFName();// 0x3e9b230
	Level* GetLoadedLevel();// 0x3e9b210
	LevelScriptActor* GetLevelScriptActor();// 0x3e9b160
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x3e9b080

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 1]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 1]
	byte StreamingUsage;//[Offset: 0x274, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 1]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 1]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 1]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 1]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 1]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 1]
	FName AISystemModuleName;//[Offset: 0x40, Size: 1]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 1]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 1]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 1]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 1]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 1]
	float TestHeightDifference;//[Offset: 0x44, Size: 1]
	float HeightCheckMargin;//[Offset: 0x48, Size: 1]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x3de1b70
	int GetObjectCount();// 0x3de1a70
	int GetNewAvoidanceUID();// 0x3de1a40
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x3de1990

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 1]
	Level* PersistentLevel;//[Offset: 0x20, Size: 1]
	<Level*> Levels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 1]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 1]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 1]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 1]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 1]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 1]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 1]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 1]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x3f2bca0

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x400, Size: 1]
	SoftObjectPath PreloadAssets;//[Offset: 0x408, Size: 1]
	bool bAsyncPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool bHoldAllMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x428, Size: 1]
	int CurrentActiveColorThemeIndex;//[Offset: 0x430, Size: 1]
	int SolarMapTypeValue;//[Offset: 0x434, Size: 1]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	Transform SpectatorPawnStartPoint;//[Offset: 0x440, Size: 1]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x470, Size: 1]

--------------------------------
Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BP_Controller_BattleRoyaleMap01_C.BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xea8, Size: 1]
	PoseSnapshot Snapshot;//[Offset: 0xeb0, Size: 1]
	float TempMaxDist;//[Offset: 0xee8, Size: 1]
	int TempMaxIndex;//[Offset: 0xeec, Size: 1]
	int EnableAiPalRate;//[Offset: 0xef0, Size: 1]
	int AimbotSwitch;//[Offset: 0xef4, Size: 1]
	int AimbotWindowSize;//[Offset: 0xef8, Size: 1]
	int AimbotMaxMutation;//[Offset: 0xefc, Size: 1]
	void ClientHighlightDataReceive_Imp(FString HighlightDataStr);// 0x2649560
	void ServerSetClientRecording(bool IsRecording);// 0x2649560
	void BpRepPolicyParmToClient(int Switch, int WindowSize, int MaxMutation);// 0x2649560
	void OnRep_AimbotMaxMutation();// 0x2649560
	void OnRep_AimbotWindowSize();// 0x2649560
	void OnRep_AimbotSwitch();// 0x2649560
	void UpdateAiPalRate(int Rate);// 0x2649560
	void OnRep_EnableAiPalRate();// 0x2649560
	void OnNotifyLockPlayer(FString Name);// 0x2649560
	void RequestNotifyLockPlayer(FString Name);// 0x2649560
	void InpActEvt_GMT_K2Node_InputActionEvent(Key Key);// 0x2649560
	void InputReviveSelfReleased();// 0x2649560
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x2649560
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x2649560
	void ClientNotifyLockPlayer(FString Name);// 0x2649560
	void ServerRPC_SetClientRecording(bool IsClientRecording);// 0x2649560
	void ClientHighlightDataReceive(FString HighlightDataStr);// 0x2649560
	void ExecuteUbergraph_BP_Controller_Framework(int EntryPoint, FString K2Node_CustomEvent_HighlightDataStr, const FString[] Temp_string_Variable, enum CallFunc_GetBuildConfiguration_ReturnValue, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key K2Node_InputActionEvent_Key, byte CallFunc_MakeLiteralByte_ReturnValue, SolarWeapon* K2Node_Event_ActiveWeapon, SolarVehiclePawn* K2Node_Event_BoardedVehicle, const FString[] K2Node_Event_DataName, const FString[] K2Node_Event_DataContent, FString CallFunc_Conv_ByteToString_ReturnValue, FString K2Node_CustomEvent_Name, const FString[] K2Node_MakeArray_Array, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_CustomEvent_IsClientRecording);// 0x2649560

--------------------------------
Class: SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0xea0, Size: 1]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x20963b0
	void RequestUpdataDataManager();// 0x2096390

--------------------------------
Class: SolarPlayerController.PlayerController.Controller.Actor.Object
	MulticastInlineDelegateProperty OnPawnReplicated;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerStateRepDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCatchInputActionDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEnterLandingDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnNotifiedMarkedItemWasPickedUpDelegate;//[Size: 1]
	SolarInputManager* InputManager;//[Offset: 0x638, Size: 1]
	AiPalComponent* AiPalComponent;//[Offset: 0x648, Size: 1]
	SolarEasyAntiCheatComponent* AntiCheatComponent;//[Offset: 0x650, Size: 1]
	MulticastInlineDelegateProperty OnHUDSpawnedDelegate;//[Size: 1]
	SolarInputModePolicyComponent* SolarInputModePolicyComponent;//[Offset: 0x758, Size: 1]
	SolarInputActionContext*[] InputActionContextArray;//[Offset: 0x760, Size: 1]
	Vector2D InputMovementVector;//[Offset: 0x778, Size: 1]
	float InputRotatePitch;//[Offset: 0x780, Size: 1]
	float ActionWheelHoldDownTime;//[Offset: 0x790, Size: 1]
	float WorldMarkMessageDelayTime;//[Offset: 0x7a4, Size: 1]
	float WarningMarkRadius;//[Offset: 0x7a8, Size: 1]
	float PingHoldDownTime;//[Offset: 0x7ac, Size: 1]
	float VoiceWheelMouseMoveRatio;//[Offset: 0x7b0, Size: 1]
	float WheelRadius;//[Offset: 0x7b4, Size: 1]
	float CancelRadius;//[Offset: 0x7b8, Size: 1]
	float OpenMarkWheelRadius;//[Offset: 0x7bc, Size: 1]
	ActorMarkBase*[] DeathBoxWorldMarks;//[Offset: 0x828, Size: 1]
	float DeathBoxMarksRefreshInterval;//[Offset: 0x83c, Size: 1]
	int MaxDeathBoxWorldMarkNumber;//[Offset: 0x844, Size: 1]
	class ActorMarkBase* DeathBoxMarkClass;//[Offset: 0x848, Size: 1]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x878, Size: 1]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x880, Size: 1]
	float FreeLookSmoothSpeed;//[Offset: 0x888, Size: 1]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x8a8, Size: 1]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x8b0, Size: 1]
	FString PlayerId;//[Offset: 0x960, Size: 1]
	float VehicleInteractionDistance;//[Offset: 0x988, Size: 1]
	SolarVehiclePawn*[] InteractingVehicles;//[Offset: 0x990, Size: 1]
	SolarVehiclePawn* BestInteractingVehicle;//[Offset: 0x9a0, Size: 1]
	MulticastInlineDelegateProperty OnTeammateHUDDodgeSet;//[Size: 1]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0xa20, Size: 1]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	GameplayHitInfo[] WeaponMessageArray;//[Offset: 0xa78, Size: 1]
	Actor*[] UniqueActorArray;//[Offset: 0xaa0, Size: 1]
	float HangUpTime;//[Offset: 0xab0, Size: 1]
	UserWidget* DamageTextWidget;//[Offset: 0xad0, Size: 1]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0xad8, Size: 1]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0xae8, Size: 1]
	MulticastInlineDelegateProperty OnSpectateInfoRep;//[Size: 1]
	SoftClassPath SwitchTargetCameraControlCompClass;//[Offset: 0xc08, Size: 1]
	bool bShowCursorWhenSpectateOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	float SpectateNetCamUpdatePositionLimit;//[Offset: 0xc24, Size: 1]
	PlayerController* ScoutPlayerController;//[Offset: 0xc30, Size: 1]
	Actor* ScoutViewTarget;//[Offset: 0xc38, Size: 1]
	SolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp;//[Offset: 0xc40, Size: 1]
	int[] UsableJetpacks;//[Offset: 0xc50, Size: 1]
	int[] UsableTailFlames;//[Offset: 0xc60, Size: 1]
	int[] AllCharacterSkins;//[Offset: 0xc70, Size: 1]
	FName PickUpExpItemSound;//[Offset: 0xc80, Size: 1]
	FString CachedRechamberSound;//[Offset: 0xc88, Size: 1]
	FName EMPScreenEffectName;//[Offset: 0xcd4, Size: 1]
	float AntiCheatUploadInterval;//[Offset: 0xcdc, Size: 1]
	FixedAntiCheatData FixedAntiCheatData;//[Offset: 0xce0, Size: 1]
	FString[] CustomAntiCheatNames;//[Offset: 0xd80, Size: 1]
	FString[] CustomAntiCheatContents;//[Offset: 0xd90, Size: 1]
	void WorldMarkWheelYAxis(float Movement);// 0x21d2630
	void WorldMarkWheelXAxis(float Movement);// 0x21d25b0
	void WorldMarkDelayExecFunction();// 0x21d2590
	void UseMedicine();// 0x21d2570
	void UpdateEnableAiPalRate(int Rate);// 0x2649560
	void UnMarkWorldInLevel(int64 instanceID);// 0x21d24e0
	void Turn(float Value);// 0x21d2460
	void TryRecordBattlePlayerData();// 0x2649560
	void TryRechargeShield(bool bUseBigRecharger);// 0x21d23d0
	void TriggerVoiceByType(enum VoiceType);// 0x21d2340
	void TriggerVoiceByNumber(int VoiceIndex);// 0x21d22b0
	void ToggleEMPScreenEffect(bool bInVisible);// 0x21d2220
	void ToggleCursor();// 0x21d2200
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget);// 0x21d2170
	void SwtichVehicleSeatNotification();// 0x21d2150
	void SwitchWeaponByReverseOrder();// 0x21d2130
	void SwitchWeaponByOrder();// 0x21d2110
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x21d2080
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x21d1fa0
	void StopSpectateCountdown();// 0x21d1f80
	void StopRecordingAtDS();// 0x21d1f60
	void StartSpectateCountdown(RepCountdownData InCountdownData);// 0x21d1e80
	void StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x21d1d40
	void SolarSlot(int ID);// 0x21d1cb0
	void SolarShowPanelUI(int Type);// 0x21d1c20
	void SolarServerNetProfileStop();// 0x21d1c00
	void SolarServerNetProfileStart();// 0x21d1be0
	void SolarOpenUI(FString UIID, int RootID);// 0x21d1b00
	void SolarModule(int ID);// 0x21d1a70
	void SolarISPC(FString _str);// 0x21d1980
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x21d0580
	void SolarGM_UpdateTaskInfo();// 0x8f2720
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x21d18f0
	void SolarGM_StopRecordingAtDS();// 0x8f2720
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop);// 0x21d1860
	void SolarGM_StartShrinkSafeArea();// 0x8f2720
	void SolarGM_StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x21d1720
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num, int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x21d15c0
	void SolarGM_SpawnBotAIAtCrosshair(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x21d14b0
	void SolarGM_SpawnAIAtCrosshairServer(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x21d13a0
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x1ff2470
	void SolarGM_ShowNotice(int NoticeId);// 0x15b05a0
	void SolarGM_SetTeamID(int InTeamId);// 0x15b05a0
	void SolarGM_SetStatDataForDebug();// 0x8f2720
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x2100560
	void SolarGM_SetReconnection(bool IsReconnection);// 0x1ff2470
	void SolarGM_SetPlayerData(FString InPlayerID);// 0x2100560
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x2100560
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0xb44b00
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0xb44b00
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0xb44b00
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0xb44b00
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0xb44b00
	void SolarGM_ServerStartShrinkSafeArea();// 0x21d1380
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x21d12f0
	void SolarGM_ServerSetTeamID(int InTeamId);// 0x21d1260
	void SolarGM_ServerSetStatDataForDebug();// 0x21d1240
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x21d11a0
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x21d1110
	void SolarGM_ServerSetPlayerData(FString InPlayerID);// 0x21d1070
	void SolarGM_ServerMarkVehicleSpawnerInMap();// 0x21d1050
	void SolarGM_ServerDumpAllPlayer();// 0x21d1030
	void SolarGM_ServerDebugOffline();// 0x21d1010
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x21d0f70
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x21d0ee0
	void SolarGM_ServerChangeDayLight(int ID);// 0x21d0e50
	void SolarGM_ResetZoneBombsFire();// 0x8f2720
	void SolarGM_RedZoneServer(const int ZoneId);// 0x21d0dc0
	void SolarGM_RedZone(const int ZoneId);// 0x15b05a0
	void SolarGM_PoisonServer(FString GMType);// 0x21d0d20
	void SolarGM_Poison(FString GMType);// 0x2100560
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x21d0c90
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x21d0c00
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x21d0b30
	void SolarGM_NotifyPlayerHasCheatByNickName(FString NickName);// 0x2100560
	void SolarGM_NotifyPlayerHasCheat(FString SolarPlayerID);// 0x2100560
	void SolarGM_KillAllAIServer(bool KillBot);// 0x21d0aa0
	void SolarGM_KickMeOut();// 0x8f2720
	void SolarGM_InitTaskInfo();// 0x8f2720
	void SolarGM_GoPreviousHomeCameraMode();// 0x8f2720
	void SolarGM_GoNextHomeCameraMode();// 0x8f2720
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x15b05a0
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x8f2720
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x2140ca0
	void SolarGM_GMGoSpectateNextPlayer();// 0x8f2720
	void SolarGM_Freelook(bool Open);// 0x1ff2470
	void SolarGM_DumpAllPlayer(bool bSendToServer);// 0x1ff2470
	void SolarGM_DebugOffline();// 0x8f2720
	void SolarGM_DebugAllAIServer(int debugValue);// 0x21d0a10
	void SolarGM_DebugAllAI(int debugValue);// 0x15b05a0
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x1ff2470
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector characterlocation, float Distance, float Damage);// 0x21d0870
	void SolarGM_ClientSetPlayerData(FString InPlayerID);// 0x2100560
	void SolarGM_ClientMarkVehicleSpawnerInMap(const Vector[] VehicleSpawnerLocations, const int[] VehicleSpawnerSpawnIds);// 0x21d0770
	void SolarGM_ClientGotoLogin();// 0x2649560
	void SolarGM_ClientDumpAllPlayer(FString DumpString);// 0x21d06d0
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x21d0580
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x21d0410
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x21d0410
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x21d0330
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x21d0240
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x21d0240
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x21d00d0
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x2140bc0
	void SolarGM_ChangeDayLight(int ID);// 0x15b05a0
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0x2649560
	void SolarGM_Battle(FString CmdName, out const FString[] Params);// 0x2140990
	void SolarGM(FString _str);// 0x2100560
	void SolarEnergy(int InMode, int ID);// 0x2120500
	void SolarCloseUI(FString UIID);// 0x21d0030
	void SolarClosePanelUI(int Type);// 0x21cffa0
	void SolarClientNetProfileStop();// 0x21cff80
	void SolarClientNetProfileStart();// 0x21cff60
	void ShowBackpackUI();// 0x2649560
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x2649560
	void SetAllTeammateHUDDodge(bool bDodge);// 0x21cfed0
	void ServerUpdateTaskInfo();// 0x21cfeb0
	void ServerUnforbidRoleAbilitySkillDebugOnly();// 0x21cfe90
	void ServerTriggleScreenshotTask(FString TargetPlayerId);// 0x21cfdf0
	void ServerTeleportTo(const Vector DestLocation);// 0x21cfd70
	void ServerSyncPlayerSelfReport();// 0x21cfd50
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x21cfcc0
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x21cfc30
	void ServerSpawnVehicle(const int SpawnID);// 0x21cfba0
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x21cfb10
	void ServerSpawnSolarRadar(FString BpPath);// 0x21cfa70
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x21cf9e0
	void ServerSpawnChargingPile(FString BpPath);// 0x21cf940
	void ServerSpawnAirship(float Loc_X, float Loc_Y);// 0x21cf870
	void ServerSpawnAirdrop(const int AirdropID);// 0x21cf7e0
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x21cf5f0
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x21cf520
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x21cf3c0
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x21cf1e0
	void ServerSolarSetPlayerValue(FString InType, FString InValue);// 0x21cf0e0
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x21ceec0
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x21cec10
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x21ce9b0
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x21ce800
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float LifeTime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x21ce5e0
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD);// 0x21ce550
	void ServerSetPlayerLevel(int InLevel);// 0x21ce4c0
	void ServerSetHangUpBehavior();// 0x21ce4a0
	void ServerSetFreeLook(bool bInFreeLook);// 0x21ce410
	void ServerSetClientRecording_Impl(bool bInRecording);// 0x21ce380
	void ServerSetAppLifetimeState(enum NewLifeState);// 0x21ce300
	void ServerSetActorOwner(Actor* TargetActor);// 0x21ce270
	void ServerScreenshotProcessing(const SShotImageInfo ImageInfo);// 0x21ce150
	void ServerRPCResetZoneBombsFire();// 0x21cdfe0
	void ServerResetUniqueSkillCDDebugOnly();// 0x21ce130
	void ServerRequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x21ce0b0
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x21ce020
	void ServerReqStartReviveItemRecycleCountDownData();// 0x21ce000
	void ServerPlayerUpgrade(int InLevel);// 0x21cdf50
	void ServerPlayerResumeSettlement();// 0x21cdf30
	void ServerPlayerRequestLogout();// 0x21cdf10
	void ServerPlayerOutBySelf(enum InPath);// 0x21cde90
	void ServerPlayerGoToSettlement();// 0x21cde40
	void ServerNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x21cdd30
	void ServerNotifyPlayerHasCheatByNickName(FString NickName);// 0x21cdc90
	void ServerNotifyPlayerHasCheat(FString SolarPlayerID);// 0x21cdbf0
	void ServerNetProfile(bool startOrStop);// 0x21cdb60
	void ServerInitTaskInfo();// 0x21cdb40
	void ServerGoSpectatePreviousPlayer();// 0x21cdb20
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerID);// 0x21cda80
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerID);// 0x21cd9e0
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x21cd950
	void ServerGoSpectatePlayerByIndex(int Index);// 0x21cd8c0
	void ServerGoSpectateNextPlayer();// 0x21cd8a0
	void ServerGainExperience(int InExp);// 0x21cd810
	void ServerEnableCheats();// 0x21cd7f0
	void ServerCmd(FString Cmd);// 0x21cd750
	void ServerClearUniqueSkillCDDebugOnly();// 0x21cd730
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x21cd5d0
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x21cd470
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x21cd390
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x21cd2a0
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x21cd1b0
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x21cd040
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x21ccf50
	void ServerCancelSkydivingFollow();// 0x21ccf30
	void SendRepliableMessageServer(const int Message);// 0x21ccea0
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x21ccdf0
	void SendRepliableMessageByMessageID(out const int ID);// 0x21ccd60
	void SendQuickMessageServer(FString Message, bool bSound);// 0x21ccc70
	void SendQuickMessageNewServer(const int VoiceType);// 0x21ccbe0
	void SendQuickMessageNewClient(FString NickName, const int VoiceType, const int CharID, const int SkinId, bool bGender, const int PosInTeam, bool bLocalPlayer, bool bShowLocMessage);// 0x21cc960
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x21cc790
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x21cc630
	void SendLocalizationTeamMessageNewServer(const LocTextParam[] TextParams, const int SoundID1, const int SoundDI2);// 0x21cc4e0
	void SendLocalizationTeamMessageNewClient(const int CharacterId, const int SkinId, bool bGender, const int SoundID1, FString NickName, const LocTextParam[] TextParams, int PosInTeam, const int SoundID2);// 0x21cc230
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x21cc050
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent1, FString SoundEvent2);// 0x21cbe40
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x21cbd50
	void ResetJoyStickControlInput();// 0x21cbd30
	void ResetAllInput();// 0x21cbd10
	void RequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x21cbc90
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x21cbc00
	void RequestNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x21cbaf0
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x2649560
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x21cb7a0
	int QueryStage();// 0x2649560
	void PushInputModeUIOnly(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x21cb640
	void PushInputModeGameOnly(FName Name, bool bShowCursor);// 0x21cb570
	void PushInputModeGameAndUI(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x21cb3b0
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x21cb2e0
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x21cb1e0
	void PopInputMode(FName Name);// 0x21cb150
	void PlayerGoToSettleMent();// 0x21cb110
	void PlayerGotoLobbyWithLogout();// 0x21cb130
	void PassiveTriggeredVoice(enum VoiceType);// 0x21cb080
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x2649560
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x21caf70
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x2649560
	void OnSuperScaningStart(out const FString[] InScanPlayers);// 0x21caea0
	void OnSuperScaningRemovePlayer(FString InRemovePlayer);// 0x21cae00
	void OnSuperScaningEnd();// 0x21cade0
	void OnStopUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x21cad50
	void OnSpectateTargetItemsChanged(SolarSpectateInfo* SpecInfo);// 0x21cacc0
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x21cabf0
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x2649560
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x21caaa0
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x2649560
	void OnSeamlessTravelEnd();// 0x21caa80
	void OnScopeAxisInput(float InAxisValue);// 0x21caa00
	void OnReviveSelfTriggered(bool bAppear);// 0x21ca970
	void OnReceiveBattleEnd();// 0x2649560
	void OnPutAwayWeaponPressed();// 0x21ca950
	void OnPlayerStateSpectateInfoRepHandler(SolarSpectateInfo* SpecInfo);// 0x21ca820
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x21ca750
	void OnPawnReplicated__DelegateSignature();// 0x2649560
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(out const int64 InItemInstanceId);// 0x2649560
	void OnEnterVoyageDelegate__DelegateSignature();// 0x2649560
	void OnEnterLanding();// 0x21ca470
	void OnCustomizeLevelLoaded();// 0x21ca450
	void OnClientRecordingChanged(bool bInRecording);// 0x2649560
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x2649560
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x2649560
	void OnCharacterRebirthLua();// 0x2649560
	void OnCharacterDeathLua();// 0x2649560
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x2649560
	void OnBeginUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x21ca3c0
	void OnBeforeSpectateTargetChange(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x21ca2f0
	void OnAppHasReactivated();// 0x21ca2d0
	void OnAppHasDeactiveated();// 0x21ca2b0
	void OnActionWheelClosed();// 0x21ca290
	void NotifyMonsterSpawn();// 0x2649560
	void NotifyCrouchIsLocked();// 0x2649560
	void NotifyAppReactivate();// 0x2649560
	void NotifyAppHasDeactivate();// 0x2649560
	void NofityCustomizeLevelLoaded();// 0x2649560
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x21ca160
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x21ca080
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x21c9ff0
	void MarkPointInNavMap(const Vector2D InMarkedPoint, bool bFromWorldMark);// 0x21c9f20
	void MarkOnWorldByMinimapPosition(int PosInTeam, const Vector2D MinimapPos);// 0x21c9e50
	void MarkedAsAppHasReactivated();// 0x21ca270
	void MarkedAsAppHasDeactivated();// 0x21ca250
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x2649560
	void LuaClientUpdateAimbotSlidingWindowPolicyParm(int AimbotSwitch, int WindowSize, int MaxMutation);// 0x21c9d40
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x21c9c20
	void LookUp(float Value);// 0x21c9ba0
	void LogMarkAndQuickVoice(int Type, int SubType);// 0x21c9ad0
	void KickMeOutAtDS(FString InPlayerID);// 0x21c9a30
	static void K2_ShowDamageText(float InDamage, out const HitResult InHitResult, Actor* InDamageSource, Controller* InAutonomousController, out const SolarPointDamageEvent InPointDamageEvent);// 0x21c9810
	bool IsThirdPersonSpectateCameraMode();// 0x21c97e0
	bool IsSpectatingOtherPlayer();// 0x21c97b0
	bool IsMatching();// 0x2649560
	bool IsHasSkydiveAndEnd();// 0x21c9780
	bool IsHasCharacterAndSkin(int CharacterId, int SkinId);// 0x21c96b0
	void InputWorldMarkReleased();// 0x21c9690
	void InputWorldMarkPressed();// 0x21c9670
	void InputVerticalJetReleased();// 0x21c9650
	void InputVerticalJetPressed();// 0x21c9630
	void InputVehicleInteractionReleased();// 0x21c9610
	void InputVehicleInteractionPressed();// 0x21c95f0
	void InputUseRecommendBtnPCReleased();// 0x21c95d0
	void InputUseRecommendBtnPCPressed();// 0x21c95b0
	void InputUseMedicineReleased();// 0x21c9590
	void InputUseMedicinePressed();// 0x21c9570
	void InputToggleTertiaryWeapon_Checkbox();// 0x21c9550
	void InputToggleSkydivingFollowRouletteTriggered();// 0x21c9530
	void InputToggleSecondaryWeaponReleased();// 0x21c94f0
	void InputToggleSecondaryWeaponPressed();// 0x21c94d0
	void InputToggleSecondaryWeapon_Checkbox();// 0x21c9510
	void InputTogglePrimaryWeaponReleased();// 0x21c9490
	void InputTogglePrimaryWeaponPressed();// 0x21c9470
	void InputTogglePrimaryWeapon_Checkbox();// 0x21c94b0
	void InputTogglePickupReleased();// 0x21c9450
	void InputTogglePickupPressed();// 0x21c9430
	bool InputTestPriority3Pressed();// 0x2106880
	bool InputTestPriority2Pressed();// 0x21c9400
	bool InputTestPriority1Released();// 0x2106880
	bool InputTestPriority1Pressed();// 0x2106880
	void InputSwitchToSeatTwoPressed();// 0x21c93e0
	void InputSwitchToSeatThreePressed();// 0x21c93c0
	void InputSwitchToSeatOnePressed();// 0x21c93a0
	void InputSwitchToSeatFourPressed();// 0x21c9380
	void InputSwitchFireModeReleased();// 0x21c9360
	void InputSwitchFireModePressed();// 0x21c9340
	void InputStartRepairVehicleReleased();// 0x21c9320
	void InputSprintLockStart();// 0x21c8e10
	void InputSprintFreeTerminate();// 0x21c9300
	void InputSprintFreeStart();// 0x21c92e0
	void InputSprintFreeReleasedOnPC();// 0x21c92c0
	void InputSprintFreePressedOnPC();// 0x21c92a0
	void InputSkydivingFollowRouletteSelect4();// 0x21c91f0
	void InputSkydivingFollowRouletteSelect3();// 0x21c91d0
	void InputSkydivingFollowRouletteSelect2();// 0x21c91b0
	void InputSkydivingFollowRouletteSelect1();// 0x21c9190
	void InputSkydivingFollowRouletteSelect(int PosInTeam);// 0x21c9210
	void InputShieldUpgradeReleased();// 0x21c9170
	void InputShieldUpgradePressed();// 0x21c9150
	void InputShieldUpgradeCancelReleased();// 0x21c9130
	void InputShieldUpgradeCancelPressed();// 0x21c9110
	void InputRightMouseButtonReleased();// 0x21c8cd0
	void InputRightMouseButtonPressed();// 0x21c90f0
	void InputReviveSelfReleased();// 0x2649560
	void InputReloadReleased();// 0x21c90d0
	void InputReloadPressed();// 0x21c90b0
	void InputRechargeShieldReleased();// 0x21c8a10
	void InputRechargeShieldPressed();// 0x21c9090
	void InputQuickAdsReleased();// 0x21c9070
	void InputQuickAdsPressed();// 0x21c9050
	void InputPSTouchpadButton(float InValueX);// 0x21c8f90
	void InputPickupReleased();// 0x21c9030
	void InputPickupPressed();// 0x21c9010
	void InputMoveRight(float InValueY);// 0x21c8f10
	void InputMovementYReceived(float InValueY);// 0x21c8f10
	void InputMovementXReceived(float InValueX);// 0x21c8e90
	void InputMoveForward(float InValueX);// 0x21c8e90
	void InputMapPressed();// 0x21c8e70
	void InputLeftFireReleased();// 0x21c8e50
	void InputLeftFirePressed();// 0x21c8e30
	void InputKeepSprintPressed();// 0x21c8e10
	void InputJumpReleased();// 0x21c8df0
	void InputJumpPressed();// 0x21c8dd0
	void InputItemActionWheelReleased();// 0x21c8db0
	void InputItemActionWheelPressed();// 0x21c8d90
	void InputInteractPressed();// 0x21c8d70
	void InputInteractAndReloadReleased();// 0x21c8d50
	void InputInteractAndReloadPressed();// 0x21c8d30
	void InputHorizontalJetReleased();// 0x21c8d10
	void InputHorizontalJetPressed();// 0x21c8cf0
	void InputGunsightReleased();// 0x21c8cd0
	void InputGunsightPressed();// 0x21c8cb0
	void InputGetOnVehicleReleased();// 0x21c8c90
	void InputGetOffVehicleReleased();// 0x21c8c70
	void InputFreeLookReleased();// 0x21c8c50
	void InputFreeLookPressed();// 0x21c8c30
	void InputFireReleased();// 0x21c8c10
	void InputFirePressed();// 0x21c8bf0
	void InputEquip2Released();// 0x21c8bd0
	void InputEquip2Pressed();// 0x21c8bb0
	void InputEquip1Released();// 0x21c8b90
	void InputEquip1Pressed();// 0x21c8b70
	void InputEmoteActionWheelReleased();// 0x21c8b50
	void InputEmoteActionWheelPressed();// 0x21c8b30
	void InputEjectReleased();// 0x21c8b10
	void InputEjectPressed();// 0x21c8af0
	void InputDriveVehicleReleased();// 0x21c8ad0
	void InputCrouchReleased();// 0x21c8ab0
	void InputCrouchPressed();// 0x21c8a90
	void InputCancelVehicleAbilityReleased();// 0x21c8a70
	void InputCancelSkydivingFollowingTriggered();// 0x21c8a50
	void InputBuilding();// 0x21c8a30
	void InputBigRechargeShieldReleased();// 0x21c8a10
	void InputBigRechargeShieldPressed();// 0x21c89f0
	void InputBackpackReleased();// 0x21c89d0
	void InputBackpackPressed();// 0x21c89b0
	void InputAltFireReleased();// 0x21c8990
	void InputAltFirePressed();// 0x21c8970
	void InputActiveVehicleSecondAbilityReleased();// 0x21c8950
	void InputActiveVehicleSecondAbilityPressed();// 0x21c8870
	void InputActiveVehicleFirstAbilityReleased();// 0x21c8930
	void InputActiveVehicleFirstAbilityPressed();// 0x21c8830
	void InputActionWheelPreviousPage();// 0x21c8910
	void InputActionWheelNextPage();// 0x21c88f0
	void InputActionWheelExec();// 0x21c88d0
	void InputActionWheelCancel();// 0x21c88b0
	void InputActionSecondaryReleased();// 0x21c8890
	void InputActionSecondaryPressed();// 0x21c8870
	void InputActionPrimaryReleased();// 0x21c8850
	void InputActionPrimaryPressed();// 0x21c8830
	bool IfSolarCharacterIsDriver();// 0x21c8800
	void HighlightDataRpcConnection(FString HighlightDataStr);// 0x2649560
	bool HasSkin(int InSkinID);// 0x21c8760
	void HandleBeginSpectateRequest();// 0x21c8740
	void GyroscopeTilt(Vector Tilt);// 0x21c86b0
	void GyroscopeRotationRate(Vector RotationRate);// 0x21c8620
	SolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull);// 0x21c8580
	Vector2D GetViewportCenter();// 0x21c8540
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x21c84e0
	SolarSpectateInfo* GetSpectateInfo();// 0x21c84b0
	SolarCharacter* GetSpectatedCharacter();// 0x21c8510
	SolarPlayerState* GetSolarViewPlayerState();// 0x21c8480
	SolarPlayerState* GetSolarPlayerState();// 0x21c8440
	SolarCharacter* GetSolarCharacter();// 0x21c8400
	enum GetPlayNetStateInGame();// 0x21c7f60
	Rotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x21c8310
	Vector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x21c8220
	PlayerStatisticsData* GetPlayerStatData();// 0x21c81f0
	FString GetPlayerID();// 0x21c8160
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x2649560
	byte GetMyTeamID();// 0x21c7f20
	byte GetMyPosInTeam();// 0x21c7ef0
	Vector2D GetMyMarkedPointInNavMap();// 0x21c7eb0
	int GetMultiKillNum();// 0x21c7e80
	int GetKillNum();// 0x21c7e20
	int GetKillingSpreesNum();// 0x21c7e50
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x21c7df0
	SolarInputModePolicyComponent* GetInputModePolicyComp();// 0x21c7dd0
	SolarInputModeDataBase GetInputMode(FName Name, out enum OutInputMode, out bool bFound);// 0x21c7ca0
	SolarCameraComponent* GetCurrentCameraComponent();// 0x21c7b10
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x21c7a60
	Rotator GetCharacterViewRotation();// 0x21c7a20
	Rotator GetCameraRotation();// 0x21c79d0
	Vector GetCameraLocation();// 0x21c7980
	SolarCharacter* GetCameraFocusedCharacter();// 0x21c7950
	float GetCameraDefaultFOVAngle();// 0x21c7920
	float GetCameraCurrentFOVAngle();// 0x21c78f0
	SolarCameraComponent* GetActiveCamera();// 0x21c78c0
	void ForceCompleteClientBlendToSpectateTarget();// 0x21c78a0
	void ExcludeDifferentTeam(int TeamID);// 0x21c7620
	void EndOBCurrentBattle();// 0x21c7600
	void DropPassengerNotification();// 0x21c75e0
	void DestroyCharacterCorpse();// 0x21c75c0
	void DebugUpdateTask();// 0x2649560
	void DebugSetPlayerData();// 0x2649560
	void DebugInitTask();// 0x2649560
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x2649560
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x2649560
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x21c74c0
	void ClientStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x21c73f0
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x21c72f0
	void ClientShowDiePage();// 0x21c72d0
	void ClientScreenshotTask(const ScreenshotSetting Setting);// 0x21c7220
	void ClientReviveWillBeDisabledHint(const int Duration);// 0x21c7190
	void ClientReviveBeDisabledHint();// 0x21c7170
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x21c70a0
	void ClientReplacePlayerKillEffect(Actor* InSource, Actor* InTarget);// 0x21c6fd0
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x21c6f30
	void ClientRaiseScreenshotJob(enum ShotMoment);// 0x21c6eb0
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs, bool IsCustomRoom);// 0x21c6cf0
	void ClientPlayerActivityHeatUpdate(FString ActivityHeatFragmentStr);// 0x21c6c50
	void ClientNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter);// 0x21c6b80
	void ClientNotifyCheatedPlayer(const FText OutReason);// 0x21c6ac0
	void ClientNotifyAbnormalPlayer(const FText OutReason);// 0x21c6a00
	void ClientEnableAiPalComponent(int Rate);// 0x21c6970
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x21c68e0
	void ClientCloseUI(FString UIName);// 0x21c6840
	void ClientClearAudioListenerOverride();// 0x21c6820
	void ClientCharacterIsDead();// 0x21c67d0
	void ClientBeginOBCurrentBattleInternal();// 0x21c67b0
	void ClearMarkedPointInNavMapLuaCall();// 0x21c6790
	void ClearMarkedPointInNavMap();// 0x21c6770
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x21c6600
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x21c6600
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x21c6520
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x21c6430
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x21c62c0
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x21c61e0
	bool CanWorldMark();// 0x21c6190
	bool CanSolarCharacterLaunchJetPack();// 0x21c6160
	bool CanSolarCharacterInput();// 0x21c6130
	bool CanSolarCharacterCrouch();// 0x21c6100
	void CancelSkydivingFollow();// 0x21c61c0
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);// 0x21c6070
	void BuildSkydivingFollowOnEnteringTeam();// 0x21c6050
	void BpServerCheckAndUpdateAimbotSlidingWindowPolicyParm(int AimbotSwitch, int WindowSize, int MaxMutation);// 0x2649560
	void BindDelegatesDependGameState();// 0x21c6030
	void BeNotifiedMarkedItemWasPickedUp(const int64 InItemInstanceId);// 0x21c5f80
	void BeginOBCurrentBattle();// 0x21c6010
	void BackToLobby();// 0x21c5f60
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x2649560
	void AntiCheatDataSchedulerUpload(const FString[] DataName, const FString[] DataContent, const FixedAntiCheatData FixedData);// 0x21c5da0
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x21c5cd0

--------------------------------
Class: SCMPlayerRPCComponent.ActorComponent.Object
	void ReceivedLevelLoaded(FString LevelName);// 0x2649560
	void ReceivedCharacter();// 0x2649560
	void ReceivedBeginLevelLoad(FString LevelName);// 0x2649560

--------------------------------
Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xc8, Size: 1]
	TouchHandler TouchHandler;//[Offset: 0x108, Size: 1]
	void SetTouchScaler(float InVal);// 0x2182f30
	void SetNoiseThresholdFactor(float InVal);// 0x2182e90
	void SetMouseScaler(Vector2D InVal);// 0x2182df0
	void SetMinNoiseMultiplier(float InVal);// 0x2182d50
	void SetCurveVerticalFix(Vector2D InVec);// 0x2182cb0
	void SetCurveVerticalFactor(Vector2D InVec);// 0x2182c10
	void SetCurveHorizonFix(Vector2D InVec);// 0x2182b70
	void SetCurveHorizonFactor(Vector2D InVec);// 0x2182ad0
	void OnCacheNeedUpdate();// 0x2182290
	float GetTouchScaler();// 0x2182230
	Vector2D GetTouchOutputScale();// 0x21821f0
	float GetNoiseThresholdFactor();// 0x2182180
	Vector2D GetMouseScaler();// 0x2182140
	float GetMinNoiseMultiplier();// 0x2182100
	Vector2D GetFixedOutput();// 0x2182090
	Vector2D GetDeltaMove();// 0x2182050
	Vector2D GetCurveVerticalFix();// 0x2182010
	Vector2D GetCurveVerticalFactor();// 0x2181fd0
	Vector2D GetCurveHorizonFix();// 0x2181f90
	Vector2D GetCurveHorizonFactor();// 0x2181f50
	Vector2D GetAverageDeltaMove();// 0x2181f10

--------------------------------
Class: SolarPlayerSensitivitys.Object
	void InitPlayerSensitivity();// 0x21dc6c0

--------------------------------
Class: TouchHandler.InputHandler
	CurveFloat* HorizCurve;//[Offset: 0x98, Size: 1]
	CurveFloat* VertCurve;//[Offset: 0xa0, Size: 1]
	CurveFloat* DistHorizCurve;//[Offset: 0xd0, Size: 1]
	CurveFloat* DistVertCurve;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: InputHandler

--------------------------------
Class: AiPalComponent.ActorComponent.Object
	void SetUserID(FString UserId);// 0xc93cd0
	void SetThreshold(float ThresholdPer);// 0xc93c50
	void SetMaxDetectTimes(int DetectGap_ms);// 0xc93bc0
	void SetDetectGap_ms(int DetectGap_ms);// 0xc93b30
	void EndDetect();// 0xc93b10
	void Capture();// 0xc93af0
	void BeginDetect();// 0xc93ad0

--------------------------------
Class: SolarEasyAntiCheatComponent.ActorComponent.Object
	SolarEasyAntiCheatManager* AntiCheatManager;//[Offset: 0xb8, Size: 1]
	Actor* Owner;//[Offset: 0xc0, Size: 1]
	void ServerOnUnRegisterClient();// 0xc45560
	void ServerOnRegisterClient(FString ProductID);// 0x212e960
	void ServerOnReceiveClientNotifyMessage(uint32 DataLenBytes, FString Data);// 0x212e880
	void ClientOnReceiveServerNotifyMessage(uint32 DataLenBytes, FString Data);// 0x212d960
	void ClientOnActionRequired(const int ClientAction, const int ActionReason, FString Details);// 0x212d830

--------------------------------
Class: SolarEasyAntiCheatManager.Object
	bool EnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bEnableAntiCheatLauncherCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	void TestSendDSAction(const int ActionReason, FString ActionDetials);// 0x212ed20
	void SwitchAntiCheatState();// 0xb43660
	void SetEOSOpenIDToken(FString OpenIDToken);// 0x212ea00
	void SendSteamAntiCheatRequest(const int ErrorCode);// 0xb43660
	void ReportAntiCheatBI(const int ErrorCode);// 0xb43660
	bool IsLaunchbyEOSBootstrapper();// 0x212dc00
	bool IsEOSSettingChanged();// 0x212dbd0
	void EasyAntiCheatLogin(FString AppToken);// 0x212db10
	void AntiCheatLauncherCheck();// 0xb43660
	bool AntiCheatEosSettingCheck();// 0xb43660

--------------------------------
Class: SolarInputModePolicyComponent.ActorComponent.Object

--------------------------------
Class: SolarInputActionContext.Object
	InputMappingContext* InputMappingContext;//[Offset: 0x48, Size: 1]
	<Key,InputAction*> KeyChordInputActionDict;//[Offset: 0x50, Size: 1]
	<FName,SolarInputActionEntry> ActionInputActionDict;//[Offset: 0xa0, Size: 1]
	<FName,SolarInputActionEntry> ChordActionInputActionDict;//[Offset: 0xf0, Size: 1]
	InputAction* NullInputAction;//[Offset: 0x140, Size: 1]

--------------------------------
Class: InputMappingContext.DataAsset.Object
	EnhancedActionKeyMapping[] Mappings;//[Offset: 0x30, Size: 1]
	FText ContextDescription;//[Offset: 0x40, Size: 1]
	void UnmapKey(const InputAction* Action, Key Key);// 0xc91730
	void UnmapAll();// 0xc91710
	void UnmapAction(const InputAction* Action);// 0xc91680
	EnhancedActionKeyMapping MapKey(const InputAction* Action, Key ToKey);// 0xc90bd0

--------------------------------
Class: InputAction.DataAsset.Object
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bTriggerWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bReserveAllMappings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	enum ValueType;//[Offset: 0x33, Size: 1]
	InputTrigger*[] Triggers;//[Offset: 0x38, Size: 1]
	InputModifier*[] Modifiers;//[Offset: 0x48, Size: 1]

--------------------------------
Class: InputTrigger.Object
	float ActuationThreshold;//[Offset: 0x28, Size: 1]
	InputActionValue LastValue;//[Offset: 0x2c, Size: 1]
	enum UpdateState(const EnhancedPlayerInput* PlayerInput, InputActionValue ModifiedValue, float DeltaTime);// 0xc91860
	bool IsActuated(out const InputActionValue ForValue);// 0xc90970
	enum GetTriggerType();// 0x8f2200

--------------------------------
Class: EnhancedPlayerInput.PlayerInput.Object
	<InputMappingContext*,int> AppliedInputContexts;//[Offset: 0x3a8, Size: 1]
	EnhancedActionKeyMapping[] EnhancedActionMappings;//[Offset: 0x3f8, Size: 1]
	<InputAction*,InputActionInstance> ActionInstanceData;//[Offset: 0x458, Size: 1]

--------------------------------
Class: EnhancedActionKeyMapping
	InputAction* Action;//[Offset: 0x0, Size: 1]
	Key Key;//[Offset: 0x8, Size: 1]
	bool bShouldBeIgnored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	InputTrigger*[] Triggers;//[Offset: 0x28, Size: 1]
	InputModifier*[] Modifiers;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InputModifier.Object
	InputActionValue ModifyRaw(const EnhancedPlayerInput* PlayerInput, InputActionValue CurrentValue, float DeltaTime);// 0xc90d40
	LinearColor GetVisualizationColor(InputActionValue SampleValue, InputActionValue FinalValue);// 0xc907a0
	enum GetExecutionPhase();// 0xc90770

--------------------------------
Class: InputActionValue

--------------------------------
Class: InputActionInstance
	InputAction* SourceAction;//[Offset: 0x0, Size: 1]
	InputTrigger*[] Triggers;//[Offset: 0x10, Size: 1]
	InputModifier*[] Modifiers;//[Offset: 0x20, Size: 1]
	InputModifier*[] PerInputModifiers;//[Offset: 0x30, Size: 1]
	InputModifier*[] FinalValueModifiers;//[Offset: 0x40, Size: 1]
	float ElapsedProcessedTime;//[Offset: 0x60, Size: 1]
	float ElapsedTriggeredTime;//[Offset: 0x64, Size: 1]
	enum TriggerEvent;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarInputActionEntry
	InputAction* InputAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Actor* CurrentFollowActor;//[Offset: 0x360, Size: 1]
	PlayerController* CurrentPlayerController;//[Offset: 0x368, Size: 1]
	Vector2D MarkIconAlignment;//[Offset: 0x370, Size: 1]
	Vector2D MarkPanelSize;//[Offset: 0x378, Size: 1]
	float MaxVisibleDis;//[Offset: 0x398, Size: 1]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x1ff9370
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x1ff7340
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x1ff7270
	Vector GetFollowActorLocation();// 0x1ff7190
	float GetDistance(bool bIncludeZ);// 0x1ff70f0
	Actor* GetCurrentFollowActor();// 0x1ff70c0

--------------------------------
Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x260, Size: 1]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	enum WidgetScope;//[Offset: 0x262, Size: 1]
	enum CaptureInput;//[Offset: 0x263, Size: 1]
	bool bHideCursorDuringCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	int MyRoot;//[Offset: 0x268, Size: 1]
	FString widgetkey;//[Offset: 0x270, Size: 1]
	bool bReceiveKeyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bReceiveShowMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	enum ShowScope;//[Offset: 0x282, Size: 1]
	bool bShowTransBlackAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x288, Size: 1]
	WidgetInputManager* InputManager;//[Offset: 0x290, Size: 1]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x298, Size: 1]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2e8, Size: 1]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x308, Size: 1]
	bool WidgetTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	SolarInputActionContext* InputActionContext;//[Offset: 0x320, Size: 1]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x338, Size: 1]
	void StopListeningForInputHandle(const int Handle);// 0x22c6f80
	void StopListeningForInputActionEx(FName ActionName, byte EventType);// 0x22c6eb0
	void ShowSelfPanelUI();// 0x22c6e90
	void ShowMouseCursor();// 0x22c6e70
	void SetZOrder(int ZOrder);// 0x22c6de0
	void SetWidgetVisible(Widget* Widget, bool bVisible, bool bHitTest);// 0x22c6cd0
	void SetWidgetTickEnabled(bool bEnabled);// 0x22c6c40
	void SetWidgetKey(FString InWidgetKey);// 0x22c6ba0
	void SetInputActionIsEnabled(FName ActionName, byte EventType, bool bInIsEnabled);// 0x22c6a80
	void SetBlockInputForOneTick();// 0x22c6a60
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void ReceiveShow();// 0x2649560
	void ReceiveHide();// 0x2649560
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x22c66a0
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x22c64d0
	void OnTouchManagerInitialized();// 0x2649560
	void OnSynchronizeProperties();// 0x2649560
	void OnSolarUIOpened();// 0x825030
	void OnSolarUIClosed();// 0x1564bc0
	void OnShow();// 0x1564860
	void OnHide();// 0x1564880
	void OnExclusivelyAnimationFinished();// 0x22c6450
	void OnDeinitialize();// 0x2649560
	void OnBackKey(enum BackKeyType);// 0x22c5fc0
	int ListenForInputActionEx(FName ActionName, byte EventType, bool bInIsEnabled, delegate Callback);// 0x22c5e20
	bool IsWidgetTickEnabled();// 0x2207080
	static bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x22c5d90
	bool IsPlatformDesktop();// 0x22c5d60
	void HideMouseCursor();// 0x22c5bb0
	static FString GetWidgetKeyByPanelName(enum PanelName);// 0x22c5ae0
	FString GetWidgetKey();// 0x22c5a60
	Vector2D[] GetTouchedLocation();// 0x22c59e0
	enum GetShowScope();// 0x22c59b0
	Vector2D[] GetPointerLocation();// 0x22c5900
	SolarPlayerState* GetOwningSolarPlayerState();// 0x22c58d0
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x22c58a0
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x22c5730
	SolarUserWidget*[] GetAllSolarUserWidgetChilds();// 0x22c56b0
	Widget* FindWidgetFromName(out const FName Name);// 0x22c5610
	void ExecuteSolarUIShow();// 0x22c55f0
	void ExecuteSolarUIOpened();// 0x22c55d0
	void ExecuteSolarUIHide();// 0x22c55b0
	void ExecuteSolarUIClosed();// 0x22c5590
	void ExecuteSolarUIClean();// 0x22c5570
	void ExecuteBindCustomControl();// 0x22c5550
	void CloseSelfPanelUI();// 0x22c5530
	SolarUserWidget*[] CacheAllSolarUserWidgetChilds();// 0x22c54b0

--------------------------------
Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 1]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 1]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 1]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 1]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 1]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 1]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 1]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 1]
	Widget* K2_GetManagedWidget();// 0x233df10
	static bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x233dc70
	static bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x233dab0

--------------------------------
Class: SolarPlayerState.PlayerState.Info.Actor.Object
	MulticastInlineDelegateProperty OnTeammatePlayerStateRepDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedGoldsDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnOBPlayerRepDelegate;//[Size: 1]
	int Gold;//[Offset: 0x380, Size: 1]
	int[] CostedGolds;//[Offset: 0x388, Size: 1]
	int[] ReceivedGolds;//[Offset: 0x398, Size: 1]
	int CharacterId;//[Offset: 0x3a8, Size: 1]
	int SkinId;//[Offset: 0x3ac, Size: 1]
	FString ClanId;//[Offset: 0x3b0, Size: 1]
	FString ClanName;//[Offset: 0x3c0, Size: 1]
	FString ClanShortName;//[Offset: 0x3d0, Size: 1]
	int BagId;//[Offset: 0x3e0, Size: 1]
	int CapsuleID;//[Offset: 0x3e4, Size: 1]
	FString SolarPlayerID;//[Offset: 0x3e8, Size: 1]
	FString NickName;//[Offset: 0x3f8, Size: 1]
	uint32 BattleVoiceId;//[Offset: 0x408, Size: 1]
	int64 RTCType;//[Offset: 0x410, Size: 1]
	uint64 UserId;//[Offset: 0x418, Size: 1]
	byte PosInTeam;//[Offset: 0x420, Size: 1]
	FString Side;//[Offset: 0x428, Size: 1]
	FString Job;//[Offset: 0x438, Size: 1]
	int CharacterLevel;//[Offset: 0x448, Size: 1]
	int AvatarID;//[Offset: 0x44c, Size: 1]
	int AvatarFrameID;//[Offset: 0x450, Size: 1]
	int Gender;//[Offset: 0x454, Size: 1]
	int AccountLevel;//[Offset: 0x458, Size: 1]
	int FriendNum;//[Offset: 0x45c, Size: 1]
	int RoleID;//[Offset: 0x460, Size: 1]
	MedalInfo[] Medals;//[Offset: 0x468, Size: 1]
	BattleCharacterData[] AllCharacterData;//[Offset: 0x478, Size: 1]
	BattleCharacterData CurUsedCharacterData;//[Offset: 0x488, Size: 1]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x4d0, Size: 1]
	LastBattleInfo LastBattleInfo;//[Offset: 0x4e0, Size: 1]
	int RoleUltimateSkillCDState;//[Offset: 0x4fc, Size: 1]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x500, Size: 1]
	SettlementReward[] SettlementRewards;//[Offset: 0x510, Size: 1]
	SettlementCrateReward[] CrateRewards;//[Offset: 0x520, Size: 1]
	uint32 PlayerNumber;//[Offset: 0x530, Size: 1]
	<int,int> VehicleSkinData;//[Offset: 0x538, Size: 1]
	float CurrentHealth;//[Offset: 0x588, Size: 1]
	float MaxHealth;//[Offset: 0x58c, Size: 1]
	ShieldInfo CurShieldInfo;//[Offset: 0x590, Size: 1]
	byte ReviveItemNum;//[Offset: 0x598, Size: 1]
	byte ReviveCountByItem;//[Offset: 0x599, Size: 1]
	int TalentID;//[Offset: 0x59c, Size: 1]
	int LikeValue;//[Offset: 0x5a0, Size: 1]
	int ReceivedGiftNum;//[Offset: 0x5a4, Size: 1]
	int SpectatorNum;//[Offset: 0x5a8, Size: 1]
	enum TalentState;//[Offset: 0x5ac, Size: 1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ae, Size: 1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x5b0, Size: 1]
	Vector SelfLastVehicleLocation;//[Offset: 0x5b8, Size: 1]
	Vector TeamLastVehicleLocation;//[Offset: 0x5c4, Size: 1]
	byte CurrentPlayerStateInGame;//[Offset: 0x5d0, Size: 1]
	byte CurrentCharacterStateInGame;//[Offset: 0x5d1, Size: 1]
	int AccountFlag;//[Offset: 0x628, Size: 1]
	int ClanFlag;//[Offset: 0x62c, Size: 1]
	int[] EquippedEmotes;//[Offset: 0x630, Size: 1]
	FString OS;//[Offset: 0x640, Size: 1]
	FString OsType;//[Offset: 0x650, Size: 1]
	FString DeviceModel;//[Offset: 0x660, Size: 1]
	enum InputType;//[Offset: 0x670, Size: 1]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	float HangUpTime;//[Offset: 0x67c, Size: 1]
	float OfflineBattleTime;//[Offset: 0x680, Size: 1]
	int Elo;//[Offset: 0x684, Size: 1]
	int RankLevel;//[Offset: 0x688, Size: 1]
	int RankLevel2;//[Offset: 0x68c, Size: 1]
	int LegendRank;//[Offset: 0x690, Size: 1]
	byte VipType;//[Offset: 0x694, Size: 1]
	int WarmupTag;//[Offset: 0x698, Size: 1]
	float Frustration;//[Offset: 0x69c, Size: 1]
	bool bMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	byte LobbyTeamMemberNum;//[Offset: 0x6a1, Size: 1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	int RepliableMessageID;//[Offset: 0x6bc, Size: 1]
	float RepliableMessageStartTime;//[Offset: 0x6c0, Size: 1]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	int WarmId;//[Offset: 0x6d4, Size: 1]
	int WarmType;//[Offset: 0x6d8, Size: 1]
	bool AllowOtherJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	float WaitTimeBeforeEnterSpectateMode;//[Offset: 0x6e0, Size: 1]
	MulticastInlineDelegateProperty OnSpectateInfoRep;//[Size: 1]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x6f8, Size: 1]
	SolarPlayerState* RevengePlayerState;//[Offset: 0x700, Size: 1]
	KillEnemySnapshot[] KilledEnemysRecord;//[Offset: 0x708, Size: 1]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x718, Size: 1]
	enum NetStateInGame;//[Offset: 0x720, Size: 1]
	bool bHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 1]
	bool bHasUpdateByServerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	SolarReplayHighlightComponent* ReplayHightlightComp;//[Offset: 0x738, Size: 1]
	int KillNum;//[Offset: 0x740, Size: 1]
	int AssistNum;//[Offset: 0x760, Size: 1]
	Vector DeathPos;//[Offset: 0x780, Size: 1]
	int ReconnectNum;//[Offset: 0x78c, Size: 1]
	float MultiKillDurationTime;//[Offset: 0x7a0, Size: 1]
	float TotalReceivedDamage;//[Offset: 0x7b8, Size: 1]
	float HealSelf;//[Offset: 0x7bc, Size: 1]
	float ReceivedHeal;//[Offset: 0x7c0, Size: 1]
	float LifeTime;//[Offset: 0x7c4, Size: 1]
	SettlementTempData SettleSyncData;//[Offset: 0x7c8, Size: 1]
	int PlayerRank;//[Offset: 0x8a0, Size: 1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	bool bMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a5, Size: 1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a7, Size: 1]
	float MvpScore;//[Offset: 0x8a8, Size: 1]
	float KDA;//[Offset: 0x8ac, Size: 1]
	int ResurrectionTimes;//[Offset: 0x8b0, Size: 1]
	int CharacterExp;//[Offset: 0x8b4, Size: 1]
	int[] CharacterExpReason;//[Offset: 0x8b8, Size: 1]
	int GainCombatScore;//[Offset: 0x8c8, Size: 1]
	int AccountExp;//[Offset: 0x8cc, Size: 1]
	<int,int> WeaponExps;//[Offset: 0x8d0, Size: 1]
	int Zomborg;//[Offset: 0x920, Size: 1]
	int ZomborgExtra;//[Offset: 0x924, Size: 1]
	enum[] SettlePunishTypes;//[Offset: 0x928, Size: 1]
	int[] StrategyConditionIDs;//[Offset: 0x938, Size: 1]
	int SettlementDisplayStrategyID;//[Offset: 0x948, Size: 1]
	enum PlayerOutPath;//[Offset: 0x94f, Size: 1]
	int[] UsedCharacterIDs;//[Offset: 0x950, Size: 1]
	bool bPresettling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 1]
	bool bIsPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x962, Size: 1]
	int InteractValue;//[Offset: 0x964, Size: 1]
	float LastInteractTime;//[Offset: 0x968, Size: 1]
	float DamageFactor;//[Offset: 0x96c, Size: 1]
	float VehicleProbability;//[Offset: 0x970, Size: 1]
	bool bIsTimeoutPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x974, Size: 1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x975, Size: 1]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0x998, Size: 1]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0x9f0, Size: 1]
	Vector PlayerLocation;//[Offset: 0xa00, Size: 1]
	SolarPlayerState* ExposeTo;//[Offset: 0xa10, Size: 1]
	int SkydivingLeaderPosInTeam;//[Offset: 0xa20, Size: 1]
	byte SkydivingFollowFormationPos;//[Offset: 0xa24, Size: 1]
	enum SkydivingState;//[Offset: 0xa2c, Size: 1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0xa30, Size: 1]
	int[] PreCompletedAchievementIDs;//[Offset: 0xa40, Size: 1]
	int PlayerLevel;//[Offset: 0xa50, Size: 1]
	int PlayerExperience;//[Offset: 0xa54, Size: 1]
	int HistoryShieldUpgradeItemNum;//[Offset: 0xa58, Size: 1]
	SpatializeInfoTrack* TrackInfo;//[Offset: 0xa78, Size: 1]
	float TrackMaxRevealDistance;//[Offset: 0xa80, Size: 1]
	enum AppLifetimeState;//[Offset: 0xa84, Size: 1]
	int TailFlameId;//[Offset: 0xa88, Size: 1]
	SolarTeamInfo* Team;//[Offset: 0xa90, Size: 1]
	SolarBattleWeaponData[] BattleWeaponDataArray;//[Offset: 0xaa8, Size: 1]
	HeroPickInfo* HeroPickInfo;//[Offset: 0xab8, Size: 1]
	bool WillFollowMovementOfSkydivingLeader();// 0x21dfec0
	void UpgradePlayerLevel(int LevelAdded);// 0x21dfe30
	void UpdateCurUseCharacterData(int InCharacterId);// 0x21dfda0
	void UpdateCurUseCharacterAndSkinData(int InCharacterId, int InSkinID);// 0x21dfcd0
	void UpdateAICharacterDataList(out const BattleCharacterData InCharacterData);// 0x21dfc20
	bool TryGetVehicleDamageInfo(out int[] OutVehicleDamageInfo);// 0x21dfb60
	bool TryGetSafeAreaInfo(out int[] OutSafeZoneInfo);// 0x21dfaa0
	bool TryGetPlayerBackpackItems(out int[] OutWeaponIds);// 0x21df9e0
	void SyncMarkedWorldData(const WorldMarkData InMarkData);// 0x21df760
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x21df910
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x21df840
	void StatWeaponLevelAndTime();// 0x21df740
	void StatWeaponBattleDetailInfo();// 0x21df720
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x21df690
	void StatVehicleDriveType(int DriveType);// 0x21df600
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x21df500
	void SetRoleUltimateSkillCDState(const int NewState);// 0x21df120
	void SetRoleID(const int InRoleID);// 0x21df090
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x21df010
	void SetIsTimeoutPlayer(const bool InValue);// 0x21def80
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x21deef0
	void SetDeathboxSkinId(out const int[] InOwnedDeathboxSkinIds);// 0x21dedc0
	void SetAllCharactersDeathboxSkinId(out const <int,int> InCharactersDeathboxSkinId);// 0x21dec40
	void ServerUpdateInputType(enum NowInputType);// 0x21debc0
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x21deb30
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x21deaa0
	void ServerPlayerSelectSkin(int InCharacterId, int InSkinID);// 0x21de9d0
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x21de940
	void ServerChangeRoleID(const int InRoleID);// 0x21de8b0
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x21de760
	void RequestServerUpdateInputType(enum NowInputType);// 0x21dd370
	void ReceiveTeamIdReplicated();// 0x2649560
	void ReceiveTalentStateSet(enum InState);// 0x2649560
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x21de690
	void ReceiveSideReplicatedAfter();// 0x2649560
	void ReceivePostInitializeComponents();// 0x2649560
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer, const bool NeedSyncToDS);// 0x21de580
	void ReceiveClientInitialize(Controller* C);// 0x2649560
	void PlayerSelectSkin(int InCharacterId, int InSkinID);// 0x21de3e0
	void PlayerSelectHero(int InCharacterId, int InSkinID, bool bConfirm);// 0x21de2d0
	bool PlayerIsResurrecting();// 0x2649560
	bool PlayerHasLogin();// 0x21de2b0
	bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving);// 0x21de1d0
	bool PlayerCanRebirthByBuyResurrection();// 0x21de1a0
	bool PlayerCanRebirthByAllMeans();// 0x21de170
	bool PlayerCanRebirthBlueprint();// 0x21de140
	bool PlayerCanRebirth();// 0x2095ba0
	bool PlayerCanBuyRescue();// 0x21de110
	void OnUpdatedPlayerStateLoginData();// 0x21de0f0
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x2649560
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x2649560
	void OnTeamInfoChanged__DelegateSignature(SolarTeamInfo* PreviousTeam, SolarTeamInfo* NowTeam);// 0x2649560
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x2649560
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x21ddf90
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x21ddec0
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnRequestStartResurrect(DeathTreasureBox* InDeatbox);// 0x2649560
	void OnRequestCancelResurrect(DeathTreasureBox* InDeatbox);// 0x2649560
	void OnReplayRecordingStarted();// 0x21dde20
	void OnRep_UserId();// 0x2649560
	void OnRep_TotalReceivedDamage();// 0x21dde00
	void OnRep_TeammatesState();// 0x2649560
	void OnRep_TeamLastVehicleLocation();// 0x15722d0
	void OnRep_TeamChanged(SolarTeamInfo* PreviousTeam);// 0x21ddd70
	void OnRep_TalentID();// 0x21ddd50
	void OnRep_TailFlameId();// 0x21ddd30
	void OnRep_SpectateInfo();// 0x21ddd10
	void OnRep_SkydivingState();// 0x21ddcf0
	void OnRep_SkydivingLeaderPosInTeam(int OldValue);// 0x21ddc60
	void OnRep_SkinId();// 0x1572110
	void OnRep_Side(FString OldSide);// 0x21ddbc0
	void OnRep_SelfLastVehicleLocation();// 0x15720f0
	void OnRep_RTCType();// 0x2649560
	void OnRep_RoleID();// 0x2649560
	void OnRep_ReviveItemNum();// 0x1572730
	void OnRep_ReviveCountByItem();// 0x1572030
	void OnRep_RepliableMsg();// 0x21ddba0
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x21ddb00
	void OnRep_PlayerLocation();// 0x15726b0
	void OnRep_PlayerLevel();// 0x1571e90
	void OnRep_PlayerExp();// 0x1571ff0
	void OnRep_NickName(FString OldNickName);// 0x21dda60
	void OnRep_NetStateInGame();// 0x1571fb0
	void OnRep_MaxHealth();// 0x1572bb0
	void OnRep_MarkedPointInNavMap();// 0x1572390
	void OnRep_KillNum();// 0x21dda40
	void OnRep_Job();// 0x8f2720
	void OnRep_IsOBPlayer();// 0x21dda20
	void OnRep_InputType();// 0x21dda00
	void OnRep_HeroPickInfo();// 0x21dd9e0
	void OnRep_HasSettled();// 0x21dd9c0
	void OnRep_Gold();// 0x21dd9a0
	void OnRep_ExposeLocationArray();// 0x1572970
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x21dd7c0
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x21dd900
	void OnRep_CurrentHealth();// 0x15720d0
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x21dd860
	void OnRep_ClanId();// 0x1572310
	void OnRep_ClanFlag();// 0x21dd7a0
	void OnRep_CharacterId();// 0x1572570
	void OnRep_BattleVoiceId();// 0x2649560
	void OnRep_BagId();// 0x21dd780
	void OnRep_AssistNum();// 0x21dd760
	void OnRep_AccountFlag();// 0x21dd740
	void OnRefreshReviveInfo();// 0x21dd720
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x2649560
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x2649560
	void OnPlayerUpdateStatData(enum InType);// 0x21dd6a0
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x2649560
	void OnPlayerChangedGolds(enum ChangedGoldType, int CostGoldNum, enum CostResult);// 0x21dd590
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x2649560
	void OnOtherPlayerStopSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x21dd4c0
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x21dd3f0
	void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer);// 0x2649560
	void OnInputTypeChanged(enum NowInputType);// 0x21dd370
	void OnDamageChanged__DelegateSignature(float Damage);// 0x2649560
	void OnClientSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x21dd210
	void OnCancelResurrectProgress(const int InTextId);// 0x21dd180
	void NotifyUpdateTeamMateLevelUI();// 0x2649560
	void NotifyAddExperience(int ExpAdded);// 0x21dd0f0
	void NewMarkedWorldDataInClient(const int InPosInTeam, const WorldMarkData InMarkData);// 0x21dcfb0
	bool NeedPerformSpectateInfoOnSimulate();// 0x21dcf80
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x2649560
	void LeaveTeam();// 0x21dcf60
	void JoinTeamByPolicies(enum[] JoinPolicies);// 0x21dce70
	void JoinTeamByName(FString InTeamName);// 0x21dcdd0
	void JoinTeamByID(const byte InTeamId);// 0x21dcd50
	void JoinTeam(SolarTeamInfo* InTeam);// 0x21dccc0
	bool IsWaitingLogin();// 0x21dcc90
	bool IsUsingClanForFlag();// 0x21dcc60
	bool IsUnfollowShortcutEnabled();// 0x21dcc30
	bool IsTimeOutPlayer();// 0x21dcc10
	bool IsTeammateWithLocalOrSpecTargetPlayer();// 0x21dcbe0
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x21dcb40
	bool IsSpectatingOtherPlayer();// 0x21dcb00
	bool IsSkydivingLeader();// 0x21dcad0
	bool IsSkydivingCompleted();// 0x21dcaa0
	bool IsSkydiving();// 0x21dca70
	bool IsSameTeamWithLocalPlayer();// 0x21dca40
	bool IsReconnecting();// 0x21dca10
	bool IsPreStartSkydiving();// 0x21dc9e0
	bool IsPlayerWaitingForTeammatesHelp();// 0x2649560
	bool IsPlayerTeam();// 0x21dc9b0
	bool IsPlayerOnline();// 0x21dc980
	bool IsPlayerOffline();// 0x21dc950
	bool IsPlayer();// 0x2095ea0
	bool IsOutBySelf();// 0x21dc920
	bool IsOfflinePlayer();// 0x21dc8f0
	bool IsOBPlayer();// 0x21dc8d0
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x21dc830
	bool IsMVP();// 0x21dc7d0
	bool IsMaxLevelInGame();// 0x21dc800
	bool IsLocalPlayerCameraFocusingMe();// 0x21dc7a0
	bool IsKickOutByServer();// 0x21dc770
	bool IsBuyingResurrection();// 0x2649560
	bool IsBeingSpectated();// 0x21dc740
	bool IsAIPlayer();// 0x21dc710
	bool IsACheater();// 0x21dc6e0
	void InitInputType();// 0x21dc6a0
	void IncreaseReviveCount();// 0x15719b0
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x21dc5f0
	bool HasSkydivingLeader();// 0x21dc5c0
	bool HasSettled();// 0x21dc5a0
	bool HasCheatSelf();// 0x21dc570
	int GetWeaponSettlmentExp(int weaponid);// 0x2649560
	int GetVehicleSkinID(int VehicleID);// 0x21dc4d0
	FString GetUserID();// 0x21dc440
	int[] GetUsableTailFlameIds();// 0x21dc3c0
	void GetUsableSkinsForCharacter(const int InCharacterId, out int[] Result, out bool bCharacterUsable);// 0x21dc290
	int[] GetUsableJetpackIds();// 0x21dc210
	float GetTotalReceivedDamage();// 0x21dc1f0
	float GetTotalCausedDamage();// 0x21dc1b0
	byte GetTeamRank();// 0x21dbf40
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x21dc0b0
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x21dc010
	int GetTeammateNum(bool bIncludeSelf);// 0x21dbf70
	byte GetTeamID();// 0x21dbf10
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x21dbee0
	SolarSpectateInfo* GetSpectateTargetSpectateInfo();// 0x21dbea0
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x21dbe60
	SolarCharacter* GetSpectateTargetCharacter();// 0x21dbe10
	SolarSpectateInfo* GetSpectateInfo();// 0x21dbdf0
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x21dbdc0
	SolarPlayerController* GetSolarPlayerController();// 0x21dbd90
	SolarCharacter* GetSolarCharacter();// 0x21dbd60
	SolarBotAIController* GetSolarBotAIController();// 0x21dbd30
	int GetRankScore();// 0x21dbd10
	int GetRankLevelID();// 0x21dbcf0
	SolarCharacter* GetPossessedCharacter();// 0x21dbcc0
	PlayerStatisticsData* GetPlayerStatData();// 0x21dbc90
	enum GetPlayerNetState();// 0x21dbc70
	FString GetPlayerNameWithoutUID();// 0x21dbbf0
	MedalInfo[] GetMedalInfo();// 0x21dbb70
	int GetMaxShieldMatCountToDeathbox();// 0x21dbb40
	SolarPlayerState* GetLocalPlayerState();// 0x21dbb10
	SolarPlayerState* GetLocalOrSpecTargetPlayerState();// 0x21dbae0
	SolarCharacter* GetLocalOrSpecTargetCharacter();// 0x21dbab0
	SolarCharacter* GetLocalCharacter();// 0x21dba80
	int GetLegendRank();// 0x21dba60
	SolarPlayerState* GetKillerPlayerState();// 0x21dba40
	bool GetIsPlayerBattleEnd();// 0x21dba10
	float GetExpSettleModePunishRatio();// 0x2649560
	int GetExpItemCount(const int InLevelGap);// 0x21db970
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x21db810
	int GetDriveVehicleID();// 0x21db650
	Vector GetDeathBoxLocation();// 0x2649560
	float GetCurrentTalentCDDuration();// 0x21db620
	float GetCurrentTalentActiveDuration();// 0x21db5f0
	void GetCurrentSkinForCharacter(const int InCharacterId, out bool bCharacterUsable, out int OutSkinId);// 0x21db4d0
	Vector GetCharacterLocation();// 0x21db490
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x2649560
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x2649560
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x21db210
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x21db140
	void ClientImmediatelyTeammatesSkinID(const SolarPlayerState*[] InTeammates, const int[] InSkinID);// 0x21db040
	void ClearTeammatesMark();// 0x15712f0
	bool CheckIfTeamLastVehicleLocationValid();// 0x21db010
	bool CheckIfTeamIdValid();// 0x21dafe0
	bool CheckIfSelfLastVehicleLocationValid();// 0x21dafb0
	bool CheckIfPosInTeamValid();// 0x21daf80
	bool CheckIfMarkedPointInNavMapValid();// 0x21daf50
	bool CheckIfInactive();// 0x21daf20
	bool CheckIfDataValid();// 0x21daef0
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x21dae60
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x21dadd0
	bool CheckIfBattleVoiceIdValid();// 0x21dada0
	bool CheckGoldIsEnough(const int InCostedGold);// 0x21dad00
	void ChangeTailFlameId(int InTailFlameId);// 0x21dac70
	void ChangeBagById(int InBagId);// 0x21dabe0
	bool CanReviveItemPutInDeathBox();// 0x2106880
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x21daab0
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x21daa10
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x21da970
	int CalculateZomborg();// 0x2649560
	float CalculateCharacterExp();// 0x2649560
	float CalculateAccountExp();// 0x2649560
	void AssignPosInTeam();// 0x21da950
	void AddMarkedWorldData(const int InPosInTeam, out const WorldMarkData InMarkData);// 0x21da810
	void AddExperience(int InExp, enum InType);// 0x21da740

--------------------------------
Class: MedalInfo
	int MedalID;//[Offset: 0x0, Size: 1]
	int MedalType;//[Offset: 0x4, Size: 1]
	int MedalPos;//[Offset: 0x8, Size: 1]
	int MedalLv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: BattleCharacterData
	int CharacterId;//[Offset: 0x0, Size: 1]
	int SkinId;//[Offset: 0x4, Size: 1]
	int CharacterLevel;//[Offset: 0x8, Size: 1]
	int TalentID;//[Offset: 0xc, Size: 1]
	int UseTimes;//[Offset: 0x10, Size: 1]
	int CardPose;//[Offset: 0x14, Size: 1]
	int Cardbackground;//[Offset: 0x18, Size: 1]
	int CharacterExp;//[Offset: 0x1c, Size: 1]
	int Title;//[Offset: 0x20, Size: 1]
	int64 Expired;//[Offset: 0x28, Size: 1]
	int CombatCore;//[Offset: 0x30, Size: 1]
	int BagId;//[Offset: 0x34, Size: 1]
	int TailFlameId;//[Offset: 0x38, Size: 1]
	int CapsuleActorId;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: WorldMarkData
	Vector WorldPos;//[Offset: 0x0, Size: 1]
	Vector2D ScreenCoordinate;//[Offset: 0xc, Size: 1]
	enum Type;//[Offset: 0x14, Size: 1]
	int ItemID;//[Offset: 0x18, Size: 1]
	int64 ItemInstanceId;//[Offset: 0x20, Size: 1]
	int NameLocID;//[Offset: 0x28, Size: 1]
	FString IconImg;//[Offset: 0x30, Size: 1]
	int WeaponLevel;//[Offset: 0x40, Size: 1]
	enum InteractableType;//[Offset: 0x44, Size: 1]
	int OuterBoxThisID;//[Offset: 0x48, Size: 1]
	float MarkTimeStamp;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: SolarTeamInfo.Info.Actor.Object
	byte TeamID;//[Offset: 0x240, Size: 1]
	byte TeamRank;//[Offset: 0x241, Size: 1]
	byte KillCount;//[Offset: 0x242, Size: 1]
	byte MemberLimit;//[Offset: 0x243, Size: 1]
	FText TeamName;//[Offset: 0x248, Size: 1]
	byte MatchCount;//[Offset: 0x260, Size: 1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 1]
	delegate OnJoinTeam;//[Offset: 0x262, Size: 1]
	delegate OnLeaveTeam;//[Offset: 0x263, Size: 1]
	SolarPlayerState*[] BotMembers;//[Offset: 0x268, Size: 1]
	SolarPlayerState*[] PlayerMembers;//[Offset: 0x278, Size: 1]
	SolarPlayerState*[] TeamMembers;//[Offset: 0x288, Size: 1]
	SolarTeamInfoComponent* TeamInfoDetails;//[Offset: 0x2e8, Size: 1]
	void Settle(byte Rank);// 0x22b4ea0
	void RemoveFromTeam(SolarPlayerState* PS);// 0x2132e80
	void ReceivedTeamID();// 0x1571170
	void ReceivedKillCount();// 0x7debe0
	void ReceivedHasSettled();// 0x7debc0
	void RearrangeMembersPos();// 0x22b4e80
	void OnPlayerStateEndPlay(Actor* Actor, byte EndPlayReason);// 0x22b4b30
	bool IsAPlayerTeam();// 0x22b4a10
	bool IsAOnlyPlayerTeam();// 0x22b49e0
	bool IsAOnlyBotTeam();// 0x22b49b0
	bool IsA(enum TeamType);// 0x22b4920
	void InitFromGameModeConfig();// 0x15714b0
	bool HasBeenEliminated();// 0x22b48f0
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x22b4850
	int GetSize();// 0x22b4830
	void GetSCMPlayerStateTeamMembers(out SCMPlayerState*[] OutTeamMembers);// 0x22b4780
	int GetAliveTeammateNum();// 0x22b4620
	void AddToTeam(SolarPlayerState* PS);// 0x22b4590

--------------------------------
Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0xad8, Size: 1]
	enum PlayerOutType;//[Offset: 0xad9, Size: 1]
	enum PlayerType;//[Offset: 0xada, Size: 1]
	enum PlayerGameRole;//[Offset: 0xadb, Size: 1]
	MulticastInlineDelegateProperty OnSideChange;//[Size: 1]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0xb00, Size: 1]
	float ReviveStartTime;//[Offset: 0xb20, Size: 1]
	SolarPlayerState* RevivingTeammatePS;//[Offset: 0xb28, Size: 1]
	SolarTaskComponent* TaskSystem;//[Offset: 0xb40, Size: 1]
	void UpdateTaskInfo(out const TaskUpdateInfo InTaskInfo);// 0x209bdc0
	void UpDateDataManager(const SCMReplicateHostData[] InReplicateData, bool bInit);// 0x209bc90
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x209bbc0
	void RequestStartGame();// 0x15727f0
	void RequestSetWeaponTypeAvailableLuaCall(enum WeaponUIType, bool bIsAvailable);// 0x209baf0
	void RequestSetWeaponTypeAvailable(enum WeaponUIType, bool bIsAvailable);// 0x209ba10
	void RequestSetWeaponAvailableLuaCall(int weaponid, bool bIsAvailable);// 0x209b940
	void RequestSetWeaponAvailable(int weaponid, bool bIsAvailable);// 0x209b870
	void RequestSetVehicleTypeAvailableLuaCall(int VehicleTypeID, bool bIsAvailable);// 0x209b7a0
	void RequestSetVehicleTypeAvailable(int VehicleTypeID, bool bIsAvailable);// 0x209b6d0
	void RequestSetVehicleClassAvailableLuaCall(enum VehicleClass, bool bIsAvailable);// 0x209b600
	void RequestSetVehicleClassAvailable(enum VehicleClass, bool bIsAvailable);// 0x209b520
	void RequestSetUserSettingLuaCall(FString Name, FString Value);// 0x209b420
	void RequestSetUserSetting(FString Name, FString Value);// 0x209b320
	void RequestSetRoomPoolPrizeTypeLuaCall(int TypeID);// 0x209b290
	void RequestSetRoomPoolPrizeType(int TypeID);// 0x209b200
	void RequestSetRoomPasswdLuaCall(FString Passwd);// 0x209b160
	void RequestSetRoomPasswd(FString Passwd);// 0x209b0c0
	void RequestSetRoomNameLuaCall(FString Name);// 0x209b020
	void RequestSetRoomName(FString Name);// 0x209af80
	void RequestSetRoomLevelLimitLuaCall(int Level);// 0x209aef0
	void RequestSetRoomLevelLimit(int Level);// 0x209ae60
	void RequestSetInviteEnableLuaCall(bool bEnable);// 0x209add0
	void RequestSetInviteEnable(bool bEnable);// 0x209ad40
	void RequestSetExchangeEnableLuaCall(bool bEnable);// 0x209acb0
	void RequestSetExchangeEnable(bool bEnable);// 0x209ac20
	void RequestKickPlayerOut(SCMPlayerState* Player);// 0x209ab90
	void RequestExchangeSidesAndPos(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x209aac0
	void RequestChangeSide(SCMPlayerState* Player, FString NewSide, const int NewPosInTeam);// 0x209a990
	void RequesJoinOB(SCMPlayerState* Player);// 0x209a860
	void OnUpdateLifeTime();// 0x209a620
	void OnRep_RevivingTeammatePS(SolarPlayerState* LastRevivingTeammatePS);// 0x209a460
	void OnRep_BattleState();// 0x209a440
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void NotifyUpdateCGMData(FString InDataName);// 0x209a310
	void NotifyClientUpdateDataManager(bool bInit);// 0x209a260
	bool NeedConsiderRepData();// 0x209a220
	bool IsPreJoinPlayer();// 0x209a1f0
	void InitTaskInfo(out const BattlePassInfo InTaskInfo);// 0x209a120
	SCMReplicateHostData[] GetReplicateDataArray();// 0x209a0f0
	SCMPlayerState*[] GetMySidePlayerList();// 0x209a070
	SCMPlayerState*[] GetMySideJobPlayerList();// 0x2099ff0
	void CanPlayerBattle();// 0x2649560

--------------------------------
Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 1]
	FString HostID;//[Offset: 0x8, Size: 1]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 1]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 1]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x10, Size: 1]
	enum DataChangeType;//[Offset: 0x11, Size: 1]
	int VInt;//[Offset: 0x14, Size: 1]
	float VFloat;//[Offset: 0x18, Size: 1]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 1]
	FString VString;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x10, Size: 1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 1]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 1]
	int[] VInt;//[Offset: 0x38, Size: 1]
	float[] VFloat;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 1]
	FString[] VString;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x10, Size: 1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 1]
	FString[] KeyArray;//[Offset: 0x28, Size: 1]
	int[] VInt;//[Offset: 0x38, Size: 1]
	float[] VFloat;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 1]
	FString[] VString;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarTaskComponent.ActorComponent.Object
	MulticastInlineDelegateProperty TaskUpdateDelegate;//[Size: 1]
	MulticastInlineDelegateProperty TaskCompoleteDelegate;//[Size: 1]
	MulticastInlineDelegateProperty MarkingTaskChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty ClientTaskUpdatedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty ClientBattlePassTimeInfoDelegate;//[Size: 1]
	DataTable* TaskTypeHandleConfig;//[Offset: 0x108, Size: 1]
	class TaskFormula* TaskFormula;//[Offset: 0x110, Size: 1]
	TaskFormula* FormulaInst;//[Offset: 0x118, Size: 1]
	int64[] MarkingTask;//[Offset: 0x120, Size: 1]
	BattlePassTimeInfo BattlePassTimeInfo;//[Offset: 0x130, Size: 1]
	TaskBriefData[] tasks;//[Offset: 0x148, Size: 1]
	void ServerEnableMarkTask(int64 InTaskID, bool bMarking);// 0x22afc30
	void OnRep_Tasks();// 0x22afad0
	void OnRep_MarkingTask();// 0x22afab0
	void OnRep_BattlePassTimeInfo();// 0x22afa90
	bool IsMaxLevel();// 0xb43660
	bool IsEnable();// 0x22afa30
	BattlePassTimeInfo GetBattlePassTimeInfo();// 0x22aef60
	TaskBriefData[] GetAllTaskBriefData();// 0x22aef30
	int64[] GetAllMarkTask();// 0x22aef00
	void EnableMarkTask(int64 InTaskID, bool bMarking);// 0x22aee30
	void ClientNotifyTaskComplete(const TaskBriefData InTaskInfo);// 0x22aeac0

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 1]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: TaskFormula.Info.Actor.Object
	SolarTaskComponent* TaskSystem;//[Offset: 0x228, Size: 1]
	void SetTaskProgress(int64 InTaskID, int64 ProgressValue, bool bOverrideLastMatch);// 0x22afd00
	void IncreaseTaskProgress(int64 InTaskID, int64 ProgressValue);// 0x22af960
	int GetTaskConditionValue(int64 InTaskID, int64 Index);// 0x22af4c0

--------------------------------
Class: BattlePassTimeInfo
	int64 BattlePassID;//[Offset: 0x0, Size: 1]
	int64 currWeek;//[Offset: 0x8, Size: 1]
	int64 maxWeek;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TaskBriefData
	int64 TaskID;//[Offset: 0x0, Size: 1]
	int64 BaseValue;//[Offset: 0x8, Size: 1]
	int64 CurValue;//[Offset: 0x10, Size: 1]
	int64 status;//[Offset: 0x20, Size: 1]
	enum page;//[Offset: 0x28, Size: 1]
	int64 week;//[Offset: 0x30, Size: 1]
	bool IsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: TaskUpdateInfo
	bool delAllTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int64[] delIDs;//[Offset: 0x8, Size: 1]
	BattlePassInfo Task;//[Offset: 0x18, Size: 1]
	FString PlayerId;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BattlePassInfo
	TaskBriefData[] tasks;//[Offset: 0x0, Size: 1]
	int64 BattlePassID;//[Offset: 0x10, Size: 1]
	int64 currWeek;//[Offset: 0x18, Size: 1]
	int64 maxWeek;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 1]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 1]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	byte HealthChangeType;//[Offset: 0xba, Size: 1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 1]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 1]
	enum ResultType;//[Offset: 0xd0, Size: 1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	int UseWeaponID;//[Offset: 0xd4, Size: 1]
	enum DamageType;//[Offset: 0xd8, Size: 1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 1]
	FString HitBoneName;//[Offset: 0xf0, Size: 1]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 1]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 1]
	HitResult HitInfo;//[Offset: 0x20, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x228, Size: 1]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x230, Size: 1]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x240, Size: 1]
	Transform SpawnTransform;//[Offset: 0x250, Size: 1]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 1]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	bool bActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	FString ExtraInfo;//[Offset: 0x290, Size: 1]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 1]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 1]
	static void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x20c0be0
	void StopSound();// 0x2649560
	static void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x20c06e0
	static void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x20c03c0
	static void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x20c0050
	void ServerSetActivated();// 0x816980
	void RestoreSound();// 0x2649560
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x20bfb40
	void PlaySound();// 0x2649560
	void PauseSound();// 0x2649560
	bool IsLocalControl();// 0x20be0d0
	bool InSameTeam();// 0x20bdfd0
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x20be000
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x20bde40
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x20bdb30

--------------------------------
Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 1]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 1]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x110, Size: 1]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x118, Size: 1]
	SolarAbility* AffectingAbility;//[Offset: 0x120, Size: 1]
	FString ExtraInfo;//[Offset: 0x128, Size: 1]
	<FString,float> AttributeParamMap;//[Offset: 0x138, Size: 1]

--------------------------------
Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 1]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 1]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 1]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 1]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 1]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 1]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 1]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 1]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 1]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 1]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 1]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 1]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x4f4, Size: 1]
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x4f8, Size: 1]
	bool bPendingEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x508, Size: 1]
	ParticleSystem* DedicatedDeathEffect;//[Offset: 0x510, Size: 1]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x518, Size: 1]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x574, Size: 1]
	float PushYScale;//[Offset: 0x578, Size: 1]
	float PushXScaleOnSwimming;//[Offset: 0x57c, Size: 1]
	float PushYScaleOnSwimming;//[Offset: 0x580, Size: 1]
	float PushZScaleOnSwimming;//[Offset: 0x584, Size: 1]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x588, Size: 1]
	bool bHoldSignificanceWhenDyingForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x5b8, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5c0, Size: 1]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5c8, Size: 1]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x2113550
	void ResetAudioComponentTransform();// 0x2113530
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x2113430
	void OnRep_PendingEnterWater();// 0x1571f50
	void MulticastAddHitTrace(const HitTraceInfo Info);// 0x21133a0
	bool K2_IsInWater();// 0x2113300
	bool K2_IsAlive();// 0x2113360
	bool IsPlayerLocallyControlled();// 0x2113330
	bool IsInWater();// 0x2113300
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x21131d0
	bool IsInRoom();// 0x21131a0
	bool IsBlocked(const Actor* InOtherActor);// 0x2113100
	bool InSameTeamWithFirstPlayerController();// 0x2113000
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x2113030
	FString GetSoundEventString(enum SoundOpt);// 0x2112f20
	SolarAkGameObject* GetSolarAkGameObject();// 0x2112f00
	SolarAbilitySystemComponent* GetSafeASC();// 0x21056a0
	float GetMaxHealth();// 0x2112ec0
	float GetCurrentHealth();// 0x2112e80
	enum GetCharacterType();// 0x2112e50
	Vector GetCharacterLocation(bool bMiddle);// 0x2112da0
	Vector GetCharacterDirection();// 0x2112d60
	SolarBackpackComponent* GetBackpack();// 0x2112d30
	void ClientOnPushedByVehicle();// 0x1572450
	bool CheckOpenParticleOptimization(int Bias);// 0x2112c90
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x2112bc0

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 1]
	FieldPathProperty Attribute;//[Size: 1]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 1]

--------------------------------
Class: HitTraceInfo
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x0, Size: 1]
	float Damage;//[Offset: 0xc, Size: 1]
	enum WeaponType;//[Offset: 0x10, Size: 1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	static void Wakeup();// 0x20cf5a0
	static void UnloadBank(FString InBankName);// 0x20cdf30
	static void UnLoadAllBanks();// 0x9a1270
	static void Suspend(bool in_bRenderAnyway);// 0x20cf490
	int StopSoundByEvent(FString in_EventName);// 0x20cf3e0
	static int StaticStopSoundByEvent(FString in_EventName);// 0x20cf340
	static void StaticSetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x20cf220
	static int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x20cf0c0
	static int StaticPostAkEventByName(FString in_EventName);// 0x20cf020
	static int StaticPlaySoundByEvent(FString in_EventName);// 0x20cef80
	static int StaticPlaySoundAtLocationByName(FString AkName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x20cedc0
	static int StaticPlaySoundAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x20cec40
	static int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x20ceb60
	void SolarLoadAllBanks();// 0x8f2720
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x20cea40
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x20ce910
	static void SetMasterRTPCValue(float Value, int InterpolationTimeMs);// 0x20ce850
	static void SetMasterRTPCMute(bool Mute);// 0x20ce7d0
	static void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x20ce6b0
	void ReceiveTick(float DeltaTime);// 0x2649560
	void ReceiveEndPlay(const byte EndPlayReason);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x20ce570
	int PostAkEventByName(FString InEventName1, FString InEventName2);// 0x20ce470
	int PlaySoundByEvent(FString in_EventName);// 0x20ce3c0
	static void LoadBank(FString InBankName);// 0x20cdf30
	static void LoadAllBanks();// 0x9a1270

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 1]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 1]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 1]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float MinimumDuration;//[Offset: 0xc0, Size: 1]
	float MaximumDuration;//[Offset: 0xc4, Size: 1]
	float GetMinimumDuration();// 0x168e900
	float GetMaximumDuration();// 0x168e8d0
	float GetMaxAttenuationRadius();// 0x168e8a0
	bool GetIsInfinite();// 0x168e870

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 1]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa8, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bIsInDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	byte OcclusionCollisionChannel;//[Offset: 0x341, Size: 1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	float OuterRadius;//[Offset: 0x348, Size: 1]
	float InnerRadius;//[Offset: 0x34c, Size: 1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x350, Size: 1]
	FString EarlyReflectionAuxBusName;//[Offset: 0x358, Size: 1]
	int EarlyReflectionOrder;//[Offset: 0x368, Size: 1]
	float EarlyReflectionBusSendGain;//[Offset: 0x36c, Size: 1]
	float EarlyReflectionMaxPathLength;//[Offset: 0x370, Size: 1]
	float roomReverbAuxBusGain;//[Offset: 0x374, Size: 1]
	int diffractionMaxEdges;//[Offset: 0x378, Size: 1]
	int diffractionMaxPaths;//[Offset: 0x37c, Size: 1]
	float diffractionMaxPathLength;//[Offset: 0x380, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x384, Size: 1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x384, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x38c, Size: 1]
	float OcclusionRefreshInterval;//[Offset: 0x390, Size: 1]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x168fe30
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x168fc40
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x168fa50
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x168f9c0
	void SetOutputBusVolume(float BusVolume);// 0x168f940
	void SetListeners(out const AkComponent*[] Listeners);// 0x168f890
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x168f730
	void SetEarlyReflectionsVolume(float SendVolume);// 0x168f6b0
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x168f610
	void SetAttenuationScalingFactor(float Value);// 0x168f510
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x168f2a0
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x168f0d0
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x168ef60
	int PostAkEventByName(FString in_EventName);// 0x168eeb0
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x168ece0
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x168eaf0
	float GetAttenuationRadius();// 0x168e7b0

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x318, Size: 1]
	FString EventName;//[Offset: 0x320, Size: 1]
	void Stop();// 0x16975e0
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x1695d90
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x1694280
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x16940e0
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x1693920
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x16936f0
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x16921c0

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 1]

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 1]
	uint32 GroupShortID;//[Offset: 0x50, Size: 1]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 1]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 1]
	enum CodecID;//[Offset: 0x10, Size: 1]
	FString Filename;//[Offset: 0x18, Size: 1]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 1]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1300, Size: 1]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x13b8, Size: 1]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x13c8, Size: 1]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x13d8, Size: 1]
	GameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(GameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int LevelUp);// 0x20c0aa0
	void UpgradeAbilityLevelByClass(const class GameplayAbility AbilityClass, bool bForNextActivate, int LevelUp);// 0x20c0990
	void UpgradeAbilityLevel(GameplayTagContainer AbilityTags, bool bForNextActivate, int LevelUp);// 0x20c0830
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x20bff00
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x20bfd20
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x20bfbd0
	void PostDefaultAbilitiesGranted();// 0x2649560
	void OnRep_ReplicatedAnimMontageForMesh();// 0x15722d0
	void OnNotifiedTagChanged(out const GameplayTag Tag, bool bAdded);// 0x20bf610
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x20bf330
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x20bf0d0
	void K2_RemoveGameplayCueLocalShared(Object* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x20beea0
	void K2_RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x20becc0
	int K2_RemoveActiveEffectsWithTag(GameplayTag GameplayTag);// 0x20bec20
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(const class GameplayAbility AbilityClass, int Level);// 0x20beb50
	GameplayAbilitySpecHandle K2_GiveAbility(const class GameplayAbility AbilityClass, int Level);// 0x20bea80
	void K2_GetEffectMaxTimeRemainingAndDuration(GameplayTag EffectTag, out float TimeRemaining, out float Duration);// 0x20be960
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x20be8c0
	void K2_ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x20be6e0
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x20be640
	void K2_CancelAbilityByTag(GameplayTag AbilityTag);// 0x20be5b0
	void K2_AddGameplayCueLocalShared(Object* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x20be380
	void K2_AddGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x20be1a0
	bool IsNotifiedTagAvailable(out const GameplayTag Tag);// 0x20be100
	GameplayAbilitySpecHandle GiveDefaultAbility(const class GameplayAbility AbilityClass);// 0x20bdf40
	ActiveGameplayEffectHandle ChangeActiveEffectRemainTime(ActiveGameplayEffectHandle InEffect, float InValue, byte InOption);// 0x20bdd20
	ActiveGameplayEffectHandle ChangeActiveEffectDuration(ActiveGameplayEffectHandle InEffect, float InDuration, enum InChangeProxy);// 0x20bdc00

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 1]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 1]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 1]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 1]
	float IncomingDuration;//[Offset: 0x2fc, Size: 1]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 1]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 1]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 1]
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 1]
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 1]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 1]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 1]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 1]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 1]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 1]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 1]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 1]
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 1]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 1]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 1]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x7c4b60
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x7c4a50
	void TargetConfirm();// 0x7c4a30
	void TargetCancel();// 0x7c4a10
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x7c4980
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x7c4880
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x7c47a0
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x7c4300
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x7c4190
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x7c3ff0
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x7c3d40
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x7c3af0
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x7c3910
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x7c3860
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x7c37b0
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x7c36c0
	void ServerPrintDebug_Request();// 0x7c3670
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x7c34c0
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x7c33b0
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x7c3220
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x7c3110
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x7c2fe0
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x7c2e20
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x7c2d10
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x7c2c30
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x7c2b40
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x7c2a50
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x7c2960
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x7c2960
	void OnRep_ServerDebugString();// 0x7c2940
	void OnRep_ReplicatedAnimMontage();// 0x7c2920
	void OnRep_OwningActor();// 0x7c2900
	void OnRep_ClientDebugString();// 0x7c28e0
	void OnRep_ActivateAbilities();// 0x7c28c0
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7c2630
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x7c2450
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7c21c0
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7c1f80
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x7c1df0
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x7c1c60
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7c17e0
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x7c1650
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x7c1a20
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x7c14c0
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x7c12a0
	GameplayEffectContextHandle MakeEffectContext();// 0x7c1220
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x7c1150
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x7c10b0
	bool GetUserAbilityActivationInhibited();// 0x7c1080
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x7c0e60
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x7c0d50
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x7c0c20
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x7c0b20
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x7c0a90
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x7c0950
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x7c0840
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x7c0740
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x7c0640
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x7c02f0
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x7c01f0
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x7c0110
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x7bff50
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x7bfdb0
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x7bfc90
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x7bfbb0
	void AbilityConfirmOrCancel__DelegateSignature();// 0x2649560
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x2649560

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 1]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 1]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 1]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 1]
	void OnRep_SimulatedTasks();// 0x3f79b40
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x3f798f0

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 1]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 1]
	void ReadyForActivation();// 0x3f79b60
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x2649560
	void EndTask();// 0x3f79800

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 1]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 1]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 1]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 1]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 1]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 1]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 1]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 1]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 1]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 1]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 1]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 1]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 1]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 1]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 1]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 1]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 1]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x7d5750
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x7d56c0
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x7d53f0
	void RemoveGrantedByEffect();// 0x7d53d0
	void MontageStop(float OverrideBlendOutTime);// 0x7d4a60
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x7d4990
	void MontageJumpToSection(FName SectionName);// 0x7d4900
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x7d4800
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x7d4760
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x7d4600
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x2649560
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x7d4570
	void K2_OnEndAbility(bool bWasCancelled);// 0x2649560
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x7d4300
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x7d41c0
	void K2_EndAbility();// 0x7d41a0
	void K2_CommitExecute();// 0x2649560
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x7d4100
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x7d4010
	bool K2_CommitAbility();// 0x7d3fe0
	bool K2_CheckAbilityCost();// 0x7d3fb0
	bool K2_CheckAbilityCooldown();// 0x7d3f80
	void K2_CancelAbility();// 0x7d3f60
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x2649560
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x7d3d40
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x7d3c50
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x7d3a40
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x7d38c0
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x2649560
	void K2_ActivateAbility();// 0x2649560
	void InvalidateClientPredictionKey();// 0x7d38a0
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x7d3870
	Actor* GetOwningActorFromActorInfo();// 0x7d3840
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x7d37c0
	Object* GetCurrentSourceObject();// 0x7d3790
	AnimMontage* GetCurrentMontage();// 0x7d3760
	float GetCooldownTimeRemaining();// 0x7d3730
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x7d35b0
	Actor* GetAvatarActorFromActorInfo();// 0x7d3580
	GameplayAbilityActorInfo GetActorInfo();// 0x7d3510
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x7d34e0
	int GetAbilityLevel();// 0x7d34b0
	void EndTaskByInstanceName(FName InstanceName);// 0x7d3280
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x7d31f0
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x7d2f20
	void CancelTaskByInstanceName(FName InstanceName);// 0x7d2e90
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x7d2c90
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x7d2b70
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x7d2a50
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x7d2820
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x7d2700

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 1]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x8, Size: 1]
	Actor* Target;//[Offset: 0x10, Size: 1]
	Object* OptionalObject;//[Offset: 0x18, Size: 1]
	Object* OptionalObject2;//[Offset: 0x20, Size: 1]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 1]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 1]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 1]
	float EventMagnitude;//[Offset: 0x80, Size: 1]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 1]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 1]
	int16 Base;//[Offset: 0x2, Size: 1]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 1]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 1]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 1]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 1]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 1]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 1]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 1]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 1]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 1]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 1]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 1]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 1]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 1]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 1]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 1]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 1]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 1]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3e0, Size: 1]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x430, Size: 1]
	GameplayTagRequirements RemovalSourceTagRequirements;//[Offset: 0x480, Size: 1]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x4d0, Size: 1]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x530, Size: 1]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x580, Size: 1]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x6d8, Size: 1]
	enum StackingType;//[Offset: 0x829, Size: 1]
	int StackLimitCount;//[Offset: 0x82c, Size: 1]
	enum StackDurationRefreshPolicy;//[Offset: 0x830, Size: 1]
	enum StackPeriodResetPolicy;//[Offset: 0x831, Size: 1]
	enum StackExpirationPolicy;//[Offset: 0x832, Size: 1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x838, Size: 1]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 1]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 1]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 1]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 1]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 1]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 1]
	FName RowName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 1]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 1]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 1]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 1]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 1]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 1]
	enum FinalChannel;//[Offset: 0xb1, Size: 1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 1]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 1]
	enum AttributeSource;//[Offset: 0x38, Size: 1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 1]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 1]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 1]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 1]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 1]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x7eb560

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 1]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 1]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 1]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 1]
	float Duration;//[Offset: 0x50, Size: 1]
	float Period;//[Offset: 0x54, Size: 1]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 1]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 1]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 1]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 1]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 1]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 1]
	int StackCount;//[Offset: 0x1c0, Size: 1]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 1]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 1]
	float Level;//[Offset: 0x290, Size: 1]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 1]
	float TotalMagnitude;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 1]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 1]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 1]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 1]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 1]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 1]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 1]
	int InputID;//[Offset: 0x28, Size: 1]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 1]
	Object* SourceObject;//[Offset: 0x30, Size: 1]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 1]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 1]
	GameplayTag DataTag;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 1]
	byte ModifierOp;//[Offset: 0x38, Size: 1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 1]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 1]
	GameplayTagRequirements TargetTags;//[Offset: 0x260, Size: 1]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTagRequirements
	enum RequireTagCheckRule;//[Offset: 0x0, Size: 1]
	GameplayTagContainer RequireTags;//[Offset: 0x8, Size: 1]
	enum IgnoreTagCheckRule;//[Offset: 0x28, Size: 1]
	GameplayTagContainer IgnoreTags;//[Offset: 0x30, Size: 1]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 1]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 1]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 1]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 1]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 1]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x7eb790

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 1]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 1]
	byte ModifierOp;//[Offset: 0x38, Size: 1]
	float Magnitude;//[Offset: 0x3c, Size: 1]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 1]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 1]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 1]
	enum AggregatorType;//[Offset: 0x48, Size: 1]
	byte ModifierOp;//[Offset: 0x49, Size: 1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 1]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 1]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 1]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 1]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x7eb630

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 1]
	float MinLevel;//[Offset: 0x38, Size: 1]
	float MaxLevel;//[Offset: 0x3c, Size: 1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 1]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 1]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 1]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 1]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 1]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 1]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 1]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 1]
	Object* EffectSource;//[Offset: 0x130, Size: 1]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 1]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 1]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 1]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 1]
	FString UserDescription;//[Offset: 0x28, Size: 1]
	FString AutoDescription;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 1]
	byte TriggerSource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x10, Size: 1]
	Transform LiteralTransform;//[Offset: 0x20, Size: 1]
	Actor* SourceActor;//[Offset: 0x50, Size: 1]
	MeshComponent* SourceComponent;//[Offset: 0x58, Size: 1]
	GameplayAbility* SourceAbility;//[Offset: 0x60, Size: 1]
	FName SourceSocketName;//[Offset: 0x68, Size: 1]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 1]
	Actor* AvatarActor;//[Offset: 0x10, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 1]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 1]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 1]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 1]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 1]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 1]
	float RawMagnitude;//[Offset: 0x4, Size: 1]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 1]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 1]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 1]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 1]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 1]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 1]
	Actor* Instigator;//[Offset: 0x88, Size: 1]
	Actor* EffectCauser;//[Offset: 0x90, Size: 1]
	Object* SourceObject;//[Offset: 0x98, Size: 1]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 1]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 1]
	int AbilityLevel;//[Offset: 0xac, Size: 1]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 1]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x20d34b0
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x20d3360
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x20d3270
	static float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x20c5d90
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x20d3110

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 1]
	float CurrentValue;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 1]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 1]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 1]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 1]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 1]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 1]
	float Level;//[Offset: 0x70, Size: 1]
	float AbilityLevel;//[Offset: 0x74, Size: 1]

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 1]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 1]
	PlayerController* MasterPC;//[Offset: 0x2d0, Size: 1]
	GameplayAbility* OwningAbility;//[Offset: 0x2d8, Size: 1]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	Actor* SourceActor;//[Offset: 0x2e8, Size: 1]
	WorldReticleParameters ReticleParams;//[Offset: 0x2f0, Size: 1]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x300, Size: 1]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x308, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x330, Size: 1]
	void ConfirmTargeting();// 0x7debe0
	void CancelTargeting();// 0x7debc0

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x228, Size: 1]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 1]
	PlayerController* MasterPC;//[Offset: 0x238, Size: 1]
	Actor* TargetingActor;//[Offset: 0x240, Size: 1]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x2649560
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x2649560
	void OnValidTargetChanged(bool bNewValue);// 0x2649560
	void OnTargetingAnActor(bool bNewValue);// 0x2649560
	void OnParametersInitialized();// 0x2649560
	void FaceTowardSource(bool bFaceIn2D);// 0x7dec00

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 1]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 1]
	enum DeltaFlags;//[Offset: 0x100, Size: 1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 1]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 1]
	int Level;//[Offset: 0x18, Size: 1]
	int InputID;//[Offset: 0x1c, Size: 1]
	Object* SourceObject;//[Offset: 0x20, Size: 1]
	byte ActiveCount;//[Offset: 0x28, Size: 1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 1]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 1]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 1]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 1]
	int ReplicationKey;//[Offset: 0x4, Size: 1]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0xc, Size: 1]
	float BlendTime;//[Offset: 0x10, Size: 1]
	byte NextSectionID;//[Offset: 0x14, Size: 1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 1]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 1]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 1]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 1]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 1]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 1]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 1]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 1]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 1]
	float StartWorldTime;//[Offset: 0x2d0, Size: 1]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 1]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 1]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 1]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 1]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 1]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 1]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 1]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 1]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 1]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 1]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 1]
	float MetaAttributeValue;//[Offset: 0x58, Size: 1]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 1]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 1]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 1]
	float EffectValue;//[Offset: 0x40, Size: 1]

--------------------------------
Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 1]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarBackpackComponent.ActorComponent.Object
	float DeathBoxEnergyRate;//[Offset: 0xb8, Size: 1]
	float RebirthEnergyRate;//[Offset: 0xbc, Size: 1]
	MulticastInlineDelegateProperty OnWeaponCreateCompleteDelegate;//[Size: 1]
	float InitialSolarCharge;//[Offset: 0x150, Size: 1]
	float SolarChargeInterval;//[Offset: 0x154, Size: 1]
	float InitialEnergyLimit;//[Offset: 0x158, Size: 1]
	float InitialExtraEnergyLimit;//[Offset: 0x15c, Size: 1]
	float InitialExtraEnergyCharge;//[Offset: 0x160, Size: 1]
	float InitialChargeCD;//[Offset: 0x164, Size: 1]
	float RechargeFrequencyFromSky;//[Offset: 0x178, Size: 1]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x17c, Size: 1]
	float RechargeFrequencyFromPile;//[Offset: 0x180, Size: 1]
	float RechargeQuantityFromSky;//[Offset: 0x184, Size: 1]
	float RechargeQuantityFromDeathBox;//[Offset: 0x188, Size: 1]
	float RechargeQuantityFromPile;//[Offset: 0x18c, Size: 1]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x220, Size: 1]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x224, Size: 1]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x228, Size: 1]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x278, Size: 1]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	<int,int> defaultDeathBoxEnergyConfig;//[Offset: 0x320, Size: 1]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x370, Size: 1]
	float DiscardItemDelayNoticeTime;//[Offset: 0x3c0, Size: 1]
	float[] GradeRankProportion;//[Offset: 0x3c8, Size: 1]
	int[] InitialGridNum;//[Offset: 0x3d8, Size: 1]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x3e8, Size: 1]
	void WeaponCreateCompleteDelegate__DelegateSignature(byte SlotType, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x2649560
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x20da580
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x20da4b0
	void UpdateConsumeSlotUI();// 0x20da490
	bool TryTriggerAbility(const int InItemID);// 0x20da3f0
	void TrySendDropItemTips(const int InDroppedItemID);// 0x20da360
	float TakeDeathBoxEnergy();// 0x20da330
	void SmoothEnergy(const float Amount);// 0x20da2b0
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x20da1e0
	void SetBoxCharging(bool bSet);// 0x20da150
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x20d9680
	bool ServerUseItem(int ItemID, int Num);// 0x20da080
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x20d9fb0
	void ServerSetEnergyState(enum State);// 0x20d9f30
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x20d8bd0
	void ServerRPCUpgradeShield();// 0x20d8bb0
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x20d84e0
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x20d8410
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x20d8340
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x20d9e20
	void ServerRPCDisCardWeaponUICall(int Slot);// 0x20d9d90
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x20d8270
	void ServerRPCDiscardWeapon(const int InSlot);// 0x20d9d90
	void ServerRPCDisCardItemUICall(int ID, int Num);// 0x20d9cc0
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x20d9cc0
	bool ServerDiscardWeapon(const int Slot, const int InTriggerType);// 0x20d9bf0
	bool ServerDiscardFromBackpackByType(const enum ItemType, const bool InDropItem, const int InTriggerType);// 0x20d9ae0
	bool ServerDiscardFromBackpack(const int ItemID, const int Num, const bool InDropItem, const int InTriggerType);// 0x20d9970
	void ServerConsumeExtraEnergy(const float Amount, const enum Usage);// 0x20d98a0
	void ServerConsumeEnergy(const float Amount, const enum Usage);// 0x20d89d0
	void ServerClearJetModule();// 0x20d9880
	void ServerClearEnergyState(enum State);// 0x20d9800
	void ServerClearAllItems();// 0x20d97e0
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x20d9680
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup, const int InTriggerType, SolarPlayerWeapon* WeaponActorExists);// 0x20d9420
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x20d9350
	int ServerAddToItemMap(SolarItemData ItemData);// 0x20d9250
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x20d90b0
	int ServerAddToBackpackByIdAndNum(const int ItemID, const int Num, const bool Bydefault, const float CurValue, const bool NeedReset, const int UserId, const int TriggerType, const int SourceType);// 0x20d8e40
	int ServerAddToBackpack(out const SolarItemData ItemData, const bool Bydefault, const int TriggerType);// 0x20d8ca0
	void ReqUseEnergy(float Amount, enum Usage);// 0x20d89d0
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x20d8bd0
	void RequestUpgradeShield();// 0x20d8bb0
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x20d8aa0
	void RefreshWeaponPartsInBackPackUI();// 0x20d89b0
	void RefreshWeaponInBackPackUIInternal();// 0x20d8990
	void RefreshWeaponInBackPackUI();// 0x20d8970
	void RefreshItemInBackPackUI();// 0x20d8950
	void RefreshEquipInBackPackUI();// 0x20d8930
	void RefreshBackPackUIState();// 0x20d8910
	void PurchaseEShopItemsResponse_Implementation(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x20d8800
	int PredictEnergy(const float Amount);// 0x20d8770
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x20d8690
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x20d85b0
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x20d84e0
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x20d8410
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x20d8340
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x20d8270
	bool ModuleOverflow2(int ModuleMax);// 0x20d8130
	bool ModuleOverflow(int ModuleMax);// 0x20d81d0
	void LogBackPackItem();// 0x20d8110
	bool IsReviveItemRecommend();// 0x20d80e0
	bool IsReviveItemPickable();// 0x20d80b0
	bool IsReviveItem(const int InItemID);// 0x20d8010
	bool IsExtraEnergyID(int ID);// 0x20d7f70
	bool IsEquippedWeapon(const int InThisID);// 0x20d7ed0
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x20d7e00
	bool IsEnergyID(int ID);// 0x20d7d60
	int IsBetterWeaponThanEquiped(out const SolarItemData InItemData, const int InWeaponLevel, const int InWeaponExp);// 0x20d7bc0
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel, int InWeaponExp);// 0x20d7a20
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x20d7950
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x20d7880
	void InitDefaultItem(int ItemID, int Num);// 0x20d77b0
	void InitDeathBoxEnergyRate();// 0x20d7790
	bool HasEmptyWeaponSlot();// 0x20d7760
	bool GetWeaponSlotEmpty(int Slot);// 0x20d76c0
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x20d75a0
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x20d7490
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x20d7340
	float GetTotalEnergy();// 0x20d6940
	float GetQuantityFrom(enum Usage);// 0x20d72b0
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x20d7160
	float GetMaxExtraEnergy();// 0x20d7130
	float GetMaxEnergy();// 0x20d7130
	float GetMaxDeathBoxEnergyFromConfig();// 0x20d7100
	int GetItemNumById(int ItemID);// 0x20d7060
	int GetItemMaxPile(int ItemID);// 0x20d6fc0
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x20d6e70
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x20d6d20
	float GetFrequencyFrom(enum Usage);// 0x20d6c90
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x20d6b80
	int GetEquipIdByType(enum ItemType);// 0x20d6ae0
	float GetCurrExtraEnergy();// 0x20d6940
	SolarItemData GetCurrentWeaponItemData();// 0x20d6a50
	bool GetCurrentWeaponIsOverloading();// 0x20d6a20
	void GetCurrentEquipItems(out int[] OutArray);// 0x20d6970
	float GetCurrEnergy();// 0x20d6940
	SolarCharacter* GetCharacterOwner();// 0x204ac60
	byte GetBestSuitSlotForCandidateWeapon(out const SolarItemData WeaponData, const bool IsAutoPickup);// 0x20d67f0
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x20d66b0
	float GetAbilityRemainingCD(const int InItemID);// 0x20d6610
	float GetAbilityDuration(const int InItemID);// 0x20d6570
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x20d6480
	void ExecuteGM(FString InStrGM);// 0x20d63e0
	void EquipModuleByID(int ModuleID);// 0x20d6350
	int EquipModule(const int ID, const float ModuleMax);// 0x20d6280
	void EquipBatteryByID(int BatteryID);// 0x20d61f0
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float CD);// 0x20d6090
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x20d5f40
	void DiscardItem(SolarItemData DiscardItem);// 0x20d5e50
	void DelayCheckClearAbility(const int InItemID);// 0x20d5dc0
	void CommitEnergy(const int ID);// 0x20d58b0
	bool ClearBackpackItemByID(const int InItemID);// 0x20d5d20
	void CheckToGiveAbility(const int InItemID);// 0x20d5c90
	void CheckToClearAbility(const int InItemID);// 0x20d5c00
	bool CheckIsRecWeaponParts(const int ItemID);// 0x20d5b60
	bool CheckIsEquippedDifferentScope(const int PartID);// 0x20d5ac0
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x20d5a20
	float ChargeMain(const float Amount, enum Usage);// 0x20d5940
	float ChargeExtra(const float Amount, enum Usage);// 0x20d5940
	void CancelEnergy(const int ID);// 0x20d58b0
	bool BatteryOverflow(int BatteryMax);// 0x20d5810
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x20d5700

--------------------------------
Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0xb50, Size: 1]
	SolarItemData ItemData;//[Offset: 0xb58, Size: 1]
	byte[] MarkedTeamIdList;//[Offset: 0xc10, Size: 1]
	byte bUseSceneActorOptimization;//[Offset: 0xc20, Size: 1]
	SphereComponent* SphereComponent;//[Offset: 0xc28, Size: 1]
	Vector DroppedLocation;//[Offset: 0xc30, Size: 1]
	SolarCharacterBase* WeaponOwner;//[Offset: 0xc40, Size: 1]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xc48, Size: 1]
	byte WeaponCurrentDiscardState;//[Offset: 0xc50, Size: 1]
	byte WeaponCurrentState;//[Offset: 0xc51, Size: 1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xc58, Size: 1]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xc68, Size: 1]
	MaterialInterface* OutlineBaseMat;//[Offset: 0xc80, Size: 1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xc90, Size: 1]
	ParticleSystemComponent* SkinSpecialEffect;//[Offset: 0xca0, Size: 1]
	MaterialInstanceDynamic* MeshSubpassMaterial;//[Offset: 0xcb8, Size: 1]
	MaterialInstanceDynamic*[] MeshDiscardMaterialArray;//[Offset: 0xcc0, Size: 1]
	WeaponSkinData* WeaponSkinData;//[Offset: 0xcd0, Size: 1]
	int WeaponSkinID;//[Offset: 0xcd8, Size: 1]
	int ScopePartID;//[Offset: 0xcdc, Size: 1]
	int GripPartID;//[Offset: 0xce0, Size: 1]
	int StockPartID;//[Offset: 0xce4, Size: 1]
	int MuzzlePartID;//[Offset: 0xce8, Size: 1]
	int ClipPartID;//[Offset: 0xcec, Size: 1]
	int DefaultSkinID;//[Offset: 0xcf0, Size: 1]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf9, Size: 1]
	float LifespanAfterAutoDrop;//[Offset: 0xcfc, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 1]
	ParticleSystem* SkinDedicatedKillEffect;//[Offset: 0xd08, Size: 1]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xd10, Size: 1]
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x21e39e0
	void UpdateCharacterPosture(bool IsCrouch);// 0x21e3950
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x21e2fb0
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x21e2f20
	void RequestUnlimitedAmmo(const bool InEnable);// 0x21e2e90
	void PostUpdateAppearance();// 0x2649560
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x21e2dc0
	void OnRep_WeaponCurrentStateChanged();// 0x21e2da0
	void OnRep_WeaponCurrentDiscardStateChanged();// 0x8f2720
	void OnClientMeshLodChanged(int LOD);// 0x21e2a00
	void NotifyThisItemWasPickedUp();// 0x21e2940
	void K2_SwitchDrawDistance(bool Hold);// 0x21e28b0
	void K2_OnHold(bool bLocal);// 0x21e2820
	void K2_OnDrop();// 0x1572b30
	bool IsOpenedScopeOnVehicle();// 0x21e2800
	bool IsItemWeapon();// 0x21e27d0
	bool IsExistPart(out const enum PartType);// 0x21e2720
	void Hold(bool bInHold);// 0x21e25c0
	bool HasScope();// 0x21e2590
	float GetWeaponSilencerMagnitude();// 0x21e2560
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x21e24f0
	int GetQualityByLevel(int Level);// 0x21e2450
	int GetQuality();// 0x21e2410
	byte GetItemCurrentState();// 0x21e23d0
	bool GetIsHolded();// 0x21e23b0
	Vector GetFPPLocation();// 0x21e2340
	float GetFire2AnimPlayRate();// 0x21e2380
	float GetDistanceToEyeWhenScope();// 0x21e2300
	Vector GetCurrentScopeAimCenterPoint();// 0x21e2220
	WeaponPartClipComp* GetCurrentClip();// 0x21e21f0
	void ClearSkinExtraPSC();// 0x21e2070
	void ClearDedicatedSkinEffect();// 0x21e2050

--------------------------------
Class: SolarWeapon.Actor.Object
	MulticastInlineDelegateProperty OnWeaponUnhold;//[Size: 1]
	WeaponMechanicalState WeaponState;//[Offset: 0x388, Size: 1]
	enum PrimaryShootingOption;//[Offset: 0x3d9, Size: 1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3dc, Size: 1]
	enum DefaultDamageType;//[Offset: 0x3f8, Size: 1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x400, Size: 1]
	WeaponFireLaserCollector* LaserCollector;//[Offset: 0x408, Size: 1]
	int ExtraPoints;//[Offset: 0x414, Size: 1]
	int ExtraPointsForInit;//[Offset: 0x418, Size: 1]
	bool bUseSkillStateMachine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	int ExtraPointsLimit;//[Offset: 0x420, Size: 1]
	int SecModeLimitTypeID;//[Offset: 0x424, Size: 1]
	float RestoreProgressPerSec;//[Offset: 0x428, Size: 1]
	float RestoreProgressPerKill;//[Offset: 0x438, Size: 1]
	float RestoreProgressPerDmg;//[Offset: 0x43c, Size: 1]
	float RestoreProgressAccumulation;//[Offset: 0x440, Size: 1]
	float RestoreProgressAccumulationForInit;//[Offset: 0x444, Size: 1]
	byte FireModeIndex;//[Offset: 0x451, Size: 1]
	enum OverloadState;//[Offset: 0x464, Size: 1]
	float OverloadAccum;//[Offset: 0x468, Size: 1]
	CurveFloat* OverloadCurve;//[Offset: 0x478, Size: 1]
	float GatlingRollSpeed;//[Offset: 0x484, Size: 1]
	float GatlingHoldTime;//[Offset: 0x488, Size: 1]
	float GatlingRollSpeedInterp;//[Offset: 0x48c, Size: 1]
	int GatlingRepState;//[Offset: 0x490, Size: 1]
	float FireChargingTime;//[Offset: 0x4b8, Size: 1]
	int FireChargingPhase;//[Offset: 0x4bc, Size: 1]
	float FireChargingSumTime;//[Offset: 0x4c0, Size: 1]
	float ChargeAnimationRate;//[Offset: 0x4cc, Size: 1]
	class GameplayEffect* ChargingEffect;//[Offset: 0x4d0, Size: 1]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x4e0, Size: 1]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x4f0, Size: 1]
	int CurrentMode;//[Offset: 0x4f8, Size: 1]
	FireMode[] FireModes;//[Offset: 0x508, Size: 1]
	Actor* WeaponHolder;//[Offset: 0x518, Size: 1]
	SolarCharacterBase* ControlWeaponCharacter;//[Offset: 0x520, Size: 1]
	GameplayAbilitySpecHandle[] EquippedAbilityHandles;//[Offset: 0x528, Size: 1]
	bool bControlWeaponCharacterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	Actor* AimTarget;//[Offset: 0x540, Size: 1]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x548, Size: 1]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x550, Size: 1]
	enum[] ShootingOptArray;//[Offset: 0x558, Size: 1]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	SingleWeaponConfig* Config;//[Offset: 0x570, Size: 1]
	Texture2D* WeaponIcon;//[Offset: 0x578, Size: 1]
	SlateWidgetStyleAsset* PrimaryFireBtnStyle;//[Offset: 0x580, Size: 1]
	SlateWidgetStyleAsset* SecondaryFireBtnStyle;//[Offset: 0x588, Size: 1]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x590, Size: 1]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x598, Size: 1]
	int weaponid;//[Offset: 0x5a0, Size: 1]
	WeaponSpreadAndRecoil* SpreadAndRecoil;//[Offset: 0x5a8, Size: 1]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be, Size: 1]
	int ExtraAmmo;//[Offset: 0x5c0, Size: 1]
	<ParticleSystem*,ParticleLoopListener*> LoopParticlesMap;//[Offset: 0x5c8, Size: 1]
	int CurrentClipAmmo;//[Offset: 0x618, Size: 1]
	<enum,WeaponAnimationInfo> WeaponAnimationMap;//[Offset: 0x728, Size: 1]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x788, Size: 1]
	CameraShakeData[] WeaponScopeFireCameraShakes;//[Offset: 0x798, Size: 1]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x7a8, Size: 1]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x7b8, Size: 1]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	SoftObjectPath FightMeshPath;//[Offset: 0x7d0, Size: 1]
	SkeletalMeshComponent* Mesh;//[Offset: 0x7e8, Size: 1]
	SkeletalMesh* OriginalMesh;//[Offset: 0x7f0, Size: 1]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x7f8, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x800, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x808, Size: 1]
	int SoundFireAutoCount;//[Offset: 0x810, Size: 1]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 1]
	int OldSoundFireAutoCount;//[Offset: 0x818, Size: 1]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81d, Size: 1]
	int SkillFireCount;//[Offset: 0x820, Size: 1]
	int SingleFireCount;//[Offset: 0x824, Size: 1]
	int FireOverloadCount;//[Offset: 0x828, Size: 1]
	int FireLastCount;//[Offset: 0x82c, Size: 1]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x890, Size: 1]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 1]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x8b0, Size: 1]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 1]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x910, Size: 1]
	bool bTracingAimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	MaterialInterface* SpecialFireChargeMaterial;//[Offset: 0x930, Size: 1]
	<int,Color> SpecialFireChargeColorMap;//[Offset: 0x938, Size: 1]
	bool bPerspectiveForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 1]
	enum CurrentSpreadState;//[Offset: 0x9b0, Size: 1]
	int ContinuousAddSpreadByFireCount;//[Offset: 0x9b4, Size: 1]
	bool bLastAddSpreadByFireIsHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	int8 LastAddSpreadByFireFireMode;//[Offset: 0x9b9, Size: 1]
	float LastAddSpreadByFireTime;//[Offset: 0x9bc, Size: 1]
	float SpreadPrepareTimer;//[Offset: 0x9c0, Size: 1]
	float PendingBaseSpread;//[Offset: 0x9c4, Size: 1]
	float TargetBaseSpread;//[Offset: 0x9c8, Size: 1]
	float PendingAddSpread;//[Offset: 0x9cc, Size: 1]
	float TargetAddSpread;//[Offset: 0x9d0, Size: 1]
	HitResult AimHitResult;//[Offset: 0xa00, Size: 1]
	void WeaponStateOnRepReload();// 0x22e7970
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x22e78a0
	bool UseEnergy(int Mode);// 0x22e7800
	bool TryHitOperation(out const FireUniqueID FireUniqueID, const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x22e7560
	void StopSoundDelay(const float DelayTime);// 0x22e74e0
	void StopSound(enum Opt, int idx);// 0x22e7410
	void StopLastValidFire();// 0x22e73f0
	void StopGatlingSound();// 0x2649560
	void StartSound(enum Opt, int idx);// 0x22e7320
	void StartAsyncLoading();// 0x22e7300
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, const bool Local);// 0x22e7170
	void ShowSpecialEffect(bool bShow);// 0x22e70e0
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x22e7060
	void SetReservedAmmoForce(int InFireModeType, int InAmount);// 0x22e6f90
	void SetPrimaryShootingOption(enum Opt);// 0x22e6f10
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x22e6e40
	void SetHolder(Actor* InHolder);// 0x22e6db0
	void ServerWeaponSound(const enum Opt, const bool TriggerSound);// 0x22e6cd0
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams, Pawn* SourcePawn);// 0x22e6bb0
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, float InTimestamp);// 0x22e6ab0
	void ServerUpdateMechanicalState(enum NewMechanicalState, enum NewSubFlags);// 0x22e69e0
	void ServerUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x22e6910
	void ServerUpdateGatlingRepState(int InState);// 0xa85670
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x22e6880
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x22e6760
	void ServerSetTracingAimTarget(bool InbTracingAimTarget);// 0x22e66d0
	void ServerSetPrimaryOption(const enum Opt);// 0x22e6650
	void ServerSetHipFire(const bool InbHipFire);// 0x22e65c0
	void ServerResetFireCount();// 0x1570dd0
	void ServerRequestDropWeapon();// 0x7debc0
	void ServerPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x22e64f0
	void ServerModeState(const byte ModeIndex);// 0x22e6470
	void ServerLaserHit(const HitResult[] Hits, float InActivateTime);// 0x22e6380
	void ServerInterruptLaser();// 0x1571ab0
	void ServerInstantLineShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float DamageScale, const MutiBulletHitData HitData);// 0x22e6190
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x22e6000
	void ServerFireChargePhaseChange(const int8 InFireChargingPhase);// 0x22e5f80
	void ServerFire_JustAbilitiesAmmo(const byte ModeIndex);// 0x22e6110
	void ServerChangeOverloadState(const enum InState);// 0x22e5f00
	void ServerCanisterShot(const Vector_NetQuantize Start, const Vector_NetQuantize End, const float RandomA, const float RandomB, const MutiBulletHitData HitData);// 0x22e5d10
	void ServerAddExpWithReason(int InExp, int InReasonID);// 0x22e5c40
	void ServerActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x22e5b70
	void RuntimeUpdateData(int Cmd, FString Params);// 0x22e5a90
	void ResetRecoilComponent();// 0x22e5a70
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x2649560
	void ReceiveChargingState(const int Index, const enum State);// 0x22e59a0
	void PrimaryCost();// 0x1571450
	void PlayVibrate(enum InType);// 0x22e5920
	void PlayReloadRestoreVibrate();// 0x22e5900
	void PlayReloadGetOldVibrate();// 0x22e58e0
	void PlayFireVibrate();// 0x22e58c0
	void PlayChargeVibrate();// 0x22e58a0
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser, float HitEffectScale);// 0x22e56b0
	void PlayBoltVibrate();// 0x22e5690
	void PlayAutoSingleSound();// 0x22e5670
	void PlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int AnimCount);// 0x22e5500
	void OverrideFireMode(int InFireModeType, const AmmoConfig* InNewAmmoConfig);// 0x22e5430
	void OnRep_WeaponState();// 0x22e5410
	void OnRep_TracingAimTarget();// 0x22e53f0
	void OnRep_SoundFireSkillCast();// 0x22e53d0
	void OnRep_SoundFireSingle();// 0x22e53b0
	void OnRep_SoundFireOverload();// 0x22e5390
	void OnRep_SoundFireLast();// 0x22e5370
	void OnRep_SoundFireBurst();// 0x22e5350
	void OnRep_SoundFireAutoCount();// 0x22e5330
	void OnRep_SoundB9A04Skill();// 0x22e5310
	void OnRep_OverloadStateChange(enum PreviousState);// 0x22e5290
	void OnRep_ImpactPosition();// 0x22e5270
	void OnRep_FireModes();// 0x1572510
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x22e51e0
	void OnRep_ExtraAmmo();// 0x22e51c0
	void OnRep_CurrentMode();// 0x22e51a0
	void OnRep_ControlWeaponCharacterChanged();// 0x22e5180
	void OnPlayMuzzleEffect();// 0x816be0
	void OnLoadInitAssetComplete();// 0x1571390
	void OnLoadCfgAssetsComplete();// 0x1571d10
	void OnInternalUnControlled();// 0x1572010
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x22e5060
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x2649560
	void OnInitFlowComplete();// 0x1571b70
	void OnGatlingRollChange(bool bIncrease);// 0x2649560
	void OnFireChargeBurstCountChange(int BurstSum);// 0x22e4fd0
	enum NextShootingPrimaryOption();// 0x22e4c20
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x22e4af0
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x22e49c0
	void LoadInitAsset();// 0x22e49a0
	void LoadAllCfgAssets();// 0x22e4980
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x22e48e0
	SingleWeaponConfig* K2_GetCurrentConfig();// 0x22e48b0
	bool IsVisible();// 0x22e4880
	bool IsShowCoolDownWidget();// 0x22e4830
	bool IsShotAimEnemy();// 0x22e4800
	bool IsScopeOpen();// 0x22e47d0
	bool IsOpenedScope();// 0x22e47a0
	bool IsHipFire();// 0x22e4770
	bool IsEnergyID(const int BulletItemID);// 0x22e46d0
	bool IsControlled();// 0x22e4690
	bool IsCanFire();// 0x22e4660
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x22e44c0
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x22e42c0
	void InternalClientPlayFiringEffects();// 0x15723f0
	bool InSameTeam();// 0x22e4290
	void InitConfigs();// 0x1571850
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x22e41c0
	bool HasLoadInitAsset();// 0x22e41a0
	bool HasLoadAllCfgAssets();// 0x22e4180
	bool HasInitFinish();// 0x21c9400
	bool HasInitConfigs();// 0x22e4150
	void HandFireModeInput(byte WeaponFireModeType, bool Press);// 0x22e4080
	enum GetWeaponType();// 0x22e4050
	FString GetWeaponTextType();// 0x22e3fd0
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x22e3f30
	int GetWeaponLevel();// 0x22e3f00
	int GetWeaponID();// 0x22e3eb0
	Texture2D* GetWeaponIcon();// 0x22e3ed0
	enum GetWeaponBrand();// 0x22e3e80
	AnimMontage* GetWeaponAnimSequence(const enum InMontageType);// 0x22e3b40
	WeaponAnimationInfo GetWeaponAnimationInfo(const enum InMontageType);// 0x22e3c80
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x22e39f0
	int GetSpareAmmo(int InFireModeType);// 0x22e3950
	float GetSoundRTPCValue();// 0x22e3920
	int GetSkinID();// 0x22e38f0
	float GetShotGunSpreadSeed();// 0x21f9580
	Vector GetShotDir(bool NeedSpread);// 0x22e3840
	Vector GetShootingTraceStartLocation();// 0x22e3800
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x22e3720
	float GetSecondModeValue();// 0x22e36f0
	int GetReservedAmmo(int idx);// 0x22e3650
	float GetReloadProgress();// 0x22e3620
	WeaponRecoilComponent* GetRecoilComponent();// 0x22e35f0
	int GetPrimaryShootingOptionIndex();// 0x22e35c0
	float GetPostFireDuration(int idx);// 0x22e3520
	WeaponPartsComponent* GetPartsComponent();// 0x22e34f0
	float GetOverloadPercent();// 0x22e34c0
	float GetOverloadMaxValue();// 0x2112ec0
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x22e3490
	int GetMaxAmmo(int idx, bool bWithExtraAmmoByChaAbility);// 0x22e33c0
	float GetLastFireTime(int InFireModeType);// 0x22e3320
	bool GetIsVehicleMounted();// 0x22e32f0
	bool GetIsSupportSecondaryFire();// 0x22e32c0
	bool GetIsSupportAutoFire();// 0x22e3290
	bool GetIsSupportAssistAim();// 0x22e3260
	bool GetIsQuickScope();// 0x22e3230
	bool GetIsCoolDown(int Mode);// 0x22e3190
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x22e3160
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x22e30c0
	float GetFireIntervalProgress(int idx);// 0x22e3020
	float GetFireInterval(int idx);// 0x22e2f80
	void GetFireChargeInfo(out int OutChargingPhase, out float OutChargingTime, out float OutRate, out FireChargeData OutChargeData);// 0x22e2d40
	float GetFireCD(int idx);// 0x22e2ca0
	float GetExtraPointsPercent();// 0x22e2c80
	int GetExtraPoints();// 0x22e2c60
	ParticleSystem* GetDedicatedKillEffect();// 0x22e2c30
	SoftObjectPath GetDedicatedDissolvedDeathFXPath();// 0x22e2ba0
	class ActorEffect GetDedicatedDissolvedDeathActorEffectClass();// 0x22e2b60
	WeaponDebugFlag GetDebugFlag();// 0x22e2b20
	int GetCurScopeType();// 0x22e2580
	enum GetCurrentShootingPrimaryOption();// 0x22e2af0
	enum GetCurrentScopeType();// 0x22e2ac0
	FireChargeData GetCurrentFireChargeData(const AmmoConfig* InAmmo);// 0x22e2830
	AmmoConfig* GetCurrentFireChargeAmmoData(const AmmoConfig* InAmmo);// 0x22e2790
	int GetCurrentClipAmmo(int InFireModeType);// 0x22e26f0
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x22e25c0
	int GetCostPreAttack(int idx);// 0x22e24e0
	SolarCharacterBase* GetControlWeaponCharacter();// 0x22e24b0
	float GetChargingPercent(int idx);// 0x22e2410
	float GetBurstInterval(int idx);// 0x22e2370
	float GetBurstInternalInterval(int idx);// 0x22e22d0
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x22e2130
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x22e1fb0
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x22e1ee0
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x22e1e10
	float GetBotAIDamageFactor();// 0x22e1de0
	enum GetAmmoTriggerType(const int fireModeType);// 0x22e1d40
	int GetAmmoItemID(int idx);// 0x22e1ca0
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x22e1bc0
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x22e1ae0
	void GetAimStartEnd(const AmmoConfig* InAmmo, out Vector OutStart, out Vector OutEnd, out Actor* OutTargetActor, bool NeedSpread);// 0x22e1900
	bool FireVerify_Location(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x22e1710
	bool FireVerify_EffectRange(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x22e1520
	bool FireVerify_Block(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x22e1330
	bool FireValidate(const int idx, const float InLastShootTime);// 0x22e1260
	enum FindMontageKeyFromWeaponAnim(const AnimMontage* InAnimation);// 0x22e0ff0
	void EnterOverloadState();// 0x2649560
	void DestroyWeaponProjectileSpline();// 0x22e0fd0
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter);// 0x22e0f30
	void ClientUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x22e0e60
	void ClientPlayHitEffect(const MultiHitResult InMultiHitResult);// 0x22e0d90
	void ClientPlayFiringEffects();// 0x816c00
	void ClientPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x22e0cc0
	void ClientNotifyUpdateReservedAmmoForce(int InFireModeType, int InAmount);// 0x22e0bf0
	void ClientLaserHit(const HitResult[] Hits, float InActivateTime);// 0x22e0b00
	void ClientInterruptLaser();// 0x15711b0
	void ClientInstantLineShot(const byte ModeIndex, const HitResult[] HitResults, const Vector_NetQuantize End, const float DamageScale);// 0x22e0990
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x22e0880
	void ClientCanisterShot(const Vector_NetQuantize Start, const WeaponShotHitResult[] ValidHits, const Vector_NetQuantize Target);// 0x22e0760
	void ClientActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x22e0690
	void ClearFireHitVerify();// 0x22e0670
	bool CheckOpenParticleOptimization(int Bias);// 0x22e05d0
	bool CanOverload();// 0x22e05b0
	bool CanCauseTeamDamage();// 0x22e0580
	float CalcScale(out const FireMode Mode);// 0x22e0480
	int CalcCost(out const FireMode Mode);// 0x22e0380
	void AddExtraPoints(const enum InHitType, const int InDamage);// 0x22e02b0

--------------------------------
Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 1]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0xe8, Size: 1]
	bool WeaponBarLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x100, Size: 1]
	bool WeaponClipLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x118, Size: 1]
	bool WeaponGripLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x130, Size: 1]
	bool WeaponScopeLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x148, Size: 1]
	bool WeaponStockLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x160, Size: 1]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x168, Size: 1]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x170, Size: 1]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x188, Size: 1]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x1a0, Size: 1]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x1a8, Size: 1]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x1c0, Size: 1]
	class ActorEffect* DedicatedDissolvedDeathActorEffect;//[Offset: 0x1d8, Size: 1]
	SoftObjectPath DedicatedDissolvedDeathFXPath;//[Offset: 0x1e0, Size: 1]
	FString PlayAudioEventName;//[Offset: 0x1f8, Size: 1]
	FString StopAudioEventName;//[Offset: 0x208, Size: 1]
	AnimSequence* OutsideAnimation;//[Offset: 0x218, Size: 1]
	void ModifyResPath();// 0x2321a00
	bool IsMeshReplace();// 0x23219b0
	bool GetPartLockedInfoByType(const enum PartType);// 0x2321840
	bool GetPartDataArrayByType(const enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x23216e0

--------------------------------
Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 1]
	SoftObjectPath WeaponMesh;//[Offset: 0x8, Size: 1]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x20, Size: 1]
	<enum,SoftObjectPath> OverrideWeaponAnimSequenceMap;//[Offset: 0x28, Size: 1]
	SoftObjectPath LodpMesh;//[Offset: 0x78, Size: 1]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x90, Size: 1]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 1]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 1]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 1]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 1]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 1]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 1]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 1]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 1]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 1]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 1]
	bool SwitchStateCheck(enum CheckState);// 0x231d5e0
	void SetInterruptIsTrue();// 0x231d100
	bool RouterNodeJudge();// 0x231cf30
	void OnQuitState(enum State);// 0x231cab0
	void OnEnterState(enum State);// 0x231c890
	void Interrupt();// 0x231c830
	bool HasMsg();// 0x231c6a0
	bool ConsumMsg();// 0x231c4b0
	bool AddMsg(enum State, float Speed);// 0x231c2c0

--------------------------------
Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 1]
	float Speed;//[Offset: 0x4, Size: 1]

--------------------------------
Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName Socket;//[Offset: 0x4, Size: 1]
	ParticleSystem* PS;//[Offset: 0x10, Size: 1]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 1]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 1]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 1]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarBullet.Actor.Object
	float TotalEffectTime;//[Offset: 0x228, Size: 1]
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	bool bShowHitToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 1]
	ParticleSystem* BulletEffect;//[Offset: 0x230, Size: 1]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x238, Size: 1]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x240, Size: 1]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x248, Size: 1]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x260, Size: 1]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x268, Size: 1]
	ParticleSystem* HitEffect;//[Offset: 0x270, Size: 1]
	ParticleSystem* MuzzleEffect;//[Offset: 0x278, Size: 1]
	bool bKeepOneActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x288, Size: 1]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x290, Size: 1]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x298, Size: 1]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a0, Size: 1]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2a8, Size: 1]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b0, Size: 1]
	ParticleSystem* DecalEffect;//[Offset: 0x2b8, Size: 1]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c0, Size: 1]
	SoftObjectPath ShieldEffect;//[Offset: 0x2c8, Size: 1]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2e0, Size: 1]
	float DecalLifeSpan;//[Offset: 0x330, Size: 1]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x338, Size: 1]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x340, Size: 1]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	FString HoldingPreViewSound_1P;//[Offset: 0x350, Size: 1]
	FString HoldingPreViewSound_3P;//[Offset: 0x360, Size: 1]
	byte BulletCollisionType;//[Offset: 0x370, Size: 1]
	void OnPlayImpactEffect(ParticleSystemComponent* PSC);// 0x2649560
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x20f2070

--------------------------------
Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 1]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ActorEffectController.Object

--------------------------------
Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x230, Size: 1]
	enum CurrentPostureType;//[Offset: 0x231, Size: 1]

--------------------------------
Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xb8, Size: 1]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xc8, Size: 1]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd0, Size: 1]
	CurveFloat* YawCurve;//[Offset: 0xd8, Size: 1]
	CurveFloat* PitchCurve;//[Offset: 0xe0, Size: 1]
	CurveFloat* RollCurve;//[Offset: 0xe8, Size: 1]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf0, Size: 1]
	CurveFloat* ScopePitchCurve;//[Offset: 0xf8, Size: 1]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x100, Size: 1]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x110, Size: 1]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e0, Size: 1]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f0, Size: 1]
	CurveFloat* PitchEndCurve;//[Offset: 0x200, Size: 1]
	CurveFloat*[] RollCurveArray;//[Offset: 0x208, Size: 1]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x218, Size: 1]
	void SetRecoilVActive(bool bActive);// 0x2325ea0
	void SetRecoilRActive(bool bActive);// 0x2325e10
	void SetRecoilHActive(bool bActive);// 0x2325d80
	void SetRecoilActive(bool bActive);// 0x2325cf0
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x2325b40
	bool IsRunning();// 0x2325ae0
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x23257a0
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x23255e0
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x2325510
	Rotator GetCurrentRecoil();// 0x2325370
	Rotator GetAndClearCurrentRecoil();// 0x23252b0
	void Fire(bool hipfire, bool Primary);// 0x23251e0

--------------------------------
Class: SolarGameInstanceBase.SolarArchitecture.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x350, Size: 1]
	SoftObjectPath LobbyMap;//[Offset: 0x368, Size: 1]
	SoftObjectPath EntryMap;//[Offset: 0x380, Size: 1]
	SoftObjectPath GameMap;//[Offset: 0x398, Size: 1]
	SoftObjectPath SettlementMap;//[Offset: 0x3b0, Size: 1]
	SoftObjectPath ConfigServerMap;//[Offset: 0x3c8, Size: 1]
	FString ConfigBattleAddr;//[Offset: 0x3e0, Size: 1]
	int ConfigBattlePort;//[Offset: 0x3f0, Size: 1]
	FString ConfigBackendAddr;//[Offset: 0x3f8, Size: 1]
	int ConfigBackendPort;//[Offset: 0x408, Size: 1]
	int BuildNumber;//[Offset: 0x40c, Size: 1]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x410, Size: 1]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x438, Size: 1]
	SoftClassPath DefaultLockSettings;//[Offset: 0x450, Size: 1]
	SoftClassPath ReplayManagerClass;//[Offset: 0x468, Size: 1]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x480, Size: 1]
	bool bNeedRebootButNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	int LastChoosedVoiceLangID;//[Offset: 0x49c, Size: 1]
	FString CachedNetworkErrorString;//[Offset: 0x4a0, Size: 1]
	SolarOperationUIElement* CachedDefaultOperationLayout;//[Offset: 0x4b0, Size: 1]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	MulticastInlineDelegateProperty OnBaseManagersInit;//[Size: 1]
	MulticastInlineDelegateProperty OnGameManagersInit;//[Size: 1]
	MulticastInlineDelegateProperty OnLuaManagersInit;//[Size: 1]
	GameArgs* GameArgsManager;//[Offset: 0x668, Size: 1]
	UIManager* UIManager;//[Offset: 0x670, Size: 1]
	UINavigationManager* UINavigationManager;//[Offset: 0x678, Size: 1]
	SolarInputMappingManager* SolarInputMappingManager;//[Offset: 0x680, Size: 1]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x688, Size: 1]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x690, Size: 1]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x698, Size: 1]
	BattlePassConfigInfo* BattlePassConfigInfo;//[Offset: 0x6a0, Size: 1]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x6a8, Size: 1]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x6b0, Size: 1]
	SolarTableManager* SolarTableManager;//[Offset: 0x6b8, Size: 1]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x6c0, Size: 1]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x6c8, Size: 1]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x6d0, Size: 1]
	SolarItemManager* SolarItemManager;//[Offset: 0x6d8, Size: 1]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x6e0, Size: 1]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x6e8, Size: 1]
	SolarMapManager* SolarMapManager;//[Offset: 0x6f0, Size: 1]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x6f8, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x700, Size: 1]
	IMChatObject* SolarIMChatObject;//[Offset: 0x708, Size: 1]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x710, Size: 1]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x718, Size: 1]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x720, Size: 1]
	CrashReportManager* CrashReportManager;//[Offset: 0x728, Size: 1]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x730, Size: 1]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x738, Size: 1]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x740, Size: 1]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x748, Size: 1]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x750, Size: 1]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x758, Size: 1]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x760, Size: 1]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x768, Size: 1]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x770, Size: 1]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x778, Size: 1]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x780, Size: 1]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x788, Size: 1]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x790, Size: 1]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x798, Size: 1]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x7a0, Size: 1]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x7a8, Size: 1]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x7b0, Size: 1]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x7b8, Size: 1]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x7c0, Size: 1]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x7c8, Size: 1]
	SettlementStageManager* SettlementManager;//[Offset: 0x7f0, Size: 1]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x7f8, Size: 1]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x818, Size: 1]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x840, Size: 1]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x848, Size: 1]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x858, Size: 1]
	SolarEasyAntiCheatManager* SolarEasyAntiCheatManager;//[Offset: 0x860, Size: 1]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x868, Size: 1]
	PakHashManager* SolarPakHashManager;//[Offset: 0x870, Size: 1]
	SolarFontManager* SolarFontManager;//[Offset: 0x878, Size: 1]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x880, Size: 1]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x888, Size: 1]
	MulticastInlineDelegateProperty OnPatchComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnTouchInputDelegate;//[Size: 1]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x8c0, Size: 1]
	bool IsHotPatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 1]
	bool bCheatedInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 1]
	FText KickOutReason;//[Offset: 0x930, Size: 1]
	MulticastInlineDelegateProperty OnSsmDSGetConfigSuccess;//[Size: 1]
	AntiCheatSetting[] AntiCheatSettings;//[Offset: 0x958, Size: 1]
	ScreenshotConfig ScreenshotConfig;//[Offset: 0x968, Size: 1]
	void UpdateScreenshotSetting();// 0x2140e50
	void UpdateAntiCheatSetting();// 0x2140e30
	void TestEnsureMsgInternal();// 0x8f2720
	void TestCrashInternal();// 0x2140e10
	void SolarGm_UploadLogFile();// 0x8f2720
	void SolarGM_Tut(FString Cmd, out const FString[] Args);// 0x2140990
	void SolarGM_TriggerSteamAntiCheat(const int ActionReason, FString ActionDetials);// 0x2140d30
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x2649560
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x2140990
	void SolarGM_TestEnsureMsgWithBP();// 0x2649560
	void SolarGM_TestEnsureMsg();// 0x8f2720
	void SolarGM_TestCrashWithBP();// 0x2649560
	void SolarGM_TestCrash();// 0x8f2720
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x1ff2470
	void SolarGM_StopRecordingReplay();// 0x8f2720
	void SolarGM_StopPlayingReplay();// 0x8f2720
	void SolarGM_StartRecordingLocalReplay(FString Filename);// 0x2100560
	void SolarGM_StartRecordHighlight(FString SessionNameOverride);// 0x2100560
	void SolarGM_SetQuality(int InQuality);// 0x15b05a0
	void SolarGM_RequestWatchingLiveOfPlayer(FString PlayerId);// 0x2100560
	void SolarGM_RequestReplayList(int PageIndex, int PageSize);// 0x2120500
	void SolarGM_RequestPlayReplayByIdx(uint32 Index);// 0x2140ca0
	void SolarGM_RequestPlayReplayByBattleID(FString BattleID, bool IsLive);// 0x2140bc0
	void SolarGM_RequestPlayReplay(FString BattleID, FString DownloadUrl);// 0x2140ac0
	void SolarGM_PlayLocalReplay(FString Filename);// 0x2100560
	void SolarGM_PlayHighlight(FString Filename);// 0x2100560
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x2649560
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x2140990
	void SolarGM_KickMeOut();// 0x8f2720
	void SolarGM_GoHome();// 0x8f2720
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x1ff2470
	void SolarGM_AddWeaponExpLua(int weaponid, int count);// 0x2649560
	void SolarGM_AddWeaponExp(int weaponid, int count);// 0x2120500
	void SolarGM_AddItemLua(int ItemID, int count);// 0x2649560
	void SolarGM_AddItem(int ItemID, int count);// 0x2120500
	void ShutDownPCSDK();// 0x2649560
	void ShutDownLimSdk();// 0x2649560
	void ShutdownAnoSDK();// 0x2649560
	void SetIsFirstLaunch(bool bIsFirst);// 0x2140870
	void SetCleanUpfile(bool bCleanCache);// 0x21407e0
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x2140620
	void SaveGame();// 0x2140600
	void RequestShutDown(FString reason);// 0x21404d0
	void ReportLoadingInfoToBI(out FString[] LoadingInfo, float LoadingTime, bool bIsFinished);// 0x2649560
	void RegisterNetworkManager();// 0x2649560
	void OnStartBattle(FString BattleID);// 0x2140240
	void OnSsmDSGetConfigSuccess__DelegateSignature();// 0x2649560
	void OnManagersInitialized__DelegateSignature();// 0x2649560
	void OnHotPatchComplete();// 0x2140200
	void OnDisconnect();// 0x2649560
	void LuaStartGameFrameWork();// 0x2649560
	void LuaInitGameFrameWork();// 0x2649560
	bool IsStandalone();// 0x2140070
	static bool IsSolarServer(const Object* WorldContextObject);// 0x213ffe0
	bool IsSkipLogin();// 0x213ffb0
	bool IsServerOrStandalone();// 0x213ff80
	bool IsListenServer();// 0x213feb0
	bool IsGIsEditor();// 0x2106880
	bool IsFirstLaunchAfterVersionUpdate();// 0x213fe90
	bool IsEditor();// 0x2106880
	bool IsDedicatedServerStressTest();// 0x213fe70
	bool IsDedicatedServer();// 0x213fe40
	bool IsClientOrStandalone();// 0x213fe10
	bool IsClient();// 0x213fde0
	void InitLuaClasses();// 0x2649560
	void InitGameManagers();// 0x213fcf0
	bool HasCommandlineParam(FString Param);// 0x213fc40
	void GoHomeLuaCall();// 0x2649560
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x213fc10
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x213fbe0
	UINavigationManager* GetUINavigationManager();// 0x213fbb0
	SolarVibrateManager* GetSolarVibrateManager();// 0x213fa20
	SolarTutorialManager* GetSolarTutorialManager();// 0x213f9f0
	SolarTimerManager* GetSolarTimerManager();// 0x213f9c0
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x213f990
	SolarTableManager* GetSolarTableManager();// 0x213f960
	SolarSaveGame* GetSolarSaveGame();// 0x213f930
	SolarReplayManager* GetSolarReplayManager();// 0x213f900
	SolarRedHintManager* GetSolarRedHintManager();// 0x213f8d0
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x213f8a0
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x213f870
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x213f840
	SolarMapManager* GetSolarMapManager();// 0x213f810
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x213f7e0
	SolarLuaManager* GetSolarLuaManager();// 0x213f7b0
	SolarLuaHelper* GetSolarLuaHelper();// 0x213f780
	SolarLoginManager* GetSolarLoginManager();// 0x213f760
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x213f730
	SolarItemManager* GetSolarItemManager();// 0x213f700
	SolarInteractableManager* GetSolarInteractableManager();// 0x213f6d0
	SolarInputMappingManager* GetSolarInputMappingManager();// 0x213f6a0
	IMChatObject* GetSolarIMChatObject();// 0x213f670
	SolarHttpManager* GetSolarHttpManager();// 0x213f650
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x213f620
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x213f5c0
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x213f5f0
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x213f590
	static SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x213f500
	SolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager();// 0x213f4d0
	static SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x213f440
	SolarAnoHelper* GetSolarAnoHelper();// 0x213f410
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x213f3f0
	SolarAkGameObject* GetSolarAkGameObject();// 0x213f3c0
	SolarActivityManager* GetSolarActivityManager();// 0x213f3a0
	SolarABTestManager* GetSolarABTestManager();// 0x213f380
	SettlementStageManager* GetSettlementStageManager();// 0x213f360
	byte GetPlayStage();// 0x213f310
	SolarCharacter* GetPlayerCharacter();// 0x213f330
	FString GetPIEServerURL();// 0x213f290
	int GetPIEInstance();// 0x213f260
	FString GetNetModeString();// 0x213f1e0
	byte GetNetMode();// 0x213f1b0
	KeyMappingManager* GetKeyMappingManager();// 0x213f0e0
	bool GetIsMutiPlayer();// 0x213f0b0
	SolarGameStatistics* GetGameStatistics();// 0x213eda0
	SolarGameConfigManager* GetGameConfigManager();// 0x213ed70
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x213ec60
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x213ec30
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x213ec10
	CrashReportManager* GetCrashReportManager();// 0x213ebe0
	FString GetCommandlineParam(FString Param);// 0x213eaf0
	int GetClientNumber();// 0x213ea20
	static void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x213e900
	static void GetCategorizedActorsByBits(const Object* WorldContextObject, byte InActorBit, out Actor*[] OutActors);// 0x213e7e0
	BattlePassConfigInfo* GetBattlePassConfigInfo();// 0x213e7b0
	SolarAssetManager* GetAssetManager();// 0x213e780
	int64 GetAppActiveTimestampInterval();// 0x213e750
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x213e680
	void ExecuteCommand(FString Cmd);// 0x213e5e0
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn);// 0x2649560
	void ExecuteBackKeyLuaCall();// 0x2649560
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x213e480
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x213e250
	void ClearGameManagers();// 0x213e230
	void CheckSavedDirFiles(out FString[] Files);// 0x2649560
	void Browse(FString URL, byte TravelType);// 0x213e150

--------------------------------
Class: SolarArchitecture.GameInstance.Object
	MulticastInlineDelegateProperty OnOnScopeChangeDelegate;//[Size: 1]
	void OnScopeChanged(enum InLastScope, enum InCurScope);// 0x2649560
	bool IsScopeSettlement();// 0x23451c0
	bool IsScopeLogin();// 0x2345190
	bool IsScopeLobby();// 0x2345160
	bool IsScopeBattle();// 0x2345130
	bool IsInScope(enum InScopeMask);// 0x23450a0
	SolarAbstractModel* GetModel(out const class SolarAbstractModel ModelClass);// 0x2345000
	SolarAbstractManager* GetManager(out const class SolarAbstractManager ManagerClass);// 0x2344f60
	enum GetCurScope();// 0x2344f40

--------------------------------
Class: SolarAbstractModel.SolarContainer.Object

--------------------------------
Class: SolarContainer.Object
	void ReceiveInitialize();// 0x2649560
	void ReceiveDeinitialize();// 0x2649560

--------------------------------
Class: SolarAbstractManager.SolarContainer.Object

--------------------------------
Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 1]
	int weaponid;//[Offset: 0x10, Size: 1]
	int SkinId;//[Offset: 0x14, Size: 1]
	int[] Parts;//[Offset: 0x18, Size: 1]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x23218d0

--------------------------------
Class: UINavigationManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 1]
	SolarUserWidget*[] TmpRemovedWidgets;//[Offset: 0x88, Size: 1]
	SolarUserWidget*[] CachedCreatedWidgets;//[Offset: 0x98, Size: 1]
	SolarUIRoot* SolarUIRoot;//[Offset: 0xb8, Size: 1]
	void UnbindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget);// 0xb43660
	SolarUserWidget* ShowUIBySubClass(const class SolarUserWidget SubClass, enum RootID);// 0x2314900
	bool ShowPanelUI(SolarUserWidget* createWidget, FString UniqueWidgetKey);// 0xb43660
	void RemoveUserWidgetLuaRef(SolarUserWidget* UserWidget);// 0x2314250
	void RemoveUIFromOpenedMap(FString UniqueWidgetKey);// 0x23141b0
	void RemoveAllSolarWidgets();// 0xb43660
	void PrePooledWidgetReset(UserWidget* UserWidget);// 0xb43660
	void OnShowPanelUI(SolarUserWidget* UserWidget);// 0x2314060
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x91ba60
	void OnOpenPanelUI(SolarUserWidget* UserWidget);// 0x2313fb0
	void OnHidePanelUI(SolarUserWidget* UserWidget);// 0x2313f00
	void OnDisplayMetricsChanged();// 0xb43660
	void OnClosePanelUI(SolarUserWidget* UserWidget);// 0x2313e50
	bool IsUserWidgetInScope(out const class SolarUserWidget Class, out enum OutCurScope, out enum OutDstScope);// 0x2313c30
	SolarUserWidget* GetShowTopWidget();// 0xb43660
	UserWidget* GetOpenedWidget(FString UniqueWidgetKey);// 0xb43660
	void CloseUIBySubClass(const class SolarUserWidget SubClass);// 0x2313a30
	void ClosePanelUI(SolarUserWidget* closeWidget, FString UniqueWidgetKey);// 0xb43660
	void ClearNonPersistentWidget();// 0x23139d0
	void ClearAllOpenedWidget();// 0x23139b0
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x2313900
	void BindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget, FString FullPath);// 0xb43660
	void BatchRemovedWidgets(bool bRemoveAll);// 0x2313850
	void AddUIToOpenedMap(FString UniqueWidgetKey, SolarUserWidget* Widget);// 0x2313770
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x23136e0

--------------------------------
Class: SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 1]
	void ReceiveManagerIntialized();// 0x2649560

--------------------------------
Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: SolarVibrateManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	GameplayVibrateDataAsset* GameplayVibrateDataAsset;//[Offset: 0x50, Size: 1]
	<enum,enum> CurrentVibrateCategoryIntensity;//[Offset: 0x58, Size: 1]
	DataTable* WeaponVibrateTable;//[Offset: 0xa8, Size: 1]
	VibrateConfig* VibrateConfig;//[Offset: 0xb0, Size: 1]
	enum WeaponVibrateFactor;//[Offset: 0xb8, Size: 1]
	float CacheWeaponChargeTime;//[Offset: 0xbc, Size: 1]
	void Stop();// 0x22daa40
	void SetWeaponVibrateFactor();// 0x22daa00
	void SetVibrateAbilityEnable(bool bOnEnable);// 0x22da970
	void SetGameplayVibrateIntensityByUserSetting();// 0x22da950
	void SetGameplayVibrateIntensity(enum Category, enum Intensity);// 0x22da880
	void SendLoopParam(int Amplitude, int Interval);// 0x22da470
	void PlayWeaponVibrate(int InWeaponID, enum InType, float InChargeTime);// 0x22da2d0
	void Play(FString Name, int Duration, int Loop, int Priority, int Interval, int Amplitude);// 0x22da0d0
	bool GetVibrateAbilityEnable();// 0x22d9cb0

--------------------------------
Class: GameplayVibrateDataAsset.DataAsset.Object
	<enum,VibrateIntensityPlayParams> CategoryIntensityMap;//[Offset: 0x30, Size: 1]

--------------------------------
Class: VibrateIntensityPlayParams
	<enum,VibratePlayParams> IntensityMap;//[Offset: 0x0, Size: 1]

--------------------------------
Class: VibratePlayParams
	FString ClipToPlay;//[Offset: 0x0, Size: 1]
	int Duration;//[Offset: 0x10, Size: 1]
	int Loop;//[Offset: 0x14, Size: 1]
	int Priority;//[Offset: 0x18, Size: 1]
	int Interval;//[Offset: 0x1c, Size: 1]
	int Amplitude;//[Offset: 0x20, Size: 1]

--------------------------------
Class: VibrateConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 1]
	<enum,float> WeaponVibrateFactorMap;//[Offset: 0x38, Size: 1]
	SoftObjectPath WeaponDataTabPath;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarTutorialManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	enum CurrentTutorialStage;//[Offset: 0x50, Size: 1]
	MulticastInlineDelegateProperty OnRegisterEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnStepActionBegan;//[Size: 1]
	MulticastInlineDelegateProperty OnStepActionEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnStepActionReset;//[Size: 1]
	MulticastInlineDelegateProperty OnStepActionDisposed;//[Size: 1]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0x118, Size: 1]
	<int,TutorialTableRow> TutorialTableMapRows;//[Offset: 0x120, Size: 1]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0x170, Size: 1]
	<int,TutorialConditionTableRow> ConditionTableMapRows;//[Offset: 0x180, Size: 1]
	<int,Tutorial*> Tutorials;//[Offset: 0x1d0, Size: 1]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	FString TutorialDataTablePath;//[Offset: 0x338, Size: 1]
	FString ActionDataTablePath;//[Offset: 0x348, Size: 1]
	FString ConditionDataTablePath;//[Offset: 0x358, Size: 1]
	FString TutorialGlobalConfigPath;//[Offset: 0x368, Size: 1]
	<uint16,FName> OriginCheckFuncNames;//[Offset: 0x378, Size: 1]
	<uint16,Function*> CheckFuncs;//[Offset: 0x3c8, Size: 1]
	<FString,CacheConditionInfo> CacheRanConditions;//[Offset: 0x428, Size: 1]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x488, Size: 1]
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x22c2fc0
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x22c2e90
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x22c2d60
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x22c2c30
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x22c2b00
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x22c29d0
	void TriggerTutorialInternal(enum TriggerID);// 0x22c2950
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x22c2850
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x22c2780
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x22c2650
	FString[] TriggerSpecifiedPlayerProficiency(out const FString[] Params);// 0x22c2520
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x22c23f0
	FString[] TriggerRunningStep(out const FString[] Params);// 0x22c22c0
	FString[] TriggerPlayerUpgradeBattleLevel(out const FString[] Params);// 0x22c2190
	FString[] TriggerPlayerInTargetStage(out const FString[] Params);// 0x22c2060
	FString[] TriggerPlayerAcountLevel(out const FString[] Params);// 0x22c1f30
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x22c1e00
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x22c1cd0
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x22c1ba0
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x22c1a70
	FString[] TriggerHasUIPanelOpened(out const FString[] Params);// 0x22c1940
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x22c1810
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x22c16e0
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x22c15b0
	FString[] TriggerFeatureUnlock(out const FString[] Params);// 0x22c1480
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x22c1350
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x22c1220
	FString[] TriggerApproachTreasureBox(out const FString[] Params);// 0x22c10f0
	FString[] TriggerAlreadyTriggeredMaxCount(out const FString[] Params);// 0x22c0fc0
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x22c0e90
	void TickActivatedTutorials();// 0x22c0e70
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x22c0d50
	void SetTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x22c0c80
	void SetSignNameBool(FString SignName, bool InValue);// 0x22c0ba0
	void SetFlagNameCount(FString FlagName, int Num);// 0x22c0ac0
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x22c0a30
	void SaveTutorialLevelSaveGame();// 0x22c0a10
	void SaveLevelTutorialID(FString InLevelName, int InTutorialID);// 0x22c0930
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x22c0850
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x22c0750
	void RequestAddTutorialProgress(int TutorialID, int Progress);// 0xb43660
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0xb43660
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0xb43660
	void ReceiveLoadTutorialLevelData();// 0xb43660
	void ReceiveLoadData();// 0xb43660
	void ReceiveClearData();// 0xb43660
	void OnPostLoadMap(FString LevelName);// 0x22c06b0
	bool IsInTutorialLevel();// 0x22c0650
	void InitGuideActorByActionID(int[] ActionIDs, TutorialLevelInteractableActor* TutorialGuideActor);// 0x22c04c0
	bool HasAnyTutorialPlaying();// 0x22c0470
	bool HasAnyMandatoryTutorialPlaying();// 0x22c0440
	void GM_OpenUI(int ID);// 0xb43660
	void GM_CloseUI(int ID);// 0xb43660
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x22c0390
	int GetTutorialSingleRoundTriggerMax(int TutorialID);// 0xb43660
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x22c02b0
	bool GetTipsUIInteractionFlag(int TutorialID);// 0x22bffe0
	bool GetSignNameBool(FString SignName);// 0x22bff00
	UserWidget* GetPanelUI(FString PanelName);// 0xb43660
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x22bfd70
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x22bfc80
	int GetFlagNameCount(FString FlagName);// 0x22bfbd0
	byte GetCurrentPlayerLevel();// 0xb43660
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x22bfb10
	Widget* FindWidget(out const FName[] InWidgetLink);// 0x22bfa50
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0xb43660
	bool CheckTutorialTipUIOnClick(out const FString[] InParams);// 0x22bf860
	bool CheckIfWidgetReleased(out const FString[] InParams);// 0x22bf780
	bool CheckIfWidgetPressed(out const FString[] InParams);// 0x22bf6a0
	bool CheckIfWidgetPlayAnimationFinish(out const FString[] InParams);// 0x22bf6a0
	bool CheckIfWidgetClicked(out const FString[] InParams);// 0x22bf5c0
	bool CheckIfWeaponSlotHasSpecifiedItem(out const FString[] InParams);// 0x22bf4e0
	bool CheckIfUIPanelOpened(out const FString[] InParams);// 0xb43660
	bool CheckIfTutorialLevelDone(out const FString[] InParams);// 0xb43660
	bool CheckIfTakeDamage(out const FString[] InParams);// 0x22bf400
	bool CheckIfSprintingContinuously(out const FString[] InParams);// 0x22bf320
	bool CheckIfSpecifiedPlayerProficiency(out const FString[] InParams);// 0x22bf240
	bool CheckIfShieldNotFull();// 0x22bf210
	bool CheckIfRunningStep(out const FString[] InParams);// 0x22bf130
	bool CheckIfReloading();// 0x22bf100
	bool CheckIfRechargingShield();// 0x22bf0d0
	bool CheckIfPlayerLevel(out const FString[] InParams);// 0x22beff0
	bool CheckIfPlayerInTargetScene(out const FString[] InParams);// 0x22bef10
	bool CheckIfPlayerInBattling();// 0x22beee0
	bool CheckIfPlayerBattleLevel(out const FString[] InParams);// 0x22bee00
	bool CheckIfOpenBigMapUMG();// 0x22bedd0
	bool CheckIfNearAirDropBox();// 0x22beda0
	bool CheckIfJumpBegin();// 0x22bed70
	bool CheckIfJetFlyingVertically();// 0x22bed40
	bool CheckIfJetFlyingHorizontally();// 0x22bed10
	bool CheckIfInWater();// 0x22bece0
	bool CheckIfInVehicle();// 0x22becb0
	bool CheckIfInAir();// 0x22bec80
	bool CheckIfHasSpecifiedItem(out const FString[] InParams);// 0x22beba0
	bool CheckIfHasSpecifiedEquipmentByType(out const FString[] InParams);// 0x22beac0
	bool CheckIfHasSpecifiedEquipmentById(out const FString[] InParams);// 0x22be9e0
	bool CheckIfHasShield();// 0x22be9b0
	bool CheckIfHasMatched();// 0xb43660
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(out const FString[] InParams);// 0xb43660
	bool CheckIfGrowLevelRewardIsInStatus(out const FString[] InParams);// 0xb43660
	bool CheckIfFeatureUnlock(out const FString[] InParams);// 0xb43660
	bool CheckIfFeatureOpen(out const FString[] InParams);// 0xb43660
	bool CheckIfEquipSpecifiedWeapon(out const FString[] InParams);// 0x22be8d0
	bool CheckIfDying();// 0x22be8a0
	bool CheckIfDead();// 0x22be870
	bool CheckIfCurrentWeaponAmmoFull();// 0x22be840
	bool CheckIfConsumingMedicine();// 0x22be810
	bool CheckIfClaimBattlePassLevelReward(out const FString[] InParams);// 0xb43660
	bool CheckIfCanUseSpecifiedWeaponAbility(out const FString[] InParams);// 0x22be730
	bool CheckIfCanUseSpecifiedVehicleWeapon(out const FString[] InParams);// 0x22be650
	bool CheckIfCanUseSpecifiedVehicleAbility(out const FString[] InParams);// 0x22be570
	bool CheckIfCanOpenTreasureBox();// 0x22be540
	bool CheckIfCanJetFlyVertically();// 0x22be510
	bool CheckIfCanJetFlyHorizontally();// 0x22be4e0
	bool CheckIfBoughtBattlePass();// 0xb43660
	bool CheckIfBotAIDying(out const FString[] InParams);// 0x22be400
	bool CheckIfBattlePassLevelGreaterThan(out const FString[] InParams);// 0xb43660
	bool CheckIfApproachElectronicTreasureBox();// 0x22be3d0
	bool CheckIfAlreadyTriggeredMaxCount(out const FString[] InParams);// 0xb43660
	bool CheckIfAirDropBoxLanded();// 0x22be3a0
	bool CheckConsumeItemButtonType(out const FString[] InParams);// 0x22be2c0
	void AddTutorialProgress(int TutorialID, int Progress);// 0xb43660

--------------------------------
Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 1]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 1]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 1]
	float SameConditionCheckInterval;//[Offset: 0x90, Size: 1]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x98, Size: 1]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x22c02e0
	FString GetTutorialLevelMainMapPath();// 0x22c0230
	FString GetTutorialLevelMainMapName();// 0x22c01b0
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x22c0080

--------------------------------
Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 1]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 1]
	int VeteranTutorialID;//[Offset: 0x28, Size: 1]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 1]
	float WaitToEndTime;//[Offset: 0x30, Size: 1]

--------------------------------
Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 1]
	int[] TutorialIds;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TutorialLevelInteractableActor.Actor.Object
	void UnregisterEvent();// 0x2649560
	void RegisterEvent();// 0x2649560
	SolarTutorialManager* GetSolarTutorialManager();// 0x2305220

--------------------------------
Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 1]
	enum PlayerProficiency;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 1]
	FString PlayerStartTag;//[Offset: 0x10, Size: 1]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int TutorialID;//[Offset: 0x24, Size: 1]

--------------------------------
Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 1]
	enum UIType;//[Offset: 0x20, Size: 1]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x28, Size: 1]
	TutorialSpecialUI TutorialSpecialUI;//[Offset: 0x98, Size: 1]
	int NoticeLocTextId;//[Offset: 0xb0, Size: 1]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0xb8, Size: 1]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	TutorialRepeatTip RepeatTip;//[Offset: 0xd8, Size: 1]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0xf0, Size: 1]
	TutorialSoftCondition EndCondition;//[Offset: 0x110, Size: 1]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x138, Size: 1]
	float WaitTime;//[Offset: 0x160, Size: 1]
	float MinExecuteTime;//[Offset: 0x164, Size: 1]
	int[] OpenBehaviors;//[Offset: 0x168, Size: 1]
	int[] CloseBehaviors;//[Offset: 0x178, Size: 1]
	int FixedTriggerAreaID;//[Offset: 0x188, Size: 1]
	int[] BotAISpawnIDs;//[Offset: 0x190, Size: 1]
	int[] BotAIDeathIDs;//[Offset: 0x1a0, Size: 1]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x1b0, Size: 1]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x1c0, Size: 1]

--------------------------------
Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TableRowBase

--------------------------------
Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 1]
	FString LimitedListView;//[Offset: 0x10, Size: 1]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x20, Size: 1]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x38, Size: 1]
	Vector2D TutorialBPLocation;//[Offset: 0x50, Size: 1]
	bool HorizontalDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int LocTextID;//[Offset: 0x5c, Size: 1]
	float LocTextDuration;//[Offset: 0x60, Size: 1]
	float DelayShowUITime;//[Offset: 0x64, Size: 1]
	float WaitUIShowTime;//[Offset: 0x68, Size: 1]
	enum UIParent;//[Offset: 0x6c, Size: 1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 1]
	bool NeedMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]

--------------------------------
Class: TutorialSpecialUI
	SoftObjectPath TutorialSpecialUIBPPath;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 1]
	float DelayTime;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TutorialSingleSubtitle
	FString LocalTextId;//[Offset: 0x0, Size: 1]
	FString Voice;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 1]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 1]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 1]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 1]
	enum Type;//[Offset: 0x20, Size: 1]
	enum TriggerStage;//[Offset: 0x21, Size: 1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 1]
	int EndNum;//[Offset: 0x50, Size: 1]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 1]
	int[] ActionIDs;//[Offset: 0x80, Size: 1]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 1]
	bool bWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 1]
	bool biOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]

--------------------------------
Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0x10, Size: 1]
	FString[] Parameters;//[Offset: 0x18, Size: 1]
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x60, Size: 1]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0xf8, Size: 1]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x100, Size: 1]
	void Stop();// 0x2305fd0
	void OnSingleTaskFinish();// 0x23055a0
	TutorialTableRow GetTableRowData();// 0x2305250
	int GetCurrentFinishNum();// 0xbbbab0

--------------------------------
Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x2305220
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x2649560

--------------------------------
Class: TutorialCondition.Object
	FString GetWorldName();// 0x23052d0
	SolarCharacter* GetPlayer();// 0x2305070

--------------------------------
Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	MulticastInlineDelegateProperty PendingBeginPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerStatePossessDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerStateRepDelegate;//[Size: 1]
	enum SolarCharacterType;//[Offset: 0x6a8, Size: 1]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x704, Size: 1]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	ReconnectionParams ReconnectionParams;//[Offset: 0x73b, Size: 1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x758, Size: 1]
	<enum,AnimInstance*> SolarAnimInstances;//[Offset: 0x760, Size: 1]
	int BodyHitSoundCount;//[Offset: 0x7c4, Size: 1]
	int BodyHitByPunchSoundCount;//[Offset: 0x7c8, Size: 1]
	SolarPile*[] ChargingPileQueue;//[Offset: 0x7d0, Size: 1]
	MulticastInlineDelegateProperty OnCharacterIDSet;//[Size: 1]
	MulticastInlineDelegateProperty OnSkinIDSet;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterSkinReset;//[Size: 1]
	enum BodyScaleType;//[Offset: 0x838, Size: 1]
	int AssignedCharacterID;//[Offset: 0x83c, Size: 1]
	int AssignedSkinID;//[Offset: 0x840, Size: 1]
	<GameplayTag,SkeletalMeshComponent*> SkeletalOrnaments;//[Offset: 0x850, Size: 1]
	<GameplayTag,StaticMeshComponent*> StaticOrnaments;//[Offset: 0x8a0, Size: 1]
	<GameplayTag,ChildActorComponent*> ChildActorOrnaments;//[Offset: 0x8f0, Size: 1]
	<GameplayTag,CharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies;//[Offset: 0x940, Size: 1]
	OrnamentMontageInfo OrnamentMontageInfo;//[Offset: 0x990, Size: 1]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0xae8, Size: 1]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0xb28, Size: 1]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0xb30, Size: 1]
	MulticastInlineDelegateProperty OnBackpackItemUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackEnergyUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackEquipUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnBatteryIdUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnEnergyStateUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnChargeInfoUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnConsumableNumUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnMaxEnergyUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnCurEnergyUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackWeaponPartUpdate;//[Size: 1]
	<int,int> ShieldUpMatCostMap;//[Offset: 0xbf8, Size: 1]
	<int,int> MaxPileMap;//[Offset: 0xc48, Size: 1]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0xc98, Size: 1]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0xca8, Size: 1]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0xcf8, Size: 1]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0xd08, Size: 1]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0xd58, Size: 1]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0xd68, Size: 1]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0xd78, Size: 1]
	int[] WeaponPartsArray;//[Offset: 0xe18, Size: 1]
	byte[] IgnoreScopeSlots;//[Offset: 0xe30, Size: 1]
	byte EnergyState;//[Offset: 0xe40, Size: 1]
	float MaxEnergyValue;//[Offset: 0xe44, Size: 1]
	float CurrEnergyValue;//[Offset: 0xe48, Size: 1]
	float MaxExtraEnergyValue;//[Offset: 0xe4c, Size: 1]
	float CurrExtraEnergyValue;//[Offset: 0xe50, Size: 1]
	int EnergyModuleID;//[Offset: 0xe54, Size: 1]
	float AddedEnergyMax;//[Offset: 0xe58, Size: 1]
	int ExtraEnergyModuleID;//[Offset: 0xe5c, Size: 1]
	float AddedExtraEnergyMax;//[Offset: 0xe60, Size: 1]
	int VJetPackModuleID;//[Offset: 0xe64, Size: 1]
	int HJetPackModuleID;//[Offset: 0xe68, Size: 1]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6d, Size: 1]
	int DayLightID;//[Offset: 0xe70, Size: 1]
	float SolarChargeRatio;//[Offset: 0xe74, Size: 1]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe78, Size: 1]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0xe7c, Size: 1]
	enum BackpackPropellingMode;//[Offset: 0xe88, Size: 1]
	Vector2D InputVector;//[Offset: 0xe8c, Size: 1]
	SolarInputActionContext* InputActionContext;//[Offset: 0xea0, Size: 1]
	byte IdleTurnType;//[Offset: 0xea8, Size: 1]
	Rotator CharacterLookAt;//[Offset: 0xeb0, Size: 1]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0xee0, Size: 1]
	MulticastInlineDelegateProperty OnHealthUpdateDelegate;//[Size: 1]
	float PendingRegeneration;//[Offset: 0xf18, Size: 1]
	float DiedTime;//[Offset: 0xf1c, Size: 1]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf24, Size: 1]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0xf38, Size: 1]
	SolarCharacter* RescuingCharater;//[Offset: 0xf40, Size: 1]
	SolarUAVRescue* RescuingUAV;//[Offset: 0xf48, Size: 1]
	byte CurrentRescueState;//[Offset: 0xf50, Size: 1]
	byte LastRescueState;//[Offset: 0xf51, Size: 1]
	SolarCharacter* RescuedCharater;//[Offset: 0xf80, Size: 1]
	float RescuedStartTime;//[Offset: 0xf88, Size: 1]
	StaticMeshComponent* RescueInjector;//[Offset: 0xf90, Size: 1]
	float RescueTime;//[Offset: 0xfbc, Size: 1]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0xfc8, Size: 1]
	SolarItemData[] DeathBoxArray;//[Offset: 0xfd8, Size: 1]
	float DeathBoxEnergy;//[Offset: 0xfe8, Size: 1]
	SolarWaterActorNew* WaterActor;//[Offset: 0xff0, Size: 1]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0xff8, Size: 1]
	ParticleSystemComponent* HeavyJumpWaterEffect;//[Offset: 0x1000, Size: 1]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0x1008, Size: 1]
	SolarItemComponent* SolarItemComponent;//[Offset: 0x1028, Size: 1]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0x1030, Size: 1]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0x1040, Size: 1]
	enum CurrentTreatState;//[Offset: 0x1048, Size: 1]
	int TreatmentCount;//[Offset: 0x104c, Size: 1]
	MulticastInlineDelegateProperty OnShieldRecharge;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldBreak;//[Size: 1]
	MulticastInlineDelegateProperty OnShowShieldHUD;//[Size: 1]
	MulticastInlineDelegateProperty OnShowShieldHUDItem;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldUpFX;//[Size: 1]
	MulticastInlineDelegateProperty OnCurShieldValueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldIDChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldValueLow;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldValueChanged;//[Size: 1]
	int CurrShieldId;//[Offset: 0x10ec, Size: 1]
	int CurUniqueShieldId;//[Offset: 0x10f0, Size: 1]
	float MaxShieldValue;//[Offset: 0x10f4, Size: 1]
	int NextUpgradeShieldID;//[Offset: 0x10f8, Size: 1]
	int NextUpgradeShieldEnergy;//[Offset: 0x10fc, Size: 1]
	float CurrShieldValue;//[Offset: 0x1100, Size: 1]
	enum CurrShieldState;//[Offset: 0x1104, Size: 1]
	int CurrShieldLevel;//[Offset: 0x1108, Size: 1]
	bool bHasPreAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 1]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0x11b8, Size: 1]
	StaticMesh* ShieldOperatorSM;//[Offset: 0x11c0, Size: 1]
	StaticMesh* ShieldOperatorBigSM;//[Offset: 0x11c8, Size: 1]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0x11d0, Size: 1]
	ParticleSystemComponent* ShieldMultiRecoverFX;//[Offset: 0x11d8, Size: 1]
	ParticleSystemComponent* ShieldUpgradeBodyFX;//[Offset: 0x11e0, Size: 1]
	StaticMeshComponent* ShieldUpgradeOperator;//[Offset: 0x11e8, Size: 1]
	StaticMesh* ShieldUpgradeOperatorSM;//[Offset: 0x11f0, Size: 1]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0x11f8, Size: 1]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0x1290, Size: 1]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0x1328, Size: 1]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0x1380, Size: 1]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0x1388, Size: 1]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0x1390, Size: 1]
	MulticastInlineDelegateProperty OnLocalPlayerSpectateMeStatusChanged;//[Size: 1]
	delegate OnHUDNickNameSet;//[Offset: 0x13e8, Size: 1]
	delegate OnHUDTeamPosSet;//[Offset: 0x13f8, Size: 1]
	delegate OnHUDDistanceSet;//[Offset: 0x1408, Size: 1]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x1418, Size: 1]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x1428, Size: 1]
	SolarTeammateHUDWidgetComponent* TeammateHUDComp;//[Offset: 0x1438, Size: 1]
	float HUDZNomral;//[Offset: 0x1448, Size: 1]
	float HUDChangeTime;//[Offset: 0x144c, Size: 1]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x1468, Size: 1]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x1470, Size: 1]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x1590, Size: 1]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x1598, Size: 1]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x15b0, Size: 1]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x1628, Size: 1]
	float ArmorReduceValue;//[Offset: 0x1644, Size: 1]
	float HeadHitValue;//[Offset: 0x1648, Size: 1]
	MulticastInlineDelegateProperty OnTakeDamageDelegate;//[Size: 1]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x1674, Size: 1]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x1678, Size: 1]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x16f0, Size: 1]
	IMChatObject* IMChatObj;//[Offset: 0x16f8, Size: 1]
	int AIActorCapacity;//[Offset: 0x1700, Size: 1]
	float StandJogSpeed;//[Offset: 0x17b0, Size: 1]
	float StandRunSpeed;//[Offset: 0x17b4, Size: 1]
	float StandSprintSpeed;//[Offset: 0x17b8, Size: 1]
	float CrouchJogSpeed;//[Offset: 0x17bc, Size: 1]
	float CrouchRunSpeed;//[Offset: 0x17c0, Size: 1]
	float CrouchSprintSpeed;//[Offset: 0x17c4, Size: 1]
	MulticastInlineDelegateProperty OnJogSetClient;//[Size: 1]
	bool bIsSprintingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 1]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1838, Size: 1]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1840, Size: 1]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x1844, Size: 1]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x1848, Size: 1]
	enum CurrentCustomJumpType;//[Offset: 0x185c, Size: 1]
	enum CurrentJetFlyType;//[Offset: 0x185f, Size: 1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1860, Size: 1]
	AnimSequence* CruiseStartAnim;//[Offset: 0x18a8, Size: 1]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x18b0, Size: 1]
	AnimSequence* CruiseEndAnim;//[Offset: 0x18b8, Size: 1]
	float PrepareToParachuteStartTime;//[Offset: 0x18c0, Size: 1]
	float PrepareToParachuteDuration;//[Offset: 0x18c4, Size: 1]
	Vector PrepareToParachuteLocation;//[Offset: 0x18c8, Size: 1]
	Vector AgreedParachuteLocation;//[Offset: 0x18d4, Size: 1]
	int CapsuleID;//[Offset: 0x18f8, Size: 1]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fc, Size: 1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x1900, Size: 1]
	enum CruiseState;//[Offset: 0x1908, Size: 1]
	int ForceParachuteCountDown;//[Offset: 0x190c, Size: 1]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x1910, Size: 1]
	MulticastInlineDelegateProperty OnSkydiveTraced;//[Size: 1]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1930, Size: 1]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1938, Size: 1]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1948, Size: 1]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1958, Size: 1]
	enum CurrentSkydiveStage;//[Offset: 0x1968, Size: 1]
	MulticastInlineDelegateProperty OnSkydivingStageChangedDelegate;//[Size: 1]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x19a0, Size: 1]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x19d8, Size: 1]
	MulticastInlineDelegateProperty OnCharacterFired;//[Size: 1]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x1a10, Size: 1]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x1a28, Size: 1]
	SolarPlayerWeapon* CachedCurrentWeapon;//[Offset: 0x1a30, Size: 1]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1b00, Size: 1]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1b20, Size: 1]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b30, Size: 1]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x1bf8, Size: 1]
	MulticastInlineDelegateProperty OnCharacterActivateEMP;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterSwitchEMPEffect;//[Size: 1]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c38, Size: 1]
	bool bActiveInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c39, Size: 1]
	bool bNoticedCantCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3a, Size: 1]
	enum CurrentSkillAnimType;//[Offset: 0x1c3b, Size: 1]
	enum CurrentSkillAnimRightHandType;//[Offset: 0x1c3c, Size: 1]
	StaticMeshComponent* MassInvWarningIconComponent;//[Offset: 0x1c40, Size: 1]
	ScoutEnemyObject* ScoutEnemyObj;//[Offset: 0x1c80, Size: 1]
	DuckRollingMeshComponent* CachedDuckRollingMeshComponent;//[Offset: 0x1c88, Size: 1]
	byte WallRunSurfaceAngle;//[Offset: 0x1d08, Size: 1]
	enum WallRunState;//[Offset: 0x1d09, Size: 1]
	int LeadDanceID;//[Offset: 0x1d0c, Size: 1]
	FString DebugStringBotAIInfo;//[Offset: 0x1db0, Size: 1]
	FString DebugStringToDrawGASServer;//[Offset: 0x1dc0, Size: 1]
	FString DebugStringDSTransferLog;//[Offset: 0x1dd0, Size: 1]
	int RoleAbilityCharacterID;//[Offset: 0x1de0, Size: 1]
	int[] RoleAbilityBoundPlayerLevels;//[Offset: 0x1de8, Size: 1]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1df8, Size: 1]
	float[] RoleAbilityStartCDServerTime;//[Offset: 0x1e08, Size: 1]
	int BattleUpgradeEffectCurrentLevel;//[Offset: 0x1e58, Size: 1]
	BattleUpgradeEffectContainer BattleUpgradeEffects;//[Offset: 0x1e60, Size: 1]
	SolarUAVRescue* PermanentRescueUAV;//[Offset: 0x2000, Size: 1]
	<SkywardDiveLauncher*,bool> AvailableSkywardDiveLaunchers;//[Offset: 0x2028, Size: 1]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x2110890
	void UseDanceEmoteByID(int ID);// 0x2110800
	void UpgradeShieldResponse(const bool bSuccess);// 0x2110770
	void UpgradeGenericSkill(int LevelUp);// 0x21106e0
	void UpgradeClassTypeSkill(int LevelUp);// 0x2110650
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x21105d0
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x2110550
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x21104d0
	void UpdateShieldUpgradeMatMaxPile();// 0x21104b0
	void UpdateShieldPropertyByAblility();// 0x2110490
	void UpdateRoleAbilityState(byte RoleAbilityIndex, enum Ope);// 0x21103c0
	void UpdateJetFlyDataToSpectating();// 0x21103a0
	void UpdateExtraMagToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x2110310
	void UpdateDyingAttr(float DeltaTime);// 0x2110290
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent);// 0x2110090
	void UpdateBattleUpgradeEffectToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x2110000
	void UnbindActorToSelfTeam(Actor* Actor);// 0x210ff70
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x210fe90
	void TurnCharacterToDirection(out const Vector Dir);// 0x210fe00
	void TryStopSpectateCountdown();// 0x210fde0
	void TryStopShieldRecharge();// 0x210fdc0
	void TryStatisticsRechargedTimes();// 0x210fda0
	void TryStartSpectateCountdown();// 0x210fd80
	void TryStartShieldRecharge(bool bUseBigRecharger);// 0x210fcf0
	void TrySetTeammateHUDShow();// 0x210fcd0
	void TrySetTeammateHUDHide();// 0x210fcb0
	void TrySetTeamateHUDVisiblity();// 0x210fc90
	void TryRechargeShield(bool bUseBigRecharger);// 0x210fc00
	void TryHideShieldOperator();// 0x210fbe0
	void TryDiscardShieldUpgradeMatItems(const int InItemNum);// 0x210fb50
	void TryCreatingOwnTeammate();// 0x210fb30
	void TryBreakShieldRecharge();// 0x210fb10
	void TryBreakScopeStatus();// 0x210faf0
	void TryBindPowerBarDelegates();// 0x210fad0
	void TryBindPickupDelegates();// 0x8f2720
	void TryBindItemPanelDelegates();// 0x210fab0
	void TryBindHPPanelDelegates();// 0x210fa90
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x210f990
	void ToggleDebugInfo();// 0x8f2720
	void ToggleDebugGASInfo();// 0x8f2720
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x210f910
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x210f760
	void Suicide();// 0x210f740
	void StopTreatmentProgressBar();// 0x210f720
	void StopTreatment();// 0x210f700
	void StopShieldRechargeProgressBar();// 0x210f6e0
	void StopShieldRechargeProgress();// 0x210f6c0
	void StopRescueProgressBar(const int TextID);// 0x210f630
	void StopRepairWeakPointProgressBar();// 0x210f610
	void StopClimbSound();// 0x210f5d0
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x210f540
	void StartTreatmentProgressBar(const float Duration);// 0x210f4c0
	void StartTreatment();// 0x210f4a0
	void StartShieldRechargeProgressBar(const float InRechargeDuration, int InContributorCharacterId);// 0x210f3d0
	void StartShieldRechargeProgress();// 0x210f3b0
	void StartRescueProgressBar(const float Duration, const float RemainingTime, const int TextID, const bool bShowBtn, bool bIsUAV);// 0x210f200
	void StartRepairWeakPointProgressBar(const float Duration);// 0x210f180
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x210f090
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x210ef30
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x210eea0
	void SpawnDeathBoxActor(SolarPlayerState* InKillerPS);// 0x210ee10
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride, Actor* JumpPad);// 0x210ec80
	void ShowShieldUIFX(const int ShiledID);// 0x2649560
	void ShowShieldUI(const bool IsShow);// 0x2649560
	void ShowRevivePickupEffect();// 0x210ec60
	void ShowReviveClearEffect();// 0x210ec40
	void ShowRescueInjector();// 0x210ec20
	void ShowNoticeCantCharge();// 0x210ec00
	bool ShouldForceOverrideDamageTaken(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser, out float OverrideDamageTaken);// 0x210e9f0
	void ShieldUpgradeToNextLevel();// 0x210e9d0
	void ShieldOperatorInterpFunc(float InValue);// 0x210e950
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x210e830
	void SetSelfEnergyCostEnable(bool bEnable);// 0x210e7a0
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x210e6c0
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x210e5b0
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x210e530
	void SetInfiniteAmmoState(const bool Enable);// 0x210e4a0
	void SetCurrShieldValue(const float InValue);// 0x210e420
	void SetCurrExtraEnergy(float Amount);// 0x210e3a0
	void SetBackpackConfig(const int InCharacterId);// 0x210e310
	void SetActiveRescueBtn(bool bIsActive);// 0x210e280
	void ServerUseItemRequest(int ItemID, int Num);// 0x210e1b0
	bool ServerUpgradeShield();// 0x210e180
	void ServerUpdateWallRunState(enum NewState);// 0x210e100
	void ServerUpdateWallRunAngle(byte ClientAngle);// 0x210e080
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x210df70
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x210dee0
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x210dd40
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x210dc60
	void ServerStatisticsRechargedTimes(const int RechargedTimes, const int BigRechargedTimes);// 0x210db90
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x210db10
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x210da80
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x210d970
	void ServerSetJetPackModule(const int NewJetPackModuleID, const bool bForVertical);// 0x210d8a0
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x210d7d0
	void ServerSetIdleTurnType(byte TurnType);// 0x210d750
	void ServerSetEnergyState(enum State);// 0x210d6d0
	void ServerSetDebugCharacterGASValue(int Value);// 0x210d640
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x210d5b0
	void ServerSetChargingPile(const bool bEnter, SolarPile* InChargingPile);// 0x210d4e0
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x210d410
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x210d380
	void ServerSendGameplayEvent(const GameplayTag EventTag, const GameplayEventData Payload);// 0x210d170
	void ServerSelectLevelSkill(int Level, int SelectedIndex);// 0x210d0a0
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x210cf40
	void ServerRPCUpgradeShield();// 0x1572710
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x210ce70
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x210cda0
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x210ccd0
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x210cc40
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x210cb20
	void ServerRPCDisplayAllElectricShops();// 0x1571350
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x210ca50
	void ServerRPCDiscardWeapon(const int InSlot);// 0x210c9c0
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x210c8f0
	void ServerRequestStartResurrect(DeathTreasureBox* TargetDeathBox);// 0x210d010
	void ServerRequestCancelResurrect();// 0x1572330
	void ServerPlayTreatmentCancelSound();// 0x1571c30
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, Vector ClientCharPos, Vector ClientItemPos);// 0x210c750
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x210c550
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x210c3a0
	void ServerPerformShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop);// 0x210c310
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x210c280
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x210c0d0
	void ServerMoveNoBaseEx(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x210bde0
	void ServerMoveDualNoBaseEx(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x210b9a0
	void ServerKillMe(enum DamageType);// 0x210b920
	void ServerInitSheildComp(const int InShiledID);// 0x210b890
	void ServerHideShieldOperator();// 0x1571cd0
	void ServerGMVehicleSubHealth(int SubHealth);// 0x210b450
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x210b780
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection);// 0x210b6a0
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, const VehicleEjectParams Params);// 0x210b570
	void ServerGetOffVehicle(bool bNeedNotify);// 0x210b4e0
	void ServerDetectBlock();// 0x1572530
	void ServerConsumeExtraEnergy(const float InAmount, const enum InUsage);// 0x210b380
	void ServerConsumeEnergy(const float InAmount, const enum InUsage);// 0x210b2b0
	void ServerClearJetModule();// 0x1570cd0
	void ServerClearEnergyState(enum State);// 0x210b230
	void ServerChangeRechargeState(const bool bRecharge, const bool bUseBigRecharger);// 0x210b160
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x210b0e0
	void ServerCancelVault(float InAnimPosition, Vector InLandLocation);// 0x210b000
	void ServerCancelRescue();// 0x1571b30
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x210af70
	void ServerCancelMeleeWarp();// 0x1572550
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x210ae20
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x15729f0
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x210ada0
	void ServerAddVehicleTime(float InAddTime);// 0x210ad10
	void RoleAbilityForbiddenAbilityTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x210ac00
	void RoleAbilityEndedCallBack(GameplayAbility* InAbility);// 0x210ab70
	void RoleAbilityCoolDownTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x210aa60
	void RoleAbilityCoolDownResetCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x210a950
	void RoleAbilityCommittedCallBack(GameplayAbility* InAbility);// 0x210a8c0
	void RoleAbilityActiveCallBack(GameplayAbility* InAbility);// 0x210a830
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x210a760
	void ResponseChosenMark();// 0x210a740
	void RequestUseBackpackItemServer(const int InItemID, const int InItemNum);// 0x210a670
	void RequestToStopVehicleRepairing();// 0x210a650
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x210a5c0
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x210a3e0
	void RequestDisplayAllElectricShops();// 0x210a3c0
	void RequestCancelRescue();// 0x210a3a0
	void RemoveTreasureBoxOperator();// 0x210a380
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x210a2f0
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x210a1e0
	void RemoveShieldUpgradeOperator();// 0x210a1c0
	void RemoveShieldRepairEffectItem();// 0x210a1a0
	void RemoveShieldOperator();// 0x210a180
	void RefreshWeaponDataMapAndArray();// 0x210a160
	void RefreshTypeItemMapAndArray();// 0x210a140
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x210a0b0
	void RefreshRenderConsoleVarForSkydive();// 0x2649560
	void RefreshMaxPileMapAndArray();// 0x210a090
	void RefreshIdItemMapAndArray();// 0x210a070
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x2649560
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x2649560
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x2649560
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x2109fe0
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2649560
	void QuitVehicleWholeShield();// 0x2109fc0
	void QuitVehicleStealth();// 0x2109fa0
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x2109e80
	void PostNotEnoughEnergyNotice();// 0x2109e60
	void PlaySquatSound();// 0x2109dc0
	void PlaySpeedUpEffect(bool bIsUp);// 0x2109d30
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x2109cb0
	void PlayParachuteStartSound();// 0x2109c90
	void PlayMontageOnOrnament(GameplayTag OrnamentTag, AnimMontage* MontageToPlay);// 0x2109bc0
	void PlayerStateReplicatedForHUD();// 0x2109e40
	void OnVaultInput();// 0x2109b80
	void OnUsingSkillStatusChanged(const GameplayTag Tag, int NewCount);// 0x2109ab0
	void OnUpdateShieldId();// 0x2109a90
	void OnUIDurationGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x2109980
	void OnUIDurationGameplayEffectApplied(AbilitySystemComponent* ASC, out const GameplayEffectSpec InGameplayEffectSpec, ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x2109820
	void OnUAVSpawnRelatedTagChange(const GameplayTag Tag, int NewCount);// 0x2109750
	void OnTeamIDChange();// 0x2109730
	void OnTakeDamage__DelegateSignature(const SolarCharacter* Character, out const SolarPointDamageEvent DamageEvent, float HPDamage);// 0x2649560
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x21095d0
	void OnSpawnExpItem();// 0x21095b0
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x2649560
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x2649560
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x2649560
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2109400
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x2649560
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2649560
	void OnShieldRechargeStart();// 0x21093e0
	void OnShieldRechargeProgressBarComplete();// 0x21093c0
	void OnShieldRechargeProgressBarCancel();// 0x21093a0
	void OnShieldRechargeEnd();// 0x2109380
	void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x2649560
	void OnSheildUpFXDelegate__DelegateSignature();// 0x2649560
	void OnSheildRechargeDelegate__DelegateSignature();// 0x2649560
	void OnSheildBreakDelegate__DelegateSignature();// 0x2649560
	void OnReplayCameraModeChanged(enum OldMode, enum CurMode);// 0x21092b0
	void OnRepItemWeaponParts();// 0x2108820
	void OnRepIgnoreScopeSlots();// 0x2108800
	void OnRep_WeaponSystemVehicle();// 0x2109290
	void OnRep_WeaponSystemComponentChanged();// 0x2109270
	void OnRep_WeaponDataMap();// 0x2109250
	void OnRep_VJetPackModuleID();// 0x2109230
	void OnRep_TypeKeyItemArrayChange();// 0x2109210
	void OnRep_TreatmentState(enum LastState);// 0x2109190
	void OnRep_TreatmentCount(int LastCount);// 0x2109100
	void OnRep_SettingEnergyCostChanged();// 0x8f2720
	void OnRep_RoleAbilityStartCDServerTime();// 0x21090e0
	void OnRep_RoleAbilitySpecHandles();// 0x21090c0
	void OnRep_ReviveItemCleared();// 0x21090a0
	void OnRep_RescueState();// 0x2109000
	void OnRep_RescuedStartTime(float LastRescuedStartTime);// 0x2109020
	void OnRep_PlayBodyHitSound(int LastBodyHitSoundCount);// 0x2108f70
	void OnRep_PlayBodyHitByPunchSound(int LastBodyHitByPunchSoundCount);// 0x2108ee0
	void OnRep_PendingRegeneration();// 0x2108ec0
	void OnRep_OutVehicleShotState();// 0x2108690
	void OnRep_OrnamentMontageInfo(OrnamentMontageInfo LastInfo);// 0x2108e20
	void OnRep_MaxPileArrayChange();// 0x2108de0
	void OnRep_MaxExtraEnergyChanged();// 0x2108dc0
	void OnRep_JetPropellingInfo();// 0x2108da0
	void OnRep_IsDeathVerge();// 0x2108d80
	void OnRep_IdKeyItemArrayChange();// 0x2108d60
	void OnRep_HJetPackModuleID();// 0x2108d40
	void OnRep_ForceParachuteCountDown();// 0x2108d20
	void OnRep_ExtraEnergyModuleIDChanged();// 0x2108d00
	void OnRep_EnergyStateChanged();// 0x2108ce0
	void OnRep_EnableCruising();// 0x2108cc0
	void OnRep_DiedTime();// 0x2108ca0
	void OnRep_CurUniqueShieldId();// 0x21089b0
	void OnRep_CurrShieldValue(float PreviousValue);// 0x2108ae0
	void OnRep_CurrShieldState(enum LastState);// 0x2108a60
	void OnRep_CurrShieldId(int InLastShieldId);// 0x21089d0
	void OnRep_CurrentSkydiveStage(enum LastStage);// 0x2108c20
	void OnRep_CurrentSkillAnimType();// 0x2108c00
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x2108b80
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x2108920
	void OnRep_CruiseState();// 0x2108900
	void OnRep_CharacterCapsuleSizeOverride();// 0x21088e0
	void OnRep_CapsuleID();// 0x21088c0
	void OnRep_BackpackPropellingMode();// 0x21088a0
	void OnRep_AssignedCharacterID();// 0x2108880
	void OnRep_ActiveInfiniteAmmo();// 0x2108860
	void OnRep_ActiveEMP();// 0x2108840
	void OnPlayingScrubCharactersCreated();// 0x8f2720
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x2108780
	void OnPlayerBackpackEnergyUpdate();// 0x2108760
	void OnPickupSettingChanged();// 0x2108740
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x21086b0
	void OnOutVehicleStateChanged();// 0x2108690
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);// 0x2649560
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x21085c0
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(SolarCharacter* Character, bool bIsSpectating);// 0x2649560
	void OnLevelSequence_PlayAirborneJumpSound();// 0x21085a0
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x2649560
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x2649560
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x2649560
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x2649560
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x2649560
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x2649560
	void OnHealthUpdated__DelegateSignature(const SolarCharacter* Character);// 0x2649560
	bool OnExitOpenTreasureBox();// 0x2108570
	bool OnEnterOpenTreasureBox();// 0x2108540
	void OnEnterCombat(enum battleType);// 0x21084c0
	void OnEnergyStateUpdateEvent__DelegateSignature(byte InEnergyState);// 0x2649560
	void OnDrivingStateChanged(SolarVehiclePawn* SolarVehicle, enum NewDriveState, enum OldDriveState, int NewSeatIndex, int OldSeatIndex);// 0x2649560
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x21083f0
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x2108320
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x2649560
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);// 0x2649560
	void OnConsumableNumChangedEvent__DelegateSignature();// 0x2649560
	void OnClientMovementComponentEnabled();// 0x1572350
	void OnChargeInfoUpdateEvent__DelegateSignature(SolarCharacter* OwnerCharacter, const float ChargeFrequency, const float ChargeQuantity);// 0x2649560
	void OnCharacterSpawnDeathBox(const bool bCheat, const bool bKilledByTeammate, const int InExpItemCount, const int InMaxSheildMatCount, SolarPlayerState* InKillerPS);// 0x2108170
	void OnCharacterSkinReset__DelegateSignature();// 0x2649560
	void OnCharacterDeathEnd();// 0x1571330
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x2649560
	void OnCancelResurrectProgress(const int InTextId);// 0x21080e0
	void OnBatteryIdUpdateEvent__DelegateSignature(int InBatteryId);// 0x2649560
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature();// 0x2649560
	void OnBackpackItemUpdateEvent__DelegateSignature();// 0x2649560
	void OnBackpackEquipUpdateEvent__DelegateSignature();// 0x2649560
	void OnBackpackEnergyUpdateEvent__DelegateSignature();// 0x2649560
	void OnApplyDyingDamage(float DeltaTime);// 0x2108060
	void NotifyLeaveSafeArea();// 0x2108040
	void NotifyEnterSafeArea();// 0x2108020
	void NetTriggerRadarStation();// 0x2108000
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x2107f30
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x2107e50
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x2107c70
	void MultiResetCharacter(const Vector Location, const Rotator Rotation, bool bClearWeapons);// 0x2107b60
	void MultiOnRebirth();// 0x15718d0
	void MulticastPlayDuckRollingHitCharacterEffect(SolarCharacter* TargetCharacter, const Vector HitLocation, bool bNoDamage);// 0x2107d40
	void MarkWarningOnWorld();// 0x2107b40
	void MarkQuickChatOnWorld(FString IconImg);// 0x2107aa0
	void MarkPointOnWorld();// 0x2107a80
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x2107930
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x21078a0
	void K2_RemoveGameplayTag(GameplayTag Tag, bool bReplicated);// 0x21077d0
	void K2_PlaySoundGroup(FName GroupName, SoundGroupPlayContext Context);// 0x2107700
	bool K2_IsSwimming();// 0x21076d0
	bool K2_IsInAir();// 0x21076a0
	bool K2_HasMatchingGameplayTag(GameplayTag Tag);// 0x2107600
	WidgetComponent* K2_GetTeamHUDComp();// 0x21075d0
	HUD* K2_GetControlledHUD();// 0x21075a0
	void K2_AddGameplayTag(GameplayTag Tag, bool bReplicated);// 0x2107490
	bool IsWeaponsAvailable();// 0x2107460
	bool IsWeaponCauseTeamDamage();// 0x2107430
	bool IsViewportFocused();// 0x2107020
	bool IsVerticalJetFlying();// 0x2107400
	bool IsVehicleFire();// 0x21073d0
	bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf);// 0x2107330
	bool IsTeammateWith(const SolarCharacter* Other);// 0x2107290
	bool IsTeamHUDValid();// 0x2107260
	bool IsSprinting();// 0x2107230
	bool IsSpectatingOtherPlayer();// 0x2107200
	bool IsSkyCharging();// 0x21071d0
	bool IsShieldValueLow();// 0x21071a0
	bool IsShieldMaxLevel();// 0x2107170
	bool IsShieldFullyCharged();// 0x2107140
	bool IsScopeOpening();// 0x2107110
	bool IsRescuing();// 0x21070e0
	bool IsReplayPlaying();// 0x21070b0
	bool IsReloading();// 0x2107080
	bool IsRechargerEnough();// 0x2107050
	bool IsPlayerLocallyControlledOrSpectated();// 0x2107020
	bool IsPileCharging();// 0x2106ff0
	bool IsOwnerOffline();// 0x2106fc0
	bool IsOpeningTreasureBox();// 0x2106f90
	bool IsNoCharging();// 0x2106f60
	bool IsMovingOnGround(enum VelocityStatus);// 0x2106ed0
	bool IsMeleeAttacking();// 0x2106ea0
	bool IsMaxLevelInGame();// 0x2106e70
	bool IsLocalPlayerSpectateAsThirdPerson();// 0x2106e40
	bool IsLaunching();// 0x2106e10
	bool IsJumping();// 0x2106de0
	bool IsJetFlying();// 0x2106db0
	bool IsInVehicle();// 0x2106cf0
	bool IsInSkywardDive();// 0x2106cc0
	bool IsInsideVehicle();// 0x2106d50
	bool IsInShoulderOrScopeView();// 0x2106c90
	bool IsInScopeView();// 0x2106c60
	bool IsInRescueState();// 0x2106c30
	bool IsInMassInvisibilityPrepare();// 0x2106c00
	bool IsInMassInvisibility();// 0x2106bd0
	bool IsInInvisibleStatus();// 0x2106ba0
	bool IsInDeathVerge();// 0x21069b0
	bool IsHumanCharacter();// 0x2106b70
	bool IsHorizontalJetFlying();// 0x2106b40
	bool IsHoldingWeapon();// 0x2106b00
	bool IsFullHealth();// 0x2106ad0
	bool IsFullBodyMeleeAttacking();// 0x2106aa0
	bool IsFiring();// 0x2106a70
	bool IsExistWeaponSeatedVehicleSeat();// 0x2106a40
	bool IsEnergyCostAndChargeDisabled();// 0x2106a10
	bool IsE2M();// 0x21069e0
	bool IsDying();// 0x21069b0
	bool IsDoingAnyAttack();// 0x2106980
	bool IsCruising();// 0x2106950
	bool IsClimbing(bool bIncludeWallRun);// 0x21068b0
	bool IsCharacterDebugBlockDetectionEnabled();// 0x2106880
	bool IsCanShowTeammateHUD();// 0x2106850
	bool IsBoxCharging();// 0x2106820
	bool IsBolting();// 0x21067f0
	bool IsBigRechargerEnough();// 0x21067c0
	bool IsBeingSpectated();// 0x2106790
	bool IsBeingRescue();// 0x2106760
	bool IsAllEnergyFull();// 0x2106730
	bool IsAiming();// 0x2106700
	bool IsAbleToContinueRecharge();// 0x21066d0
	void InputRoleAbilityTacticalReleased();// 0x21066b0
	void InputRoleAbilityTacticalPressed();// 0x2106690
	void InputRoleAbilitySuperReleased();// 0x2106670
	void InputRoleAbilitySuperPressed();// 0x2106650
	void InputCancelRoleAbility();// 0x2106630
	void InitShieldUpgradeMatMaxPile();// 0x2106540
	void InitShieldPropertyByConfig();// 0x2106520
	void InitShieldOperatorTimeline();// 0x2106500
	void InitializeCharacterData(const int InCharacterId, const int InSkinID);// 0x2106560
	void InitGameStatisticEquipment();// 0x21064e0
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x21063f0
	void IncreaseRechargedTimes();// 0x21063d0
	void HideShieldUpgradeOperator();// 0x21063b0
	void HideShieldRepairEffectItem();// 0x2106390
	void HideShieldOperator();// 0x2106370
	void HideRescueInjector();// 0x2106350
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, const bool bIsVehicle, const bool bShowLog);// 0x21061b0
	bool HasAnyShieldEquiped();// 0x2106180
	bool HasAnyRecharger();// 0x2106150
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x2106080
	<enum,int> GetWeaponPartsMap();// 0x2106050
	int[] GetWeaponPartsArray();// 0x2106020
	bool GetWeaponItemDataBySlot(const int InSlot, out SolarItemData ItemData);// 0x2105ed0
	<int,SolarItemData> GetWeaponDataMap();// 0x2105ea0
	int GetVerticalJetFlyTotalTimes();// 0x2105e30
	int GetVerticalJetFlyRestTimes();// 0x2105e00
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x2105d20
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x2105c40
	SolarVehicleWeapon* GetVehicleWeapon();// 0x2105c10
	byte GetVehicleAbilityCounter();// 0x2105be0
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x2105b40
	float GetTreatmentRemaining();// 0x2105b10
	float GetTreatmentDuration();// 0x2105ae0
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x2105a00
	UserWidget* GetTeamHUD();// 0x21059d0
	SolarSpectateInfo* GetSpectateInfo();// 0x21059a0
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x2105910
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x21058e0
	SolarPlayerState* GetSolarPlayerState();// 0x21058b0
	FString GetSolarPlayerID();// 0x2105830
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x2105790
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x21052e0
	SolarBotAIController* GetSolarAIController();// 0x2105670
	SolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple();// 0x21056a0
	Vector GetSocketLocationAtPrimaryMesh(out const FName InSocketName);// 0x21055c0
	float GetSkydiveLandingHeight();// 0x2105590
	static CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x2105500
	int GetShieldWorthByID(const int InShieldID);// 0x2105460
	int GetShieldUpgradeNeedMatNum();// 0x2105430
	int GetShieldUpgradeMatNum();// 0x2105400
	int GetShieldUpgradeMatMaxPile();// 0x21053d0
	float GetShieldRecoveryAmount();// 0x21053a0
	float GetShieldRechargeRemainningTime();// 0x2105370
	float GetShieldRechargeDuration();// 0x2105340
	int GetShieldMaxLevel();// 0x2105310
	SolarCharacterMovementComponent* GetSafeSolarCharacterMovement();// 0x21052e0
	enum GetRoleAbilityState(byte RoleAbilityIndex);// 0x2105250
	SolarUAVRescue* GetRescuingUAV();// 0x2105210
	SolarCharacter* GetRescuingCharacter();// 0x21051d0
	float GetRescueTime();// 0x21051a0
	float GetRecoveryDuartionModify();// 0x2649560
	float GetRecoveryAmountModify();// 0x2649560
	SolarUAVRescue* GetPermanentRescueUAV();// 0x2105160
	Rotator GetNormalizeCameraRotation();// 0x2105120
	bool GetNewItemData(int InItemID, int InItemNum, out SolarItemData OutItemData);// 0x2104f90
	byte GetMyTeamID();// 0x2104f60
	float GetMaxShieldValue();// 0x2104f30
	float GetMaxExtraEnergy();// 0x2104f00
	float GetMaxEnergy();// 0x2104f00
	SolarPlayerState* GetLastDownBy();// 0x2104ec0
	int GetJetPackModuleLevel(const bool bVertical);// 0x2104e20
	int GetItemNumById(const int InItemID);// 0x2104d80
	int GetItemMaxPile(int InItemID);// 0x2104ce0
	bool GetItemDataByType(const enum ItemType, out SolarItemData ItemData);// 0x2104b90
	bool GetItemDataById(const int InItemID, out SolarItemData ItemData);// 0x2104a40
	bool GetIsActiveEMP();// 0x2104a20
	Vector GetInputVector();// 0x21049e0
	<int,SolarItemData> GetIdKeyItemMap();// 0x21049b0
	int GetHorizontalJetFlyTotalTimes();// 0x2104980
	int GetHorizontalJetFlyRestTimes();// 0x2104950
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x2104870
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x2104790
	int GetGenericSkillLevel();// 0x2104760
	float GetFactorialAttributeModifies(int AttributeID);// 0x21046c0
	int GetExtraEnergyModuleID();// 0x21046a0
	float GetEnergyConsumptionModify();// 0x2649560
	enum GetDriveState();// 0x2104670
	Actor* GetDamagerCauserActor();// 0x2104640
	float GetCurrShieldValue();// 0x2104440
	int GetCurrShieldID();// 0x2104410
	float GetCurrExtraEnergy();// 0x21043e0
	SolarPlayerWeapon* GetCurrentWeapon();// 0x2104610
	enum GetCurrentWalkMode();// 0x21045e0
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x2104550
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x21044c0
	int GetCurrentShieldLevel();// 0x2104490
	enum GetCurrentCustomJumpType();// 0x2104470
	float GetCurrEnergy();// 0x21043e0
	float GetCumulativeAttributeModifies(int AttributeID);// 0x2104340
	PlayerController* GetControllingOrReplayController();// 0x21042e0
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x21042b0
	int GetClassTypeSkillLevel();// 0x2104280
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x21040e0
	Rotator GetCharacterLookAt();// 0x21040a0
	bool GetCanShowBattlePrompt();// 0x2104070
	Rotator GetCameraRotation();// 0x2104030
	Vector GetCameraLocation();// 0x2103ff0
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x2103eb0
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x2103e00
	void GatheringDeathBoxItem(const bool bCheat, const bool bKilledByTeammate, const int InExpItemCount, const int InMaxSheildMatCount);// 0x2103c90
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarPointDamageEvent DamageInfo, const float ActualDamage);// 0x2103b30
	void GameStatisticsVehicleLanded(out const HitResult Hit);// 0x2103a50
	void GameStatisticsVehicleInAir();// 0x2103a30
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x2103960
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum, const int TriggerType);// 0x21037c0
	void GameStatisticsGodWeapon();// 0x21037a0
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x2103670
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x2103590
	void GameStatisticsEquipment();// 0x2103570
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x21034e0
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x21033d0
	void GameStatisticsCharacterSkill(bool bIsSuperSkill);// 0x2103340
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x21032b0
	void ForceBreakSprintState();// 0x2103290
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x2103140
	void ExitDyingMovement();// 0x2103120
	void ExitDeathVerge(bool bClientSimulation);// 0x2103090
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x2102f40
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x2102eb0
	void EnterVehicleStealth();// 0x2102e90
	void EnterDyingMovement();// 0x2102e70
	void EnterDeathVerge(bool bClientSimulation);// 0x2102de0
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x1ff2470
	void DoReceivingPoisonDamage();// 0x2102dc0
	void DoOperation(enum OperationType, Object* Target);// 0x2102cf0
	void DisCardShield();// 0x2102cd0
	void CreateTreasureBoxOperator();// 0x2102cb0
	void CreateShieldUpgradeOperator();// 0x2102c90
	void CreateShieldRepairEffectItem();// 0x2102c70
	void CreateShieldOperator();// 0x2102c50
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x2102bb0
	WidgetComponent* CreateOwnTeammateHUD();// 0x2102b80
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x21029a0
	void ClientSuperRadarOnceScanned(int ScannedNum);// 0x2102910
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount, const enum ShieldRechargeType, const int InShieldContributorCharacterId, bool bFixPreAdd);// 0x2102720
	void ClientSetServerBlockDetectionResult(FString Info);// 0x2102680
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x21020c0
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x21025e0
	void ClientReceiveVehicleWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x2102510
	void ClientReceiveVehicleWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x2102460
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x2102370
	void ClientReceiveCharacterWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x21022a0
	void ClientReceiveCharacterWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x21021f0
	void ClientRadarOnceScanned(int ScannedNum);// 0x2102160
	void ClientPlaySoundGroup(const FName GroupName);// 0x2102030
	void ClientPlayKillEffect(const SolarWeapon* AttackerWeapon);// 0x2101fa0
	void ClientPlayHitEffect(const HitResult HitResult, class SolarBullet BulletClass, const enum HitType, const PlayerController* Attacker, const Vector RelativeVector, const float VFXScale, const SolarWeapon* AttackerWeapon);// 0x2101d40
	void ClientOpenAirdropResponse(const bool bIsOpening);// 0x2101cb0
	void ClientOnTriggerCharacterDown();// 0x1571130
	void ClientOnShieldUpgrade();// 0x1572490
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x2101c30
	void ClientOnContinuousTreatmentStarted();// 0x1571530
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, const GameplayTag InTag);// 0x2101b50
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, const GameplayTag InTag);// 0x2101a70
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x21019e0
	void ClientNotifyCharacterExposed(float InRadarLifeTime, const GameplayTag InTag);// 0x2101900
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x2101830
	void ClientLeaveFromSkywardDiveLauncher(SkywardDiveLauncher* InLauncher);// 0x21017a0
	void ClientKilledCharacter();// 0x15710f0
	void ClientHideShieldOperator();// 0x1571a70
	void ClientEnterAndRefreshSkywardDiveLauncher(SkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice);// 0x21016d0
	void ClientCreateTreatEffect();// 0x1571c70
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x2101600
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue, const float MaxShieldVal, const enum CancelReason);// 0x2101450
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x2101330
	void ClientAddHitTrace(const HitTraceInfo Info);// 0x21012a0
	void ClientAckValidShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop, enum AckReason);// 0x21011d0
	void ClearGameStatisticEquipment();// 0x21011b0
	void ClearDeathBoxData();// 0x2101190
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x2100fe0
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x2100f50
	void ChangeSeatByDefault();// 0x2100f30
	void CGM_SpawnDeathBox();// 0x2100ca0
	void CGM_EnterDeath();// 0x1572130
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x2100e50
	bool CanRebirth();// 0x2100e20
	bool CanOperateBackpack();// 0x2100df0
	bool CanMarkPointOnWorld();// 0x2100dc0
	void CancelVehicleAbility();// 0x2100f10
	void CancelTreatment();// 0x2100ef0
	void CalculateBubbleKillNum(out SolarCharacter*[] InstigatorCharacters, Actor* AttackWeapon);// 0x2100cc0
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x2100b80
	void BreakRechargeShield();// 0x2100b60
	void BindUpdateHUDToOnHealthUpdateDelegateProc(const SolarCharacter* Character);// 0x2100a20
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x2100990
	void BindActorToSelfTeam(Actor* Actor);// 0x2100900
	void BeginplayPending__DelegateSignature();// 0x2649560
	void BeginPlayBlueprint();// 0x2649560
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x2100870
	void ApplyVehicleAbility(byte AbilityIndex);// 0x21007f0
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2649560
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2649560
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x2100760
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x2100600
	void AddDebugString(FString DebugString);// 0x2100560
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x21004e0

--------------------------------
Class: SolarSpectateInfo.Actor.Object
	MulticastInlineDelegateProperty OnBeginUpdateSpectateInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnStopUpdateSpectateInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnOtherPlayerBeginSpectateMe;//[Size: 1]
	MulticastInlineDelegateProperty OnOtherPlayerStopSpectateMe;//[Size: 1]
	MulticastInlineDelegateProperty OnBeforeSpectateTargetChange;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateTargetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectatePhaseChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSwitchSpectateTargetFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectatorOfMyTargetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateCharacterOfMyTargetReadied;//[Size: 1]
	enum SpectatePhase;//[Offset: 0x2c8, Size: 1]
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x2d0, Size: 1]
	SolarPlayerState*[] PlayersSpectatingMyTarget;//[Offset: 0x2e8, Size: 1]
	SolarPlayerState*[] PlayersSpectatingMe;//[Offset: 0x2f8, Size: 1]
	bool bIsServerRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	SolarReplayManager* ReplayManager;//[Offset: 0x320, Size: 1]
	SpectateConditions SpectateConditions;//[Offset: 0x328, Size: 1]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x3c8, Size: 1]
	InteractiveTaskStatus TaskStatus;//[Offset: 0x3d8, Size: 1]
	DataTable* InteractiveTaskTable;//[Offset: 0x450, Size: 1]
	FString TaskTablePath;//[Offset: 0x458, Size: 1]
	SolarPlayerState* LatestAttacker;//[Offset: 0x468, Size: 1]
	SolarPlayerState* LatestVictim;//[Offset: 0x470, Size: 1]
	float TotalCausedDamage;//[Offset: 0x488, Size: 1]
	Rotator PlayerCameraRotation;//[Offset: 0x48c, Size: 1]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x498, Size: 1]
	ReplicateMaxPileData[] CharacterBackpackItemMaxPiles;//[Offset: 0x4a8, Size: 1]
	float CharacterVJetChargeTime;//[Offset: 0x4b8, Size: 1]
	int CharacterVJetTotalTimes;//[Offset: 0x4bc, Size: 1]
	int CharacterVJetRestTimes;//[Offset: 0x4c0, Size: 1]
	int CharacterVJetModuleLevel;//[Offset: 0x4c4, Size: 1]
	float CharacterVJetStartChargeTime;//[Offset: 0x4c8, Size: 1]
	float CharacterHJetChargeTime;//[Offset: 0x4cc, Size: 1]
	int CharacterHJetTotalTimes;//[Offset: 0x4d0, Size: 1]
	int CharacterHJetRestTimes;//[Offset: 0x4d4, Size: 1]
	int CharacterHJetModuleLevel;//[Offset: 0x4d8, Size: 1]
	float CharacterHJetStartChargeTime;//[Offset: 0x4dc, Size: 1]
	CharacterRoleAbilityInfo[] CharacterRoleAbilitiesInfo;//[Offset: 0x4e0, Size: 1]
	RepCountdownData SpectateCountdownData;//[Offset: 0x4f0, Size: 1]
	BattleUpgradeEffectParamData[] BattleUpgradeEffectData;//[Offset: 0x520, Size: 1]
	int ExtraARMag;//[Offset: 0x530, Size: 1]
	int ExtraSGMag;//[Offset: 0x534, Size: 1]
	bool bExposedByRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	VehicleSpectateInfo VehicleSpectateInfo;//[Offset: 0x540, Size: 1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 1]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x2208380
	void ServerStopSpectateOtherPlayer_Internal();// 0x15711d0
	void ServerStopSpectateOtherPlayer();// 0x2208360
	void ServerSpectatePreviousPlayer();// 0x7c28e0
	void ServerSpectateNextPlayer();// 0x7c2940
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x2208250
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x2208140
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x2208070
	void ServerRequestSendTask(int InTaskID);// 0x2207fe0
	void ServerRequestIncreaseTargetTaskLevel();// 0x1571170
	void ServerRequestAvailableTask();// 0x15714b0
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x2207ee0
	void ServerBeginSpectateOtherPlayer_Internal();// 0x7e5fd0
	void ServerBeginSpectateOtherPlayer();// 0x2207ec0
	bool SendTask(int InTaskID);// 0x2207e20
	void SendGift(const int GiftID, const int Num);// 0x2207d50
	void RequestSendTask(int InTaskID);// 0x2207cc0
	void RequestIncreaseTargetTaskLevel();// 0x2207ca0
	void RequestAvailableTask();// 0x2207c80
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x22079e0
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnStopRecordingReplay();// 0x22079c0
	void OnStartRecordingReplay();// 0x22079a0
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnSpectatePhaseChanged__DelegateSignature(enum CurrentPhase);// 0x2649560
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnRep_VehicleSpectateInfo(out const VehicleSpectateInfo PreviousVehicleSpectateInfo);// 0x22078b0
	void OnRep_TotalCausedDamage();// 0x2207890
	void OnRep_TaskStatus();// 0x2207870
	void OnRep_SpectateTargetPlayerState(SolarPlayerState* LastTarget);// 0x22077e0
	void OnRep_SpectatePhase();// 0x22077c0
	void OnRep_SpectateCountdownData();// 0x22077a0
	void OnRep_PlayersSpectatingMyTarget();// 0x2207780
	void OnRep_PlayersSpectatingMe();// 0x2207760
	void OnRep_ExposedByRadar();// 0x2207740
	void OnRep_CharacterVJetTotalTimes();// 0x2207720
	void OnRep_CharacterVJetRestTimes();// 0x2207700
	void OnRep_CharacterVJetModuleLevel();// 0x22076e0
	void OnRep_CharacterRoleAbilitiesInfo();// 0x22076c0
	void OnRep_CharacterHJetTotalTimes();// 0x22076a0
	void OnRep_CharacterHJetRestTimes();// 0x2207680
	void OnRep_CharacterHJetModuleLevel();// 0x2207660
	void OnRep_CharacterBackpackItems();// 0x2207640
	void OnRep_bIsServerRecording();// 0x2207980
	void OnRep_BattleUpgradeEffectData();// 0x2207620
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnOpenAirBoxNum(enum InStatType);// 0x22075a0
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x2207490
	void OnIncreaseKillNumWithWeaponType(enum InStatType, int InWeaponID);// 0x22073c0
	void OnIncreaseKillNumWithPunch(enum InStatType);// 0x2207340
	void OnIncreaseKillNumWithAnyVehicle(enum InStatType);// 0x22072c0
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x22071f0
	void OnDamageChanged__DelegateSignature(float Damage);// 0x2649560
	void OnCurrentPlayerCountChanged();// 0x22071d0
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnBeforeSpectateTargetChange__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnAvailableAirDropsNumChanged();// 0x22071d0
	bool NeedUpdateSpectateInfo();// 0x22071a0
	bool IsSpectatingOtherPlayer();// 0x22070a0
	bool IsRecordingReplay();// 0x2207080
	bool IsClientRecording();// 0x2207050
	bool IncreaseTaskLevel(SolarPlayerState* SendPlayer);// 0x2206ee0
	SolarPlayerState*[] GetSpectatorsOfMyTarget();// 0x2206cc0
	SolarPlayerState*[] GetSpectatingMePlayerStates();// 0x2206c80
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x21aaaf0
	SolarCharacter* GetSpectateTargetCharacter();// 0x2206c40
	void GetSpectateReportInfo(out SpectateReportInfo SpectateReportInfo, bool HasNextTarget);// 0x2206b40
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x2206b10
	SpectateConditions GetSpectateConditions();// 0x22069d0
	SolarPlayerState* GetSolarPlayerState();// 0x22069a0
	bool GetInteractiveTaskConfigByID(int InTaskID, out InteractiveTaskConfig OutConfig);// 0x2206760
	int[] GetAvailableTaskByRandom();// 0x22066a0
	void GetAllInteractiveTaskConfigFromTable(out InteractiveTaskConfig[] OutAllConfig);// 0x2206580
	SolarPlayerState*[] GetAllAlivePlayers();// 0x2206500
	bool CostCurrencyByTaskAction(int InTaskID, int CurTasklevel);// 0x2206390
	void ClientNotifyTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x22061b0
	void ClientNotifySelfTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x2205fd0
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x2205df0
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x2205c10
	void ClientNotifyAvailableTaskResult(const int[] AvailableTask);// 0x2205b70
	bool CheckIsCanSpectateOthers();// 0x2205b10
	bool CanISpectate(const SolarPlayerState* Target);// 0x22056f0

--------------------------------
Class: SolarReplayManager.Object
	SoftObjectPath WaitingOBMap;//[Offset: 0x40, Size: 1]
	SoftClassPath WaitingReplayStartUIClass;//[Offset: 0x58, Size: 1]
	SoftClassPath OBModeSpectatorPawnClass;//[Offset: 0x70, Size: 1]
	SoftClassPath OBModeHUDClass;//[Offset: 0x88, Size: 1]
	SoftClassPath OBHeadInfoWidgetClass;//[Offset: 0xa0, Size: 1]
	GameplayCueTag PerspectiveCueTag;//[Offset: 0xb8, Size: 1]
	GameplayCueTag PerspectiveInSmokeCueTag;//[Offset: 0xc0, Size: 1]
	SoftObjectPath PerspectiveMaterial;//[Offset: 0xc8, Size: 1]
	AddMultiplePassMaterialChangeParams PerspectiveMaterialParams;//[Offset: 0xe0, Size: 1]
	SoftClassPath DirectorModeSpectatorPawnClass;//[Offset: 0x120, Size: 1]
	FName DirectorModeInputModeName;//[Offset: 0x138, Size: 1]
	float UpdateDistanceInterval;//[Offset: 0x140, Size: 1]
	float OBTeamListNearbyDistance;//[Offset: 0x144, Size: 1]
	float OBHeadInfoNearDistance;//[Offset: 0x148, Size: 1]
	float OBHeadInfoFarDistance;//[Offset: 0x14c, Size: 1]
	float OBDamageTextHideDistance;//[Offset: 0x150, Size: 1]
	float OBDelayTimeForTournament;//[Offset: 0x154, Size: 1]
	float OBLivePreDownloadTime;//[Offset: 0x158, Size: 1]
	float OBSkipBeginningTime;//[Offset: 0x15c, Size: 1]
	float[] OBPlaybackSpeedList;//[Offset: 0x160, Size: 1]
	byte OBPlaybackSpeedDefaultIndex;//[Offset: 0x170, Size: 1]
	byte OBLiveDelayChunkCount;//[Offset: 0x171, Size: 1]
	FName OBLockCameraBindBoneName;//[Offset: 0x174, Size: 1]
	Vector OBLockCameraBindBoneOffset;//[Offset: 0x17c, Size: 1]
	float OBInitLockDistance;//[Offset: 0x188, Size: 1]
	float OBMinLockDistance;//[Offset: 0x18c, Size: 1]
	float OBMaxLockDistance;//[Offset: 0x190, Size: 1]
	float OBMinLockPitch;//[Offset: 0x194, Size: 1]
	float OBMaxLockPitch;//[Offset: 0x198, Size: 1]
	float OBPitchAdjustTriggerFloor;//[Offset: 0x19c, Size: 1]
	float OBPitchAdjustValue;//[Offset: 0x1a0, Size: 1]
	int ReplayCacheFileRetentionTimeInSeconds;//[Offset: 0x1a4, Size: 1]
	int HighlightFileRetentionTimeInSeconds;//[Offset: 0x1a8, Size: 1]
	int HighlightFileMaxCount;//[Offset: 0x1ac, Size: 1]
	int HighlightMinimalDiskSpaceInMB;//[Offset: 0x1b0, Size: 1]
	int[] EnableHighlightModeGroups;//[Offset: 0x1b8, Size: 1]
	SoftClassPath AutoDirectorComponentClass;//[Offset: 0x1c8, Size: 1]
	MulticastInlineDelegateProperty OnPlayingStartedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingLoadLevelsStartedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingLevelLoadedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingStreamReadiedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingAtEndDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingFinishedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRecordingStartedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRecordingStartFailedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRecordingFinishedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingScrubStartDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingPreScrubDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingFirstScrubFinishedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingScrubFailedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingScrubCharactersCreatedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingPauseDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayingContinueDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlaybackSpeedChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCheatersPlayerIDChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAutoPlaybackSpeedUpStart;//[Size: 1]
	MulticastInlineDelegateProperty OnAutoPlaybackSpeedUpStop;//[Size: 1]
	MulticastInlineDelegateProperty OnHighlightListChanged;//[Size: 1]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x3f0, Size: 1]
	void WriteHeaderData(out FString[] OutHeaderData);// 0x21f1650
	void StopRecording();// 0x21f15d0
	void StopPlayReplay();// 0x21f15b0
	void StartRecording(FString SessionName, FString UploadUrl, enum ForceRecordingType);// 0x21f1470
	void StartRecordHighlightOfCurrentBattle(FString SessionNameOverride);// 0x21f13d0
	void SpeedUpTimeDilation();// 0x21f13b0
	void SlowDownTimeDilation();// 0x21f1390
	bool ShouldShowProgressBar();// 0x21f1360
	void SetTimeDilation(float Dilation);// 0x21f12e0
	void SetStartSpectateTournamentTime();// 0x21f12c0
	void SetRequestTryStrategy(float Interval, int Times);// 0x2649560
	void SetRecordingType(enum InRecordingType);// 0x21f1240
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x2649560
	void SetLiveWatchingPlayerForPlaying(FString BeWatchingPlayerID);// 0x21f11a0
	void SetEnableCompressForHttpReplay(bool bEnable);// 0x21f1110
	void RetryPlayReplayFromServer();// 0x21f10f0
	void RequestWatchingLiveOfPlayer(FString SolarPlayerID);// 0x2649560
	void RequestPlayReplayOfCurrentBattle();// 0x2649560
	void RequestPlayReplay(FString InBattleID, bool IsLive);// 0x2649560
	void RequestBattleList(int PageIndex, int PageSize);// 0x2649560
	void ReplayManagerNoParamDelegate__DelegateSignature();// 0x2649560
	void RecordReplayInfosOnRecordingStarted();// 0x21f10d0
	void ReceivePlayingStartFailed();// 0x2649560
	bool ReceivePlayingFinished(enum reason, byte StreamerErrorCode, FString StreamerErrorMsg);// 0x2649560
	void ProcessHeaderData(out const FString[] HeaderData, out FString Error);// 0x21f0dc0
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x21f0ca0
	void PlayReplayFromLocal(FString ReplayFileName);// 0x21f0bb0
	void PlayingFinishedInternal();// 0x21f0da0
	void PlayHighlight(FString InBattleID);// 0x21f0b10
	void PausePlayReplay();// 0x21f0af0
	void OnPlayingFinished(World* World);// 0x21f0830
	void OnPlayingAtEnd(World* World);// 0x21f07a0
	void OnPlayerStopWatchingLive(FString StopWatchingPlayerID);// 0x21f05b0
	void OnPlayerStartWatchingLive(FString RequestWatchingPlayerID, FString BeWatchingPlayerID);// 0x21f04b0
	void OnLiveWatchTargetLost();// 0x2649560
	void NotifyTournamentSpectate(bool bIsInLiveReplay);// 0x21eff00
	bool NotifyBackendPlayReplayFinished();// 0x2649560
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x2649560
	void LuaBindDelegates();// 0x2649560
	bool IsTournament();// 0x21efed0
	bool IsScrubing();// 0x21efea0
	bool IsReplayLive();// 0x21efe70
	bool IsRecordingHighlight();// 0x21efe40
	bool IsRecording();// 0x21efe10
	bool IsReady();// 0x2649560
	bool IsPlayingHighlight();// 0x21efde0
	bool IsPlaying();// 0x21efdb0
	bool IsPlayerBeWatching(FString SolarPlayerID);// 0x21efd00
	bool IsPausing();// 0x21efcd0
	bool IsLocal();// 0x21efca0
	bool IsLiveWatchOnly();// 0x21efc70
	bool IsInState(enum CheckState);// 0x21efbe0
	bool IsACheater(FString PlayerId);// 0x21efb30
	void IgnoreTournamentDelayTimeForNextPlay();// 0x21efb10
	bool HasHighlight(FString InBattleID);// 0x21efa60
	void GotoTimeInSecond(float Second);// 0x21ef9e0
	float GetTotalSessionTimeInSecond();// 0x21ef980
	float GetTimeDilation();// 0x21ef950
	void GetStartRecordingParams(out StartRecordingParams OutParams);// 0x2649560
	enum GetRecordingType();// 0x21ef8d0
	float GetCurrentSessionTimeInSecond();// 0x21ef8a0
	FString GetCurrentSessionName();// 0x21ef7e0
	FString GetBeWatchingPlayerID();// 0x21ef7a0
	FString GetBattleIDByIndex(int Index);// 0x2649560
	void EnterSettlementStage();// 0x21ef760
	void DestroyWaitingOBStartUI();// 0x21ef740
	void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching);// 0x21ef6b0
	void CreateWaitingOBStartUI();// 0x21ef690
	void ContinuePlayReplay();// 0x21ef670
	void AppendCheatersPlayerID(out const FString[] InCheatersPlayerID);// 0x21ef520

--------------------------------
Class: StartRecordingParams
	bool bWithLevelStreamingFixes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnableCheckpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint32 RecordHz;//[Offset: 0x4, Size: 1]
	float CheckpointInterval;//[Offset: 0x8, Size: 1]
	float ChunkInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: GameplayCueTag
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AddMultiplePassMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x0, Size: 1]
	enum ResolveStrategy;//[Offset: 0x8, Size: 1]
	enum CompatibilityMode;//[Offset: 0x9, Size: 1]
	GameplayTagContainer SpecifiedPriorityTags;//[Offset: 0x10, Size: 1]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 1]
	int MainPassDepthStencilValue;//[Offset: 0x34, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bCanISpectateHostilePlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float LookAtSelfDeathBoxCountDown;//[Offset: 0x8, Size: 1]
	enum[] FindSpectateTargetPolicy;//[Offset: 0x10, Size: 1]

--------------------------------
Class: VehicleSpectateInfo
	SolarVehiclePawn* SpectateVehicle;//[Offset: 0x0, Size: 1]
	SolarVehicleWeapon* SpectateVehicleWeapon;//[Offset: 0x8, Size: 1]
	enum VehicleWeaponScopeType;//[Offset: 0x10, Size: 1]
	SolarPlayerWeapon* SpectatePlayerWeapon;//[Offset: 0x14, Size: 1]
	int ScopeId;//[Offset: 0x1c, Size: 1]
	int[] WeaponIDs;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2b8, Size: 1]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2c0, Size: 1]
	uint32 VehicleID;//[Offset: 0x2c8, Size: 1]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2d0, Size: 1]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x2f8, Size: 1]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x300, Size: 1]
	AkComponent* AkComponent;//[Offset: 0x308, Size: 1]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x310, Size: 1]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x318, Size: 1]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x320, Size: 1]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x328, Size: 1]
	BasedMovement BasedMovement;//[Offset: 0x330, Size: 1]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x358, Size: 1]
	int HealthUIID;//[Offset: 0x368, Size: 1]
	Texture2D* VehicleBrandIcon;//[Offset: 0x370, Size: 1]
	float OverlapWaterRadius;//[Offset: 0x398, Size: 1]
	Vector OutVehicleOffset;//[Offset: 0x39c, Size: 1]
	float WaterDraftDepth;//[Offset: 0x3a8, Size: 1]
	float CarpadProtectTime;//[Offset: 0x3ac, Size: 1]
	float CarPadAccelerationMultiplier;//[Offset: 0x3b0, Size: 1]
	Vector[] DropPassengerLocations;//[Offset: 0x3b8, Size: 1]
	Vector DropPassengerAtTop;//[Offset: 0x3c8, Size: 1]
	FName BodySocketName;//[Offset: 0x3d4, Size: 1]
	Vector DamageBoxLocation;//[Offset: 0x3dc, Size: 1]
	Vector DamageBoxExtent;//[Offset: 0x3e8, Size: 1]
	FName[] PenetrationDamageBones;//[Offset: 0x3f8, Size: 1]
	float VehicleMaxSpeedOnUI;//[Offset: 0x408, Size: 1]
	enum VehicleControlUIType;//[Offset: 0x40c, Size: 1]
	enum VehicleAnimationType;//[Offset: 0x40d, Size: 1]
	FName VehicleDirectionBoneForPassenger;//[Offset: 0x410, Size: 1]
	VehicleVFX NosCameraVFX;//[Offset: 0x420, Size: 1]
	float NOSCameraEffectAngle;//[Offset: 0x4b0, Size: 1]
	VehicleVFX GCCameraVFX;//[Offset: 0x4c0, Size: 1]
	float GCCameraEffectAngle;//[Offset: 0x550, Size: 1]
	VehicleVFX[] NosVFXes;//[Offset: 0x558, Size: 1]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x568, Size: 1]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x5b8, Size: 1]
	float SpeedThresholdForStandingOn;//[Offset: 0x5bc, Size: 1]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x5c0, Size: 1]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x5c8, Size: 4]
	float SprayVelocity;//[Offset: 0x668, Size: 1]
	float HeavyInSpeed;//[Offset: 0x66c, Size: 1]
	float CriticalAngle;//[Offset: 0x670, Size: 1]
	Vector OffsetBasedVechileLoction;//[Offset: 0x674, Size: 1]
	float CollisionSparkThreshold;//[Offset: 0x680, Size: 1]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x688, Size: 1]
	FName CollisionSparkParamNowel;//[Offset: 0x6b0, Size: 1]
	FName CollisionSparkParamQuantity;//[Offset: 0x6b8, Size: 1]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x6c0, Size: 1]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x6c8, Size: 1]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x750, Size: 1]
	VehicleVFX SpeedParticle;//[Offset: 0x7e0, Size: 1]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x870, Size: 1]
	VehicleVFX[] DriverOnVFXs;//[Offset: 0x880, Size: 1]
	Vector SpawnOffset;//[Offset: 0x890, Size: 1]
	VehicleCameraDataAsset* CameraDataAsset;//[Offset: 0x8a0, Size: 1]
	FString SpeedVibrationHeString;//[Offset: 0x8a8, Size: 1]
	RuntimeFloatCurve SpeedVibrationCurve;//[Offset: 0x8b8, Size: 1]
	float MinSpeedDifferenceForCollisionVibration;//[Offset: 0x940, Size: 1]
	FString CollisionVibrationHeString;//[Offset: 0x948, Size: 1]
	FString LandingVibrationHeString;//[Offset: 0x958, Size: 1]
	RuntimeFloatCurve LandingVibrationCurve;//[Offset: 0x968, Size: 1]
	float MaxSpeedDecelerationRate;//[Offset: 0x9f0, Size: 1]
	SolarVehicleMaterialData BackLampData;//[Offset: 0x9f8, Size: 1]
	SolarVehicleMaterialData[] VehicleMaterialDataArray;//[Offset: 0xa20, Size: 1]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0xa30, Size: 1]
	class GameplayEffect* DefaultAttributes;//[Offset: 0xa38, Size: 1]
	class GameplayEffect* CanDriveEffect;//[Offset: 0xa40, Size: 1]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0xa48, Size: 1]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0xa50, Size: 1]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0xa58, Size: 1]
	SolarDamageInfo ExplosionDamageInfo;//[Offset: 0xa60, Size: 1]
	VehicleVFX ExplosionVFX;//[Offset: 0xaa0, Size: 1]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xb30, Size: 1]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xbb0, Size: 5]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe80, Size: 5]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xea8, Size: 1]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xeb0, Size: 1]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xec0, Size: 1]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xecc, Size: 1]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xed0, Size: 1]
	float SpeedThresholdForAttachPlatform;//[Offset: 0xed4, Size: 1]
	float TimerForPenetration;//[Offset: 0xed8, Size: 1]
	float PenetrationThreshold;//[Offset: 0xedc, Size: 1]
	float CollideDamage;//[Offset: 0xee0, Size: 1]
	float CrashDamageWeight;//[Offset: 0xee4, Size: 1]
	float SelfCrashDamageRate;//[Offset: 0xee8, Size: 1]
	float PassengerDamageRatio;//[Offset: 0xeec, Size: 1]
	float MinPlayerDamageVelocity;//[Offset: 0xef0, Size: 1]
	float CollidedCharacterDmgRatio;//[Offset: 0xef4, Size: 1]
	float CollideUpBoundingRatio;//[Offset: 0xef8, Size: 1]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xf00, Size: 1]
	float CollidePushUpAngle;//[Offset: 0xf08, Size: 1]
	float CharacterProtectTime;//[Offset: 0xf0c, Size: 1]
	float CollisionLinearVelocityDampingForSimulatedProxy;//[Offset: 0xf10, Size: 1]
	float CollisionLinearVelocityDampingSetDelay;//[Offset: 0xf14, Size: 1]
	float CollisionCompensationImpulseForSimulatedProxy;//[Offset: 0xf18, Size: 1]
	int[] StealthHideMats;//[Offset: 0xf20, Size: 1]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	bool IsLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf70, Size: 1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf71, Size: 1]
	int[] OccupiedSeats;//[Offset: 0x1088, Size: 1]
	SolarInputActionContext* InputActionContext;//[Offset: 0x1098, Size: 1]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x10a4, Size: 1]
	Vector_NetQuantize RepLocation;//[Offset: 0x10bc, Size: 1]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1108, Size: 1]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x113c, Size: 1]
	byte CurPlayerInputMask;//[Offset: 0x1140, Size: 1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x1141, Size: 1]
	SolarNavModifierComponent* SolarNavModifierComp;//[Offset: 0x11b0, Size: 1]
	bool bDynamicAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b8, Size: 1]
	int SkinId;//[Offset: 0x1208, Size: 1]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x1220, Size: 1]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 1]
	float EnterWaterDuration;//[Offset: 0x12f8, Size: 1]
	float WaterLineHeight;//[Offset: 0x1300, Size: 1]
	SolarWaterActorNew* WaterActor;//[Offset: 0x1308, Size: 1]
	CurveFloat* SpeedCameraShakeCurve;//[Offset: 0x1330, Size: 1]
	CurveFloat* SpeedScreenEffectOpacityCurve;//[Offset: 0x1338, Size: 1]
	CurveFloat* SpeedScreenEffectPlayRateCurve;//[Offset: 0x1340, Size: 1]
	float MinCameraShakeSpeed;//[Offset: 0x1348, Size: 1]
	float MinScreenEffectSpeed;//[Offset: 0x134c, Size: 1]
	class CameraShake* VehicleSpeedCameraShake;//[Offset: 0x1350, Size: 1]
	FName VehicleSpeedScreenEffectRowId;//[Offset: 0x1358, Size: 1]
	void UpdateRequiredAbilityInfo(const GameplayTag Tag, int NewCount);// 0x22cdea0
	void UpdateBlockedAbilityInfo(const GameplayTag Tag, int NewCount);// 0x22cddd0
	void StatVehicleAutoMove(int MoveTime);// 0x22cdc20
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x22cdb50
	void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation);// 0x22cda80
	void SetPlayerInputVector(out const Vector2D InputVector, float CameraYaw);// 0x22cd920
	void SetCurrentHealth(float InHealth);// 0x22cd8a0
	void SetCrossCarpad(SolarCarPad* InCarpad);// 0x22cd810
	void ServerSetPlayerInput(const Vector_NetQuantizeNormal InputVector, const byte InputMask);// 0x22cd750
	void ServerSetCrossCarpad(SolarCarPad* InCarpad);// 0x22cd6c0
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x22cd5d0
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x22cd530
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x22cd420
	void ServerSendCorrectionToClient(float ServerTimeStamp, Vector_NetQuantize WorldLocation, Vector_NetQuantizeNormal WorldRotationCompressed);// 0x22cd2f0
	void ServerHandleVehicleCollision(const VehicleCollisionInfo InVehicleCollisionInfo);// 0x22cd210
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x22cd150
	void ServerApplyVehicleSkin(int InSkinID);// 0x22cd0c0
	void ServerApplyDamageToVehilceAndPassenger(SolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, const Vector_NetQuantize HitLocation);// 0x22ccf70
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x22cce80
	void RemoveSeatSlot(byte SeatIndex);// 0x22cce00
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x22ccd80
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x22ccb30
	void PlaySpeedboardSound();// 0x22ccb10
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x22cca70
	void OverlapWater();// 0x22cca50
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x22cc870
	void OnStencilLoaded();// 0x22cc850
	void OnSkinDataAssetLoadedNext(SoftClassPath SkinVehiclePath);// 0x22cc750
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x22cc620
	void OnRep_VehicleBurning();// 0x22cc600
	void OnRep_SkinId();// 0x22cc5e0
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x22cc560
	void OnRep_RemoveStencil();// 0x22cc540
	void OnRep_CachedActorHandle();// 0x22cc520
	bool IsVehicleFullHealth();// 0x22cc2d0
	bool IsVehicleDangerous();// 0x22cc2a0
	bool IsVehicleBroken();// 0x22cc270
	bool IsTeammateWith(const Pawn* Pawn);// 0x22cc1d0
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x22cc140
	bool IsExistEnemy(const SolarCharacter* Character);// 0x22cc0a0
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x22cbfd0
	bool InSameTeam();// 0x22cbfa0
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x22cbec0
	int GetVehicleTypeID();// 0x22cbe90
	byte GetVehicleTeamId();// 0x22cbe60
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x22cbe30
	int GetVehicleGroupID();// 0x22cbdd0
	float GetSpeedInKmh();// 0x22cbd90
	float GetSpeed();// 0x22cbd50
	Vector GetSpawnOffset();// 0x22cbd20
	Vector2D GetPlayerInputVector();// 0x22cbce0
	int GetPassengerCount();// 0x22cbb90
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x22cbaf0
	float GetMaxHealth();// 0x22cbac0
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x22cba30
	int GetHealthPercentInt();// 0x22cba00
	SolarCharacter* GetDriverCharacter();// 0x22cb810
	float GetDangerHealthPrecent();// 0x22cb7e0
	float GetCurrentHealth();// 0x22cb7b0
	bool DoesAbilityRequiredTagMissing(int CurSeatIndex, byte AbilityIndex);// 0x22cb510
	bool DoesAbilityActivationTagBlocked(int CurSeatIndex, byte AbilityIndex);// 0x22cb440
	void DeleteStencilMesh();// 0x22cb420
	void ClientVehicleExplosion();// 0x22cb400
	void ClientVehicleBroken();// 0x1572ab0
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x22cb290
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x22cb160
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value);// 0x22cb030
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x22caf40
	bool CheckUpdateVisual();// 0x22caee0
	bool CheckOpenParticleOptimization(int Bias);// 0x22cae40
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x22cad70
	void ApplySkinFromCDO(SolarVehiclePawn* SkinVehiclePawnCDO);// 0x22cace0
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x22cabb0

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimDetailMode;//[Offset: 0xc18, Size: 1]
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc40, Size: 1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc40, Size: 1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc40, Size: 1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x724710

--------------------------------
Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xe4, Size: 1]
	float ServerBufferCheckMinSpeed;//[Offset: 0xe8, Size: 1]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xec, Size: 1]
	float AtRestThresholdCount;//[Offset: 0xf0, Size: 1]
	enum ExtrapolationMode;//[Offset: 0xf4, Size: 1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	float ExtrapolationTimeLimit;//[Offset: 0xf8, Size: 1]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float ExtrapolationDistanceLimit;//[Offset: 0x100, Size: 1]
	float SendPositionThreshold;//[Offset: 0x104, Size: 1]
	float SendRotationThreshold;//[Offset: 0x108, Size: 1]
	float SendVelocityThreshold;//[Offset: 0x10c, Size: 1]
	float SendAngularVelocityThreshold;//[Offset: 0x110, Size: 1]
	float ResetTimeOffsetsThreshold;//[Offset: 0x114, Size: 1]
	float UsingRepLocationThreshold;//[Offset: 0x118, Size: 1]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x11c, Size: 1]
	float ReceivedPositionThreshold;//[Offset: 0x120, Size: 1]
	float AngularVelocityForRotationThreshold;//[Offset: 0x124, Size: 1]
	float ReceivedRotationThreshold;//[Offset: 0x128, Size: 1]
	float PositionSnapThreshold;//[Offset: 0x12c, Size: 1]
	float RotationSnapThreshold;//[Offset: 0x130, Size: 1]
	float PositionLerpSpeed;//[Offset: 0x134, Size: 1]
	float RotationLerpSpeed;//[Offset: 0x138, Size: 1]
	float SpeedOfLerp;//[Offset: 0x13c, Size: 1]
	enum SyncPosition;//[Offset: 0x140, Size: 1]
	enum SyncRotation;//[Offset: 0x141, Size: 1]
	enum SyncVelocity;//[Offset: 0x142, Size: 1]
	enum SyncAngularVelocity;//[Offset: 0x143, Size: 1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	float SendRate;//[Offset: 0x14c, Size: 1]
	float TimeSmoothing;//[Offset: 0x150, Size: 1]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 1]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 1]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 1]
	float AtRestPositionThreshold;//[Offset: 0x510, Size: 1]
	float AtRestRotationThreshold;//[Offset: 0x514, Size: 1]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x528, Size: 1]

--------------------------------
Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x3f8, Size: 1]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x400, Size: 1]

--------------------------------
Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x3b0, Size: 1]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	static SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x220b810

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x318, Size: 1]
	Vector SocketOffset;//[Offset: 0x31c, Size: 1]
	Vector TargetOffset;//[Offset: 0x328, Size: 1]
	float ProbeSize;//[Offset: 0x334, Size: 1]
	byte ProbeChannel;//[Offset: 0x338, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33c, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33c, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33c, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33c, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33c, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d, Size: 1]
	float CameraLagSpeed;//[Offset: 0x340, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x344, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x348, Size: 1]
	float CameraLagMaxDistance;//[Offset: 0x34c, Size: 1]
	bool IsCollisionFixApplied();// 0x3f19a80
	Vector GetUnfixedCameraPosition();// 0x1ff7190
	Rotator GetTargetRotation();// 0x3f19a40

--------------------------------
Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0x9b8, Size: 1]
	SolarVehicleSpringArmComponent* VehicleSpringArm;//[Offset: 0x9c0, Size: 1]
	VehicleCameraDataAsset*[] CameraDataAssets;//[Offset: 0x9e0, Size: 1]

--------------------------------
Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ConfigDistanceToTarget;//[Offset: 0x980, Size: 1]
	Vector ConfigCameraOffset;//[Offset: 0x984, Size: 1]
	Vector ConfigTargetOffset;//[Offset: 0x990, Size: 1]
	float ConfigFOV;//[Offset: 0x99c, Size: 1]
	float ViewPitchMax;//[Offset: 0x9a0, Size: 1]
	float ViewPitchMin;//[Offset: 0x9a4, Size: 1]
	float ViewYawMax;//[Offset: 0x9a8, Size: 1]
	float ViewYawMin;//[Offset: 0x9ac, Size: 1]
	float CameraOccupiedRoom;//[Offset: 0x9b0, Size: 1]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 1]
	static SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x2103f60

--------------------------------
Class: VehicleCameraDataAsset.DataAsset.Object
	RuntimeFloatCurve TargetArmLengthCurve;//[Offset: 0x30, Size: 1]
	float TargetArmLengthInterpSpeed;//[Offset: 0xb8, Size: 1]
	Vector TargetOffset;//[Offset: 0xbc, Size: 1]
	FName TargetOffsetSocket;//[Offset: 0xc8, Size: 1]
	bool bTargetOffsetIgnoreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bTargetOffsetIgnorePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bCameraRollSameWithVehicleRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	Vector SocketOffset;//[Offset: 0xd4, Size: 1]
	float MinPitch;//[Offset: 0xe0, Size: 1]
	float MaxPitch;//[Offset: 0xe4, Size: 1]
	float MinYaw;//[Offset: 0xe8, Size: 1]
	float MaxYaw;//[Offset: 0xec, Size: 1]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0xf0, Size: 1]
	float CameraFovInterpSpeed;//[Offset: 0x178, Size: 1]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float DefaultPitch;//[Offset: 0x180, Size: 1]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x188, Size: 1]
	float CameraFollowTimeThreshold;//[Offset: 0x210, Size: 1]
	float CameraResetFollowSpeed;//[Offset: 0x214, Size: 1]
	float CameraFollowSpeedThreshold;//[Offset: 0x218, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	RuntimeFloatCurve CameraLagInterpSpeedCurve;//[Offset: 0x220, Size: 1]
	RuntimeFloatCurve CameraLagCurve;//[Offset: 0x2a8, Size: 1]
	RuntimeFloatCurve AdditionalTargetOffsetOnZ;//[Offset: 0x330, Size: 1]
	float BlendTime;//[Offset: 0x3b8, Size: 1]

--------------------------------
Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 1]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 1]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 1]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 1]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 1]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 1]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 1]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x202da20
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x202d6f0
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x20349c0
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x200ae30
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x202dc20
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x202db70
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x200aee0

--------------------------------
Class: SolarCarPad.SolarInteractableActor.Actor.Object
	float Duration;//[Offset: 0x238, Size: 1]
	float SpeedMultiplier;//[Offset: 0x23c, Size: 1]
	float DistanceThresholdForValidation;//[Offset: 0x240, Size: 1]

--------------------------------
Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x228, Size: 1]
	byte bUseSceneActorOptimization;//[Offset: 0x234, Size: 1]
	void SetUserActor(Actor* InUser);// 0x2182fd0
	void InteractWithActor(Actor* InActor);// 0x2649560
	Actor* GetUserActor();// 0x2182260

--------------------------------
Class: VehicleCollisionInfo
	PrimitiveComponent* CollidedPrimitive;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize SelfPreVelocity;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize SelfCurrentVelocity;//[Offset: 0x14, Size: 1]
	Vector_NetQuantize OtherVehicleLinearVelocity;//[Offset: 0x20, Size: 1]
	Vector_NetQuantize OtherVehicleAngularVelocity;//[Offset: 0x2c, Size: 1]
	Vector_NetQuantize OtherVehicleLocation;//[Offset: 0x38, Size: 1]
	Vector_NetQuantizeNormal OtherVehicleRotation;//[Offset: 0x44, Size: 1]

--------------------------------
Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 1]
	Rotator Rotation;//[Offset: 0x14, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 1]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 1]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	VehicleCameraDataAsset* OutShootCameraData;//[Offset: 0x18, Size: 1]
	VehicleCameraDataAsset* OutShootAimCameraData;//[Offset: 0x20, Size: 1]
	CurveFloat* OutShootPitchLimitCurve;//[Offset: 0x28, Size: 1]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x30, Size: 1]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x40, Size: 1]
	class SolarVehicleWeapon* VehicleWeaponSkinClass;//[Offset: 0x48, Size: 1]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x58, Size: 1]
	float DamageRatio;//[Offset: 0x80, Size: 1]
	float PenetrationDamageRatio;//[Offset: 0x84, Size: 1]
	BoxSphereBounds PenetrationSphere;//[Offset: 0x88, Size: 1]
	Rotator EjectRotation;//[Offset: 0xa4, Size: 1]
	bool bOverrideDefaultEjectParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	VehicleEjectParams EjectParams;//[Offset: 0xb4, Size: 1]
	SolarCharacter* SeatPassenger;//[Offset: 0xc4, Size: 1]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 1]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 1]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	byte AbilityIndex;//[Offset: 0x402, Size: 1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x408, Size: 1]
	FString AbilityActivateVirationHeString;//[Offset: 0x428, Size: 1]
	FString AbilityEndVirationHeString;//[Offset: 0x438, Size: 1]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	float DurationTime;//[Offset: 0x44c, Size: 1]
	class GameplayEffect* ActivateEffect;//[Offset: 0x450, Size: 1]
	Texture2D* AbilityIcon;//[Offset: 0x458, Size: 1]
	Texture2D* AdditionalAbilityIcon;//[Offset: 0x480, Size: 1]
	int AbilityDescription;//[Offset: 0x4a8, Size: 1]
	FString AbilityTextType;//[Offset: 0x4b0, Size: 1]
	float DamageToVehicle;//[Offset: 0x4c0, Size: 1]
	float DamageToCharacter;//[Offset: 0x4c4, Size: 1]

--------------------------------
Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0xa98, Size: 1]
	float MinWeaponPitch;//[Offset: 0xa9c, Size: 1]
	float MaxWeaponYaw;//[Offset: 0xaa0, Size: 1]
	float MinWeaponYaw;//[Offset: 0xaa4, Size: 1]
	float PitchFollowSpeed;//[Offset: 0xaa8, Size: 1]
	float YawFollowSpeed;//[Offset: 0xaac, Size: 1]
	float SimulationSmoothLerpSpeed;//[Offset: 0xab0, Size: 1]
	float SimulationSmoothLerpThreshold;//[Offset: 0xab4, Size: 1]
	bool bAbsoluteRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 1]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab9, Size: 1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaba, Size: 1]
	Vector ScopeCameraOffset;//[Offset: 0xabc, Size: 1]
	Vector ScopeTargetOffset;//[Offset: 0xac8, Size: 1]
	float ScopeCameraDistance;//[Offset: 0xad4, Size: 1]
	float ScopeBlendTime;//[Offset: 0xad8, Size: 1]
	VehicleCameraDataAsset* ScopeCameraData;//[Offset: 0xae0, Size: 1]
	float ScopeFOVSwitchSpeed;//[Offset: 0xae8, Size: 1]
	float QuickAdsFireDelay;//[Offset: 0xaec, Size: 1]
	enum DefaultWeaponScopeType;//[Offset: 0xaf0, Size: 1]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0xaf8, Size: 1]
	float PitchCameraOffset;//[Offset: 0xb00, Size: 1]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb05, Size: 1]
	byte FireType;//[Offset: 0xb06, Size: 1]
	FName FireSocketName;//[Offset: 0xb08, Size: 1]
	float UpdateShotStartLocThreshold;//[Offset: 0xb10, Size: 1]
	byte FireAixsType;//[Offset: 0xb14, Size: 1]
	FName TurretVSocketName;//[Offset: 0xb18, Size: 1]
	FName TurretHSocketName;//[Offset: 0xb20, Size: 1]
	float ShootTolerance;//[Offset: 0xb28, Size: 1]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0xb30, Size: 1]
	SolarCharacter* WeaponOwner;//[Offset: 0xb38, Size: 1]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	bool bActivedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0xb44, Size: 1]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0xb60, Size: 1]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0xb68, Size: 1]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xb90, Size: 1]
	FName AttachBoneName;//[Offset: 0xb98, Size: 1]
	SolarCharacter* CahedLastOwner;//[Offset: 0xba0, Size: 1]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xee0, Size: 1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xee0, Size: 1]
	Vector2D AssistLockImageSize;//[Offset: 0xee4, Size: 1]
	Vector2D PCAssistLockImageSize;//[Offset: 0xeec, Size: 1]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xef4, Size: 1]
	float AutoLockSpreadDecPerSecond;//[Offset: 0xef8, Size: 1]
	float PreSelectProgress;//[Offset: 0xefc, Size: 1]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xf00, Size: 1]
	enum AssistLockState;//[Offset: 0xf88, Size: 1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf89, Size: 1]
	float TriggerSmoothReticleDistance;//[Offset: 0xf8c, Size: 1]
	Vector2D SmoothReticleSpeed;//[Offset: 0xf90, Size: 1]
	Transform CachedWeaponRelativeTransform;//[Offset: 0xfa0, Size: 1]
	Transform CachedFireMuzzleTransform;//[Offset: 0xfd0, Size: 1]
	Transform CachedTurretVSocketTransform;//[Offset: 0x1000, Size: 1]
	Transform CachedTurretHSocketTransform;//[Offset: 0x1030, Size: 1]
	float SimulateMuzzleDistanceThreshold;//[Offset: 0x1060, Size: 1]
	class SolarBullet* VehicleWeaponPrimaryOverrideBulletClass;//[Offset: 0x10c0, Size: 1]
	class SolarBullet* VehicleWeaponSecondaryOverrideBulletClass;//[Offset: 0x10c8, Size: 1]
	class SolarBullet* VehicleWeaponPrimaryOverrideTraceBulletClass;//[Offset: 0x10d0, Size: 1]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0x10d8, Size: 1]
	bool bEnablePreAimingLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1111, Size: 1]
	bool bNotOptTickIntervalPreAimingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1112, Size: 1]
	FName PreAimingLaserLaunchScoket;//[Offset: 0x1114, Size: 1]
	ParticleSystem* PreAimingLaserFX;//[Offset: 0x1120, Size: 1]
	ParticleSystem* PreAimingLaserEnermyFX;//[Offset: 0x1148, Size: 1]
	int PreAimingLaserChagringPhase;//[Offset: 0x1170, Size: 1]
	ParticleSystemComponent* PreAimingLaserEffect;//[Offset: 0x1178, Size: 1]
	bool bEnableBackupAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	int BackupAmmoFireCost;//[Offset: 0x1184, Size: 1]
	int MaxBackupAmmo;//[Offset: 0x1188, Size: 1]
	float ReloadBackupAmmoInterval;//[Offset: 0x118c, Size: 1]
	int ReloadBackupAmmoNum;//[Offset: 0x1190, Size: 1]
	int CurrentBackupAmmo;//[Offset: 0x1194, Size: 1]
	bool bEnableRechamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	float PlayRechamberFinishTime;//[Offset: 0x11a4, Size: 1]
	FString RechamberStartAndStopSound;//[Offset: 0x11b0, Size: 1]
	FString RechamberFinishSound;//[Offset: 0x11c0, Size: 1]
	VehicleVFX RechamberAlertVFX;//[Offset: 0x11d0, Size: 1]
	int RechamberAlertMaterialIndex;//[Offset: 0x1260, Size: 1]
	bool bKeepWeaponStateAfterUncontrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1264, Size: 1]
	FString ReloadSoundName1P;//[Offset: 0x1268, Size: 1]
	FString ReloadSoundName3P;//[Offset: 0x1278, Size: 1]
	FString ReloadSoundName3PEnemy;//[Offset: 0x1288, Size: 1]
	bool bReloadingAfterUncontrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	class SolarVehicleGameplayAbility* ReloadAbilityClass;//[Offset: 0x12a0, Size: 1]
	void VehicleWeaponOpenScope();// 0x22daa80
	void VehicleWeaponCloseScope();// 0x22daa60
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x22da7f0
	void ServerSendCurveShotHit(uint32 SpawnID, float InTime, SolarPlayerController* InPlayerController, const HitResult InHit);// 0x22da660
	void ServerCancelVehicleFireAbility(const GameplayAbilitySpecHandle InAbilityHandle);// 0x22da5d0
	void ServerAddWeaponFireTagToCharacter(SolarCharacter* InFiredCharacter);// 0x22da540
	void ResetWeaponRotation(float DeltaTime);// 0x22da3f0
	void OnVehicleWeaponUnControlled();// 0x2649560
	void OnVehicleWeaponControlled();// 0x2649560
	void OnStencilLoaded();// 0x22da070
	void OnRep_BackupAmmoChanged(int InOldAmmo);// 0x22d9fe0
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x22d9df0
	bool IsPlayerLocallyControlledWeapon();// 0x22d9dc0
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x22d9ce0
	Vector GetShotTargetLocation();// 0x22d9c80
	byte GetFireType();// 0x22d9c60
	Vector GetAimTargetLocation();// 0x22d9c20
	void ClientFinishedWeaponReload();// 0x1571a70
	void ClientDrawDebugString(const Vector TextLocation, FString Text, const Color TextColor, float Duration);// 0x22d9a00
	bool CheckCanOpenScope();// 0x22d99d0
	bool CanEnterFireState();// 0x22d99a0

--------------------------------
Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum PresetScopeType;//[Offset: 0x348, Size: 1]
	Image* img_Vehicle;//[Offset: 0x350, Size: 1]
	Image* Img_Weapon;//[Offset: 0x358, Size: 1]
	CanvasPanel* Panel_Pitch;//[Offset: 0x360, Size: 1]
	WeaponScopeSliderWidget* Crosshair_Slider;//[Offset: 0x368, Size: 1]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x370, Size: 1]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x378, Size: 1]
	CanvasPanel* Panel_BG;//[Offset: 0x380, Size: 1]
	CanvasPanel* Panel_Border;//[Offset: 0x388, Size: 1]
	Image* ReticleDirection;//[Offset: 0x390, Size: 1]
	CanvasPanel* Coredot;//[Offset: 0x398, Size: 1]
	SolarWeaponRechamberWidget* HUD_CarFireCD_L;//[Offset: 0x3a0, Size: 1]
	WidgetAnimation* Anim_Enter;//[Offset: 0x3a8, Size: 1]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x3b0, Size: 1]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x3b8, Size: 1]
	Image* ProgressImage;//[Offset: 0x3c0, Size: 1]
	WidgetAnimation* ProgressAnima;//[Offset: 0x3c8, Size: 1]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x3d0, Size: 1]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x2318c50
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x2649560
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x2318980
	void OnScopeTriggerChanged(bool bChecked);// 0x2318860
	void OnScopeOpened();// 0x2318840
	void InitScopeUI(SolarVehiclePawn* InVehicle, bool bSpectate);// 0x23185d0
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x2318470

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x138, Size: 1]
	delegate BrushDelegate;//[Offset: 0x1d0, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1e0, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1f0, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x204, Size: 1]
	void SetOpacity(float InOpacity);// 0x350fb10
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x350f380
	void SetBrushTintColor(SlateColor TintColor);// 0x350f200
	void SetBrushSize(Vector2D DesiredSize);// 0x350f180
	void SetBrushResourceObject(Object* ResourceObject);// 0x350f0f0
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x217cb20
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x217c980
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x217c6e0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x217c4c0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xbc1fa0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x217c250
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x217c130
	void SetBrush(out const SlateBrush InBrush);// 0x217bdf0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x350e800

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x150, Size: 1]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3505de0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 1]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int ZOrder;//[Offset: 0x68, Size: 1]
	void SetZOrder(int InZOrder);// 0x3507e70
	void SetSize(Vector2D InSize);// 0x3507a10
	void SetPosition(Vector2D InPosition);// 0x3507810
	void SetOffsets(Margin InOffset);// 0x3507430
	void SetMinimum(Vector2D InMinimumAnchors);// 0x3507320
	void SetMaximum(Vector2D InMaximumAnchors);// 0x35072a0
	void SetLayout(out const AnchorData InLayoutData);// 0x3507070
	void SetAutoSize(bool InbAutoSize);// 0x3506500
	void SetAnchors(Anchors InAnchors);// 0x35063e0
	void SetAlignment(Vector2D InAlignment);// 0x3506360
	int GetZOrder();// 0x35062a0
	Vector2D GetSize();// 0x3506150
	Vector2D GetPosition();// 0x3506110
	Margin GetOffsets();// 0x35060d0
	AnchorData GetLayout();// 0x3506080
	bool GetAutoSize();// 0x3505ff0
	Anchors GetAnchors();// 0x3505fb0
	Vector2D GetAlignment();// 0x3505f70

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 1]
	Anchors Anchors;//[Offset: 0x10, Size: 1]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	Vector2D Alignment;//[Offset: 0x24, Size: 1]

--------------------------------
Class: WeaponScopeSliderWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScopeSliderData[] ScopeSliderDatas;//[Offset: 0x348, Size: 1]
	int ScopeSliderType;//[Offset: 0x358, Size: 1]
	float SliderAnimPlaySpeed;//[Offset: 0x35c, Size: 1]
	float SliderValueScale;//[Offset: 0x360, Size: 1]
	Slider* Slider_ADS;//[Offset: 0x368, Size: 1]
	SolarTextBlock* Txt_Scope;//[Offset: 0x370, Size: 1]
	WidgetAnimation* Anim_Type0;//[Offset: 0x378, Size: 1]
	WidgetAnimation* Anim_Type1;//[Offset: 0x380, Size: 1]
	WidgetAnimation* AnimToPlay;//[Offset: 0x388, Size: 1]
	void SetSliderDisplay(bool bSkipAnimation);// 0x2329da0
	void OnSliderValueChangedOnPC(float InValue);// 0x2329b20
	void OnSliderValueChanged(float InValue);// 0x2329aa0

--------------------------------
Class: ScopeSliderData
	Vector2D SliderPercentRange;//[Offset: 0x0, Size: 1]
	float SliderAnimeTimer;//[Offset: 0x8, Size: 1]
	enum ScopeMagnifier;//[Offset: 0xc, Size: 1]
	FText DisplayText;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x138, Size: 1]
	delegate ValueDelegate;//[Offset: 0x13c, Size: 1]
	float MinValue;//[Offset: 0x14c, Size: 1]
	float MaxValue;//[Offset: 0x150, Size: 1]
	SliderStyle WidgetStyle;//[Offset: 0x158, Size: 1]
	byte Orientation;//[Offset: 0x4f8, Size: 1]
	LinearColor SliderBarColor;//[Offset: 0x4fc, Size: 1]
	LinearColor SliderHandleColor;//[Offset: 0x50c, Size: 1]
	Vector2D SliderHandleOffset;//[Offset: 0x51c, Size: 1]
	bool CommitTouchStartValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x527, Size: 1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	float StepSize;//[Offset: 0x52c, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	MulticastInlineDelegateProperty OnMouseCaptureBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnMouseCaptureEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerCaptureBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerCaptureEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnValueChanged;//[Size: 1]
	void SetValue(float InValue);// 0x351e2d0
	void SetStepSize(float InValue);// 0x351df30
	void SetSliderHandleOffset(Vector2D InValue);// 0x351deb0
	void SetSliderHandleColor(LinearColor InValue);// 0x351de20
	void SetSliderBarColor(LinearColor InValue);// 0x351dd90
	void SetNormalBarImage(out const SlateBrush InImage);// 0x351d950
	void SetMinValue(float InValue);// 0x351d850
	void SetMaxValue(float InValue);// 0x351d5c0
	void SetLocked(bool InValue);// 0x351d420
	void SetIndentHandle(bool InValue);// 0x351d310
	void SetHoveredBarImage(out const SlateBrush InImage);// 0x351d170
	void SetBarThickness(float InValue);// 0x351cd70
	float GetValue();// 0x351ca40
	float GetNormalizedValue();// 0x351c850

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 1]
	SlateBrush HoveredBarImage;//[Offset: 0xa0, Size: 1]
	SlateBrush DisabledBarImage;//[Offset: 0x138, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x1d0, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x268, Size: 1]
	SlateBrush DisabledThumbImage;//[Offset: 0x300, Size: 1]
	float BarThickness;//[Offset: 0x398, Size: 1]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	FText Text;//[Offset: 0x168, Size: 1]
	int LocTextID;//[Offset: 0x180, Size: 1]
	enum PreviewLang;//[Offset: 0x184, Size: 1]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	Vector2D CalcSize;//[Offset: 0x188, Size: 1]
	delegate TextDelegate;//[Offset: 0x190, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x1a0, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1c8, Size: 1]
	SlateFontInfo Font;//[Offset: 0x1d8, Size: 1]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x238, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x250, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x2e8, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2f0, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x300, Size: 1]
	float MinDesiredWidth;//[Offset: 0x310, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	bool bEnableCacheSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bNeverResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	void SetWrapTextAt(float InWrapTextAt);// 0x15646c0
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x22b9720
	void SetText(FText InText);// 0x22b9570
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x22b93c0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x22b9340
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x22b92b0
	void SetOpacity(float InOpacity);// 0x22b9190
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x22b9100
	void SetMargin(Margin InMargin);// 0x22b9070
	void SetLocTextID(int InLocTextID);// 0x22b8fe0
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x22b8d80
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x1570b50
	void SetFont(SlateFontInfo InFontInfo);// 0x22b8c60
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x22b8b40
	void SetAutoWrapText(bool InAutoTextWrap);// 0x1581270
	Vector2D GetTextSize();// 0x22b7fb0
	FText GetText();// 0x22b7f10
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x22b7d60
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x22b7d30

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x138, Size: 1]
	byte Justification;//[Offset: 0x13b, Size: 1]
	enum WrappingPolicy;//[Offset: 0x13c, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	float WrapTextAt;//[Offset: 0x140, Size: 1]
	Margin Margin;//[Offset: 0x144, Size: 1]
	float LineHeightPercentage;//[Offset: 0x154, Size: 1]
	bool AlwaysKeepJustification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	void SetJustification(byte InJustification);// 0x351d3a0

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 1]
	Object* FontMaterial;//[Offset: 0x8, Size: 1]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 1]
	FName TypefaceFontName;//[Offset: 0x48, Size: 1]
	int Size;//[Offset: 0x50, Size: 1]
	int LetterSpacing;//[Offset: 0x54, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 1]
	int OutlineBlur;//[Offset: 0x4, Size: 1]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x10, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int DefaultFontSize;//[Offset: 0x4, Size: 1]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 1]
	int SpecialFontSize;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0x840, Size: 1]
	Widget* OffGroup;//[Offset: 0x848, Size: 1]
	enum CheckedGroupVisibility;//[Offset: 0x850, Size: 1]
	enum UncheckedGroupVisibility;//[Offset: 0x851, Size: 1]
	void OnStateChanged(bool bIsChecked);// 0x2126730
	void ManualSetIsChecked(bool InIsChecked);// 0x2126350

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x150, Size: 1]
	delegate CheckedStateDelegate;//[Offset: 0x154, Size: 1]
	CheckBoxStyle WidgetStyle;//[Offset: 0x168, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x778, Size: 1]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x780, Size: 1]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x788, Size: 1]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x790, Size: 1]
	SlateBrushAsset* CheckedImage;//[Offset: 0x798, Size: 1]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x7a0, Size: 1]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x7a8, Size: 1]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x7b0, Size: 1]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x7b8, Size: 1]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x7c0, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x7c8, Size: 1]
	Margin Padding;//[Offset: 0x7cc, Size: 1]
	SlateColor BorderBackgroundColor;//[Offset: 0x7e0, Size: 1]
	byte ClickMethod;//[Offset: 0x808, Size: 1]
	byte TouchMethod;//[Offset: 0x809, Size: 1]
	byte PressMethod;//[Offset: 0x80a, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80b, Size: 1]
	MulticastInlineDelegateProperty OnCheckStateChanged;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x3507bf0
	void SetPressMethod(byte InPressMethod);// 0x3507910
	void SetIsChecked(bool InIsChecked);// 0x3506fe0
	void SetClickMethod(byte InClickMethod);// 0x3506bc0
	void SetCheckedState(enum InCheckedState);// 0x3506ac0
	bool IsPressed();// 0x3506330
	bool IsChecked();// 0x35062d0
	enum GetCheckedState();// 0x3506020

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x350aef0
	PanelSlot* GetContentSlot();// 0x350a760
	Widget* GetContent();// 0x350a730

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 1]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa8, Size: 1]
	SlateBrush UncheckedPressedImage;//[Offset: 0x140, Size: 1]
	SlateBrush CheckedImage;//[Offset: 0x1d8, Size: 1]
	SlateBrush CheckedHoveredImage;//[Offset: 0x270, Size: 1]
	SlateBrush CheckedPressedImage;//[Offset: 0x308, Size: 1]
	SlateBrush UndeterminedImage;//[Offset: 0x3a0, Size: 1]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x438, Size: 1]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x4d0, Size: 1]
	Margin Padding;//[Offset: 0x568, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x578, Size: 1]
	SlateColor BorderBackgroundColor;//[Offset: 0x5a0, Size: 1]
	SlateSound CheckedSlateSound;//[Offset: 0x5c8, Size: 1]
	SlateSound UncheckedSlateSound;//[Offset: 0x5e0, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x5f8, Size: 1]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SolarWeaponRechamberWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_FireCD;//[Offset: 0x348, Size: 1]
	WidgetAnimation* EmptyBullet_Anim;//[Offset: 0x350, Size: 1]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x358, Size: 1]

--------------------------------
Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 1]
	float CrossHairOpacity;//[Offset: 0xc, Size: 1]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 1]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 1]
	bool bCrossHairForbid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 1]
	FName AttachedSocket;//[Offset: 0x28, Size: 1]
	Transform OffsetTransform;//[Offset: 0x30, Size: 1]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 1]
	FName ParameterName;//[Offset: 0x68, Size: 1]

--------------------------------
Class: VehicleEjectParams
	float EjectTime;//[Offset: 0x0, Size: 1]
	float EjectDistance;//[Offset: 0x4, Size: 1]
	float EjectBreakableTime;//[Offset: 0x8, Size: 1]
	float EjectCameraFadeOutTime;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 1]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 1]
	FName AttachedSocket;//[Offset: 0x38, Size: 1]
	Transform OffsetTransform;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarVehicleMaterialData
	int8 MaterialIndex;//[Offset: 0x0, Size: 1]
	FName ParamName;//[Offset: 0x4, Size: 1]
	float OnValue;//[Offset: 0xc, Size: 1]
	float OffValue;//[Offset: 0x10, Size: 1]
	float ActiveSpeed;//[Offset: 0x14, Size: 1]
	MaterialInstanceDynamic* MatInstanceDynamic;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 1]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 1]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 1]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 1]
	FString Engine_RTPC;//[Offset: 0x70, Size: 1]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 1]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 1]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 1]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 1]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 1]
	FString Tire_3P;//[Offset: 0xc8, Size: 1]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 1]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 1]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 1]
	FString Tire_RTPC;//[Offset: 0x108, Size: 1]
	FString Tire_Group;//[Offset: 0x118, Size: 1]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 1]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 1]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 1]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 1]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 1]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 1]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 1]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 1]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 1]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 1]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 1]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 1]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 1]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 1]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 1]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 1]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 1]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 1]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 1]
	FString Engine_Start_3P;//[Offset: 0x2a0, Size: 1]
	FString Engine_Start_3P_Enemy;//[Offset: 0x2b0, Size: 1]
	FString Braking_Loop_RTPC;//[Offset: 0x2c0, Size: 1]
	FString Play_Braking_Loop_3P;//[Offset: 0x2d0, Size: 1]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x2e0, Size: 1]
	FString Stop_Braking_Loop_3P;//[Offset: 0x2f0, Size: 1]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x300, Size: 1]
	float BrakingLoopSoundDegree;//[Offset: 0x310, Size: 1]
	float BrakingLoopSoundSpeed;//[Offset: 0x314, Size: 1]
	FString Play_Reverse_Loop;//[Offset: 0x318, Size: 1]
	FString Stop_Reverse_Loop;//[Offset: 0x328, Size: 1]
	FString Drift_RTPC;//[Offset: 0x338, Size: 1]
	FString Drift_Start;//[Offset: 0x348, Size: 1]
	FString Drift_Stop;//[Offset: 0x358, Size: 1]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x368, Size: 1]
	FString Play_SelfHealing_3P;//[Offset: 0x370, Size: 1]
	FString Stop_SelfHealing_3P;//[Offset: 0x380, Size: 1]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x390, Size: 1]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x3a0, Size: 1]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x3b0, Size: 1]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x3c0, Size: 1]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x3c8, Size: 1]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x3d8, Size: 1]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x3e8, Size: 1]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x3f8, Size: 1]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x408, Size: 1]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x418, Size: 1]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x428, Size: 1]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x438, Size: 1]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x448, Size: 1]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x458, Size: 1]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x468, Size: 1]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x478, Size: 1]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x488, Size: 1]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x498, Size: 1]
	FString HoverJumpOnActive1P;//[Offset: 0x4a8, Size: 1]
	FString HoverJumpOnActive3P;//[Offset: 0x4b8, Size: 1]
	FString HoverJumpWhileActive1P;//[Offset: 0x4c8, Size: 1]
	FString HoverJumpWhileActive3P;//[Offset: 0x4d8, Size: 1]
	FString HoverJumpOnRemove1P;//[Offset: 0x4e8, Size: 1]
	FString HoverJumpOnRemove3P;//[Offset: 0x4f8, Size: 1]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x508, Size: 1]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x518, Size: 1]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x528, Size: 1]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x538, Size: 1]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x548, Size: 1]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x558, Size: 1]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x568, Size: 1]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x578, Size: 1]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x588, Size: 1]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x598, Size: 1]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x5a8, Size: 1]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x5b8, Size: 1]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x5c8, Size: 1]
	FString FootPlant;//[Offset: 0x5d8, Size: 1]
	FString Landing_3P;//[Offset: 0x5e8, Size: 1]
	FString Landing_3P_Enemy;//[Offset: 0x5f8, Size: 1]

--------------------------------
Class: SolarDamageInfo
	Actor* TargetActor;//[Offset: 0x0, Size: 1]
	Actor* SourceActor;//[Offset: 0x8, Size: 1]
	Actor* DamageCauserActor;//[Offset: 0x10, Size: 1]
	float OriginalDamage;//[Offset: 0x18, Size: 1]
	float OriginalDamageForVehicle;//[Offset: 0x1c, Size: 1]
	enum DamageType;//[Offset: 0x24, Size: 1]
	float DamageRadial;//[Offset: 0x28, Size: 1]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bEnableSelfDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bCheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bApplyToSource;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	float ExplosionMinDistance;//[Offset: 0x30, Size: 1]
	float ExplosionMaxDistance;//[Offset: 0x34, Size: 1]
	CurveFloat* ExplosionDistanceScaleCurve;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 1]
	bool bInRepairing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x8, Size: 1]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x10, Size: 1]
	byte WeakPointID;//[Offset: 0x18, Size: 1]
	FName[] WeakPointSockets;//[Offset: 0x20, Size: 1]
	Vector WeakPointOffset;//[Offset: 0x30, Size: 1]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x40, Size: 1]
	Transform WeakPointRelativeTransform;//[Offset: 0x70, Size: 1]
	float MaxWeakPointHealth;//[Offset: 0xa0, Size: 1]
	float RepairDuration;//[Offset: 0xa4, Size: 1]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	class GameplayEffect* BrokenEffect;//[Offset: 0xb0, Size: 1]
	float FacingAngle;//[Offset: 0xc0, Size: 1]
	float DistFromCharacterToWeakPoint;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	void OnVehicleRootHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x21af9c0
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x21af7a0
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x21af6d0

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 1]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 1]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x40b6fd0

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 1]
	void SetNavigationRelevancy(bool bRelevant);// 0x40b7060

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 1]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 1]

--------------------------------
Class: AbilityCooldownTimer
	GameplayTag AbilityCooldownTag;//[Offset: 0x0, Size: 1]
	float AbilityAppliedTime;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarWaterActorNew.StaticMeshActor.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x238, Size: 1]
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x22e4e70
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x22e4c50
	float GetWaterLineHeight();// 0x22e3b10

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 1]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 1]
	void SetMobility(byte InMobility);// 0x3f1df80

--------------------------------
Class: SpectateReportInfo
	uint32 RankLevelID;//[Offset: 0x0, Size: 1]
	FString TargetUserID;//[Offset: 0x8, Size: 1]
	byte TargetType;//[Offset: 0x18, Size: 1]
	uint32 SpectateElapsedTime;//[Offset: 0x1c, Size: 1]
	byte Type;//[Offset: 0x20, Size: 1]

--------------------------------
Class: InteractiveTaskConfig.TableRowBase
	int TaskID;//[Offset: 0x8, Size: 1]
	int GiftID;//[Offset: 0xc, Size: 1]
	int TaskName;//[Offset: 0x10, Size: 1]
	FString Describe;//[Offset: 0x18, Size: 1]
	int TaskUpgradeDescribe;//[Offset: 0x28, Size: 1]
	SoftObjectPath TaskIcon;//[Offset: 0x30, Size: 1]
	enum CurrencyType;//[Offset: 0x48, Size: 1]
	int MaxTaskLevel;//[Offset: 0x4c, Size: 1]
	int[] TaskTarget;//[Offset: 0x50, Size: 1]
	int[] UpgradePrice;//[Offset: 0x60, Size: 1]
	int[] TaskReward;//[Offset: 0x70, Size: 1]
	enum TaskType;//[Offset: 0x80, Size: 1]
	int Param;//[Offset: 0x84, Size: 1]

--------------------------------
Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 1]
	int Diamond;//[Offset: 0x4, Size: 1]
	FString playerName;//[Offset: 0x8, Size: 1]
	FString PlayerId;//[Offset: 0x18, Size: 1]

--------------------------------
Class: InteractiveTaskStatus
	int TaskID;//[Offset: 0x0, Size: 1]
	int CurLevel;//[Offset: 0x4, Size: 1]
	int ProgressValue;//[Offset: 0x8, Size: 1]
	int TargetValue;//[Offset: 0xc, Size: 1]
	int Param;//[Offset: 0x10, Size: 1]
	bool bAvailableToNxtLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	GiftSenderInfo[] TaskGiftPlayerInfo;//[Offset: 0x68, Size: 1]

--------------------------------
Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 1]
	int count;//[Offset: 0x4, Size: 1]
	int Slot;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 1]
	int MaxPile;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterRoleAbilityInfo
	bool bHasAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	float StartCDTime;//[Offset: 0x4, Size: 1]
	float TotalCDTime;//[Offset: 0x8, Size: 1]
	int State;//[Offset: 0xc, Size: 1]
	bool bOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: RepCountdownData
	int RepTimes;//[Offset: 0x0, Size: 1]
	int RepTextID;//[Offset: 0x4, Size: 1]
	int RepPassiveTextID;//[Offset: 0x8, Size: 1]
	int RepPassiveCharacterID;//[Offset: 0xc, Size: 1]
	float RepDuration;//[Offset: 0x10, Size: 1]
	float RepRemaining;//[Offset: 0x14, Size: 1]
	float RepAmount;//[Offset: 0x18, Size: 1]
	float RepStartTime;//[Offset: 0x1c, Size: 1]
	float RepEndTime;//[Offset: 0x20, Size: 1]
	int RepCancel;//[Offset: 0x24, Size: 1]
	float RemainingTime;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BattleUpgradeEffectParamData
	enum EffectType;//[Offset: 0x0, Size: 1]
	int ParameterSum;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarItemData.FastArraySerializerItem
	int ItemID;//[Offset: 0xc, Size: 1]
	int64 ThisID;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x18, Size: 1]
	FString Icon;//[Offset: 0x28, Size: 1]
	FString Info;//[Offset: 0x38, Size: 1]
	int count;//[Offset: 0x48, Size: 1]
	enum ItemType;//[Offset: 0x4c, Size: 1]
	int Quality;//[Offset: 0x50, Size: 1]
	int MaxPile;//[Offset: 0x54, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FString AbilityBP;//[Offset: 0x60, Size: 1]
	FString ItemBP;//[Offset: 0x70, Size: 1]
	int DropTime;//[Offset: 0x80, Size: 1]
	int UnPickupTime;//[Offset: 0x84, Size: 1]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 1]
	int64 UserId;//[Offset: 0x90, Size: 1]
	int Level;//[Offset: 0x98, Size: 1]
	int Prize;//[Offset: 0x9c, Size: 1]
	float CurValue;//[Offset: 0xa0, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	enum AppearanceType;//[Offset: 0xa5, Size: 1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 1]
	int SourceType;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	int Zone;//[Offset: 0x23c, Size: 1]
	float MaxTirggerDistance;//[Offset: 0x240, Size: 1]
	float MaxTirggerAngle;//[Offset: 0x244, Size: 1]
	GameplayTag CDTag;//[Offset: 0x248, Size: 1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	float CoolDownTime;//[Offset: 0x254, Size: 1]
	float CostEnergy;//[Offset: 0x258, Size: 1]
	float RemainCDTime;//[Offset: 0x25c, Size: 1]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 1]
	StaticMeshComponent* NormalMesh;//[Offset: 0x268, Size: 1]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x270, Size: 1]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x278, Size: 1]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x280, Size: 1]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x21ea760
	void ServerInitailizeAbility();// 0x21ea190
	void OnResetCD();// 0x21e9dd0
	void OnRep_Broken();// 0x21e9d90
	void OnRep_BInCD();// 0x21e9d70
	void OnRadarStationCDChanged();// 0x21e9c80
	void OnPlayStartScanEffect();// 0x2649560
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x21e9960
	void OnClientStartScan();// 0x1570d30
	void OnBrokenChanged(bool InBroken);// 0x2649560
	void InitailizeAbilityParams();// 0x21e9730
	float GetAbilityReaminingCD();// 0x21e9670
	float GetAbilityCostEnergy();// 0x21e9640
	float GetAbilityCooldown();// 0x21e9610
	bool CanActivateNow();// 0x21e8e60

--------------------------------
Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 1]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1328, Size: 1]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x21b5cb0

--------------------------------
Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 1]
	float CostEnergy;//[Offset: 0x408, Size: 1]
	SolarInteractableActor* GetAbilityInstigator();// 0x21b49a0
	Actor* GetAbilityEffectUser();// 0x21b4970

--------------------------------
Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x3e0, Size: 1]
	SolarItemDataArray ItemDataList;//[Offset: 0x3e8, Size: 1]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x500, Size: 1]
	int DataLeng;//[Offset: 0x530, Size: 1]
	enum CostType;//[Offset: 0x534, Size: 1]
	int CostNum;//[Offset: 0x538, Size: 1]
	int HighestItemQuality;//[Offset: 0x590, Size: 1]
	float BurstRadius;//[Offset: 0x594, Size: 1]
	float BurstRadiusRandScale;//[Offset: 0x598, Size: 1]
	float BurstLocalHeight;//[Offset: 0x59c, Size: 1]
	float BurstEulerAngle;//[Offset: 0x5a0, Size: 1]
	bool bBurstSplitItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	enum BurstMethod;//[Offset: 0x5a5, Size: 1]
	float RadSafeSlopeToBurstOn;//[Offset: 0x5a8, Size: 1]
	float GoldenSpiralMinRadiusSquared;//[Offset: 0x5ac, Size: 1]
	SolarBurstItemActor*[] BurstItemActors;//[Offset: 0x5b0, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x5c0, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5c8, Size: 1]
	void UpdateTreasureBoxInternal();// 0x7e5fd0
	void UpdateOpenBoxUIByState(const enum NewState);// 0x2649560
	void UpdateItemDataListInternal();// 0x22b98e0
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x22b8a70
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum InItemType);// 0x22b88d0
	void PlayOpenAnimation();// 0x2649560
	void OnRep_ItemDataList();// 0x22b8730
	void OnRep_CurrentState();// 0x22b8670
	void OnClientItemHighestQualityChanged(int NewQuality, int PrevQuality);// 0x22b84d0
	bool IsEmpty();// 0x22b80c0
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x22b7ff0
	int GetNumCost();// 0x22b7ef0
	SolarItemData[] GetItemList();// 0x22b7d90
	enum GetCostType();// 0x22b7d10
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0xb443e0
	void ConstructTreasureBox(int dropId);// 0x15b05a0
	bool BOpened();// 0x22b7b00

--------------------------------
Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 1]
	float SpawnOffset;//[Offset: 0x320, Size: 1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x328, Size: 1]
	SoftObjectPath OutlineMatPath;//[Offset: 0x338, Size: 1]
	SoftObjectPath FXPath;//[Offset: 0x350, Size: 1]
	float NoneMeshFxOffset;//[Offset: 0x368, Size: 1]
	FString FXBPPath;//[Offset: 0x370, Size: 1]
	SphereComponent* SphereComponent;//[Offset: 0x380, Size: 1]
	Actor* FXActor;//[Offset: 0x38c, Size: 1]
	byte ItemCurrentState;//[Offset: 0x394, Size: 1]
	byte[] MarkedTeamIdList;//[Offset: 0x3a0, Size: 1]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x3b8, Size: 1]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x3c0, Size: 1]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x3d0, Size: 1]
	void UnMarkThisItem(byte TeamID);// 0x216a800
	void SwitchDiscardMaterials();// 0x2186740
	void SetOutlineMeshVisible(bool Visible);// 0x2186590
	void SetItemData(out const SolarItemData _ItemData);// 0x216a2e0
	void OnServerPawned();// 0x216a2b0
	void OnRep_ItemDataChange();// 0x816980
	void OnRep_ItemCurrentStateChanged();// 0x1571170
	void NotifyThisItemWasPickedUp();// 0x2185d70
	void MarkThisItem(byte TeamID);// 0x2169b20
	StaticMeshComponent* GetStaticMeshComp();// 0x2185cc0
	int GetQuality();// 0x21696c0

--------------------------------
Class: SolarDormantActor.Actor.Object

--------------------------------
Class: SolarItemDataArray.FastArraySerializer
	SolarItemData[] ItemDatas;//[Offset: 0x108, Size: 1]

--------------------------------
Class: SolarBurstItemActor.SolarItemActor.SolarDormantActor.Actor.Object
	Vector_NetQuantize StartLoc;//[Offset: 0x3e0, Size: 1]
	Vector_NetQuantize MediumLoc;//[Offset: 0x3ec, Size: 1]
	Vector_NetQuantize EndLoc;//[Offset: 0x3f8, Size: 1]
	bool bLandedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	SolarTreasureBoxActor* OwnerBox;//[Offset: 0x430, Size: 1]
	float BurstLocalHeight;//[Offset: 0x480, Size: 1]
	float BurstTimeTotal;//[Offset: 0x484, Size: 1]
	void OnRep_StartLoc();// 0x20f2360
	void OnRep_OwnerBox();// 0x20f2360
	void OnRep_MediumLoc();// 0x20f2360
	void OnRep_EndLoc();// 0x20f2360
	void OnRep_BurstLocalHeight();// 0x8f2720

--------------------------------
Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x5d0, Size: 1]
	float CurrEnergyValue;//[Offset: 0x5d4, Size: 1]
	float CurrExtraEnergyValue;//[Offset: 0x5d8, Size: 1]
	FString PlayerId;//[Offset: 0x5e0, Size: 1]
	FString NickName;//[Offset: 0x5f0, Size: 1]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	SolarPlayerWeapon*[] WeaponList;//[Offset: 0x608, Size: 1]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x618, Size: 1]
	float PickupRadius;//[Offset: 0x628, Size: 1]
	float ResurrectDistance;//[Offset: 0x62c, Size: 1]
	byte CurrResurrectionState;//[Offset: 0x630, Size: 1]
	float ReviveTotalTime;//[Offset: 0x634, Size: 1]
	float ReviveStartTime;//[Offset: 0x638, Size: 1]
	SkeletalMeshComponent* PreViewMesh;//[Offset: 0x640, Size: 1]
	FName ReviveStartSound;//[Offset: 0x648, Size: 1]
	FName ReviveBeforeCompleteSound;//[Offset: 0x650, Size: 1]
	FName ReviveCompleteSound;//[Offset: 0x658, Size: 1]
	FName ReviveFailedSound;//[Offset: 0x660, Size: 1]
	float ResurrectionBeforeSoundTime;//[Offset: 0x668, Size: 1]
	ParticleSystem* ReviveCompletePS;//[Offset: 0x670, Size: 1]
	FName ReviveCompletePSAttachedSocket;//[Offset: 0x678, Size: 1]
	float PreviewMeshZOffset;//[Offset: 0x680, Size: 1]
	float PreviewMeshZRotation;//[Offset: 0x684, Size: 1]
	SceneComponent* FXPosComponent;//[Offset: 0x698, Size: 1]
	ParticleSystem*[] QualityPS;//[Offset: 0x6a0, Size: 1]
	class ActorEffect* RevivePreviewEffectClass;//[Offset: 0x6c0, Size: 1]
	<enum,SoftObjectPath> PreviewAnim;//[Offset: 0x6d0, Size: 1]
	float SphereRadius;//[Offset: 0x720, Size: 1]
	float UnpickableSphereRadius;//[Offset: 0x724, Size: 1]
	void ReceiveSetUIEnable(bool IsShow);// 0x2649560
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x2649560
	void ReceiveRefreshExtraEnergy(FString Message);// 0x2649560
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x2649560
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x203e830
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x203e610
	void OnRep_ReviveStartTime();// 0x203e0d0
	void OnRep_PickupedChanged();// 0x203e0b0
	void OnRep_CurrExtraEnergyValueChanged();// 0x203e070
	void OnRep_BResurrectionStateChanged();// 0x203e050
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x2649560
	bool IsInResurrectRange(SolarCharacter* InReqCharacter, out float RealDistance);// 0x203d9a0
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter);// 0x203d730

--------------------------------
Class: BoxChargingInfo

--------------------------------
Class: SolarPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2b0, Size: 1]
	SphereComponent* CollisionComp;//[Offset: 0x2b8, Size: 1]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2c0, Size: 1]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 1]
	enum Channel;//[Offset: 0x2ec, Size: 1]
	enum PileType;//[Offset: 0x2ed, Size: 1]
	int Zone;//[Offset: 0x2f0, Size: 1]
	float MaxEnergy;//[Offset: 0x2f4, Size: 1]
	float PowerRecoveryCD;//[Offset: 0x2f8, Size: 1]
	float PowerRecoveryFrequency;//[Offset: 0x2fc, Size: 1]
	float PowerRecoveryQuantity;//[Offset: 0x300, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 1]
	int Level;//[Offset: 0x308, Size: 1]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	int OwnerTeam;//[Offset: 0x310, Size: 1]
	SolarCharacter* OwnerCharacter;//[Offset: 0x314, Size: 1]
	ChargingInfo defaultChargingInfo;//[Offset: 0x320, Size: 1]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x350, Size: 1]
	float CurrentEnergy;//[Offset: 0x360, Size: 1]
	float SphereRadius;//[Offset: 0x368, Size: 1]
	TimerHandle RecoveryHandle;//[Offset: 0x370, Size: 1]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x380, Size: 1]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x388, Size: 1]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x390, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x3a0, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3a8, Size: 1]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	float MaxHealth;//[Offset: 0x3b4, Size: 1]
	float ReducedHealth;//[Offset: 0x3b8, Size: 1]
	float CurrentHealth;//[Offset: 0x3bc, Size: 1]
	float TweenTimeSpeed;//[Offset: 0x3c0, Size: 1]
	float RestTweenTime;//[Offset: 0x3c4, Size: 1]
	float TargetOpacity;//[Offset: 0x3c8, Size: 1]
	float CurrentOpacity;//[Offset: 0x3cc, Size: 1]
	float OpacityTweenTime;//[Offset: 0x3d0, Size: 1]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3d8, Size: 1]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3e0, Size: 1]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x530, Size: 1]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x538, Size: 1]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x21bb7d0
	void SetIsActivated(bool bActivated);// 0x2649560
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x21bb6e0
	void RemoveAllEffects();// 0x21bb6c0
	void ReceivePileExpired();// 0x2649560
	void ReceiveEnergyChanged();// 0x2649560
	void ReceiveChargingPileInitialize();// 0x2649560
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x2649560
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x2649560
	void PlaySkillStartSound();// 0x7e5fd0
	void PlaySkillEndSound();// 0x1571a30
	void PlayRecoveryAnim(bool bStart);// 0x2649560
	void PlayChargingAnimation(bool Reverse);// 0x2649560
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x21bb560
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x21bb340
	void OnRep_IsLosingEnergyChanged();// 0x21bb320
	void OnRep_Energy();// 0x21bb300
	void OnRep_Enable();// 0x21bb2e0
	void OnRep_CurrentHealth();// 0x21bb2c0
	void OnRep_ChargingInfoListChanged();// 0x21bb2a0
	void OnRep_CanRecover();// 0x21bb280
	void OnRep_Broken();// 0x21bb260
	void OnRefreshRangeRing();// 0x21bb240
	void OnRefreshChargeCircle(const bool InCharging);// 0x21bb1b0
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x21bb0a0
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x21bafa0
	bool IsAnyCharacterInRange();// 0x21baf70
	ChargingInfo GetChargingInfoByCharacter(SolarCharacter* Character);// 0x21ba580
	void GameStatisticsChargingPile(out ChargingInfo ChargingInfo, int pileLevel, Vector Location, float energyUse);// 0x21ba2d0
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x21ba220
	void ChangeColor();// 0x2649560
	bool CanWork();// 0x21ba1c0

--------------------------------
Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x238, Size: 1]
	FString Job;//[Offset: 0x248, Size: 1]
	FString ElementID;//[Offset: 0x258, Size: 1]
	enum Type;//[Offset: 0x268, Size: 1]
	enum State;//[Offset: 0x269, Size: 1]
	enum Visibility;//[Offset: 0x26a, Size: 1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x270, Size: 1]
	FName ElementTypeName;//[Offset: 0x278, Size: 1]
	FString GroupKey;//[Offset: 0x280, Size: 1]
	byte bUseSceneActorOptimization;//[Offset: 0x290, Size: 1]
	void SetElementVisibility(const enum NewType);// 0x21ab1b0
	enum SetElementState(const enum NewState);// 0x2096450
	void OnRep_ElementVisibility();// 0x21aafc0
	void OnRep_ElementState();// 0x21aafa0
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x2649560
	void OnElementStateChanged(const enum CurrentState);// 0x2649560

--------------------------------
Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb0, Size: 1]
	void OnRep_ComponentName();// 0x2144d80

--------------------------------
Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	float LastChargeTime;//[Offset: 0xc, Size: 1]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float Quantity;//[Offset: 0x14, Size: 1]
	float Frequency;//[Offset: 0x18, Size: 1]
	enum PileHealingType;//[Offset: 0x1c, Size: 1]
	float TotalChargeEnergy;//[Offset: 0x20, Size: 1]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x28, Size: 1]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ChargingPilePreset
	SoftObjectPath NormalMeshPath;//[Offset: 0x0, Size: 1]
	SoftObjectPath BrokenMeshPath;//[Offset: 0x18, Size: 1]
	SoftObjectPath BrokenMatPath;//[Offset: 0x30, Size: 1]
	SoftObjectPath RangeRingPath;//[Offset: 0x48, Size: 1]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x60, Size: 1]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x78, Size: 1]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x90, Size: 1]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0xa8, Size: 1]
	SoftObjectPath OutlineMatPath;//[Offset: 0xc0, Size: 1]
	Transform RangeRingTrans;//[Offset: 0xe0, Size: 1]
	Transform ChargeCircleTrans;//[Offset: 0x110, Size: 1]
	Vector BeamStartPos;//[Offset: 0x140, Size: 1]

--------------------------------
Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x238, Size: 1]
	int MaxShieldLevel;//[Offset: 0x23c, Size: 1]
	float[] UpgradeEnergyCosts;//[Offset: 0x240, Size: 1]
	StaticMeshComponent* ShopMesh;//[Offset: 0x250, Size: 1]
	SphereComponent* CollisionComp;//[Offset: 0x258, Size: 1]
	int SpawnID;//[Offset: 0x260, Size: 1]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	DataTable* ShopMeshPathTable;//[Offset: 0x268, Size: 1]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	class MapMarkBase* MapIcon;//[Offset: 0x298, Size: 1]
	int MapIconID;//[Offset: 0x2c0, Size: 1]
	float MaxTirggerAngle;//[Offset: 0x2c4, Size: 1]
	int ShopID;//[Offset: 0x2c8, Size: 1]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float TirggerDistance;//[Offset: 0x2d0, Size: 1]
	enum CurrentModeAnimType;//[Offset: 0x2d4, Size: 1]
	enum WantedModeAnimType;//[Offset: 0x2d5, Size: 1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2d8, Size: 1]
	DataTable* ShopMeshDataTable;//[Offset: 0x2e8, Size: 1]
	ElectricShopSection[] ItemSections;//[Offset: 0x2f0, Size: 1]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x300, Size: 1]
	float[] PoolRefreshTimeList;//[Offset: 0x310, Size: 1]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x320, Size: 1]
	int CurPoolGroupID;//[Offset: 0x330, Size: 1]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x348, Size: 1]
	TimerHandle[] CachedHandles;//[Offset: 0x358, Size: 1]
	float DemoRotationSpeed;//[Offset: 0x368, Size: 1]
	float DemoSwtichTime;//[Offset: 0x36c, Size: 1]
	float DemoOffsetFromZ;//[Offset: 0x370, Size: 1]
	DataTable* ItemDemoBPTable;//[Offset: 0x378, Size: 1]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3a0, Size: 1]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3a8, Size: 1]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x3f8, Size: 1]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x400, Size: 1]
	ElectricShopItemDemo*[] SpawnedDemoActorList;//[Offset: 0x408, Size: 1]
	Object*[] CachedDemoItemsClass;//[Offset: 0x440, Size: 1]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2132f10
	void UpgradeShieldResponse(SolarCharacter* InCharacter);// 0x2132e80
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2132db0
	bool ServerUpgradeShield(SolarCharacter* InCharacter);// 0x2132d10
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x2132bc0
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x2132ab0
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x2132a10
	bool RefreshSellingItem(const int InProductID);// 0x2132970
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerID);// 0x2132870
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x2132750
	void OnShopIDReplicatedBP();// 0x2649560
	void OnRep_ShopID();// 0x2132630
	void OnRep_ItemSections();// 0x21325f0
	void OnRep_ItemCDRecords();// 0x21325d0
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x2132540
	void OnPlayWeaponUpgradeAnim();// 0x2649560
	void OnPlayPurchaseAnim();// 0x2649560
	void OnPlayIdleAnim();// 0x2649560
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x21321d0
	void OnCurrentAnimFinish();// 0x21321b0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2131f90
	bool IsProductRecommendEquipType(const enum ProductType);// 0x2131ef0
	bool IsInteractable(SolarCharacter* InCharacter);// 0x2131e50
	void InitWeaponUpgradeEnergyCost();// 0x2131e10
	void InitializeElectricShop();// 0x2131e30
	float GetServerWorldTime();// 0x2131de0
	float GetRemainingCD(const int ProductID);// 0x2131d40
	float GetDiscountedPrice(SolarCharacter* BuyerCharacter, float Price);// 0x2131c70
	void GetDiscountedItem(SolarCharacter* BuyerCharacter, out ElectricShopItem OutItem);// 0x2131b90
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x2131aa0
	FString GetBuyerID(const int ProductID);// 0x21319c0
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x2131910
	void ClientUpgradeWeaponSuccess();// 0x21318f0
	void ClientUpgradeShieldSuccess();// 0x21318f0
	void ClientUpdateModelAnim();// 0x2649560
	void ClientPurchaseSuccess();// 0x21318d0
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2131800
	void ClientHUDUpgradeShieldSuccess(SolarCharacter* InCharacter);// 0x2131770
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x21316a0
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x2131610
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x2131580
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x21314f0
	void AddInstigator(SolarCharacter* InCharacter);// 0x21313d0

--------------------------------
Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x348, Size: 1]
	Vector2D MarkIconRealLoc;//[Offset: 0x350, Size: 1]
	Vector2D MarkIconAlignment;//[Offset: 0x358, Size: 1]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	enum MarkerType;//[Offset: 0x361, Size: 1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	Actor* TargetActorRef;//[Offset: 0x368, Size: 1]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x2071660
	void SetUpdateState(bool ShouldUpdateLocation);// 0x2071230
	void SetMarkPos(out const Vector Loc);// 0x2070eb0
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x2070ce0
	void SetColorOpacityIndex(byte InColorOpacityIndex);// 0x2070c60
	void OnBigMapOpen();// 0x2649560
	void InitVehicleMarkIcon(int VehicleID);// 0x2649560
	void InitStaticIcon(int MarkID);// 0x1ff2590
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x20705e0
	void EdgeFix(Vector2D Pos);// 0x2070490
	void CleanData();// 0x2649560

--------------------------------
Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x348, Size: 1]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x350, Size: 1]
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x2649560
	void RemoveDotLineOnMap(int DotLineID);// 0x2649560
	void RemoveAllMapMarks();// 0x2070af0
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x2070930
	void MapScaleFormat(MapMarkBase* MapMark);// 0x20706f0
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x2649560
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x2649560
	void InitMapMarkPool();// 0x20705c0
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x2070510
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x2649560
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x2649560

--------------------------------
Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 1]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 1]
	float Prize;//[Offset: 0x4, Size: 1]
	int Num;//[Offset: 0x8, Size: 1]
	int ProductID;//[Offset: 0xc, Size: 1]
	float CoolDown;//[Offset: 0x10, Size: 1]
	int Generation;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 1]
	float CoolDownDuration;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 1]
	float Duration;//[Offset: 0x4, Size: 1]
	float EndWorldTime;//[Offset: 0x8, Size: 1]
	FString BuyerID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 1]
	float PoolRefreshTime;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ElectricShopItemDemo.Actor.Object

--------------------------------
Class: SolarShieldUpgradeItemShop.SolarInteractableActor.Actor.Object
	int groupid;//[Offset: 0x238, Size: 1]
	int ServerActiveGroupID;//[Offset: 0x23c, Size: 1]
	SkeletalMeshComponent* BodyMesh;//[Offset: 0x240, Size: 1]
	SphereComponent* CollisionComp;//[Offset: 0x248, Size: 1]
	StaticMeshComponent* HeadUpIconMesh;//[Offset: 0x250, Size: 1]
	StaticMeshComponent* BodyScreenMesh;//[Offset: 0x258, Size: 1]
	int UpgradeItemNum;//[Offset: 0x278, Size: 1]
	ParticleSystem* InteractionTriggeredEffect;//[Offset: 0x280, Size: 1]
	SolarIntArray InteractedPlayerIDList;//[Offset: 0x2a8, Size: 1]
	int Uid;//[Offset: 0x3d8, Size: 1]
	SphereComponent* AudioTriggerComp;//[Offset: 0x3f8, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x400, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x408, Size: 1]
	FString SNameHint;//[Offset: 0x410, Size: 1]
	FString SNameStopHint;//[Offset: 0x420, Size: 1]
	void OnRep_UID();// 0x21fdec0
	void OnRep_InteractedPlayerIDList();// 0x21fdec0
	void OnRep_ActiveGroupID();// 0x21fde80
	void OnOtherPlayerInteracted();// 0x21fde60
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* InSpectateInfo);// 0x21fdd90
	void OnBindLocalPlayerSpectateTargetChanged(SolarSpectateInfo* SpecInfo);// 0x21fdd00
	void OnActorEndOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x21fdba0
	void OnActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x21fda40
	void OnActorBeginOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x21fd820
	void OnActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x21fd600
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x21fd3c0

--------------------------------
Class: SolarIntArray.FastArraySerializer
	SolarIntEntry[] Elements;//[Offset: 0x108, Size: 1]

--------------------------------
Class: SolarIntEntry.FastArraySerializerItem
	int IntProperty;//[Offset: 0xc, Size: 1]

--------------------------------
Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bPendingDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	bool bIsOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	float openProgress;//[Offset: 0x5d4, Size: 1]
	SolarCharacter* OpeningCharacter;//[Offset: 0x5d8, Size: 1]
	float OpenTime;//[Offset: 0x5e0, Size: 1]
	float ProtectionTime;//[Offset: 0x5e4, Size: 1]
	bool bBoxLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 1]
	FString SummonPlayerID;//[Offset: 0x650, Size: 1]
	float StartDropHeight;//[Offset: 0x660, Size: 1]
	Rotator TargetRotation;//[Offset: 0x664, Size: 1]
	Vector TargetLocation;//[Offset: 0x670, Size: 1]
	ParticleSystem* OpenAirdropEffect;//[Offset: 0x680, Size: 1]
	ParticleSystem* LandHitEffect;//[Offset: 0x6a8, Size: 1]
	ParticleSystem* LandSmokeEffect;//[Offset: 0x6d0, Size: 1]
	ParticleSystem* PendingDestroyEffect;//[Offset: 0x6f8, Size: 1]
	ParticleSystem* DestroyEffect;//[Offset: 0x720, Size: 1]
	ParticleSystem* FallingEffect;//[Offset: 0x748, Size: 1]
	ParticleSystem* FallingImpulseEffect;//[Offset: 0x770, Size: 1]
	ParticleSystem* LightBeamEffect;//[Offset: 0x798, Size: 1]
	Transform FallingEffectOffset;//[Offset: 0x7c0, Size: 1]
	Transform FallingImpulseEffectOffset;//[Offset: 0x7f0, Size: 1]
	Transform LightBeamEffectOffset;//[Offset: 0x820, Size: 1]
	Transform PendingDestroyEffectOffset;//[Offset: 0x850, Size: 1]
	AnimationAsset* LandAnimation;//[Offset: 0x880, Size: 1]
	AnimationAsset* OpenAnimation;//[Offset: 0x888, Size: 1]
	float dropGravity;//[Offset: 0x890, Size: 1]
	float maxDropSpeed;//[Offset: 0x894, Size: 1]
	float originHeight;//[Offset: 0x898, Size: 1]
	float DecelerateHeight;//[Offset: 0x89c, Size: 1]
	float ShowLandSmokeHeight;//[Offset: 0x8a0, Size: 1]
	float DecelerateTime;//[Offset: 0x8a4, Size: 1]
	CurveFloat* DecelerateCurve;//[Offset: 0x8a8, Size: 1]
	float AirDropSpawnDelay;//[Offset: 0x8b0, Size: 1]
	float AudioActorHeightOffset;//[Offset: 0x8b4, Size: 1]
	float AudioActorFallSpeed;//[Offset: 0x8b8, Size: 1]
	SoftClassPath AirDropGuideMeshBPClassPath;//[Offset: 0x8c0, Size: 1]
	float DropApprochDuration;//[Offset: 0x8d8, Size: 1]
	float FallingEffectDelay;//[Offset: 0x8dc, Size: 1]
	bool bSummonBySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	float YawOffset;//[Offset: 0x8e4, Size: 1]
	enum MovementState;//[Offset: 0x8e8, Size: 1]
	enum OpenState;//[Offset: 0x8e9, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x8f0, Size: 1]
	ParticleSystemComponent* FallingPSC;//[Offset: 0x948, Size: 1]
	SolarDamageInfo DamageInfo;//[Offset: 0x968, Size: 1]
	FString SNameAirDropOpen;//[Offset: 0x9a8, Size: 1]
	FString SNameLandHit;//[Offset: 0x9b8, Size: 1]
	FString SNameAirDropSpawn;//[Offset: 0x9c8, Size: 1]
	FString SNameAirDropSpawnWarning;//[Offset: 0x9d8, Size: 1]
	FString SNameAirDropStopSpawnWarning;//[Offset: 0x9e8, Size: 1]
	FString SNameAirDropApprochWarning;//[Offset: 0x9f8, Size: 1]
	FString SNameAirDropStopApprochWarning;//[Offset: 0xa08, Size: 1]
	FString SNameStartDrop;//[Offset: 0xa18, Size: 1]
	FString SNameStopDrop;//[Offset: 0xa28, Size: 1]
	FString SNameDecelerateAudio;//[Offset: 0xa38, Size: 1]
	FString SNamePlayLandedLoopAudio;//[Offset: 0xa48, Size: 1]
	FString SNameStopLandedLoopAudio;//[Offset: 0xa58, Size: 1]
	FString SNamePlayOnGroundBroadcastLoopAudio;//[Offset: 0xa68, Size: 1]
	FString SNameStopOnGroundBroadcastLoopAudio;//[Offset: 0xa78, Size: 1]
	FString SNamePlayStartHackAudio;//[Offset: 0xa88, Size: 1]
	FString SNameStopStartHackAudio;//[Offset: 0xa98, Size: 1]
	FString SNamePlayHackingLoopAudio;//[Offset: 0xaa8, Size: 1]
	FString SNameStopHackingLoopAudio;//[Offset: 0xab8, Size: 1]
	FString SNameStopHackingLoopAudioAux;//[Offset: 0xac8, Size: 1]
	FString PendingDestroyLoopStart;//[Offset: 0xad8, Size: 1]
	FString PendingDestroyLoopEnd;//[Offset: 0xae8, Size: 1]
	FString SNameDestroySound;//[Offset: 0xaf8, Size: 1]
	FName ColorKeyTag1;//[Offset: 0xb70, Size: 1]
	FName ColorKeyTag2;//[Offset: 0xb78, Size: 1]
	FName ColorKeyGlow;//[Offset: 0xb80, Size: 1]
	FName ColorKeyMesh;//[Offset: 0xb88, Size: 1]
	FName AlphaKey;//[Offset: 0xb90, Size: 1]
	FName LightBeamAlphaKey;//[Offset: 0xb98, Size: 1]
	FName ColorKeyTagFlow1;//[Offset: 0xba0, Size: 1]
	FName ColorKeyTagFlow2;//[Offset: 0xba8, Size: 1]
	FName ColorKeyLightEffect;//[Offset: 0xbb0, Size: 1]
	float FadeTweenDuration;//[Offset: 0xbb8, Size: 1]
	float RedTweenDuration;//[Offset: 0xbbc, Size: 1]
	LinearColor BlueColorTag1;//[Offset: 0xbc0, Size: 1]
	LinearColor RedColorTag1;//[Offset: 0xbd0, Size: 1]
	LinearColor BlueColorTag2;//[Offset: 0xbe0, Size: 1]
	LinearColor RedColorTag2;//[Offset: 0xbf0, Size: 1]
	LinearColor BlueColorGlow;//[Offset: 0xc00, Size: 1]
	LinearColor RedColorGlow;//[Offset: 0xc10, Size: 1]
	LinearColor BlueColorMesh;//[Offset: 0xc20, Size: 1]
	LinearColor RedColorMesh;//[Offset: 0xc30, Size: 1]
	LinearColor RedColorTagFlow1;//[Offset: 0xc40, Size: 1]
	LinearColor RedColorTagFlow2;//[Offset: 0xc50, Size: 1]
	LinearColor BlueColorTagFlow1;//[Offset: 0xc60, Size: 1]
	LinearColor BlueColorTagFlow2;//[Offset: 0xc70, Size: 1]
	LinearColor RedColorLightEffect;//[Offset: 0xc80, Size: 1]
	LinearColor BlueColorLightEffect;//[Offset: 0xc90, Size: 1]
	void PlayLandingAnimation();// 0x2649560
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x1ffed20
	void OnStateChanged();// 0x1571a30
	void OnRep_TargetLocation();// 0x8f2720
	void OnRep_SummonPlayerID();// 0x1ffece0
	void OnRep_StartDropHeight();// 0x1ffecc0
	void OnRep_PendingDestroy();// 0x1ffeca0
	void OnRep_OpenState(enum OpenState);// 0x1ffec20
	void OnRep_OpenProgressChange();// 0x1ffec00
	void OnRep_OpenCharacterChange();// 0x1ffebe0
	void OnRep_MovementState(enum MovementState);// 0x1ffeb60
	void OnRep_IsOpening();// 0x1ffeb40
	void OnRep_bBoxLanded();// 0x1ffed00
	void OnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x2649560
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x2649560
	void OnFadeOutFallingEffect();// 0x2649560
	bool IsSummonedByCharacter();// 0x1ffe670
	bool IsOpenningCharacterOffline();// 0x1ffe640
	bool IsCharacterInRange(SolarCharacter* InCheckCharacter);// 0x1ffe5a0
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x1ffcdb0

--------------------------------
Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x238, Size: 1]
	float AddForceCoefficient;//[Offset: 0x248, Size: 1]
	float BrokenDestroyTime;//[Offset: 0x24c, Size: 1]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x212a860
	void OnClientBrokenEffect();// 0x2649560
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x212a5a0

--------------------------------
Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 1]
	byte OwnerRole;//[Offset: 0x270, Size: 1]
	FName LeftHandIKSocketName;//[Offset: 0x27c, Size: 1]
	FName RightHandWeaponSocketName;//[Offset: 0x284, Size: 1]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x290, Size: 1]
	Vector LeftHandEffectorLocation;//[Offset: 0x2c0, Size: 1]
	Rotator LeftHandEffectorRotation;//[Offset: 0x2cc, Size: 1]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x2fc, Size: 1]
	Vector RightHandEffectorLocation;//[Offset: 0x308, Size: 1]
	Vector RightHandJointLocation;//[Offset: 0x314, Size: 1]
	float LeftIKHandWeight;//[Offset: 0x320, Size: 1]
	float CurrentReloadTimeRate;//[Offset: 0x324, Size: 1]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x328, Size: 1]
	float CurrentBoltTimeRate;//[Offset: 0x32c, Size: 1]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	float ViewPitch;//[Offset: 0x334, Size: 1]
	float ViewYaw;//[Offset: 0x338, Size: 1]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x33c, Size: 1]
	BlendSpace* FireTPPBlendSpace;//[Offset: 0x348, Size: 1]
	float FireTPPBlendSpaceX;//[Offset: 0x350, Size: 1]
	float FIreTPPBlendSpaceY;//[Offset: 0x354, Size: 1]
	float MinSwimSpeed;//[Offset: 0x358, Size: 1]
	float Direction;//[Offset: 0x35c, Size: 1]
	float Speed;//[Offset: 0x360, Size: 1]
	float InputDirection;//[Offset: 0x364, Size: 1]
	byte IdleTurnType;//[Offset: 0x368, Size: 1]
	float TurnExplicitTime;//[Offset: 0x36c, Size: 1]
	float DamageDirection;//[Offset: 0x370, Size: 1]
	float DamageReactionAlpha;//[Offset: 0x374, Size: 1]
	float DamageNomalizeTime;//[Offset: 0x378, Size: 1]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x484, Size: 1]
	float Fire2PlayRateStand;//[Offset: 0x58c, Size: 1]
	float Fire2PlayRateCrouch;//[Offset: 0x590, Size: 1]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	float FallingInputScale;//[Offset: 0x5e4, Size: 1]
	Vector IKOffsetLeftFootVector;//[Offset: 0x5e8, Size: 1]
	Vector IKOffsetRightFootVector;//[Offset: 0x5f4, Size: 1]
	Vector JointTargetLeftFootVector;//[Offset: 0x600, Size: 1]
	Vector JointTargetRightFootVector;//[Offset: 0x60c, Size: 1]
	Rotator LeftFootRotation;//[Offset: 0x618, Size: 1]
	Rotator RightFootRotation;//[Offset: 0x624, Size: 1]
	Vector HipOffsetVector;//[Offset: 0x630, Size: 1]
	float FootIKTraceDistanceRate;//[Offset: 0x63c, Size: 1]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x640, Size: 1]
	float FootIKInterpSpeed;//[Offset: 0x644, Size: 1]
	FName LeftFootSocket;//[Offset: 0x648, Size: 1]
	FName RightFootSocket;//[Offset: 0x650, Size: 1]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	float LandingBlendWeight;//[Offset: 0x65c, Size: 1]
	float DefaultLeftHandWeaponAttachingBlendTime;//[Offset: 0x660, Size: 1]
	float DefaultLeftHandWeaponDetachingBlendTime;//[Offset: 0x664, Size: 1]
	float CurrentLeftHandWeaponAttachingBlendTime;//[Offset: 0x668, Size: 1]
	float CurrentLeftHandWeaponDetachingBlendTime;//[Offset: 0x66c, Size: 1]
	float FootIKEnableDelayTime;//[Offset: 0x698, Size: 1]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	float FlailRate;//[Offset: 0x6d0, Size: 1]
	float ConfigPitchToZeroTime;//[Offset: 0x6d4, Size: 1]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6d8, Size: 1]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6e0, Size: 1]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6e8, Size: 1]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6f0, Size: 1]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6f4, Size: 1]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6fc, Size: 1]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x712, Size: 1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x713, Size: 1]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x714, Size: 1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x714, Size: 1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x714, Size: 1]
	byte MaxLODDamageReact;//[Offset: 0x715, Size: 1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x716, Size: 1]
	byte MaxLODHandIK;//[Offset: 0x717, Size: 1]
	byte MaxLODFootIK;//[Offset: 0x718, Size: 1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x719, Size: 1]
	byte MaxLODWeaponJitter;//[Offset: 0x71a, Size: 1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71b, Size: 1]
	float DeathAnimStartPosition;//[Offset: 0x71c, Size: 1]
	<enum,class AnimInstance> SpecAnimBPs;//[Offset: 0x720, Size: 1]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x770, Size: 1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x770, Size: 1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x770, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x770, Size: 1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x770, Size: 1]
	bool bIsInhibitSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x770, Size: 1]
	bool bIsSixDirRunForward;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x770, Size: 1]
	bool bIsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x771, Size: 1]
	enum CurrentWalkMode;//[Offset: 0x774, Size: 1]
	enum LastWalkMode;//[Offset: 0x775, Size: 1]
	enum CurrentAirMoveMode;//[Offset: 0x776, Size: 1]
	enum LastAirMoveMode;//[Offset: 0x777, Size: 1]
	enum CurrentCruiseState;//[Offset: 0x778, Size: 1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x780, Size: 1]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x788, Size: 1]
	AnimSequence* CruiseEndSequence;//[Offset: 0x790, Size: 1]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x798, Size: 1]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x79c, Size: 1]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x7a0, Size: 1]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x7a4, Size: 1]
	enum CurrentSkydiveStage;//[Offset: 0x7a8, Size: 1]
	float MinWallRunSurfaceAngle;//[Offset: 0x7ac, Size: 1]
	float MaxWallRunSurfaceAngle;//[Offset: 0x7b0, Size: 1]
	enum WeaponStatus;//[Offset: 0x7b8, Size: 1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b9, Size: 1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b9, Size: 1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b9, Size: 1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7b9, Size: 1]
	enum CurrentSkillAnimType;//[Offset: 0x7ba, Size: 1]
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x20ce2f0
	bool NeedResolveWeaponJitter();// 0x20ce050
	bool JetPack2IsDashingCompletelyOver();// 0x20cdf00
	bool IsHoldingWeapon();// 0x20cded0
	bool IsAiming();// 0x20cdea0
	float GetWallRunSurfaceAngle();// 0x20cde70
	enum GetWallRunState();// 0x20cde40
	Vector2D GetSkydiveFlyingInput();// 0x20cde00
	int GetOwnerGroupID();// 0x20cddd0
	Vector GetJetPackDashAnimationBlend();// 0x20cdd90
	Vector GetInputVector();// 0x20cdd50
	Vector GetFallingInputVector();// 0x20cdd10
	float GenJumpDirection(float InInputDirection);// 0x20cdc70
	float GenBackwardDirection(float InInputDirection);// 0x20cdbd0
	bool CheckNewJetAndReset();// 0x20cdba0

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float AnimLength;//[Offset: 0x8c, Size: 1]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 3]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 1]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 1]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 1]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 1]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 1]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 3]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 1]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 1]
	Vector SampleValue;//[Offset: 0x8, Size: 1]
	float RateScale;//[Offset: 0x14, Size: 1]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 3]
	float Weights;//[Offset: 0xc, Size: 3]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 1]
	float Min;//[Offset: 0x10, Size: 1]
	float Max;//[Offset: 0x14, Size: 1]
	int GridNum;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 1]
	Rotator Thumbl01;//[Offset: 0xc, Size: 1]
	Rotator Thumbl02;//[Offset: 0x18, Size: 1]
	Rotator Index01;//[Offset: 0x24, Size: 1]
	Rotator Index02;//[Offset: 0x30, Size: 1]
	Rotator Middle01;//[Offset: 0x3c, Size: 1]
	Rotator Middle02;//[Offset: 0x48, Size: 1]
	Rotator Ring01;//[Offset: 0x54, Size: 1]
	Rotator Ring02;//[Offset: 0x60, Size: 1]
	Rotator Pinky01;//[Offset: 0x6c, Size: 1]
	Rotator Pinky02;//[Offset: 0x78, Size: 1]

--------------------------------
Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OrnamentMontageInfo
	AnimMontage* ActiveMontage;//[Offset: 0x0, Size: 1]
	GameplayTag OrnamentTag;//[Offset: 0x8, Size: 1]
	bool bForcePlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundGroupPlayContext
	SolarCharacter* Instigator;//[Offset: 0x0, Size: 1]
	SolarCharacter* LocalCharacter;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x578, Size: 1]
	enum TimingPolicy;//[Offset: 0x579, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x580, Size: 1]
	IntPoint DrawSize;//[Offset: 0x588, Size: 1]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	float RedrawTime;//[Offset: 0x594, Size: 1]
	IntPoint CurrentDrawSize;//[Offset: 0x5a0, Size: 1]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	Vector2D Pivot;//[Offset: 0x5ac, Size: 1]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5, Size: 1]
	enum WindowVisibility;//[Offset: 0x5b6, Size: 1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5b8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x5c0, Size: 1]
	LinearColor TintColorAndOpacity;//[Offset: 0x5d0, Size: 1]
	float OpacityFromTexture;//[Offset: 0x5e0, Size: 1]
	enum BlendMode;//[Offset: 0x5e4, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e5, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e6, Size: 1]
	UserWidget* Widget;//[Offset: 0x5e8, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x610, Size: 1]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x618, Size: 1]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x620, Size: 1]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x628, Size: 1]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x630, Size: 1]
	MaterialInterface* MaskedMaterial;//[Offset: 0x638, Size: 1]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x640, Size: 1]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x648, Size: 1]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x650, Size: 1]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	FName SharedLayerName;//[Offset: 0x65c, Size: 1]
	int LayerZOrder;//[Offset: 0x664, Size: 1]
	enum GeometryMode;//[Offset: 0x668, Size: 1]
	float CylinderArcAngle;//[Offset: 0x66c, Size: 1]
	void SetWindowVisibility(enum InVisibility);// 0x352fe80
	void SetWindowFocusable(bool bInWindowFocusable);// 0x352fb40
	void SetWidgetSpace(enum NewSpace);// 0x352fac0
	void SetWidget(UserWidget* Widget);// 0x352fa30
	void SetTwoSided(const bool bWantTwoSided);// 0x352f9a0
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x352f910
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x352f880
	void SetRedrawTime(float InRedrawTime);// 0x352f800
	void SetPivot(out const Vector2D InPivot);// 0x352f770
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x352f6e0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x352f520
	void SetGeometryMode(enum InGeometryMode);// 0x352ee30
	void SetDrawSize(Vector2D Size);// 0x352ed90
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x352ed00
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x352ec80
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x352e8c0
	void RequestRedraw();// 0x1571ff0
	enum GetWindowVisiblility();// 0x352e0c0
	bool GetWindowFocusable();// 0x352e0a0
	enum GetWidgetSpace();// 0x352e080
	UserWidget* GetUserWidgetObject();// 0x352e020
	bool GetTwoSided();// 0x352e000
	bool GetTickWhenOffscreen();// 0x352dfe0
	TextureRenderTarget2D* GetRenderTarget();// 0x352de30
	float GetRedrawTime();// 0x352de10
	Vector2D GetPivot();// 0x352dde0
	LocalPlayer* GetOwnerPlayer();// 0x352ddb0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x352dd80
	bool GetManuallyRedraw();// 0x352dd60
	enum GetGeometryMode();// 0x352d790
	Vector2D GetDrawSize();// 0x352d5c0
	bool GetDrawAtDesiredSize();// 0x352d5a0
	float GetCylinderArcAngle();// 0x352d550
	Vector2D GetCurrentDrawSize();// 0x352d510

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 1]
	int SizeY;//[Offset: 0xc4, Size: 1]
	bool bAutoRTSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	LinearColor ClearColor;//[Offset: 0xcc, Size: 1]
	byte AddressX;//[Offset: 0xdc, Size: 1]
	byte AddressY;//[Offset: 0xdd, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xdf, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	byte MipsSamplerFilter;//[Offset: 0xe1, Size: 1]
	byte MipsAddressU;//[Offset: 0xe2, Size: 1]
	byte MipsAddressV;//[Offset: 0xe3, Size: 1]
	byte OverrideFormat;//[Offset: 0xe4, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	float WaitFirstTeamNumberInputTime;//[Offset: 0xea0, Size: 1]
	float WaitTeamNumberInputTime;//[Offset: 0xea4, Size: 1]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xea8, Size: 1]
	SolarReplayHighlightComponent* SolarReplayHighlightComponent;//[Offset: 0xeb0, Size: 1]
	SolarReplayAutoDirectorComponent* SolarReplayAutoDirectorComponent;//[Offset: 0xeb8, Size: 1]
	MulticastInlineDelegateProperty OnEmitBulletDelegate;//[Size: 1]
	<FString,float> HorizontalDistanceBetweenPlayerAndOBCamera;//[Offset: 0xed0, Size: 1]
	SolarReplayManager* ReplayManager;//[Offset: 0xf20, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf28, Size: 1]
	<byte,MaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap;//[Offset: 0xf50, Size: 1]
	void UpdateDistanceBetweenOBCamAndPlayer();// 0x21f5d30
	void StopSpectatePlayer();// 0x21f5c20
	void StopPlayReplay();// 0x21f5c00
	void SpectateVictim();// 0x21f5be0
	void SpectatePlayerByPlayerID(FString SolarPlayerID);// 0x21f5b40
	void SpectateAttacker();// 0x21f5b20
	void SolarGM_ToggleProgressControlButton();// 0x8f2720
	void SolarGM_SetWatchingLiveTarget(FString InPlayerID);// 0x2100560
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog);// 0x1ff2470
	bool ShowDamageText(out SolarDamageText InDamageText);// 0x21f5a30
	void SetUISettingHeadInfoStyle(out const enum InType);// 0x21f58a0
	void SetDamageTextVisible(bool bIsVisible);// 0x21f4f50
	void SetBattleOBHUDType(out const enum Type);// 0x21f4ec0
	void PauseReplay();// 0x21f4d30
	void OnReplayPlayingLevelLoaded();// 0x21f4d10
	void OnReplayPlayingFirstScrubFinished();// 0x21f4cf0
	void OnPlayingFinished();// 0x8f2720
	void OnEmitBulletDelegate__DelegateSignature(Vector StartLoc, Vector AimLoc, FString SolarPlayerID);// 0x2649560
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x21f4bc0
	bool IsSpectatingPlayer();// 0x21f4b70
	SolarPlayerState* GetWatchingLiveTarget();// 0x21f4b10
	<FString,float> GetHorizontalDistanceBetweenPlayerAndOBCamera();// 0x21f4930
	FString GetCurrentSpectatePlayerID();// 0x21f47d0
	enum GetBattleOBHUDType();// 0x21f47a0
	void ExitDirectorMode();// 0x21f4780
	void EnterDirectorMode();// 0x21f4760
	void ContinueReplay();// 0x21f4720

--------------------------------
Class: SolarReplayCameraControlComp.ActorComponent.Object
	MulticastInlineDelegateProperty OnReplayCameraModeChanged;//[Size: 1]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0xd8, Size: 1]
	float DefaultSpeed;//[Offset: 0xe0, Size: 1]
	float MoveSpeedChangeStep;//[Offset: 0xe4, Size: 1]
	float MoveSpeedMin;//[Offset: 0xe8, Size: 1]
	float MoveSpeedMax;//[Offset: 0xec, Size: 1]
	float SpeedUpScale;//[Offset: 0xf0, Size: 1]
	float DefaultTurnRate;//[Offset: 0xf4, Size: 1]
	float TurnRateChangeStep;//[Offset: 0xf8, Size: 1]
	float TurnSpeedMin;//[Offset: 0xfc, Size: 1]
	float TurnSpeedMax;//[Offset: 0x100, Size: 1]
	float DistanceChangeStep;//[Offset: 0x104, Size: 1]
	SolarReplayCameraBase* ReplayCamera;//[Offset: 0x108, Size: 1]
	SolarPlayerState* LastTarget;//[Offset: 0x118, Size: 1]
	<enum,SolarReplayCameraBase*> CacheCameras;//[Offset: 0x130, Size: 1]
	void OnStreamingReadied();// 0x21f0ad0
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x21f0a40
	void OnReplayCameraModeChanged__DelegateSignature(enum OldMode, enum CurMode);// 0x2649560
	void OnPlayingScrubStart();// 0x21f0900
	void OnPlayingScrubCharactersCreated();// 0x21f08e0
	void OnPlayingFirstScrubFinished();// 0x21f08c0
	enum GetReplayCameraMode();// 0x21ef8f0
	void ChangeLockSpectatorModeDistance(float val);// 0x21ef5f0

--------------------------------
Class: SolarReplayCameraBase.Object

--------------------------------
Class: SolarReplayHighlightComponent.ActorComponent.Object
	float RecordAfterSettled;//[Offset: 0xe0, Size: 1]
	float SlowMoStartTime;//[Offset: 0xe4, Size: 1]
	float SlowMoEndTime;//[Offset: 0xe8, Size: 1]
	float SlowMoMultiplier;//[Offset: 0xec, Size: 1]
	float KillEffectTime;//[Offset: 0xf0, Size: 1]
	OBHighlightOverviewWidget* HighlightOverviewWidget;//[Offset: 0xf8, Size: 1]
	void ReceiveHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x21f1020
	void ReceiveHighlightData(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x21f0f00
	void OnReplayWidgetTranslatePlayEndOver();// 0x21f09e0
	void OnReplayWidgetTranslatePlayBeginOver();// 0x21f09c0
	void OnReplayWidgetOverviewPlayEnd();// 0x21f09a0
	void OnReplayWidgetHighlightPlayEnd();// 0x21f0980
	void OnReplayScrubStarted();// 0x21f0960
	void OnReplayPaused();// 0x8f2720
	void OnReplayContinued();// 0x8f2720
	UISubsystem* GetUISubSystem();// 0x21ef9b0
	SolarReplayManager* GetReplayManager();// 0x21ef920

--------------------------------
Class: OBHighlightOverviewWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OverviewPlayEnd;//[Size: 1]
	MulticastInlineDelegateProperty TranslatePlayBeginOver;//[Size: 1]
	MulticastInlineDelegateProperty TranslatePlayEndOver;//[Size: 1]
	MulticastInlineDelegateProperty HighlightPlayEnd;//[Size: 1]
	void SwitchKillToolData(out const enum ToolType, out const int KillToolID);// 0x207faf0
	void ShowHighlightTranslateNum(out const int TranslateNum);// 0x2649560
	void ShowHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x2649560
	void ShowHighlightMarkResult(out const float TotalScore, FString MarkName);// 0x2649560
	void ShowHighlightKillToolEffect(FString ToolName, out const Texture2D* ToolIcon);// 0x2649560
	void ShowHighlightKillNum(out const int KillNum, out const float KillEffectTime);// 0x2649560
	void OnTranslatePlayEndOver();// 0x207f800
	void OnTranslatePlayBeginOver();// 0x207f7e0
	void OnOverviewPlayEnd();// 0x207ec40
	void OnHighlightPlayEnd();// 0x207ec00
	void HighlightOver();// 0x2649560
	void HighlightFragmentOver();// 0x2649560
	void ContinueHighlightTranslate();// 0x2649560
	void CollectReplayPlayerOverviewData(FString PlayerId, out ReplayPlayerOverviewData PlayerOverviewData);// 0x207e320
	void CalcHighlightMarkResult(float Score, out const ReplayActivityKillDetail[] KillDetails);// 0x207e230

--------------------------------
Class: PlayerHighlightOverview
	int KillNum;//[Offset: 0x0, Size: 1]
	int AssistNum;//[Offset: 0x4, Size: 1]
	int Damage;//[Offset: 0x8, Size: 1]
	FString PlayerId;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ReplayPlayerOverviewData
	FString playerName;//[Offset: 0x0, Size: 1]
	FString HeroName;//[Offset: 0x10, Size: 1]
	Texture2D* SkinResourcePtr;//[Offset: 0x20, Size: 1]
	int PlayerNum;//[Offset: 0x48, Size: 1]
	FString GameModeName;//[Offset: 0x50, Size: 1]

--------------------------------
Class: ReplayActivityKillDetail
	float KillTime;//[Offset: 0x0, Size: 1]
	enum KillUseType;//[Offset: 0x4, Size: 1]
	int KillToolID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ReplayActivityHeatFragment
	int FragmentId;//[Offset: 0x0, Size: 1]
	enum ActivityHeatType;//[Offset: 0x4, Size: 1]
	float TotalScore;//[Offset: 0x8, Size: 1]
	float BeginTime;//[Offset: 0xc, Size: 1]
	float EndTime;//[Offset: 0x10, Size: 1]
	ReplayActivityKillDetail[] ActivityKillDetails;//[Offset: 0x18, Size: 1]
	int KillNum;//[Offset: 0x28, Size: 1]
	float ActivityHotTime;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: UISubsystem.GameInstanceSubsystem.Subsystem.Object
	UIGlobalConfig* GlobalConfig;//[Offset: 0x30, Size: 1]
	UIPanelConfig* UIPanelConfig;//[Offset: 0x38, Size: 1]
	<FString,SolarUserWidget*> CacheWidgets;//[Offset: 0x40, Size: 1]
	void PostInitializeAfterPatch();// 0x2314190

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: UIGlobalConfig.DataAsset.Object
	<byte,TeamMemberColor> TeamMemberColors;//[Offset: 0x30, Size: 1]
	<byte,ItemQualityData> ItemQualityData;//[Offset: 0x80, Size: 1]
	<byte,OBTeamColor> OBTeamColors;//[Offset: 0xd0, Size: 1]
	OBTeamColor GetOBTeamColor(const int TeamNum);// 0x230d400

--------------------------------
Class: OBTeamColor
	FString Desc;//[Offset: 0x0, Size: 1]
	LinearColor Main;//[Offset: 0x10, Size: 1]
	LinearColor Vice;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TeamMemberColor
	LinearColor Main;//[Offset: 0x0, Size: 1]
	LinearColor Vice;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ItemQualityData
	LinearColor BaseColor;//[Offset: 0x0, Size: 1]
	LinearColor HUDColor;//[Offset: 0x10, Size: 1]
	LinearColor HighQualityColor;//[Offset: 0x20, Size: 1]
	LinearColor LowQualityColor;//[Offset: 0x30, Size: 1]
	LinearColor HUDBGColor;//[Offset: 0x40, Size: 1]
	LinearColor HUDDecorateColor;//[Offset: 0x50, Size: 1]
	SoftObjectPath QualityIcon;//[Offset: 0x60, Size: 1]
	FString QualityChar;//[Offset: 0x78, Size: 1]

--------------------------------
Class: UIPanelConfig.Object
	<enum,UIPanelConfigEntry> PanelConfigs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: UIPanelConfigEntry
	SoftClassPath MobileUIPath;//[Offset: 0x0, Size: 1]
	SoftClassPath DesktopUIPath;//[Offset: 0x18, Size: 1]
	enum UILayerRoot;//[Offset: 0x30, Size: 1]
	bool bPrecache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: SolarReplayAutoDirectorComponent.ActorComponent.Object
	int CollectTimeWindow;//[Offset: 0xd8, Size: 1]
	<enum,float> AutoDirectorActivityEventScoreSetting;//[Offset: 0xe0, Size: 1]
	<SolarPlayerState*> CurrentAllPlayerInAreaRadius;//[Offset: 0x228, Size: 1]
	void UpdatePlayingNarrateActivityEvent();// 0x21f1630
	void TryResetFreeCamera();// 0x21f1610
	void TryPlayNextNode();// 0x21f15f0
	void OnScrubFinished();// 0x21f0a20
	void OnScoutPlayerWorkComplete();// 0x21f0a00
	void OnReplayCameraBlocked();// 0x21f0940
	void OnPreFreeCameraFinished();// 0x21f0920
	void OnPlayerTakeDamage(SolarPlayerState* SourcePlayerState, SolarPlayerState* TargetPlayerState, out const SolarPointDamageEvent DamageEvent);// 0x21f0650
	void OnPlayerResurrectTeammate(SolarCharacter* ImplementResurrectionCharacter);// 0x21f0420
	void OnPlayerRescueTeammate(SolarCharacter* ImplementRescueCharacter, SolarCharacter* BeingRescuedCharacter);// 0x21f0350
	void OnPlayerPickupItem(SolarCharacter* Character, Actor* PickupItem);// 0x21f0280
	void OnPlayerActiveRoleAbility(SolarCharacter* Character, byte AbilityIndex);// 0x21f01b0
	void OnCustomGameStateChanged(const enum NewGameState);// 0x21f0130
	void OnCheckPlayerOut(SCMPlayerState* PlayerState, enum OutType);// 0x21f0060
	void OnCharacterGetOnVehicle(SolarCharacter* Character, Pawn* Vehicle);// 0x21eff90
	void EnumerateAutoDirectorNodeInfo();// 0x21ef780

--------------------------------
Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int Damage;//[Offset: 0x4, Size: 1]
	Actor* Target;//[Offset: 0x8, Size: 1]
	Actor* Source;//[Offset: 0x10, Size: 1]
	Vector HitLocation;//[Offset: 0x18, Size: 1]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x6b0, Size: 1]
	float DefaultUnscaledCapsuleHalfHeight;//[Offset: 0x6b8, Size: 1]
	float DefaultLazyRefreshBonesDelay;//[Offset: 0x6bc, Size: 1]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6e4, Size: 1]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6e8, Size: 1]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6ec, Size: 1]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6f0, Size: 1]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6f4, Size: 1]
	float MinAccelerationProjectRatioForValidGroundSlide;//[Offset: 0x6f8, Size: 1]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	float OverriddenFallingGravity;//[Offset: 0x700, Size: 1]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x704, Size: 1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x708, Size: 1]
	enum ClientMoveTrustType;//[Offset: 0x70c, Size: 1]
	enum CurrentAirMoveMode;//[Offset: 0x742, Size: 1]
	enum LastAirMoveMode;//[Offset: 0x743, Size: 1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x744, Size: 1]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x750, Size: 1]
	JetPackConfig* JetPackConfig;//[Offset: 0x768, Size: 1]
	SkydiveConfig* SkydiveConfig;//[Offset: 0x788, Size: 1]
	float HinderAngel;//[Offset: 0x7b0, Size: 1]
	float HinderPercent;//[Offset: 0x7b4, Size: 1]
	float HinderZ;//[Offset: 0x7b8, Size: 1]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x7bc, Size: 1]
	float SwimSpeedConfig;//[Offset: 0x7c0, Size: 1]
	float SwimSpeedSmoothSpeed;//[Offset: 0x7c4, Size: 1]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x7c8, Size: 1]
	float SwimMaxSinkingSpeed;//[Offset: 0x7cc, Size: 1]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x7d0, Size: 1]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855, Size: 1]
	float DeathVergeBodyRadius;//[Offset: 0x858, Size: 1]
	float DeathVergeHalfHeight;//[Offset: 0x85c, Size: 1]
	Actor* HangingTargetObj;//[Offset: 0x868, Size: 1]
	Vector HangingTargetVelocity;//[Offset: 0x870, Size: 1]
	bool UseHangingTargetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	bool UseHangingTargetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 1]
	void UpdateCharacterStateAfterMovement__DelegateSignature(SolarCharacterMovementComponent* MovementComponent, float DeltaTime);// 0x2649560
	void SetHinderZ(float InHinderZ);// 0x2118a90
	void SetHinderAngel(float InHinderAngel);// 0x2118a10
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x2118900
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x21180e0
	byte GetSteppedSurfaceType();// 0x2118010
	enum GetLastWalkMode();// 0x2117f40
	enum GetCurrentWalkMode();// 0x2117f20
	void ForcedJump();// 0x2117ed0

--------------------------------
Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x618, Size: 1]
	int TimeDiscrepancyUploadThres;//[Offset: 0x650, Size: 1]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x658, Size: 1]

--------------------------------
Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 1]
	float JumpTime;//[Offset: 0x4, Size: 1]
	float JumpDelay;//[Offset: 0x8, Size: 1]

--------------------------------
Class: JetPackConfig.DataAsset.Object
	float CurrentSpeedResidueHorizontal;//[Offset: 0x30, Size: 1]
	float CurrentSpeedResidueVertical;//[Offset: 0x34, Size: 1]
	float AltitudeLimitation;//[Offset: 0x38, Size: 1]
	float DashHeightForLimitedAltitude;//[Offset: 0x3c, Size: 1]
	float SlantDashInputThreshold;//[Offset: 0x40, Size: 1]
	float VerticalDashTime;//[Offset: 0x44, Size: 1]
	float VerticalDashHeight;//[Offset: 0x48, Size: 1]
	float VerticalDashAngle;//[Offset: 0x4c, Size: 1]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x50, Size: 1]
	float VerticalDashBreakableTime;//[Offset: 0x54, Size: 1]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x58, Size: 1]
	float SlantDashTime;//[Offset: 0x5c, Size: 1]
	float SlantDashHeight;//[Offset: 0x60, Size: 1]
	float SlantDashAngle;//[Offset: 0x64, Size: 1]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x68, Size: 1]
	float SlantDashBreakableTime;//[Offset: 0x6c, Size: 1]
	float SlantDashCameraFadeOutTime;//[Offset: 0x70, Size: 1]
	float HorizontalDashTime;//[Offset: 0x74, Size: 1]
	float HorizontalDashDistance;//[Offset: 0x78, Size: 1]
	float HorizontalDashAngle;//[Offset: 0x7c, Size: 1]
	float HorizontalDashEndSpeed;//[Offset: 0x80, Size: 1]
	float HorizontalDashBreakableTime;//[Offset: 0x84, Size: 1]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x88, Size: 1]
	float UnderWaterHorizontalDashTime;//[Offset: 0x8c, Size: 1]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x90, Size: 1]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x94, Size: 1]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x98, Size: 1]
	VehicleEjectParams DefaultVehicleEjectParams;//[Offset: 0x9c, Size: 1]

--------------------------------
Class: SkydiveConfig.DataAsset.Object
	float DefaultFallingSpeed;//[Offset: 0x30, Size: 1]
	float MinFallingSpeed;//[Offset: 0x34, Size: 1]
	float FallingBrakingDeceleration;//[Offset: 0x38, Size: 1]
	RuntimeFloatCurve FlyingForwardPitchMappingCurve;//[Offset: 0x40, Size: 1]
	RuntimeFloatCurve MaxFlyingForwardSpeedCurve;//[Offset: 0xc8, Size: 1]
	float MaxFlyingSidewardSpeed;//[Offset: 0x150, Size: 1]
	float MaxFlyingAcceleration;//[Offset: 0x154, Size: 1]
	float MinFlyingBrakingDeceleration;//[Offset: 0x158, Size: 1]
	float MaxFlyingBrakingDeceleration;//[Offset: 0x15c, Size: 1]
	float FlyingRotationSmoothSpeedYaw;//[Offset: 0x160, Size: 1]
	float FlyingRotationSmoothSpeedPitch;//[Offset: 0x164, Size: 1]
	float FlyingRotationSmoothSpeedYawOnFollowing;//[Offset: 0x168, Size: 1]
	float FlyingRotationSmoothSpeedPitchOnFollowing;//[Offset: 0x16c, Size: 1]
	float LandingHeight;//[Offset: 0x170, Size: 1]
	float LandingFallingSpeed;//[Offset: 0x174, Size: 1]
	float LandingFallingBrakingDeceleration;//[Offset: 0x178, Size: 1]
	float LandingMaxFlyingSpeed;//[Offset: 0x17c, Size: 1]
	float LandingFlyingAcceleration;//[Offset: 0x180, Size: 1]
	FName[] LandingIgnoredActorTags;//[Offset: 0x188, Size: 1]
	Vector[] FollowFormation;//[Offset: 0x198, Size: 1]
	float SmoothTimeToCatchUpWithLeaderOnBeginning;//[Offset: 0x1a8, Size: 1]
	CharacterMovementNetworkOptions NetworkOptions;//[Offset: 0x1ac, Size: 1]

--------------------------------
Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 1]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x380, Size: 1]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x388, Size: 1]
	SolarBotAIConfig* BotConfigPreset;//[Offset: 0x390, Size: 1]
	SolarBotBattleConfig DefaultBattleConfig;//[Offset: 0x398, Size: 1]
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x4f0, Size: 1]
	int UniqueSpawnerID;//[Offset: 0x520, Size: 1]
	GameplayTag BattleSubTreeTag;//[Offset: 0x524, Size: 1]
	int DefaultDifficultyLevel;//[Offset: 0x52c, Size: 1]
	int CurrentDifficultyLevel;//[Offset: 0x530, Size: 1]
	float CharacterLookAtInterpSpeed;//[Offset: 0x534, Size: 1]
	float MinSpecVehicleDeltaPitch;//[Offset: 0x538, Size: 1]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	int BotDefaultWeaponId;//[Offset: 0x540, Size: 1]
	bool bAimBoneWhenFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	FName FireTargetBoneName;//[Offset: 0x548, Size: 1]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	BotBonusDropConfig BonusDropConfig;//[Offset: 0x554, Size: 1]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x56c, Size: 1]
	enum BotAIType;//[Offset: 0x570, Size: 1]
	int BotFeature;//[Offset: 0x574, Size: 1]
	Vector2D MovementVector;//[Offset: 0x578, Size: 1]
	class NavigationQueryFilter* BPDefaultNavigationFilterClass;//[Offset: 0x580, Size: 1]
	<GameplayTag,BehaviorTree*> SubTreeMap;//[Offset: 0x5b8, Size: 1]
	Actor* AITarget;//[Offset: 0x640, Size: 1]
	SolarBotShootSimulater* ShootSimulater;//[Offset: 0x648, Size: 1]
	MulticastInlineDelegateProperty OnBotAIDeath;//[Size: 1]
	SolarCharacter* PossessedCharacer;//[Offset: 0x6d4, Size: 1]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x6e0, Size: 1]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x6f0, Size: 1]
	float ValidEmojiUseDistance;//[Offset: 0x708, Size: 1]
	float WorldMarkMessageDelayTime;//[Offset: 0x7d8, Size: 1]
	void UpdateDynamicSubtree();// 0x20e4820
	void UpdateCharacterRotate(float DeltaTime);// 0x20e47a0
	void StopBehaviorTree();// 0x20e45c0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x20e42f0
	bool SetupBotAITargetSelectConfig();// 0x2649560
	bool SetupBotAIDifficulty(int DifficultyLevel, bool bAsDefault);// 0x2649560
	bool SetupBotAICanUseCharacterData(int CharacterId, int SkinId);// 0x2649560
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x20e2fc0
	bool SetBotConfigPresetByID(int BotConfigPresetID);// 0x2649560
	void SetBotConfigPreset(SolarBotAIConfig* InConfig);// 0x20e2e60
	void OnReset();// 0x2649560
	void OnPlayerGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x20e2cc0
	void OnEnterLanding();// 0x20e2c90
	bool IsTeamLeader();// 0x20e2b20
	bool IsInPlayerTeam();// 0x20e2a20
	bool IsIndependent();// 0x20e2a50
	bool IsAccompanyingPlayer();// 0x20e29f0
	SolarCharacter* GetSolarCharacter();// 0x20e28b0
	enum[] GetPreferPickHeroTypes();// 0x20e2600
	byte GetMyTeamID();// 0x20e25c0
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x20e1f40
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x20e1d60

--------------------------------
Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x350, Size: 1]
	AISenseConfig_Sight* SightConfig;//[Offset: 0x358, Size: 1]
	AISenseConfig_Damage* DamageSenseConfig;//[Offset: 0x360, Size: 1]
	int AICharacterID;//[Offset: 0x368, Size: 1]
	void DestroyCharacterCorpse();// 0x1572b50

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2f8, Size: 1]
	BrainComponent* BrainComponent;//[Offset: 0x300, Size: 1]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x308, Size: 1]
	PawnActionsComponent* ActionsComp;//[Offset: 0x310, Size: 1]
	BlackboardComponent* Blackboard;//[Offset: 0x318, Size: 1]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x320, Size: 1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x328, Size: 1]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x413c4b0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x413c260
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x413bd50
	void SetMoveBlockDetection(bool bEnable);// 0x413bcc0
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x413bad0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2649560
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x413b470
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x413b1e0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x413afa0
	void K2_SetFocus(Actor* NewFocus);// 0x413ae00
	void K2_SetFocalPoint(Vector FP);// 0x413ad70
	void K2_ClearFocus();// 0x413ad50
	bool HasPartialPath();// 0x413ab70
	PathFollowingComponent* GetPathFollowingComponent();// 0x413a870
	byte GetMoveStatus();// 0x413a840
	Vector GetImmediateMoveDestination();// 0x413a710
	Actor* GetFocusActor();// 0x413a6e0
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x413a630
	Vector GetFocalPoint();// 0x413a5f0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x413a2c0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4139fa0

--------------------------------
Class: SolarBotLootComponent.ActorComponent.Object
	GameplayTag LootSubTreeTag;//[Offset: 0xb0, Size: 1]
	SolarBotLootValuationConfig DefaultValuationConfig;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: SolarBotLootValuationConfig
	float MoveCostFactor;//[Offset: 0x0, Size: 1]
	float DistSelfToSpawnerFactor;//[Offset: 0x4, Size: 1]
	float DistSpawnerOffsetFactor;//[Offset: 0x8, Size: 1]
	float AvgDistSpawnerToTeammatesFactor;//[Offset: 0xc, Size: 1]
	float AssualtRifleBaseValue;//[Offset: 0x10, Size: 1]
	float ShotgunBaseValue;//[Offset: 0x14, Size: 1]
	float SubmachinegunBaseValue;//[Offset: 0x18, Size: 1]
	float SniperBaseValue;//[Offset: 0x1c, Size: 1]
	float WeaponQualityValue;//[Offset: 0x20, Size: 1]
	float AmmoBaseValue;//[Offset: 0x24, Size: 1]
	float AmmoMatchFactor;//[Offset: 0x28, Size: 1]
	float ShieldBaseValue;//[Offset: 0x2c, Size: 1]
	float ShieldQualityValue;//[Offset: 0x30, Size: 1]
	float JetpackModuleBaseValue;//[Offset: 0x34, Size: 1]
	float JetpackModuleQualityValue;//[Offset: 0x38, Size: 1]
	float MedkitBaseValue;//[Offset: 0x3c, Size: 1]
	float MedkitHPRatioFactor;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 1]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 1]
	void OnNavDataRegistered(NavigationData* NavData);// 0x41540c0
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4153f20
	Vector GetPathDestination();// 0x4153af0
	byte GetPathActionType();// 0x4153ac0

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 1]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 1]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2b4, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2b8, Size: 1]
	uint32 DataVersion;//[Offset: 0x2bc, Size: 1]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a0, Size: 1]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 1]
	Color Color;//[Offset: 0x38, Size: 1]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 1]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 1]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x10, Size: 1]
	class Object* AreaClass;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	SolarBotThreatConfig DefaultThreatConfig;//[Offset: 0x180, Size: 1]
	<enum,class Actor> ConfigAreaTypeIdentifyMap;//[Offset: 0x1f0, Size: 1]
	PerceivableEAInfluenceConfig EffectAreasInfluenceConfig;//[Offset: 0x240, Size: 1]
	float MaxInfluenceRadius;//[Offset: 0x2a0, Size: 1]
	float SmokeGrenadeAffectRadius;//[Offset: 0x2a4, Size: 1]
	float EnergyBubbleAffectRadius;//[Offset: 0x2a8, Size: 1]
	float SummonWallAffectRadius;//[Offset: 0x2ac, Size: 1]
	float UAVShieldAffectRadius;//[Offset: 0x2b0, Size: 1]
	float UAVRescueAffectRadius;//[Offset: 0x2b4, Size: 1]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	FName[] ForbiddenTags;//[Offset: 0x2c0, Size: 1]
	int MaxNumCachedDamage;//[Offset: 0x308, Size: 1]
	void UpdateSenseConfig(float NewSightRadius);// 0x21b78d0
	void SetTargetSelectEnabled(bool bInEnable);// 0x21b6fd0
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x21b6c90
	void OnBotPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x21b56e0
	bool IsInEffectAreaOfType(enum Type, const Actor* InTestActor);// 0x21b5280
	bool IsInAnyEffectArea(out PerceivableEffectArea[] ActiveEffectAreas, const Actor* InTestActor);// 0x21b5180
	float GetTargetCurrentThreatValue(SolarCharacter* ThreatTarget);// 0x21b4e80
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x21b47d0

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 1]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 1]
	AIController* AIOwner;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 1]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x413bde0
	void RequestStimuliListenerUpdate();// 0x413bab0
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x413b610
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x413a980
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x413a890
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x413a750
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x413a500
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x413a2e0
	void ForgetAll();// 0x413a210

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 1]
	float MaxAge;//[Offset: 0x2c, Size: 1]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 1]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x90, Size: 1]
	float PerceptionAgingRate;//[Offset: 0xa0, Size: 1]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x413b9f0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x413b960
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x413b840
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x413b6e0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x413aa30

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 1]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 1]
	float AcceptanceRadius;//[Offset: 0x88, Size: 1]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 1]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 1]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 1]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 1]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 1]
	void AILoggingVerbose();// 0x30f3ba0
	void AIIgnorePlayers();// 0x220b940

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 1]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 1]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 1]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 1]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 1]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 1]
	BTService*[] Services;//[Offset: 0x68, Size: 1]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 1]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 1]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 1]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 1]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 1]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 1]
	float RandomDeviation;//[Offset: 0x64, Size: 1]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 1]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 1]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 1]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 1]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 1]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 1]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4140ba0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x4140440
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x41401c0

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 1]
	AIController* AIOwner;//[Offset: 0xc0, Size: 1]
	void StopLogic(FString reason);// 0x4145520
	void StartLogic();// 0xc455a0
	void RestartLogic();// 0xc45580
	bool IsRunning();// 0x4144b50
	bool IsPaused();// 0x4144b20

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 1]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 1]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 1]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x4145430
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x41452f0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x4145200
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x4145130
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x4145060
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x4144f90
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x4144eb0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x4144dd0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x4144d00
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x4144c20
	bool IsVectorValueSet(out const FName KeyName);// 0x4144b80
	Vector GetValueAsVector(out const FName KeyName);// 0x4144a10
	FString GetValueAsString(out const FName KeyName);// 0x4144930
	Rotator GetValueAsRotator(out const FName KeyName);// 0x4144880
	Object* GetValueAsObject(out const FName KeyName);// 0x41447e0
	FName GetValueAsName(out const FName KeyName);// 0x4144740
	int GetValueAsInt(out const FName KeyName);// 0x41446a0
	float GetValueAsFloat(out const FName KeyName);// 0x4144600
	byte GetValueAsEnum(out const FName KeyName);// 0x4144560
	class Object GetValueAsClass(out const FName KeyName);// 0x41444c0
	bool GetValueAsBool(out const FName KeyName);// 0x4144420
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x4144330
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x4144240
	void ClearValue(out const FName KeyName);// 0x4144180

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xb0, Size: 1]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xc0, Size: 1]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xd0, Size: 1]
	float MaxAllowedTestingTime;//[Offset: 0x134, Size: 1]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x13c, Size: 1]
	double QueryCountWarningInterval;//[Offset: 0x140, Size: 1]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x4150a90

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 1]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 1]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 1]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 1]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 1]
	byte TestPurpose;//[Offset: 0x34, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 1]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 1]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 1]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 1]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 1]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 1]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 1]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 1]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 1]
	FName DataField;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 1]
	int OptionIndex;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 1]
	void SetNamedParam(FName ParamName, float Value);// 0x4150c20
	Vector[] GetResultsAsLocations();// 0x4150a10
	Actor*[] GetResultsAsActors();// 0x4150990
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x41508d0
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x4150810
	float GetItemScore(int ItemIndex);// 0x4150770
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2649560

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFail;//[Size: 1]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x413b540

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x41542e0
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x4154150
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x41538b0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4153600
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4153440
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4153220
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4152fe0

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 1]
	float ExpirationAge;//[Offset: 0x4, Size: 1]
	float Strength;//[Offset: 0x8, Size: 1]
	Vector StimulusLocation;//[Offset: 0xc, Size: 1]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 1]
	FName Tag;//[Offset: 0x24, Size: 1]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarBotThreatConfig
	float ThreatUpdateInterval;//[Offset: 0x0, Size: 1]
	float AttackTriggerThreshold;//[Offset: 0x4, Size: 1]
	float CancelAttackTriggerThreshold;//[Offset: 0x8, Size: 1]
	float SwitchTargetDifferenceValue;//[Offset: 0xc, Size: 1]
	float DistanceThreshold;//[Offset: 0x10, Size: 1]
	float DistanceThresholdInSmoke;//[Offset: 0x14, Size: 1]
	float PeripheralVisionAngleDegrees;//[Offset: 0x18, Size: 1]
	float SightIncreaseBase;//[Offset: 0x1c, Size: 1]
	float SightIncreaseDistanceFactor;//[Offset: 0x20, Size: 1]
	float SightDecreaseBase;//[Offset: 0x24, Size: 1]
	float SightDecreaseDistanceFactor;//[Offset: 0x28, Size: 1]
	float SightDecreaseMax;//[Offset: 0x2c, Size: 1]
	float SightMaxValue;//[Offset: 0x30, Size: 1]
	float HearingAddBase;//[Offset: 0x34, Size: 1]
	float HearingAddDistanceFactor;//[Offset: 0x38, Size: 1]
	float HearingDecreasePerTick;//[Offset: 0x3c, Size: 1]
	float HearingMaxValue;//[Offset: 0x40, Size: 1]
	float HitSoundAlertRange;//[Offset: 0x44, Size: 1]
	float BotThreatFactor;//[Offset: 0x48, Size: 1]
	float PlayerThreatFactor;//[Offset: 0x4c, Size: 1]
	float DeathVergeFactor;//[Offset: 0x50, Size: 1]
	float MassInvisibilityPrepareFactor;//[Offset: 0x54, Size: 1]
	float MaxDistanceThreatFactor;//[Offset: 0x58, Size: 1]
	float DistanceThreatFactorDecayRate;//[Offset: 0x5c, Size: 1]
	float AccompanyThreatMaxValue;//[Offset: 0x60, Size: 1]
	float AccompanyThreatAddBase;//[Offset: 0x64, Size: 1]
	float AccompanyDecreasePerTick;//[Offset: 0x68, Size: 1]

--------------------------------
Class: PerceivableEAInfluenceConfig
	<enum,float> AreaTypeValueMap;//[Offset: 0x0, Size: 1]
	float HostileAreaFactor;//[Offset: 0x50, Size: 1]
	float NeutralAreaFactor;//[Offset: 0x54, Size: 1]
	float FriendlyAreaFactor;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PerceivableEffectArea
	enum AreaType;//[Offset: 0x0, Size: 1]
	Vector EffectLocation;//[Offset: 0x4, Size: 1]
	float EffectRadius;//[Offset: 0x10, Size: 1]
	Actor* EffectActor;//[Offset: 0x14, Size: 1]
	Actor* Instigator;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 1]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 1]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarBotAIConfig.DataAsset.Object
	GameplayTagContainer IdentifierTags;//[Offset: 0x30, Size: 1]
	SolarBotConfigSection_Battle* BattleSection;//[Offset: 0x50, Size: 1]
	SolarBotConfigSection_Loot* LootSection;//[Offset: 0x58, Size: 1]
	SolarBotConfigSection_Perception* PerceptionSection;//[Offset: 0x60, Size: 1]
	SolarBotConfigSection*[] CustomSections;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarBotConfigSection_Battle.SolarBotConfigSection.Object
	SolarBotBattleConfig BattleConfig;//[Offset: 0x30, Size: 1]
	SolarBotUseSniperPosConfig SniperPosConfig;//[Offset: 0x188, Size: 1]
	enum[] PreferPickHeroTypes;//[Offset: 0x1a8, Size: 1]
	BehaviorTree* BattleSubTree;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: SolarBotConfigSection.Object
	GameplayTag SectionTag;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarBotBattleConfig
	BotFireConfig DefaultFireConfig;//[Offset: 0x0, Size: 1]
	BotFireConfig FireConfigToBot;//[Offset: 0x10, Size: 1]
	<enum,BotFireConfig> WeaponFireConfigs;//[Offset: 0x20, Size: 1]
	<enum,BotFireConfig> WeaponFireConfigsToBot;//[Offset: 0x70, Size: 1]
	BotFireConfig VehicleFireConfig;//[Offset: 0xc0, Size: 1]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0xd0, Size: 1]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	float DamageFactorToVehicle;//[Offset: 0xe4, Size: 1]
	float DamageFactorToBotVehicle;//[Offset: 0xe8, Size: 1]
	float DamageFactorToSummonItem;//[Offset: 0xec, Size: 1]
	float DamageFactorToBotSummonItem;//[Offset: 0xf0, Size: 1]
	float BotAIAttackRange;//[Offset: 0xf4, Size: 1]
	float BotAIAttackRangeUnArm;//[Offset: 0xf8, Size: 1]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x100, Size: 1]

--------------------------------
Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 1]
	float HitRate;//[Offset: 0x4, Size: 1]
	float ActiveDamageRate;//[Offset: 0x8, Size: 1]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SolarBotShootConfig
	enum FirePolicy;//[Offset: 0x0, Size: 1]
	float FollowInterpSpeed;//[Offset: 0x4, Size: 1]
	float AntiHorizRecoilStrenghth;//[Offset: 0x8, Size: 1]
	float AntiVertRecoilStrenghth;//[Offset: 0xc, Size: 1]
	float LockHeightOffset;//[Offset: 0x10, Size: 1]
	float AimInterpSpeed;//[Offset: 0x14, Size: 1]
	float MaxFollowDeltaAngle;//[Offset: 0x18, Size: 1]
	float MaxPreciseMoveAngle;//[Offset: 0x1c, Size: 1]
	float RoughMoveMaxAngle;//[Offset: 0x20, Size: 1]
	float FollowMoveSpeed;//[Offset: 0x24, Size: 1]
	float PreciseMoveSpeed;//[Offset: 0x28, Size: 1]
	float RoughMoveSpeed;//[Offset: 0x2c, Size: 1]
	float LockMoveSpeed;//[Offset: 0x30, Size: 1]
	float PreciseMoveDeviationYaw;//[Offset: 0x34, Size: 1]
	float PreciseMoveDeviationPitch;//[Offset: 0x38, Size: 1]
	float RoughMoveDeviationYaw;//[Offset: 0x3c, Size: 1]
	float RoughMoveDeviationPitch;//[Offset: 0x40, Size: 1]
	float LockMoveMaxDeltaYaw;//[Offset: 0x44, Size: 1]
	float LockMoveMaxDeltaPitch;//[Offset: 0x48, Size: 1]
	float RoughMoveReactionTime;//[Offset: 0x4c, Size: 1]
	float PreciseMoveReactionTime;//[Offset: 0x50, Size: 1]
	float MaxFollowUnreachTime;//[Offset: 0x54, Size: 1]

--------------------------------
Class: SolarBotUseSniperPosConfig
	int MinNumSpawnerHasSearched;//[Offset: 0x0, Size: 1]
	float MinElapsedReachedZone;//[Offset: 0x4, Size: 1]
	float MinEnemyDistance;//[Offset: 0x8, Size: 1]
	int MinNumBeHitAbandonPos;//[Offset: 0xc, Size: 1]
	int MaxDurationOccupyPos;//[Offset: 0x10, Size: 1]
	float MaxDurationReachedPos;//[Offset: 0x14, Size: 1]
	float IntervalUseNextPos;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarBotConfigSection_Loot.SolarBotConfigSection.Object
	SolarBotLootValuationConfig ValuationConfig;//[Offset: 0x30, Size: 1]
	SolarBotLootSearchConfig SearchConfig;//[Offset: 0x74, Size: 1]
	SolarBotLootWeaponFeedConfig WeaponFeedConfig;//[Offset: 0xb8, Size: 1]
	BehaviorTree* LootSubTree;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: SolarBotLootSearchConfig
	float HPRatioToUseMedicine;//[Offset: 0x0, Size: 1]
	float ShieldRatioToRecharge;//[Offset: 0x4, Size: 1]
	float MaxSearchRangeNearbyPlayer;//[Offset: 0x8, Size: 1]
	float MinSearchRangeNearbyPlayer;//[Offset: 0xc, Size: 1]
	float RadiusTolerance;//[Offset: 0x10, Size: 1]
	Vector2D NearbyEnemyOuterFactorRange;//[Offset: 0x14, Size: 1]
	Vector2D NearbyEnemyInnerFactorRange;//[Offset: 0x1c, Size: 1]
	Vector2D NearbyEnemyCountRange;//[Offset: 0x24, Size: 1]
	Vector2D NearbySpawnerOuterFactorRange;//[Offset: 0x2c, Size: 1]
	Vector2D NearbySpawnerInnerFactorRange;//[Offset: 0x34, Size: 1]
	Vector2D NearbySpawnerCountRange;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SolarBotLootWeaponFeedConfig
	float MaxNoWeaponTime;//[Offset: 0x0, Size: 1]
	int[] FeedWeaponIDs;//[Offset: 0x8, Size: 1]
	float CheckPlayerSightInterval;//[Offset: 0x18, Size: 1]
	bool bStartFeedAfterSearchedAnySpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: SolarBotConfigSection_Perception.SolarBotConfigSection.Object
	SolarBotThreatConfig ThreatConfig;//[Offset: 0x30, Size: 1]
	<enum,SolarBotThreatConfig> WPSpecificThreatConfig;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 1]
	float SightRadius;//[Offset: 0x50, Size: 1]
	float LoseSightRadius;//[Offset: 0x54, Size: 1]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 1]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 1]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 1]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x148, Size: 1]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x14c, Size: 1]
	double MaxTimeSlicePerTick;//[Offset: 0x150, Size: 1]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x158, Size: 1]
	float MaxQueryImportance;//[Offset: 0x160, Size: 1]
	float SightLimitQueryImportance;//[Offset: 0x164, Size: 1]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 1]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x80, Size: 1]
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x41404e0

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 1]
	Vector HitLocation;//[Offset: 0x10, Size: 1]
	Actor* DamagedActor;//[Offset: 0x20, Size: 1]
	Actor* Instigator;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 1]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 1]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 1]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 1]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x4153e10
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x4153d10
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x4153c70
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x4153bd0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 1]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 1]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 1]
	Object* Instigator;//[Offset: 0x40, Size: 1]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 1]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x204af70
	void Finish(byte WithResult);// 0x4153a40
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x41537e0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 1]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 1]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 1]
	float TravelCostOverride;//[Offset: 0x8, Size: 1]
	float EnteringCostOverride;//[Offset: 0xc, Size: 1]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: BotBonusDropConfig
	float ActiveTime;//[Offset: 0x0, Size: 1]
	float DeactiveTime;//[Offset: 0x4, Size: 1]
	int NumOfAmmo;//[Offset: 0x8, Size: 1]
	int KitId;//[Offset: 0xc, Size: 1]
	int NumOfKit;//[Offset: 0x10, Size: 1]
	int NumOfElectricity;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarBotShootSimulater.Object
	SolarBotAIController* OwnerController;//[Offset: 0x28, Size: 1]
	Actor* LockedTargetActor;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	float MinDetectInterval;//[Offset: 0x2a4, Size: 1]
	uint32 MaxDetectIteration;//[Offset: 0x2a8, Size: 1]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2ac, Size: 1]
	float MinZDiffDetectUndergroud;//[Offset: 0x2b8, Size: 1]
	float AgentSwimingHalfHeightPct;//[Offset: 0x2bc, Size: 1]
	float AgentNormalHalfHeightPct;//[Offset: 0x2c0, Size: 1]
	float ReachTestCheckAngleWV;//[Offset: 0x2c4, Size: 1]
	float MinSpeedLastSegmentWV;//[Offset: 0x2c8, Size: 1]
	float TurningSpeedWV;//[Offset: 0x2cc, Size: 1]
	float TurningSteeringThresholdWV;//[Offset: 0x2d0, Size: 1]
	float BlockDetectionDistanceCharacter;//[Offset: 0x2d4, Size: 1]
	float BlockDetectionDistanceVehicle;//[Offset: 0x2d8, Size: 1]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	SolarVehiclePawn* VehicleActor;//[Offset: 0x328, Size: 1]
	float SensorTraceDistance;//[Offset: 0x33c, Size: 1]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float RightSensorAlpha;//[Offset: 0x344, Size: 1]
	float CentralSensorAlpha;//[Offset: 0x348, Size: 1]
	float LeftSensorAlpha;//[Offset: 0x34c, Size: 1]
	float SteeringAngle;//[Offset: 0x350, Size: 1]
	float VehicleSteeringSensitivity;//[Offset: 0x354, Size: 1]
	float BrakingForce;//[Offset: 0x358, Size: 1]
	float DecelerationDistance;//[Offset: 0x35c, Size: 1]
	float VehicleDecelerationSpeed;//[Offset: 0x360, Size: 1]
	float VehicleTurningSpeed;//[Offset: 0x364, Size: 1]
	float CheckReverseDistance;//[Offset: 0x368, Size: 1]
	float HoverCheckBlockSpeed;//[Offset: 0x36c, Size: 1]
	float WheeledCheckBlockSpeed;//[Offset: 0x370, Size: 1]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x374, Size: 1]
	float CheckBlockTime;//[Offset: 0x37c, Size: 1]
	int TryReverseTimes;//[Offset: 0x388, Size: 1]
	float TryReverseDurationTime;//[Offset: 0x38c, Size: 1]
	float SolveBlockGoFrontTime;//[Offset: 0x398, Size: 1]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	void SetVehicle(Actor* VehicleActorIn);// 0x2140900
	void OnUpdatedCharacterMovementModeChanged(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x21403c0
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x21402e0

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x268, Size: 1]
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 1]
	void SuspendCrowdSteering(bool bSuspend);// 0x414d0a0

--------------------------------
Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 1]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 1]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 1]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 1]
	SoftObjectPath ShieldRes;//[Offset: 0x90, Size: 1]
	SoftObjectPath InvincibleMAT;//[Offset: 0xa8, Size: 1]
	SoftClassPath AnimBPRes;//[Offset: 0xc0, Size: 1]
	<GameplayTag,StaticMeshOrnamentConfig> StaticMeshOrnamentsConfig;//[Offset: 0xd8, Size: 1]
	<GameplayTag,SkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig;//[Offset: 0x128, Size: 1]
	<GameplayTag,ChildActorOrnamentConfig> ChildActorOrnamentsConfig;//[Offset: 0x178, Size: 1]
	<GameplayTag,StaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig();// 0x20340c0
	SoftObjectPath GetSkinRes();// 0x2034090
	SoftObjectPath GetSkinIcon();// 0x2034060
	<GameplayTag,SkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig();// 0x2033fc0
	SoftObjectPath GetInvincibleMAT();// 0x2033e70
	<GameplayTag,ChildActorOrnamentConfig> GetChildActorOrnamentsConfig();// 0x2033d80
	SoftObjectPath GetCharaSkinRes();// 0x2033d50
	SoftObjectPath GetAnimBPRes();// 0x2033d20

--------------------------------
Class: StaticMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 1]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 1]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 1]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 1]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SkeletalMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 1]
	SoftClassPath OrnamentABPRes;//[Offset: 0x18, Size: 1]
	FName OrnamentAttachSocket;//[Offset: 0x30, Size: 1]
	Transform OrnamentRelativeTransform;//[Offset: 0x40, Size: 1]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x70, Size: 1]
	FName[] OrnamentComponentTags;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ChildActorOrnamentConfig
	SoftClassPath OrnamentRes;//[Offset: 0x0, Size: 1]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 1]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 1]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 1]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarUAVRescue.SolarUAV.SummonItemBase.Pawn.Actor.Object
	enum NewState;//[Offset: 0x479, Size: 1]
	AnimationAsset* SuspendAnim_Active_NotWork;//[Offset: 0x480, Size: 1]
	AnimationAsset* SuspendAnim_Active_Work;//[Offset: 0x488, Size: 1]
	AnimationAsset* SuspendAnim_Deactive;//[Offset: 0x490, Size: 1]
	AnimationAsset* ActiveAnim;//[Offset: 0x498, Size: 1]
	AnimationAsset* DeactiveAnim;//[Offset: 0x4a0, Size: 1]
	AnimationAsset* BeginWorkAnim;//[Offset: 0x4a8, Size: 1]
	AnimationAsset* EndWorkAnim;//[Offset: 0x4b0, Size: 1]
	AnimationAsset* ExplodeAnim;//[Offset: 0x4b8, Size: 1]
	ParticleSystem* ActiveEffect;//[Offset: 0x4c0, Size: 1]
	ParticleSystem* AppearBeginEffect;//[Offset: 0x4c8, Size: 1]
	FName AppearBeginEffectSocket;//[Offset: 0x4d0, Size: 1]
	ParticleSystem* JetEffect;//[Offset: 0x4d8, Size: 1]
	FName JetEffectSocket;//[Offset: 0x4e0, Size: 1]
	Transform JetEffectTrans;//[Offset: 0x4f0, Size: 1]
	ParticleSystem* ActiveLoopEffect;//[Offset: 0x520, Size: 1]
	ParticleSystem* ChaActiveEffect;//[Offset: 0x528, Size: 1]
	ParticleSystem* ExplodeEffect;//[Offset: 0x530, Size: 1]
	ParticleSystem* DeathVergeEffect;//[Offset: 0x538, Size: 1]
	FName ChaActiveEffectSocket;//[Offset: 0x540, Size: 1]
	float AppearEffectLength;//[Offset: 0x548, Size: 1]
	MaterialInstance* MatAppearing;//[Offset: 0x550, Size: 1]
	MatAppearingData[] MatAppearingData;//[Offset: 0x558, Size: 1]
	MaterialInstance* MatAppearEndBody;//[Offset: 0x568, Size: 1]
	MaterialInstance* MatAppearEndEye;//[Offset: 0x570, Size: 1]
	FString BeginSound;//[Offset: 0x578, Size: 1]
	FString EndSound;//[Offset: 0x588, Size: 1]
	FString ActiveChaSound;//[Offset: 0x598, Size: 1]
	FString ActiveAnimSound;//[Offset: 0x5a8, Size: 1]
	FString BeginActiveLoopSound;//[Offset: 0x5b8, Size: 1]
	FString EndActiveLoopSound;//[Offset: 0x5c8, Size: 1]
	FString DeactiveAnimSound;//[Offset: 0x5d8, Size: 1]
	FString ExplodeSound;//[Offset: 0x5e8, Size: 1]
	FString BeginDeathVergeLoopSound;//[Offset: 0x5f8, Size: 1]
	FString EndDeathVergeLoopSound;//[Offset: 0x608, Size: 1]
	float ChaSpeedThreshold;//[Offset: 0x618, Size: 1]
	float RotateSpeed;//[Offset: 0x61c, Size: 1]
	float YawOffset;//[Offset: 0x620, Size: 1]
	CurveFloat* ActivatingScaleCurve;//[Offset: 0x628, Size: 1]
	CurveFloat* DeactivatingScaleCurve;//[Offset: 0x630, Size: 1]
	CurveFloat* TargetSpeedByDistance;//[Offset: 0x638, Size: 1]
	float Acceleration;//[Offset: 0x640, Size: 1]
	float MaxDistance;//[Offset: 0x644, Size: 1]
	Vector DefaultLocationOffset;//[Offset: 0x654, Size: 1]
	float TargetLocationOffsetSpeed;//[Offset: 0x660, Size: 1]
	float ActiveDuration;//[Offset: 0x688, Size: 1]
	float ActiveEffectLength;//[Offset: 0x68c, Size: 1]
	float DeathVergeHealthThreshold;//[Offset: 0x690, Size: 1]
	SoftObjectPath UAVIcon;//[Offset: 0x698, Size: 1]
	ParticleSystemComponent* DeathVergeEffectHandle;//[Offset: 0x6c0, Size: 1]
	ParticleSystemComponent* ActiveLoopEffectHandle;//[Offset: 0x6c8, Size: 1]
	bool bFollowCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool bAppearEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d3, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	bool bPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	bool bExplodeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f2, Size: 1]
	float HealTickInterval;//[Offset: 0x718, Size: 1]
	float HealHealthAmount;//[Offset: 0x71c, Size: 1]
	float HealShieldAmount;//[Offset: 0x720, Size: 1]
	ParticleSystem* HealLineEffect;//[Offset: 0x728, Size: 1]
	FName HealMeshSocket;//[Offset: 0x730, Size: 1]
	FString BeginHealSound;//[Offset: 0x738, Size: 1]
	FString BeginHealLoopSound;//[Offset: 0x748, Size: 1]
	FString EndHealSound;//[Offset: 0x758, Size: 1]
	FString EndHealLoopSound;//[Offset: 0x768, Size: 1]
	FString BeginHealHPLoopSound;//[Offset: 0x778, Size: 1]
	FString EndHealHPLoopSound;//[Offset: 0x788, Size: 1]
	FString BeginHealShieldLoopSound;//[Offset: 0x798, Size: 1]
	FString EndHealShieldLoopSound;//[Offset: 0x7a8, Size: 1]
	ParticleSystemComponent* HealLineEffectHandle;//[Offset: 0x7b8, Size: 1]
	ParticleSystem* RescueEffect;//[Offset: 0x7c8, Size: 1]
	ParticleSystem* RescueEffect_Enermy;//[Offset: 0x7d0, Size: 1]
	Transform RescueEffectTransform;//[Offset: 0x7e0, Size: 1]
	FName RescueMeshSocket;//[Offset: 0x810, Size: 1]
	float RescueTime;//[Offset: 0x818, Size: 1]
	bool bCheckRescueBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 1]
	float CheckRescueBlockInteval;//[Offset: 0x820, Size: 1]
	FString BeginRescueLoopSound;//[Offset: 0x828, Size: 1]
	FString EndRescueLoopSound;//[Offset: 0x838, Size: 1]
	FString CompleteRescueSound;//[Offset: 0x848, Size: 1]
	ParticleSystemComponent* RescueEffectHandle;//[Offset: 0x858, Size: 1]
	MaterialInstanceDynamic* MatInstanceAppearingBody;//[Offset: 0x870, Size: 1]
	MaterialInstanceDynamic* MatInstanceAppearingEye;//[Offset: 0x878, Size: 1]
	bool bNavigateToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	float RecordInterval;//[Offset: 0x884, Size: 1]
	float NavigateInterval;//[Offset: 0x888, Size: 1]
	float BeginNavigateDistance;//[Offset: 0x88c, Size: 1]
	float EndNavigateDistance;//[Offset: 0x890, Size: 1]
	class GameplayEffect* UAVHealBuffGameplayEffect;//[Offset: 0x8c0, Size: 1]
	class GameplayEffect* UAVRescueGameplayEffect;//[Offset: 0x8c8, Size: 1]
	void TickRescue(float DeltaTime);// 0x22c7130
	void TickNavigate(float DeltaTime);// 0x22c70a0
	void TickHeal(float DeltaTime);// 0x22c7010
	void ServerSetRescueBlocked(bool bBlocked);// 0x22c69d0
	void OnRescueComplete();// 0x22c64b0
	void OnRep_NewState();// 0x22c6490
	void OnRep_Active();// 0x22c6470
	void OnCheckUAVInvisible(const GameplayTag Tag, int NewCount);// 0x22c6380
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x22c62b0
	void OnCharacterDeathVergeStatusTag(const GameplayTag Tag, int NewCount);// 0x22c6110
	void OnCharacterDeathStatusTag(const GameplayTag Tag, int NewCount);// 0x22c6040
	float GetRescueTime();// 0x22c5980

--------------------------------
Class: SolarUAV.SummonItemBase.Pawn.Actor.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	float DebugLineThickness;//[Offset: 0x3e4, Size: 1]
	SkeletalMeshComponent* Mesh;//[Offset: 0x3e8, Size: 1]
	FName AttachCharacterSocketName;//[Offset: 0x3f0, Size: 1]
	AnimationAsset* AppearAnim;//[Offset: 0x3f8, Size: 1]
	float AppearAnimLength;//[Offset: 0x400, Size: 1]
	AnimationAsset* DisappearAnim;//[Offset: 0x408, Size: 1]
	float DisppearAnimLength;//[Offset: 0x410, Size: 1]
	bool bProbeCollisionConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float ProbeCollisionInterval;//[Offset: 0x424, Size: 1]
	float ProbeCollisionRadius;//[Offset: 0x428, Size: 1]
	float AvoidCollisionMaxHeight;//[Offset: 0x42c, Size: 1]
	float AvoidCollisionOverTime;//[Offset: 0x430, Size: 1]
	float AvoidCollisionCDTime;//[Offset: 0x434, Size: 1]
	void UAVDestroy();// 0x7c28c0
	void OnCharacterInVehicleTag(const GameplayTag Tag, int NewCount);// 0x22c61e0
	void Disappear();// 0x1571450

--------------------------------
Class: SummonItemBase.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 1]
	StaticMeshComponent* HPBar;//[Offset: 0x2b0, Size: 1]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2b8, Size: 1]
	SolarCharacter* SourceSummoner;//[Offset: 0x2bc, Size: 1]
	enum DeathReason;//[Offset: 0x2c4, Size: 1]
	float CurrentHealth;//[Offset: 0x2c8, Size: 1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float FunctionalTimerMax;//[Offset: 0x2d0, Size: 1]
	float FunctionalTimerDelta;//[Offset: 0x2d4, Size: 1]
	Vector CenterOffset;//[Offset: 0x2ec, Size: 1]
	GameplayEffectSpecHandle GEToSelfHandle;//[Offset: 0x2f8, Size: 1]
	GameplayEffectSpecHandle GEToTargetHandle;//[Offset: 0x308, Size: 1]
	float MaxHealth;//[Offset: 0x318, Size: 1]
	float ReducedHealth;//[Offset: 0x31c, Size: 1]
	float DelayDestroyTime;//[Offset: 0x320, Size: 1]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	bool bSuicideWithSummonerChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 1]
	float TimeDuration;//[Offset: 0x328, Size: 1]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool bEnableHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool bHPDefaultVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	FName HPBarTagName;//[Offset: 0x330, Size: 1]
	FName HPBarPercentName;//[Offset: 0x338, Size: 1]
	FName HPBarColorName;//[Offset: 0x340, Size: 1]
	LinearColor HPBarColorTeammate;//[Offset: 0x348, Size: 1]
	LinearColor HPBarColorEnemy;//[Offset: 0x358, Size: 1]
	int HPBarMaterialIndex;//[Offset: 0x368, Size: 1]
	Vector CenterLocationOffset;//[Offset: 0x36c, Size: 1]
	float DestroyDeathWithinSeconds;//[Offset: 0x378, Size: 1]
	bool bSupportAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	WeaponAssistAimTargetConfig AssistAimTargetConfig;//[Offset: 0x380, Size: 1]
	bool bCanAffectedByEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bShowDamageText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	SolarSpawnAdjustConfig* SpawnAdjustConfig;//[Offset: 0x3d0, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	void SwitchFunctionalTimer(bool InbEnable, float InMaxTime);// 0x22fd570
	void Suicide();// 0x22fd550
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x22fd3f0
	bool RequestPlaySound(out const FString[] InSoundData);// 0x22fd310
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x2649560
	void ReceiveUpdateFunctionalTimerEvent(float InTimerRate);// 0x2649560
	void ReceiveDeathEvent(enum InDeathReason);// 0x22fd090
	void OnSourceCharacterChange();// 0x15715d0
	void OnRep_Dead();// 0x22fd070
	void OnRep_CurrentHealth();// 0x22fd050
	bool IsDead();// 0x22fc3e0
	SolarCharacter* GetSourceSummoner();// 0x22fc370
	float GetMaxHealth();// 0x22fc340
	float GetCurrentHealth();// 0x22fc310
	class Object GetClassType();// 0x22fc2e0

--------------------------------
Class: WeaponAssistAimTargetConfig
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x0, Size: 1]
	Vector2D BaseFollowStopExtent;//[Offset: 0x8, Size: 1]
	BaseFollowExtentByTag[] BaseFollowExtentByTags;//[Offset: 0x10, Size: 1]
	Vector2D TargetVelocityFollowTriggerExtent;//[Offset: 0x20, Size: 1]
	Vector2D LockAimingExtent;//[Offset: 0x28, Size: 1]
	Vector2D GlobalSensitivityScaleTriggerExtent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: BaseFollowExtentByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 1]
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x50, Size: 1]
	Vector2D BaseFollowStopExtent;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SolarSpawnAdjustConfig.DataAsset.Object
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	byte[] AdjustBlockTypes;//[Offset: 0x38, Size: 1]
	Vector AdjustDetectBoxExtent;//[Offset: 0x48, Size: 1]
	Vector AdjustDetectBoxOffset;//[Offset: 0x54, Size: 1]
	bool bUseActorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AdjustVerticalDist;//[Offset: 0x64, Size: 1]
	float AdjustHorizonDist;//[Offset: 0x68, Size: 1]
	float AdjustFindStep;//[Offset: 0x6c, Size: 1]
	float TraceUpLength;//[Offset: 0x70, Size: 1]
	float TraceDownLength;//[Offset: 0x74, Size: 1]
	float TraceZOffset;//[Offset: 0x78, Size: 1]
	byte[] AdjustPlaceTypes;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MatAppearingData
	CurveFloat* MatCurve;//[Offset: 0x0, Size: 1]
	FName MatParam;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 1]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 1]

--------------------------------
Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 1]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString MsgDetail;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 1]
	byte TargetType;//[Offset: 0x4, Size: 1]
	uint32 VehicleID;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SkywardDiveLauncher.SummonItemBase.Pawn.Actor.Object
	SkeletalMeshComponent* GroundMesh;//[Offset: 0x3e0, Size: 1]
	BoxComponent* TriggerVolume;//[Offset: 0x3e8, Size: 1]
	float SpawnTimeConfig;//[Offset: 0x3f0, Size: 1]
	ParticleSystem* AvailableDeviceParticle;//[Offset: 0x3f8, Size: 1]
	ParticleSystem* SpawnBeamParticle;//[Offset: 0x400, Size: 1]
	FString SpawnSoundName;//[Offset: 0x408, Size: 1]
	AnimSequence* SpawnAnim;//[Offset: 0x418, Size: 1]
	LaunchDeviceInfo[] LauncherDeviceArray;//[Offset: 0x420, Size: 1]
	float CharacterLaunchPadHeightOffset;//[Offset: 0x430, Size: 1]
	float LowHealthPercentage;//[Offset: 0x434, Size: 1]
	ParticleSystem* LowHealthParticle;//[Offset: 0x438, Size: 1]
	ParticleSystem* DeathExplodeParticle;//[Offset: 0x440, Size: 1]
	FString DeathExplodeSoundName;//[Offset: 0x448, Size: 1]
	ParticleSystemComponent* SpawnBeamEffect;//[Offset: 0x458, Size: 1]
	ParticleSystemComponent* LowHealthEffect;//[Offset: 0x460, Size: 1]
	bool bNewlySpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	void OnTriggerVolumeOverlapedEnd(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x20bf9e0
	void OnTriggerVolumeOverlapedBegin(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x20bf7c0

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x558, Size: 1]
	float LineThickness;//[Offset: 0x564, Size: 1]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x3dec3d0
	Vector GetUnscaledBoxExtent();// 0x3debc20
	Vector GetScaledBoxExtent();// 0x3debbc0

--------------------------------
Class: LaunchDeviceInfo
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName LaunchPadLocSocketName;//[Offset: 0x4, Size: 1]
	FName PrepareEffectLocSocketName;//[Offset: 0xc, Size: 1]
	ParticleSystemComponent* AvailableDeviceEffect;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CharacterTagListenerForOrnamentComp
	<OrnamentCompAndVisibilityConfigPair> OrnamentCompPairs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OrnamentCompAndVisibilityConfigPair
	SceneComponent* OrnamentComp;//[Offset: 0x0, Size: 1]
	OrnamentComponentVisibilityConfig* VisibilityConfig;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OrnamentComponentVisibilityConfig.DataAsset.Object
	GameplayTagRequirements VisibleTagRequirements;//[Offset: 0x30, Size: 1]
	GameplayTag VisibilityFlagTag;//[Offset: 0x80, Size: 1]
	GameplayTagRequirements GetVisibleTagRequirements();// 0x2088290
	GameplayTag GetVisibilityFlagTag();// 0x2088270

--------------------------------
Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb0, Size: 1]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x100, Size: 1]
	<int,float> ClientAttributeSubValues;//[Offset: 0x110, Size: 1]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x20d3840
	void OnRep_AttributeSubRepDatas();// 0x20d3770
	void OnAttributeSubChanged();// 0x20d3580
	float GetValue(int AttributeSubID);// 0x20d2fc0
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x20d2f00
	static SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x20d2e70
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x20d2970

--------------------------------
Class: SolarAttributeSubSystem.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 1]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 1]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, const float Damage);// 0xb43660
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0xb43660

--------------------------------
Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 1]
	float MaxValue;//[Offset: 0x4, Size: 1]
	float BaseValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarAttributeSubModifierGroup.Object

--------------------------------
Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 1]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 1]
	int AttributeID;//[Offset: 0x50, Size: 1]
	float CurrentValue;//[Offset: 0x54, Size: 1]
	float MaxValue;//[Offset: 0x58, Size: 1]
	float MinValue;//[Offset: 0x5c, Size: 1]
	float BaseValue;//[Offset: 0x60, Size: 1]
	void OnModifierChanged();// 0x20d3750

--------------------------------
Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 1]
	float AttributeValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x228, Size: 1]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x230, Size: 1]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x238, Size: 1]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x240, Size: 1]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x250, Size: 1]
	float OriginScale;//[Offset: 0x264, Size: 1]
	bool bEnableMeshEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x270, Size: 1]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x278, Size: 1]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x280, Size: 1]
	FString AssemblingId;//[Offset: 0x2d8, Size: 1]
	FName KnapsackFlySoundName;//[Offset: 0x2e8, Size: 1]
	FName StartKnapsackLandingSoundName;//[Offset: 0x2f0, Size: 1]
	FName StopKnapsackLandingSoundName;//[Offset: 0x2f8, Size: 1]
	FName StartWallRunSoundName;//[Offset: 0x300, Size: 1]
	FName StopWallRunSoundName;//[Offset: 0x308, Size: 1]
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x20d3a00
	void RefreshActorEffect();// 0x20d3820
	void OnMeshEffectFactorChange();// 0x2649560
	void OnChildPSCompPreActive(ParticleSystemComponent* PSComponent);// 0x20d36c0
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x20d3630
	bool IsFly();// 0x20d30e0
	bool IsCharging();// 0x20d30b0
	bool HasEnergy();// 0x20d3060
	float GetBackpackOrginScale();// 0x20d2f30

--------------------------------
Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x630, Size: 1]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x640, Size: 1]
	SolarCharacter* SolarCharacter;//[Offset: 0x690, Size: 1]
	SolarBackpackActor* BackPackActor;//[Offset: 0x698, Size: 1]

--------------------------------
Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x231cc90
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x231cb30

--------------------------------
Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 1]
	int EndFrame;//[Offset: 0x4, Size: 1]
	float Length;//[Offset: 0x8, Size: 1]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SolarBackpackSFX.Actor.Object
	void OnPropellingModeChanged(enum PropellingMode);// 0x2649560
	ParticleSystemComponent* GetTrailEffectComponent();// 0x20de080
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x20dd120
	void BackpackSFXEnd();// 0x1570d30
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x20dd040

--------------------------------
Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int PropellingCounter;//[Offset: 0x4, Size: 1]
	byte JetType;//[Offset: 0x8, Size: 1]
	bool bCheckGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 1]
	Object* Target;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 1]
	float TempReqTime;//[Offset: 0xd4, Size: 1]
	float RequestTimeout;//[Offset: 0xd8, Size: 1]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe0, Size: 1]
	SolarCharacter*[] NearByDeathVergeTeamMates;//[Offset: 0xe8, Size: 1]
	void TryRescueClosestTeammateLuaCall();// 0xb43660
	void TryRescueClosestTeammate();// 0x22b9830
	void ShowTeamRescueToUI(bool IsShow);// 0x2649560
	void SetRescueBtnVisibility(bool bIsVisible);// 0x22b9220
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x22b8840
	void ReqCancelTeamRescure();// 0x22b8820
	void OnRescueStateChangeInternal();// 0xb43660
	void OnRescueStateChange();// 0x22b8770
	void DetectRescueTeammate(float DeltaTime);// 0x22b7c90
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x22b7b30

--------------------------------
Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb0, Size: 1]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x2198c30
	void OnPlayerBackpackItemUpdate();// 0x2197af0
	bool CanUseMedicine();// 0x21945d0

--------------------------------
Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x560, Size: 1]
	float PickUpHighlyThresholdFactor;//[Offset: 0x570, Size: 1]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x578, Size: 1]
	SolarPickupHandlerBase* NormalPickupHandler;//[Offset: 0x5c8, Size: 1]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x5d4, Size: 1]
	ActorArrayMap NormalPickupItems;//[Offset: 0x5e8, Size: 1]
	Actor*[] ProccessedList;//[Offset: 0x638, Size: 1]
	Actor*[] SortedPickupActors;//[Offset: 0x648, Size: 1]
	bool bPickupListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bPickupListCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	UIManager* UIManager;//[Offset: 0x660, Size: 1]
	SolarItemManager* ItemManager;//[Offset: 0x668, Size: 1]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c2, Size: 1]
	float UnAutoPickupItemTime;//[Offset: 0x6c4, Size: 1]
	float AutoPickupTime;//[Offset: 0x6c8, Size: 1]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 1]
	bool bPickupCheckBoxOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	TimerHandle AutoPickupTimer;//[Offset: 0x6f0, Size: 1]
	MulticastInlineDelegateProperty OnItemDataSet;//[Size: 1]
	MulticastInlineDelegateProperty UpdateCheckBoxesVisibility;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateCheckBoxesHighLight;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateCheckBoxesStates;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupListClear;//[Size: 1]
	MulticastInlineDelegateProperty OnTogglePickupList;//[Size: 1]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	float DelayedDisplayTime;//[Offset: 0x78c, Size: 1]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x790, Size: 1]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x798, Size: 1]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x7a0, Size: 1]
	FString[] FireResultMsgs;//[Offset: 0x7a8, Size: 1]
	DeathTreasureBox*[] NearByDeathboxes;//[Offset: 0x7c8, Size: 1]
	DeathTreasureBox* NearestResurrectBox;//[Offset: 0x7d8, Size: 1]
	bool LastResurrecteBtnVisbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	float CheckResurrectInterval;//[Offset: 0x7e4, Size: 1]
	float TempResurrectInterval;//[Offset: 0x7e8, Size: 1]
	float CheckStopResurrectInterval;//[Offset: 0x7ec, Size: 1]
	float TempStopResurrectInterval;//[Offset: 0x7f0, Size: 1]
	int PickupRecommendPriority;//[Offset: 0x7f8, Size: 1]
	<enum,int> ItemPriorityMap;//[Offset: 0x800, Size: 1]
	<enum,int> ItemMutiPickupMap;//[Offset: 0x850, Size: 1]
	<enum,int> WeaponPartPriorityMap;//[Offset: 0x8a0, Size: 1]
	<int,int> WeaponPartIDPriorityMap;//[Offset: 0x8f0, Size: 1]
	Actor* PendingFirstItemActor;//[Offset: 0x940, Size: 1]
	void UpdateResurrection(const float InDeltaTime);// 0x21b7850
	void UpdateItemUI(bool bForce);// 0x21b77c0
	void UpdateCheckboxSwitches(const bool InPickupOpen);// 0x21b7730
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x21b7620
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData);// 0x21b74e0
	void TryPickupItem(Actor* PickActor);// 0x21b7450
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x21b73b0
	void TryClearDirtyData(const bool bForce);// 0x21b7320
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x21b7280
	void TogglePickupList(const bool InVisibility);// 0x21b71f0
	void StopListenFireInput(bool bIsInstantlyStop);// 0x21b7160
	void StopAutoPickupTimer();// 0x21b7140
	void StartListenFireInput();// 0x21b7120
	void StartAutoPickupTimer();// 0x21b7100
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x21b7060
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x21b6f40
	void SetPickupSwitchInLua(const bool IsOpen);// 0x2649560
	void SetPickupSwitch(const bool IsOpen);// 0x21b6eb0
	void SetPickupListVisibility(const bool InVisibility);// 0x21b6e20
	void SetPickupCapsuleSize(out const Vector Size);// 0x21b6d90
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x21b6c00
	void RestartPickupTimer();// 0x21b6be0
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup);// 0x21b6b10
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType, bool bSorted);// 0x21b6930
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x21b6820
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x21b6790
	void RemoveNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x21b6700
	void RefreshResurrectBtn();// 0x21b66c0
	void RefreshPickupTimer();// 0x21b66a0
	void RefreshItemUI();// 0x21b6680
	void RecheckPendingActors();// 0x21b6660
	void ReceiveFireResult(FString InFireResultMsg);// 0x21b65c0
	void ProcessFireResultMsgs();// 0x21b6360
	void OnWeaponUpgrade(SolarPlayerWeapon* InWeapon);// 0x21b6230
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x21b6160
	void OnUsingSkillStatusChanged();// 0x21b6140
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x21b6030
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x21b5f60
	void OnPickupSettingChanged();// 0x21b5a10
	void OnPickupConfirmHandle();// 0x21b59f0
	void OnPickupActorEnd(Actor* ItemActor);// 0x21b5960
	void OnPickupActorBegin(Actor* ItemActor);// 0x21b58d0
	void OnEquipChanged();// 0x21b58b0
	void OnCharacterDeathBegin();// 0x21b5870
	void OnActorDestroyed(Actor* Actor);// 0x21b55f0
	void MarkDirtyForTick();// 0x21b55d0
	bool IsValidItemActor(const Actor* ItemActor);// 0x21b54a0
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x21b5350
	bool IsEquipItem(const enum InType);// 0x21b50e0
	bool IsCharacterInAir();// 0x21b50b0
	void InitPickupPriorityMaps();// 0x21b5090
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x21b4f20
	int GetPickupWeaponPartTypePriority(out const SolarItemData InItemData);// 0x21b4d80
	int GetPickupTypePriority(const enum InItemType);// 0x21b4ce0
	Actor* GetPickupTreasureBoxActor();// 0x21b4cb0
	int GetPickupPriority(out const SolarItemData InItemType);// 0x21b4bb0
	DeathTreasureBox* GetNearestResurrectBox();// 0x21b4b80
	<int,ActorArray> GetItemDataMap();// 0x21b4a90
	int GetItemDataCount(enum PickupItemType);// 0x21b4a00
	bool GetIsGlobalPickup();// 0x21b49d0
	bool GetIsAutoPickupHomeItems();// 0x2106880
	void DoStopOpeningAirDropBox();// 0x21b48c0
	void DoOpenAirDropBox();// 0x21b48a0
	void DetectNearestResurrectTarget();// 0x21b4880
	void CloseItemUI();// 0x21b4860
	void ClearAutoShowPickupListHandle();// 0x21b47b0
	void ClearAllTimer();// 0x21b4790
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x21b46a0
	bool CheckIsItemMaximizing(const int ItemID);// 0x21b4600
	bool CanResurrectOwner(DeathTreasureBox* InDeathBox, out float OutDistance);// 0x21b4520
	bool CanMutiAutoPickup(const enum InItemType);// 0x21b4480
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x21b43f0
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x21b4360
	void CallHUDSetActiveResurrectBtn(const bool Inactive);// 0x21b42d0
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x21b4240
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x21b41b0
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x21b4120
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x21b4090
	void AddNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x21b4000

--------------------------------
Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 1]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 1]
	<int,Actor*> SpawnedActors;//[Offset: 0x38, Size: 1]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0xd8, Size: 1]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0xe8, Size: 1]
	SolarVehicleSpawner*[] VehicleSpawners;//[Offset: 0xf8, Size: 1]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0x158, Size: 1]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0x1a8, Size: 1]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x1f8, Size: 1]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x248, Size: 1]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x298, Size: 1]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x2e8, Size: 1]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x338, Size: 1]
	<int,int> AirDropChestIndexMap;//[Offset: 0x388, Size: 1]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x3d8, Size: 1]
	<int,int> MaxPileMap;//[Offset: 0x428, Size: 1]
	RandomStream ItemStream;//[Offset: 0x478, Size: 1]
	float DelaySpawnTime;//[Offset: 0x480, Size: 1]
	FString[] SubLevelNames;//[Offset: 0x488, Size: 1]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x4a0, Size: 1]
	float DelayInitSpawnerTime;//[Offset: 0x4a8, Size: 1]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x4b0, Size: 1]
	float SpawnLoopInterval;//[Offset: 0x4b8, Size: 1]
	float SpawnMinDisSquared;//[Offset: 0x4bc, Size: 1]
	float SpawnMaxHeightOffset;//[Offset: 0x4c0, Size: 1]
	float ChestSpawnMinDisSquared;//[Offset: 0x4c4, Size: 1]
	float VehicleSpawnMinDisSquared;//[Offset: 0x4c8, Size: 1]
	DataTable* ItemResReferenceTable;//[Offset: 0x4d0, Size: 1]
	FString ItemResReferenceTablePath;//[Offset: 0x4d8, Size: 1]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	int FirstSpawnerIndex;//[Offset: 0x524, Size: 1]
	int FirstTBoxIndex;//[Offset: 0x528, Size: 1]
	int FirstAirDropIndex;//[Offset: 0x52c, Size: 1]
	int FirstVehicleIndex;//[Offset: 0x530, Size: 1]
	int ChestKeyCode;//[Offset: 0x534, Size: 1]
	int Level1OutcomeID;//[Offset: 0x538, Size: 1]
	int Level2OutcomeID;//[Offset: 0x53c, Size: 1]
	int Level3OutcomeID;//[Offset: 0x540, Size: 1]
	<int,enum> ItemID2Types;//[Offset: 0x638, Size: 1]
	int64 ThisIdRefCount;//[Offset: 0x688, Size: 1]
	int64 ServerNowSeconds;//[Offset: 0x690, Size: 1]
	FString RootActorBpPath;//[Offset: 0x698, Size: 1]
	float CheckDropRadius;//[Offset: 0x6a8, Size: 1]
	float CheckDropHeight;//[Offset: 0x6ac, Size: 1]
	float DropLineTraceLength;//[Offset: 0x6b0, Size: 1]
	float DropUnitOffset;//[Offset: 0x6b4, Size: 1]
	SolarMapManager* MapManager;//[Offset: 0x6b8, Size: 1]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x6c0, Size: 1]
	AirDropTreasureBox*[] AirDropsList;//[Offset: 0x780, Size: 1]
	DeathTreasureBox*[] DeathTreasureBoxList;//[Offset: 0x790, Size: 1]
	void UpdateItemParams();// 0x2198c10
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos);// 0x2198b30
	void SplitBurstItems(const SolarItemData Source, out SolarItemData[] SplitedPile);// 0x2198960
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn, SolarCharacter* SummonCharacter, const float InSpawnDelay, const float InStartHeight);// 0x21986a0
	void SpawnMutipleItems(SolarCharacter* InCharacter, const int InItemID, const int InPerCount, const int InTotalCount);// 0x2198540
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x2198420
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x21982a0
	SolarItemData SpawnItemData(int ItemID);// 0x2198190
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x2197e40
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x2197c90
	void ResetThisID();// 0x2197c70
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x2197ba0
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x2197b10
	void OnCustomGameStateChanged(const enum InNewState);// 0x2197a70
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans, SolarCharacter* InCharacter, const float InSpawnDelay, const float InStartHeight);// 0x2197660
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x2197400
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x2197210
	void OnAsyncLoadDeathBoxComplete(class Object DeathBoxClass, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x2196de0
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x2196b00
	void NotifySpawnerDestroy();// 0x8f2720
	void NotifyAvailableAirDropsNumChanged();// 0x2196ae0
	void NotifyAirDropOpened();// 0x2196ac0
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x21969f0
	void NetRunVehicleSpawn(enum InSpawnStage);// 0x2196970
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x2196810
	void NetRunGlobalDrop();// 0x21967f0
	void NetRunDrop(const enum InSpecifiedStage);// 0x2196770
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x21964e0
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x21963c0
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x2196210
	void LoadSpawnerLevelComplete();// 0x21961f0
	void LoadItemSpawnerLevels();// 0x21961d0
	bool IsPosBlocked(out const Vector CheckPos);// 0x2196130
	bool IsInSafeArea(out const Vector Location);// 0x2196090
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x2195fa0
	void InitWeaponLevel(out SolarItemData InItemData);// 0x2195eb0
	void InitVehicleSpawnGroupData(out <int,int> VehicleGroupIdToNum);// 0x2195d30
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x2195c40
	int64 IncreaseThisID();// 0x2195c10
	int GetVehicleIDBySingleSpawnId(const int SpawnID);// 0x2195b70
	int GetVehicleIDByGroupIDAndIndex(int groupid, int GroupIndex);// 0x2195aa0
	int GetVehicleIDByCustomRandomData();// 0x2195a70
	static int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x21959e0
	static SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x2195910
	int GetServerNowSeconds();// 0x21958e0
	int GetRankSeasonID();// 0xb43660
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x2195710
	int GetRandomAirDropIDInMap();// 0x21956e0
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x2195640
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x2195570
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x2195440
	bool GetItemResReference(int InItemID, out ItemResReference outData);// 0x2195310
	int GetItemPrize(const int InItemID);// 0x2195270
	int GetItemMaxPileByID(const int InItemID);// 0x21951d0
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x21950a0
	int GetEntryID();// 0xb43660
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x2194f70
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x2194ea0
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x2194da0
	int GetAvailableAirDropsNum();// 0x2194d70
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x2194c70
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x2194bf0
	void FindTransformForBoxItem(Actor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x2194a90
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x21949a0
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos, const bool bPreferCenter);// 0x2194870
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x2194760
	void ConvertToItemdataAndSetToSpawners();// 0x2194740
	void ClearSpawnLoopTimer();// 0x2194720
	void CheckSpawnItemByDis();// 0x2194700
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x2194600
	void AddVehicleGroupDataSingle(int groupid, out <int,int> SingleData);// 0x2194410
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x2194250
	void AddAirDropToList(AirDropTreasureBox* AirDrop);// 0x21941c0

--------------------------------
Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x228, Size: 1]
	int MAX_SPAWN_NUM;//[Offset: 0x22c, Size: 1]
	int CurrLoadNum;//[Offset: 0x230, Size: 1]
	int CurrSpawnNum;//[Offset: 0x234, Size: 1]
	int TempFrame;//[Offset: 0x238, Size: 1]
	int FrameInterval;//[Offset: 0x23c, Size: 1]

--------------------------------
Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x298, Size: 1]
	enum SpawnStage;//[Offset: 0x2c8, Size: 1]
	enum SpawnerType;//[Offset: 0x2c9, Size: 1]
	enum SpawnerLevel;//[Offset: 0x2ca, Size: 1]
	int OutcomeID;//[Offset: 0x2cc, Size: 1]
	Vector OriginPos;//[Offset: 0x2d0, Size: 1]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 1]
	Box SpawnerBox;//[Offset: 0x2e8, Size: 1]
	float RotateAngleRange;//[Offset: 0x304, Size: 1]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	FString SyncItemId;//[Offset: 0x310, Size: 1]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	float RefreshTime;//[Offset: 0x324, Size: 1]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	int NumberOfPoints;//[Offset: 0x32c, Size: 1]
	float fScalarParams;//[Offset: 0x330, Size: 1]
	enum AppearanceType;//[Offset: 0x334, Size: 1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	TimerHandle ItemLoadHandle;//[Offset: 0x358, Size: 1]
	TimerHandle ItemSpawnHandle;//[Offset: 0x360, Size: 1]
	TimerHandle ItemRefreshHandle;//[Offset: 0x368, Size: 1]
	void SpawnSingleItem();// 0x219b530
	void SpawnInNextTick();// 0x219b510
	void SaveSpawnerRange();// 0x816c00
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x219b420
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x219b390
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x219b300
	void OnItemSpawned(Actor* Item);// 0x91ba60
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x219b040
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x1599ef0
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x219af50
	void LoadSingleItemAsset();// 0x219af30
	void LoadInNextTick();// 0x219af10
	void InitSpawnerBound();// 0x219aef0
	void GetSuitableDropPos(out Vector TargetPos);// 0x219ae60
	void GenerateDropPosition();// 0x219ae40
	void ClearUnpickedItems();// 0x219ae20
	void ClearLoopTimer();// 0x219ae00

--------------------------------
Class: SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnID;//[Offset: 0x394, Size: 1]
	enum VehicleSpawnType;//[Offset: 0x398, Size: 1]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	int VehicleRefreshSecond;//[Offset: 0x3a4, Size: 1]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x3b0, Size: 1]
	byte[] VehicleCheckObjectTypes;//[Offset: 0x3b8, Size: 1]
	Vector VehicleCheckBoxSize;//[Offset: 0x3c8, Size: 1]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x3f0, Size: 1]
	SolarVehicleSpawnEffect* VehicleSpawnEffect;//[Offset: 0x418, Size: 1]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x428, Size: 1]
	void StartVehicleRefreshTimer();// 0x22daa20
	void PlayVehicleSpawnEffectFinished();// 0x22da2b0
	void OnVehicleRefreshCheck();// 0x22da0b0
	void OnVehicleRefresh();// 0x22da090
	void OnPreVehicleDriverGetOn(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x22d9f10
	void OnPreVehicleDestroyed(Actor* DestroyedActor);// 0x22d9e80

--------------------------------
Class: SolarVehicleSpawnEffect.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x228, Size: 1]
	FName EffectMaterialParameterName;//[Offset: 0x230, Size: 1]
	StaticMeshComponent*[] EffectMeshComponentArray;//[Offset: 0x238, Size: 1]
	int VehicleID;//[Offset: 0x248, Size: 1]
	Vector BoxExtent;//[Offset: 0x24c, Size: 1]
	float EffectTime;//[Offset: 0x258, Size: 1]
	StaticMesh* GetVehicleMesh(int InVehicleID);// 0x2649560

--------------------------------
Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	float SpawnDelay;//[Offset: 0x394, Size: 1]
	float AudioActorHeightOffset;//[Offset: 0x398, Size: 1]
	float AudioActorFallSpeed;//[Offset: 0x39c, Size: 1]
	SoftClassPath PillarMeshBPClassPathName;//[Offset: 0x3a0, Size: 1]
	int ChestID;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 1]
	int[] Contents;//[Offset: 0x8, Size: 1]
	enum SpawnStage;//[Offset: 0x18, Size: 1]
	enum OutcomeType;//[Offset: 0x19, Size: 1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 1]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 1]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 1]
	int PoolTotalWeight;//[Offset: 0x110, Size: 1]
	int PoolOutcomeID;//[Offset: 0x114, Size: 1]
	int MaxTimes;//[Offset: 0x118, Size: 1]
	int MinTimes;//[Offset: 0x11c, Size: 1]
	int SpawnerID;//[Offset: 0x120, Size: 1]
	int NetSetTimes;//[Offset: 0x124, Size: 1]
	int DropedTimes;//[Offset: 0x128, Size: 1]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 1]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 1]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 1]

--------------------------------
Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 1]
	int ItemID;//[Offset: 0x4, Size: 1]
	int Weight;//[Offset: 0x8, Size: 1]
	int[] RandomNums;//[Offset: 0x10, Size: 1]
	int MaxTimes;//[Offset: 0x20, Size: 1]
	int MinTimes;//[Offset: 0x24, Size: 1]
	int RelatedContentID;//[Offset: 0x28, Size: 1]
	enum ItemType;//[Offset: 0x2c, Size: 1]
	int DropedTimes;//[Offset: 0x30, Size: 1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 1]
	int MinTimes;//[Offset: 0x4, Size: 1]
	int MaxTimes;//[Offset: 0x8, Size: 1]
	int CurrDropTimes;//[Offset: 0xc, Size: 1]

--------------------------------
Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 1]
	int MinTimes;//[Offset: 0x10, Size: 1]
	int MaxTimes;//[Offset: 0x14, Size: 1]
	int CurrDropTimes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 1]
	int SingleMaxTimes;//[Offset: 0x4, Size: 1]
	int TotalMaxTimes;//[Offset: 0x8, Size: 1]
	int TotalMinTimes;//[Offset: 0xc, Size: 1]
	int NetSetTimes;//[Offset: 0x10, Size: 1]
	int DropedTimes;//[Offset: 0x14, Size: 1]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 1]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]

--------------------------------
Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 1]
	int Seed;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarMapManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	MapData MapData;//[Offset: 0x38, Size: 1]
	VehicleData VehicleData;//[Offset: 0x74, Size: 1]
	MiniMapAirlineData CurAirlineData;//[Offset: 0x84, Size: 1]
	Vector AirlineActorLoc;//[Offset: 0xb4, Size: 1]
	int CurrentMapID;//[Offset: 0xc0, Size: 1]
	FString CurrentMapName;//[Offset: 0xc8, Size: 1]
	VisualSoundConfig* BattlePromptConfig;//[Offset: 0x148, Size: 1]
	GameModeGlobalSetting* GameModeGlobalSetting;//[Offset: 0x150, Size: 1]
	BattlePromptData BattlePromptData;//[Offset: 0x1a8, Size: 1]
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x21ab410
	float WorldLengthToMiniMap(float WorldLength);// 0x21ab370
	void UnInitMapData();// 0x21ab350
	void ReceiveInitMapData(int MapID);// 0xb43660
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x21aaf10
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x21aae30
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x21aada0
	static bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x21aacc0
	void InitMapData(int MapID);// 0x21aabe0
	SolarCharacter* GetViewportFocusedCharacter();// 0x21aab10
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x21aaa50
	Vector GetRandomVectorFromMapDarkData(Object* WorldContextObject, enum InType, bool GetWhiteArea);// 0x21aa920
	CurveFloat* GetMiniMapFOVCurve(float InRadius);// 0x21aa720
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x21aa630
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x21aa410
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x21aa310
	int GetCurrentMapID();// 0x21aa2e0
	MiniMapAirlineData GetCurAirlineData();// 0x21aa2a0
	VisualSoundConfig* GetBattlePromptConfig();// 0x21aa070
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x21a9fe0
	bool CheckMapDarkDataWithVector(Vector InVector, enum InType, bool GetWhiteArea);// 0x21a9ec0
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x21a9e20
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x21a9d20

--------------------------------
Class: MiniMapAirlineData
	enum AirlineType;//[Offset: 0x0, Size: 1]
	Vector2D StartPoint;//[Offset: 0x4, Size: 1]
	Vector2D EndPoint;//[Offset: 0xc, Size: 1]
	Vector2D RealStartPoint;//[Offset: 0x14, Size: 1]
	Vector2D RealEndPoint;//[Offset: 0x1c, Size: 1]
	Vector2D AirlineDir;//[Offset: 0x24, Size: 1]
	float AirlineLength;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 1]
	float CurrentRadius;//[Offset: 0xc, Size: 1]
	Vector NextLocation;//[Offset: 0x10, Size: 1]
	float NextRadius;//[Offset: 0x1c, Size: 1]
	float BeginShrinkTime;//[Offset: 0x20, Size: 1]
	float TargetShrinkTime;//[Offset: 0x24, Size: 1]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 1]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: VisualSoundConfig.DataAsset.Object
	byte ElemMaxCount;//[Offset: 0x30, Size: 1]
	float VehicleMoveDecidingSpeed;//[Offset: 0x34, Size: 1]
	float IgnoredCheckRate;//[Offset: 0x38, Size: 1]
	float IgnoredCheckAngle;//[Offset: 0x3c, Size: 1]
	float IgnoredCheckDis_PlayerDefault;//[Offset: 0x40, Size: 1]
	float IgnoredCheckDis_VehicleDefault;//[Offset: 0x44, Size: 1]
	<int,float> IgnoredCheckDis_VehicleMap;//[Offset: 0x48, Size: 1]
	<enum,VisualSoundData> VisualSoundDataMap;//[Offset: 0x98, Size: 1]

--------------------------------
Class: VisualSoundData
	GameplayTagContainer RequiedTagsAny;//[Offset: 0x0, Size: 1]
	GameplayTagContainer LosingTagsAny;//[Offset: 0x20, Size: 1]
	float DetectionDis;//[Offset: 0x40, Size: 1]
	float AliveTime;//[Offset: 0x44, Size: 1]
	float CanBreakTime;//[Offset: 0x48, Size: 1]

--------------------------------
Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 1]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 1]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 1]
	int MapImage;//[Offset: 0x18, Size: 1]
	float AirlineZ;//[Offset: 0x1c, Size: 1]
	float HorizonLineZ;//[Offset: 0x20, Size: 1]
	float TopZ;//[Offset: 0x24, Size: 1]
	float BottomZ;//[Offset: 0x28, Size: 1]
	float AverageZ;//[Offset: 0x2c, Size: 1]
	float InitFogZ;//[Offset: 0x30, Size: 1]
	float TargetFogZ;//[Offset: 0x34, Size: 1]
	float MapFOV;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleData
	float Speed1;//[Offset: 0x0, Size: 1]
	float Fov1;//[Offset: 0x4, Size: 1]
	float Speed2;//[Offset: 0x8, Size: 1]
	float Fov2;//[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModeGlobalSetting.Object
	MulticastInlineDelegateProperty OnGlobalSettingChanged;//[Size: 1]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 1]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 1]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	float MinHPToLock;//[Offset: 0x50, Size: 1]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	int KillStreakEndNoticeNumber;//[Offset: 0x58, Size: 1]
	int KillLeaderMinKillNumber;//[Offset: 0x5c, Size: 1]
	bool bShowRevengeNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bShowKillStreakEndNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool bShowTotalKillNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	bool bShowKillDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 1]
	bool bShowKillLeaderNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bShowKillLeaderShutDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	bool bShowClearTeamNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x67, Size: 1]
	bool bEnableWeaponPartEffectTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	float[] WeaponLevelDamageFactorArray;//[Offset: 0x70, Size: 1]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 1]
	bool bEnableBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool bEnableBattlePrompt_BeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	bool bEnableOpponentPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 1]
	int ConfigGameModeId;//[Offset: 0x88, Size: 1]
	bool bEnableEnemyNameMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float EnableEnemyNameMarkDistance;//[Offset: 0x90, Size: 1]
	float EnemyNameMarkDuration;//[Offset: 0x94, Size: 1]
	int SummonedAirDropMaxSum;//[Offset: 0x98, Size: 1]
	float SummonedAirDropLifeTime;//[Offset: 0x9c, Size: 1]
	float SummonedAirDropDestroyEffectTime;//[Offset: 0xa0, Size: 1]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x204d250
	void SetTeamDamageEnabled(bool bNewValue);// 0x204d1c0
	void SetSkydiveFollowMovementEnabled(bool bNewValue);// 0x204d130
	void SetShowVehicleOnMap(bool bNewValue);// 0x204d0a0
	void SetShowTotalKillNotice(bool InShowTotalKillNotice);// 0x204d010
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice);// 0x204cf80
	void SetShowRevengeNotice(bool InShowRevengeNotice);// 0x204cef0
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);// 0x204ce60
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice);// 0x204cdd0
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice);// 0x204cd40
	void SetShowKillDownNotice(bool InShowKillDownNotice);// 0x204ccb0
	void SetMinHPToLock(float NewValue);// 0x204cc30
	void SetMinHPLockEnabled(bool bNewValue);// 0x204cba0
	void SetKillStreakEndNoticeNumber(int InKillStreakEndNoticeNumber);// 0x204cb20
	void SetKillPlayerWhenOut(bool bNewValue);// 0x204ca90
	void SetKillLeaderMinKillNumber(int InKillLeaderMinKillNumber);// 0x204ca10
	void SetJetCostEnabled(bool bNewValue);// 0x204c980
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x204c900
	void SetGameCanRebirth(bool bNewValue);// 0x204c870
	void SetEnergyCostEnabled(bool bNewValue);// 0x204c7e0
	void SetDamageEnabled(bool bNewValue);// 0x204c750
	void SetCanVJetInWater(bool bNewValue);// 0x204c6c0
	void SetCanLoginBattle(bool bNewValue);// 0x204c630
	void SetCanHJetInWater(bool bNewValue);// 0x204c5a0
	void SetBigMapEnabled(bool bNewValue);// 0x204c510
	void ReceiveSettingChanged();// 0x204c4f0
	bool IsVJetCDOverriden();// 0x204b010
	bool IsTeamDamageEnabled();// 0x204aff0
	bool IsSkydiveFollowMovementEnabled();// 0x204afd0
	bool IsShowVehicleOnMap();// 0x204afb0
	bool IsShowTotalKillNotice();// 0x204af90
	bool IsShowRevengeNotice();// 0x204af70
	bool IsShowKillStreakEndNotice();// 0x204af50
	bool IsShowKillLeaderShutDownNotice();// 0x204af30
	bool IsShowKillLeaderNotice();// 0x204af10
	bool IsShowKillDownNotice();// 0x204aef0
	bool IsShowClearTeamNotice();// 0x204aed0
	bool IsOpponentPerspectiveEnabled();// 0x204aeb0
	bool IsMinHPLockEnabled();// 0x204ae90
	bool IsKillPlayerWhenOut();// 0x204ae70
	bool IsJetCostEnabledEnabled();// 0x204ae50
	bool IsHJetCDOverriden();// 0x204ae30
	bool IsGameCanRebirth();// 0x204ae10
	bool IsGameCanLoginBattle();// 0x204adf0
	bool IsEnergyCostEnabled();// 0x204adc0
	bool IsEnableWeaponPartEffectTip();// 0x1ff1e70
	bool IsDestroyWeaponOnDiscard();// 0x204ada0
	bool IsDestroyItemOnDiscard();// 0x204ad80
	bool IsDamageEnabled();// 0x204ad60
	bool IsBigMapEnabled();// 0x204ad40
	enum GetWeaponInfiniteAmmoMode();// 0x204ad20
	float GetOverridenVJetCD();// 0x204ad00
	float GetOverridenHJetCD();// 0x204ace0
	float GetMinHPToLock();// 0x87f1c0
	int GetKillStreakEndNoticeNumber();// 0x204acc0
	int GetKillLeaderMinKillNumber();// 0x204aca0
	enum GetJetAltitudeLimitationMode();// 0x204ac80
	float GetDamageFactorByWeaponLevel(int InWeaponLevel);// 0x204abc0
	int GetConfigGameModeId();// 0x204aab0
	bool CanVJetInWater();// 0x204aa90
	bool CanHJetInWater();// 0x204aa70

--------------------------------
Class: BattlePromptData
	byte MaxLength;//[Offset: 0x0, Size: 1]
	BattlePromptElem[] BattlePromptElemArr;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BattlePromptElem
	enum RealType;//[Offset: 0x8, Size: 1]
	Vector CacheLoc;//[Offset: 0xc, Size: 1]
	float Distance;//[Offset: 0x18, Size: 1]
	float StartTime;//[Offset: 0x1c, Size: 1]
	float DestroyTime;//[Offset: 0x20, Size: 1]
	float ReplaceTime;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 1]
	FString VehicleBP;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 1]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 1]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: UIManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x68, Size: 1]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x78, Size: 1]
	DataTable* BattleWidgetSettings;//[Offset: 0x88, Size: 1]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x90, Size: 1]
	DestroyObjectStruct[] NeedToDestroyObjects;//[Offset: 0x98, Size: 1]
	void WatchReference();// 0x230ff40
	void WatchAllReference();// 0x230ff20
	static void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x230fcf0
	void TriggerDelegate();// 0x230fcd0
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0xb43660
	static void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x230f8f0
	static void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x230f560
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x2649560
	static void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x230f1a0
	static void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x230f080
	void SetLoadingUIByLevelAndDisplay(int InModelID, int InLevel, int InMapIndex, bool InDisableCustomLoading);// 0xb43660
	static void SetImageTintColor(Image* Img, out const LinearColor InColor);// 0x230efc0
	static void SetImageTexture(Image* Img, Texture2D* Texture);// 0x230ef00
	static void SetImageFromTextureOrSprite(Image* DstImage, out const SoftObjectPath Path, bool bMatchSize);// 0x230edd0
	static void SetImageColor(Image* Img, float R, float G, float B, float A);// 0x230ec40
	static void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x230eb80
	static void SetCheckedState(CheckBox* Box, const enum State);// 0x230e4b0
	static void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x230e3f0
	static void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x230e330
	static void SetButtonStyle(Button* Btn, const SlateWidgetStyleAsset* Style);// 0x230e270
	void RemoveAllWidgets();// 0xb43660
	void OpenUIGM(FString UIID, int RootID);// 0xb43660
	void OpenConfirmUIInLua(int ConfirmID);// 0xb43660
	void OnLuaHotReloadFileChanged(FString LuaSysPath, FString LuaPathName);// 0xb43660
	void OnInitLuaHotReload();// 0xb43660
	void OnGameManagersInitialized();// 0x230e230
	void OnClientStartGame();// 0x230e090
	void LuaCloseUI(FString MapName);// 0xb43660
	static Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x230dfe0
	static Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x230df00
	static Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x230ddc0
	static Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x230dcf0
	static PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x230dbb0
	static MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x230da70
	static bool IsWidgetVisibleForDisplay(const Widget* InWidget);// 0x230d9e0
	static void InvalidateWidgetPrepass(Widget* InWidget);// 0x230d960
	static void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x230d8a0
	static SolarCharacter* GetWidgetOwningCharacter(const Widget* InWidget);// 0x230d810
	static FString GetWeaponTextureFullPath(out FString IconPath);// 0x230d720
	UserWidget* GetUIPanel(FString MapName);// 0xb43660
	static FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x230d5c0
	static FString GetQualityBGFullPath(const int InQuality, const bool bWithSuffix);// 0x230d4b0
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0xb43660
	int GetLobbyID();// 0xb43660
	static bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x230d370
	static CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x230d2e0
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x230d160
	UserWidget* GetBattleBackpackWidget();// 0xb43660
	void ExitSpectateMode();// 0xb43660
	void EnterSpectateMode();// 0xb43660
	void CloseUIGM(FString UIID);// 0xb43660
	void CloseLoadingUI();// 0xb43660
	static Margin ClampInScreenOffsets(Widget* WorldContextObject, out const Margin Offsets, out const Anchors Anchors, out const Vector2D Alignment);// 0x230cf90

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x158, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x410, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x420, Size: 1]
	byte ClickMethod;//[Offset: 0x430, Size: 1]
	byte TouchMethod;//[Offset: 0x431, Size: 1]
	byte PressMethod;//[Offset: 0x432, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x3507b70
	void SetStyle(out const ButtonStyle InStyle);// 0x3507a90
	void SetPressMethod(byte InPressMethod);// 0x3507890
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3506c40
	void SetClickMethod(byte InClickMethod);// 0x3506b40
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3506590
	bool IsPressed();// 0x3506300

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 1]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 1]
	SlateBrush Pressed;//[Offset: 0x138, Size: 1]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 1]
	Margin NormalPadding;//[Offset: 0x268, Size: 1]
	Margin PressedPadding;//[Offset: 0x278, Size: 1]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 1]

--------------------------------
Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x138, Size: 1]
	SlateBrush JoyStickThumbPress;//[Offset: 0x1d0, Size: 1]
	SlateBrush JoyStickIcon;//[Offset: 0x268, Size: 1]
	Vector2D VisualSize;//[Offset: 0x300, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x308, Size: 1]
	Vector2D InputScale;//[Offset: 0x310, Size: 1]
	Vector2D IconSize;//[Offset: 0x318, Size: 1]
	float ActiveOpacity;//[Offset: 0x320, Size: 1]
	float InactiveOpacity;//[Offset: 0x324, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x328, Size: 1]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	MulticastInlineDelegateProperty OnJoystickPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnJoystickRelease;//[Size: 1]
	MulticastInlineDelegateProperty OnInputYawAndPitch;//[Size: 1]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x2047400
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x2047270
	void SetInputScale(Vector2D Scale);// 0x20471f0
	void ResetControlInput();// 0x2047130

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 1]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 1]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 1]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 1]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 1]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 1]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 1]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 1]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 1]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 1]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 1]
	FName SocketName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 1]
	delegate TextDelegate;//[Offset: 0x178, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 1]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x220, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x2b8, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2c0, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2d0, Size: 1]
	float MinDesiredWidth;//[Offset: 0x2e0, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x2e6, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e7, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x351e250
	void SetText(FText InText);// 0x351e160
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x351dfb0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x351dc90
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x351dc00
	void SetOpacity(float InOpacity);// 0x351db80
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x351d6c0
	void SetFont(SlateFontInfo InFontInfo);// 0x351cf60
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x351cdf0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x351cce0
	FText GetText();// 0x351c900
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x351c700
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x351c6d0

--------------------------------
Class: DestroyObjectStruct
	UserWidget* RootWidget;//[Offset: 0x0, Size: 1]
	FString FullPath;//[Offset: 0x8, Size: 1]
	DestroyObjectEntry[] Objects;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DestroyObjectEntry
	Object* Object;//[Offset: 0x0, Size: 1]
	FString FullPath;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 1]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 1]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 1]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 1]
	SoftObjectPath JobEffectListPath;//[Offset: 0x68, Size: 1]
	SoftObjectPath JobEffectSelectPanelPath;//[Offset: 0x80, Size: 1]

--------------------------------
Class: SolarTreatmentComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnCharacterHealthLow;//[Size: 1]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 1]
	void TryStopTreatment();// 0x22c3130
	void TryStatisticsTreatedTimes();// 0x22c3110
	void TryStartTreatment();// 0x22c30f0
	void StopProgress();// 0x22c0e50
	void StartProgress();// 0x22c0e30
	bool IsMedicineEnough();// 0x22c0680
	bool IsFullHealth();// 0x22c0620
	bool IsAbleToContinueTreatment();// 0x22c05f0
	void IncreaseTreatedTimes();// 0x22c04a0
	bool CanStartTreatment();// 0x2649560
	bool CanBeTreated();// 0x22be290

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	float Length;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0xc, Size: 1]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 1]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 1]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 1]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 1]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 1]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 1]
	Object* PropertySetObject;//[Offset: 0x70, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 1]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 1]
	delegate EventFunc;//[Offset: 0x4, Size: 1]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName VectorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName FloatPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarTeammateHUDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CheckHUDDistanceToCenter;//[Offset: 0x698, Size: 1]
	float HUDTranslucentValue;//[Offset: 0x69c, Size: 1]
	float LocationUpdateTolerance;//[Offset: 0x6a0, Size: 1]
	float InterpolationTimeRatio;//[Offset: 0x6a4, Size: 1]
	float InterpolationSpeed;//[Offset: 0x6a8, Size: 1]
	float InterpolationEaseInOutExp;//[Offset: 0x6ac, Size: 1]
	CurveFloat* DistanceToScaleCurve;//[Offset: 0x6b0, Size: 1]
	bool bUseDistanceToCharacterForScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	Vector TargetWorldLocation;//[Offset: 0x6c0, Size: 1]

--------------------------------
Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xb8, Size: 1]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xc0, Size: 1]
	FName ScannedEffectID;//[Offset: 0xc8, Size: 1]
	UserWidget* CreatedScreenUI;//[Offset: 0xe8, Size: 1]
	TimerHandle DetectedTimerHandle;//[Offset: 0xf0, Size: 1]
	int TimerHandleCounter;//[Offset: 0xf8, Size: 1]
	<int,TimerHandle> DetectedTimerHandles;//[Offset: 0x100, Size: 1]
	SolarCharacter* CharacterOwner;//[Offset: 0x150, Size: 1]
	ScannedInfo[] CurrentScanResults;//[Offset: 0x158, Size: 1]
	float CurrentSpanTimer;//[Offset: 0x168, Size: 1]
	FName[] ActivedRadarTags;//[Offset: 0x170, Size: 1]
	MaterialChangeHandle DetectedMaterialHandle;//[Offset: 0x180, Size: 1]
	void WarningByRadarNotifation(float InRemainingTime);// 0xb43660
	void OnRecivedScanResults();// 0xb43660
	void OnRecieveOnceScanStart(int ScanedNum, bool bSuperRader);// 0x21e9ca0
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x21e9bc0
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x21e9b00
	void OnRadarImmunityTagChanged(const GameplayTag Tag, int NewCount);// 0x21e9a30
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, out const GameplayTag InRadarImmunityTag, bool bSuperRader);// 0x21e97e0
	void OnceScanSuccessNotifation(int ScanedNum);// 0xb43660
	void OnceScanFailedNotifation();// 0xb43660
	void MarkedByOnceScanNotifation();// 0xb43660
	FString GetModuleName_Implementation();// 0x21e96a0
	void ExposedByRadarNotifation();// 0xb43660
	void ChangeDetectedMaterial(bool bInDetected);// 0x21e9580

--------------------------------
Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 1]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 1]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 1]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 1]
	FString SuperRadarScan_FoundEnemy;//[Offset: 0x70, Size: 1]
	FString SuperRadarScan_FoundByEnemy;//[Offset: 0x80, Size: 1]

--------------------------------
Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 1]
	byte RadarType;//[Offset: 0x10, Size: 1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 1]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 1]

--------------------------------
Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 1]
	enum TargetType;//[Offset: 0x4, Size: 1]
	uint32 VehicleID;//[Offset: 0x8, Size: 1]
	Vector TargetLocation;//[Offset: 0xc, Size: 1]
	float TargetToward;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MaterialChangeHandle

--------------------------------
Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 1]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 1]
	float Damage;//[Offset: 0x8, Size: 1]
	float DamageTime;//[Offset: 0xc, Size: 1]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xc8, Size: 1]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xd0, Size: 1]
	float MinCheckDistance;//[Offset: 0xd4, Size: 1]
	float MaxCheckDistance;//[Offset: 0xd8, Size: 1]
	bool AutoMarkIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	int AttachedToCharacterNumLimit;//[Offset: 0x138, Size: 1]
	HUD_WorldMark*[] ChosenMarksTable;//[Offset: 0x190, Size: 1]
	HUD_WorldMark* CurrentChosenMark;//[Offset: 0x1a0, Size: 1]
	HUD_WorldMark*[] WorldMarkPool;//[Offset: 0x1e8, Size: 1]
	void VehicleNotify(int VehicleID, int NameLocID, SolarPlayerController* Controller);// 0x233ebd0
	bool VagueMarkCharacter();// 0x233eba0
	void UpdateAttachedMarks();// 0x233eb80
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x233eaf0
	void ResponseChosenMark();// 0x233ead0
	void RemoveItemMarkWhenPlayerPicked(out const int64 InItemInstanceId);// 0x233ea40
	void RemoveAttachedMarkByActors(out Actor*[] InActors);// 0x233e990
	void ReleaseWorldMarkPool();// 0x233e970
	void RefreshChosenMark();// 0x233e8e0
	void RecycleWorldMark(HUD_WorldMark* WorldMark);// 0x233e7c0
	void PushBackQueueGroupMapWidget(enum Type, int PosInTeam, HUD_WorldMark* Widget);// 0x233e6b0
	HUD_WorldMark* PopQueueGroupMapWidget(enum Type, int PosInTeam);// 0x233e5e0
	void OnVehicleEndPlay(Actor* Actor, byte EndPlayReason);// 0x233e510
	void OnMarkBeChosen(HUD_WorldMark* MarkWidget, bool IfWasChosen);// 0x233e420
	void NotifyThatToFarToMark();// 0x233e2f0
	void MarkWarningOnWorld();// 0x233e2d0
	void MarkQuickChatOnWorld(FString IconImg);// 0x233e230
	void MarkPointOnWorld();// 0x233e210
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x233e140
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x233dff0
	void MarkActorByAttachToThem(Actor* InActor);// 0x233df60
	void InteractTypeNotify(enum Type, SolarPlayerController* Controller);// 0xb43660
	void InitWorldMarkPool();// 0x233def0
	void Init(SolarCharacter* Character);// 0x233de60
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x233de30
	int GetQuickVoiceLocalizationID(out const int VoiceID);// 0x233da10
	FString GetQuickVoiceEventName(out const int VoiceID);// 0x233d930
	int GetQueueGroupMapSize(enum Type, int PosInTeam);// 0x233d860
	FString GetInvalidTypeDefaultIconPath();// 0xb43660
	FString GetInteractiveObjectsFullPath(enum Type);// 0xb43660
	HUD_WorldMark* GetFreeWorldMark();// 0x233d830
	void CreateWorldMarkInternal(int PosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconAsset);// 0x233d6c0
	void CreateWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x233d580
	void CreateWarningWidget(WorldMarkData Data, bool NeedSendMessage);// 0x233d3a0
	void CreateItemMarkWidget(out const WorldMarkData Data);// 0x233d2b0
	void CreateInvalidWidget(WorldMarkData Data, bool bShouldNotify);// 0x233d0d0
	bool CheckMarkPointIsOutOfMap(out const Vector Location);// 0x233d010
	bool CheckIfWorldPosValid(WorldMarkData Data, out const int PosInTeam);// 0x233ce30
	bool CheckIfThisItemBeenMarkedInternal(int instanceID, int PosInTeam);// 0x233cd60
	bool CheckAutoMarkDamagingCharacter();// 0x233cd30
	void AutoMarkDamagingCharacter();// 0x233cca0

--------------------------------
Class: HUD_WorldMark.SolarUserWidget.UserWidget.Widget.Visual.Object
	float LiveTime;//[Offset: 0x348, Size: 1]
	float ExtraLiveTime;//[Offset: 0x34c, Size: 1]
	float ResponCheckRangeParam;//[Offset: 0x350, Size: 1]
	float RefreshTime;//[Offset: 0x354, Size: 1]
	Vector WorldPos;//[Offset: 0x358, Size: 1]
	Vector2D ScreenSize;//[Offset: 0x364, Size: 1]
	Vector2D IconSize;//[Offset: 0x36c, Size: 1]
	bool bIsOutOfRangeLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bHasBeenAnsweredByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	bool bIfWasChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 1]
	bool bIsCreateBySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377, Size: 1]
	Image* ImgMarkArrow;//[Offset: 0x378, Size: 1]
	Image* ImgItemMarkArrow;//[Offset: 0x380, Size: 1]
	TextBlock* Distance;//[Offset: 0x388, Size: 1]
	float UpdateIconStyleTime_LowLevel;//[Offset: 0x390, Size: 1]
	float UpdateIconStyleTime_HighLevel;//[Offset: 0x394, Size: 1]
	int PosInTeam;//[Offset: 0x39c, Size: 1]
	WorldMarkData Data;//[Offset: 0x3a0, Size: 1]
	enum Type;//[Offset: 0x3f0, Size: 1]
	float MaxWorldDistance;//[Offset: 0x3f4, Size: 1]
	float MinWorldDistance;//[Offset: 0x3f8, Size: 1]
	CurveFloat* OpacityCurve;//[Offset: 0x400, Size: 1]
	bool bAttachToObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	void UpdateStyleByScreenPosition(Vector2D ScreenPos, bool bOutOfRange);// 0x2649560
	void UpdateDistance(out const Vector TargetPos);// 0x2062000
	void SwitchWidget(bool bOutOfRange);// 0x2649560
	void SetIfBeChosen(bool bIfChosen);// 0x2649560
	void ResponseByLocal();// 0x2649560
	void RemoveItemMarkWhenPlayerPicked();// 0x2649560
	void LogMarkResponse();// 0x20603e0
	void InitWidget(Object* Owner, int InPosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconImg);// 0x2649560
	void InitAttachedWidget(Actor* ActorAttachedTo);// 0x20601f0
	void DestroySelf();// 0x2649560
	bool CheckIsLowLevelDevice();// 0x20600c0
	void CancelResponse();// 0x2649560

--------------------------------
Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	HUD_MarkEnemyInfo*[] MarkdEnemyWidgets;//[Offset: 0x348, Size: 1]
	CanvasPanel* MarkPanel;//[Offset: 0x358, Size: 1]
	class HUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass;//[Offset: 0x360, Size: 1]
	class HUD_ScanEffect* ScanEffectWidgetClass;//[Offset: 0x368, Size: 1]
	HUD_MarkEnemyInfo*[] MarkEnemyWidgets;//[Offset: 0x370, Size: 1]
	void OnSuperRadarStart(out const FString[] InPlayers);// 0x2061790
	void OnSuperRadarRemovePlayer(FString InPlayer);// 0x20616f0
	void OnSuperRadarEnd();// 0x20616d0
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x20615e0
	void OnScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x20610a0
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x2060df0
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x2060c70
	void OnDamagingActorsChange();// 0x2060850
	void OnAimingEnemy(SolarCharacter* InEnemy);// 0x2060400

--------------------------------
Class: HUD_MarkEnemyInfo.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarTextBlock* Txt_Lvl;//[Offset: 0x348, Size: 1]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x350, Size: 1]
	CanvasPanel* CanvasPanel;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Anim_Exit;//[Offset: 0x360, Size: 1]
	WidgetAnimation* Anim_Enter;//[Offset: 0x368, Size: 1]
	float UpdateVisibleInterval;//[Offset: 0x370, Size: 1]
	CurveFloat* DistaceToScaleCurve;//[Offset: 0x378, Size: 1]
	<class Actor> OcculusionIgnoreClasses;//[Offset: 0x380, Size: 1]
	float MinDisplayHpValue;//[Offset: 0x3d0, Size: 1]
	float HPGridUnit;//[Offset: 0x3d4, Size: 1]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	byte[] OccQueryTypes;//[Offset: 0x3e0, Size: 1]
	WidgetAnimation* Anim_Name_Exit;//[Offset: 0x3f0, Size: 1]
	WidgetAnimation* Anim_Name_Enter;//[Offset: 0x3f8, Size: 1]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x400, Size: 1]
	HUD_ScanEffect* ScanEffectWidget;//[Offset: 0x408, Size: 1]
	float ZOffset;//[Offset: 0x444, Size: 1]
	void HideNameMark();// 0x205bdd0

--------------------------------
Class: DeathViewHPWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bSplitHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	SolarShieldProgressBoard* AdvBar_Shield;//[Offset: 0x378, Size: 1]
	SolarHPProgressBoard* AdvBar_HP;//[Offset: 0x380, Size: 1]
	LinearColor HPColorNormal;//[Offset: 0x3a8, Size: 1]
	LinearColor HPColorDying;//[Offset: 0x3b8, Size: 1]
	void UpdateHPBar(const float InCurHealth, const float InMaxHealth, const float InHPGridUnit);// 0x203ec50
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x203e330
	void OnShieldValueChanged(const SinglePlayerShieldModel* ShieldModel);// 0x203e2a0
	void OnShieldChanged(const SinglePlayerShieldModel* ShieldModel);// 0x203e210
	void OnShieldAvailableChanged(const SinglePlayerShieldModel* ShieldModel);// 0x203e180
	void OnHPModelChanged(const SinglePlayerHPModel* HPModel);// 0x203df30
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x203dd00

--------------------------------
Class: SinglePlayerShieldModel.SingleCharacterModelBase.Object
	void ShieldValueChanged(const enum InWidgetState, const float InCurValue, const float InChangeValue, const enum InRechargeState, bool bInFixPreAdd);// 0x21df350
	void ShieldChanged(const bool bInAvailable, const float InCurValue, const float InMaxValue, const int InQualityColor, const bool bInIsAdvancedShield);// 0x21df1b0

--------------------------------
Class: SingleCharacterModelBase.Object

--------------------------------
Class: SinglePlayerHPModel.SingleCharacterModelBase.Object
	void OnRescueStateChanged(byte InRescueState);// 0x21dde40
	void OnHPValueChanged(const SolarCharacter* Character);// 0x21dd2e0

--------------------------------
Class: SolarShieldProgressBoard.SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	float AutoRechargeSpeed;//[Offset: 0x2b8, Size: 1]
	float RechargeTime;//[Offset: 0x2bc, Size: 1]
	float PreChangeSpeed;//[Offset: 0x2c0, Size: 1]
	void UpdateCurrentValue(float Current);// 0x21fa820
	void SetSpeed(float NewSpeed);// 0x21fa650
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x2649560
	void SetPreAddColor();// 0x21fa630
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd);// 0x21fa3d0
	void InitProgressBoard(float Current, float Max, int Fragment);// 0x21fa000
	void InitProgress();// 0x21f9fe0
	float GetSpeed();// 0x21f9fb0
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x21f9490
	void DoAddValue(const float InCurrentValue);// 0x21f9410
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x21f9280

--------------------------------
Class: SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 1]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 1]
	LinearColor IncreaseColor;//[Offset: 0x270, Size: 1]
	LinearColor DecreaseColor;//[Offset: 0x280, Size: 1]

--------------------------------
Class: SolarHPProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 1]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 1]
	float Speed;//[Offset: 0x270, Size: 1]
	float RechargeSpeed;//[Offset: 0x274, Size: 1]
	float RechargeTime;//[Offset: 0x278, Size: 1]
	int RechargeIndex;//[Offset: 0x27c, Size: 1]
	bool bDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	float Percent1;//[Offset: 0x284, Size: 1]
	float Percent2;//[Offset: 0x288, Size: 1]
	float Percent3;//[Offset: 0x28c, Size: 1]
	float Percent4;//[Offset: 0x290, Size: 1]
	bool bNeedAlternateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	LinearColor IncreaseColor;//[Offset: 0x298, Size: 1]
	LinearColor DecreaseColor;//[Offset: 0x2a8, Size: 1]
	void UpdateMaxValue(float Max);// 0x2178af0
	void UpdateCurrentValue(float Current);// 0x2178a70
	void SetSpacing(const float InValue);// 0x21788c0
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x2649560
	void SetPreAddColor();// 0x21788a0
	void SetPercentageByIndex(float Percent, int Index);// 0x21787d0
	void SetFragment(float Num);// 0x2178750
	void SetCurrentValueInstantly(float Current);// 0x21786d0
	void SetAlternateColor(out const LinearColor InColor, bool IsChangeBoth, bool IsForIncrease);// 0x21785a0
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd, const bool bInAdaptiveRecharge);// 0x2178360
	void InitProgressBoard(float Current, float Max, float Fragment);// 0x2177a60
	void InitProgress();// 0x2177a40
	LinearColor GetAlternateColor(bool bIncrease);// 0x2177880
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x21777b0
	void DoAddValue(const float InCurrentValue, const float InChangeValue);// 0x21776e0
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x21775b0

--------------------------------
Class: HUD_ScanEffect.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_Scan;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_FadeOut;//[Offset: 0x350, Size: 1]
	FString ScanSound;//[Offset: 0x358, Size: 1]
	float MinAnimLength;//[Offset: 0x368, Size: 1]
	FName BoneName;//[Offset: 0x36c, Size: 1]

--------------------------------
Class: IMChatObject.Object
	bool GMEIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool NertcIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	void UnInitEvents();// 0x20670a0
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition, out const Rotator PlayerRotator, float DeltaTime);// 0x2066e80
	void NotifyBattlePlayerChanged(int NumPlayers, int PreviousNumPlayers);// 0xb43660
	void InitEnvents();// 0x2065d50

--------------------------------
Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x230, Size: 1]
	WidgetComponent* LocationSign;//[Offset: 0x238, Size: 1]
	float CatchupDuration;//[Offset: 0x250, Size: 1]
	float CatchupBaseLerp;//[Offset: 0x254, Size: 1]
	MiniMapAirlineData MiniMapData;//[Offset: 0x27c, Size: 1]
	UsingAirlineData CurrentAirline;//[Offset: 0x2ac, Size: 1]
	float CruiseStartTime;//[Offset: 0x2f0, Size: 1]
	Vector CruiseStartLoc;//[Offset: 0x2f4, Size: 1]
	Rotator CruiseStartRot;//[Offset: 0x300, Size: 1]
	int ForceParachuteWarningTime;//[Offset: 0x30c, Size: 1]
	float MaxAllowedSmoothDistance;//[Offset: 0x310, Size: 1]
	float ClientSpeedScale;//[Offset: 0x314, Size: 1]
	float ClientRotationSmoothSpeed;//[Offset: 0x318, Size: 1]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x338, Size: 1]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x340, Size: 1]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x390, Size: 1]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x210dff0
	void OnRep_MiniMapAirline();// 0x2108e00
	void OnRep_CurrentAirline();// 0x2108b60
	MiniMapAirlineData K2_GetAirlineData();// 0x2107560
	static SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x2105700
	float GetCruiseProgress();// 0x2104310
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x2100ab0

--------------------------------
Class: UsingAirlineData
	int MapID;//[Offset: 0x0, Size: 1]
	Vector StartPoint;//[Offset: 0x4, Size: 1]
	Vector EndPoint;//[Offset: 0x10, Size: 1]
	Vector2D Direction;//[Offset: 0x1c, Size: 1]
	float Speed;//[Offset: 0x24, Size: 1]
	float Height;//[Offset: 0x28, Size: 1]
	Vector CanParachutePoint;//[Offset: 0x2c, Size: 1]
	Vector ForceParachutePoint;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 1]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 1]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x2013ed0
	void ClearTeamFormationData();// 0x2013a10
	void ClearCruiseFormationData();// 0x20139d0
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x2013310
	static void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x2013180
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x2013000
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x2012f50

--------------------------------
Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 1]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 1]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 1]
	int BoarderTeamID;//[Offset: 0x8, Size: 1]
	int BoarderTeamSize;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb0, Size: 1]
	FName CruiseStartSoundGroupName;//[Offset: 0xc4, Size: 1]
	SolarCharacter* GetCharacterOwner();// 0x202d060

--------------------------------
Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x228, Size: 1]
	SoftObjectPath StopCruisingPath;//[Offset: 0x240, Size: 1]
	FName CruiseCharacterBindingName;//[Offset: 0x258, Size: 1]
	FName CruiseCapsuleBindingName;//[Offset: 0x260, Size: 1]
	FName CruiseCameraBindingName;//[Offset: 0x268, Size: 1]
	float SequenceCameraBlendDuration;//[Offset: 0x270, Size: 1]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x278, Size: 1]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x280, Size: 1]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x288, Size: 1]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a0, Size: 1]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2a8, Size: 1]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b0, Size: 1]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c0, Size: 1]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d0, Size: 1]
	CineCameraActor* SequenceCamera;//[Offset: 0x2d8, Size: 1]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e0, Size: 1]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2e8, Size: 1]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f0, Size: 1]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x2f8, Size: 1]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x300, Size: 1]
	SoftObjectPath CloudParticlePath;//[Offset: 0x308, Size: 1]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x340, Size: 1]
	void StopCruiseSequenceFinished();// 0x210f5f0
	void StartCruiseSequenceFinished();// 0x210f160
	void PlayStopCruiseSequence();// 0x2109e20
	void PlayStopCruiseAnimation();// 0x2109e00
	void PlayStartCruiseSequence();// 0x2109de0
	void PlayCruiseLoopAnimation();// 0x2109ba0
	void HideCapsuleAirflowVFX();// 0x2106330
	static SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x2102ab0

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 1]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 1]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 1]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x270, Size: 1]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x280, Size: 1]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x288, Size: 1]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x290, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x2a0, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a8, Size: 1]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	void ShowBurnin();// 0x3691690
	void SetSequence(LevelSequence* InSequence);// 0x3691600
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x3691570
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x3691430
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3691200
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x36910a0
	void ResetBindings();// 0x3691080
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3690fd0
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x3690e90
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x3690d90
	void OnLevelSequenceLoaded__DelegateSignature();// 0x2649560
	LevelSequence* LoadSequence();// 0x3690d20
	void HideBurnin();// 0x3690d00
	LevelSequencePlayer* GetSequencePlayer();// 0x3690cb0
	LevelSequence* GetSequence();// 0x3690c60
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x3690b40
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x3690a90
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3690780
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3690630

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 1]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 1]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 1]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 1]
	class Object* DirectorClass;//[Offset: 0x490, Size: 1]
	void RemoveMetaDataByClass(class Object InClass);// 0x3690f60
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x3690890
	Object* FindMetaDataByClass(class Object InClass);// 0x3690890
	Object* CopyMetaData(Object* InMetaData);// 0x3690890

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 1]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 1]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 1]
	FString ObjectPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 1]
	FString ComponentName;//[Offset: 0x20, Size: 1]
	Object* CachedComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnCameraCut;//[Size: 1]
	CameraComponent* GetActiveCameraComponent();// 0x3690c20
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x3690910

--------------------------------
Class: MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	MulticastInlineDelegateProperty OnFinished;//[Size: 1]
	byte status;//[Offset: 0x458, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 1]
	FrameNumber StartTime;//[Offset: 0x468, Size: 1]
	int DurationFrames;//[Offset: 0x46c, Size: 1]
	int CurrentNumLoops;//[Offset: 0x470, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 1]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 1]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 1]
	void StopAtCurrentTime();// 0x339c0a0
	void Stop();// 0x339c080
	void SetTimeRange(float StartTime, float Duration);// 0x339bfb0
	void SetPlayRate(float PlayRate);// 0x339bcd0
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x339be50
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x339bd50
	void SetFrameRate(FrameRate FrameRate);// 0x339bc40
	void SetFrameRange(int StartFrame, int Duration);// 0x339bb70
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x339bad0
	void ScrubToSeconds(float TimeInSeconds);// 0x339b440
	bool ScrubToMarkedFrame(FString InLabel);// 0x339ba20
	void ScrubToFrame(FrameTime NewPosition);// 0x339b990
	void Scrub();// 0x339b970
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x339b8d0
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x339b7f0
	void PlayToSeconds(float TimeInSeconds);// 0x339b770
	bool PlayToMarkedFrame(FString InLabel);// 0x339b6c0
	void PlayToFrame(FrameTime NewPosition);// 0x339b630
	void PlayReverse();// 0x339b610
	void PlayLooping(int NumLoops);// 0x339b580
	void Play();// 0x339b560
	void Pause();// 0x339b540
	void JumpToSeconds(float TimeInSeconds);// 0x339b4c0
	void JumpToPosition(float NewPlaybackPosition);// 0x339b440
	bool JumpToMarkedFrame(FString InLabel);// 0x339b390
	void JumpToFrame(FrameTime NewPosition);// 0x339b300
	bool IsReversed();// 0x339b2d0
	bool IsPlaying();// 0x339b2a0
	bool IsPaused();// 0x339b270
	void GoToEndAndStop();// 0x339b250
	QualifiedFrameTime GetStartTime();// 0x339b210
	float GetPlayRate();// 0x339afb0
	float GetPlaybackStart();// 0x339b160
	float GetPlaybackPosition();// 0x339b070
	float GetPlaybackEnd();// 0x339afe0
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x339aed0
	float GetLength();// 0x339aea0
	FrameRate GetFrameRate();// 0x339ae80
	int GetFrameDuration();// 0x339ae50
	QualifiedFrameTime GetEndTime();// 0x339ae00
	QualifiedFrameTime GetDuration();// 0x339adc0
	bool GetDisableCameraCuts();// 0x339ad90
	QualifiedFrameTime GetCurrentTime();// 0x339ad50
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x339ac40
	void ChangePlaybackDirection();// 0x339ac20

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 1]
	FrameRate Rate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 1]
	byte LastKnownStatus;//[Offset: 0x8, Size: 1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 1]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 1]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 1]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x3691330

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x18, Size: 1]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 1]
	void SetSettings(Object* InSettings);// 0x2649560
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3690ce0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 1]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 1]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 1]
	FString CurrentShotName;//[Offset: 0x30, Size: 1]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 1]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 1]
	FString SourceTimecode;//[Offset: 0x60, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 1]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 1]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 1]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x800, Size: 1]
	CineCameraComponent* GetCineCameraComponent();// 0x35371b0

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x930, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x93c, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x948, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x960, Size: 1]
	float CurrentFocalLength;//[Offset: 0x9b8, Size: 1]
	float CurrentAperture;//[Offset: 0x9bc, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x9c0, Size: 1]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x9d0, Size: 1]
	NamedLensPreset[] LensPresets;//[Offset: 0x9e0, Size: 1]
	FString DefaultFilmbackPresetName;//[Offset: 0x9f0, Size: 1]
	FString DefaultFilmbackPreset;//[Offset: 0xa00, Size: 1]
	FString DefaultLensPresetName;//[Offset: 0xa10, Size: 1]
	float DefaultLensFocalLength;//[Offset: 0xa20, Size: 1]
	float DefaultLensFStop;//[Offset: 0xa24, Size: 1]
	void SetLensPresetByName(FString InPresetName);// 0x3537630
	void SetFilmbackPresetByName(FString InPresetName);// 0x3537590
	void SetCurrentFocalLength(out const float InFocalLength);// 0x35374f0
	float GetVerticalFieldOfView();// 0x35374c0
	static NamedLensPreset[] GetLensPresetsCopy();// 0x35373c0
	FString GetLensPresetName();// 0x3537340
	float GetHorizontalFieldOfView();// 0x3537310
	FString GetFilmbackPresetName();// 0x3537290
	FString GetDefaultFilmbackPresetName();// 0x35371d0

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 1]
	float MaxFocalLength;//[Offset: 0x4, Size: 1]
	float MinFStop;//[Offset: 0x8, Size: 1]
	float MaxFStop;//[Offset: 0xc, Size: 1]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 1]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 1]
	float SensorHeight;//[Offset: 0x4, Size: 1]
	float SensorAspectRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 1]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 1]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 1]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 1]
	float FocusOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 1]
	Vector RelativeOffset;//[Offset: 0x28, Size: 1]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 1]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 1]
	Vector RelativeOffset;//[Offset: 0x40, Size: 1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	void OnRep_bEnabled();// 0x1570d30

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x31c, Size: 1]
	SLHeightFogData HeightFogData_M;//[Offset: 0x334, Size: 1]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x344, Size: 1]
	LinearColor FogColor_M;//[Offset: 0x364, Size: 1]
	float FogDensity;//[Offset: 0x374, Size: 1]
	float FogHeightFalloff;//[Offset: 0x378, Size: 1]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x37c, Size: 1]
	LinearColor FogInscatteringColor;//[Offset: 0x388, Size: 1]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x398, Size: 1]
	float InscatteringColorCubemapAngle;//[Offset: 0x3a0, Size: 1]
	LinearColor InscatteringTextureTint;//[Offset: 0x3a4, Size: 1]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x3b4, Size: 1]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x3b8, Size: 1]
	float DirectionalInscatteringExponent;//[Offset: 0x3bc, Size: 1]
	float DirectionalInscatteringStartDistance;//[Offset: 0x3c0, Size: 1]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x3c4, Size: 1]
	float FogMaxOpacity;//[Offset: 0x3d4, Size: 1]
	float StartDistance;//[Offset: 0x3d8, Size: 1]
	float FogCutoffDistance;//[Offset: 0x3dc, Size: 1]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x3e4, Size: 1]
	Color VolumetricFogAlbedo;//[Offset: 0x3e8, Size: 1]
	LinearColor VolumetricFogEmissive;//[Offset: 0x3ec, Size: 1]
	float VolumetricFogExtinctionScale;//[Offset: 0x3fc, Size: 1]
	float VolumetricFogDistance;//[Offset: 0x400, Size: 1]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x404, Size: 1]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x3e17db0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x3e17d30
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x3e17ca0
	void SetVolumetricFogDistance(float NewValue);// 0x3e17c20
	void SetVolumetricFogAlbedo(Color NewValue);// 0x3e17ba0
	void SetVolumetricFog(bool bNewValue);// 0x3e17b10
	void SetStartDistance(float Value);// 0x3e17a90
	void SetSecondFogData_FogHeightOffset(float Value);// 0x3e17a10
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x3e17990
	void SetSecondFogData_FogDensity(float Value);// 0x3e17910
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x3e17890
	void SetInscatteringTextureTint(LinearColor Value);// 0x3e17800
	void SetInscatteringColorCubemapAngle(float Value);// 0x3e17780
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x3e176f0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x3e17670
	void SetFogMaxOpacity(float Value);// 0x3e175f0
	void SetFogInscatteringColor(LinearColor Value);// 0x3e17560
	void SetFogHeightFalloff(float Value);// 0x3e174e0
	void SetFogDensity(float Value);// 0x3e17460
	void SetFogCutoffDistance(float Value);// 0x3e173e0
	void SetDirectionalInscatteringStartDistance(float Value);// 0x3e17360
	void SetDirectionalInscatteringExponent(float Value);// 0x3e172e0
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x3e17250
	void Set_HStartDistance(float _HStartDistance);// 0x3e181d0
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x3ddd210
	void Set_HFogHeight(float _HFogHeight);// 0x3e18150
	void Set_HFogFallOff(float _HFogFallOff);// 0x3dddcb0
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x3e180c0
	void Set_DStartDistance(float _DStartDistance);// 0x3ddd420
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x3ddd0c0
	void Set_DMaxDistance(float _DMaxDistance);// 0x3ddd3a0
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x3e18040
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x3e17fc0
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x3e17f40
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x3e17ec0
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x3e17e30
	void Set_DFogHeight(float _DFogHeight);// 0x3ddd5f0
	void Set_DFogGamma(float _DFogGamma);// 0x3ddd4a0
	void Set_DFogFallOff(float _DFogFallOff);// 0x3ddd320

--------------------------------
Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 1]
	float DFogFallOff;//[Offset: 0x4, Size: 1]
	float DMaxDistance;//[Offset: 0x8, Size: 1]
	float DFogGamma;//[Offset: 0xc, Size: 1]
	float DMaxOpacity;//[Offset: 0x10, Size: 1]
	float DStartDistance;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 1]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 1]
	float HStartDistance;//[Offset: 0x8, Size: 1]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 1]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 1]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 1]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 1]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 1]
	float FogHeightFalloff;//[Offset: 0x4, Size: 1]
	float FogHeightOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	bool bHasPrimarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bHasSecondarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	bool bHasTertiarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	SolarUnArmWeapon* Punch;//[Offset: 0x1bc, Size: 1]
	SolarPlayerWeapon* PrimarySlotWeapon;//[Offset: 0x1c4, Size: 1]
	SolarPlayerWeapon* SecondarySlotWeapon;//[Offset: 0x1cc, Size: 1]
	SolarPlayerWeapon* TertiarySlotWeapon;//[Offset: 0x1d4, Size: 1]
	SolarPlayerWeapon* HeldWeapon;//[Offset: 0x1dc, Size: 1]
	void TriggerBoltAnim();// 0x8f2720
	void SpawnMeleeWeapon();// 0x233b180
	void ResetCurrentWeaponFireState();// 0x233a7b0
	void PostBolt();// 0x8f2720
	void OpenScopeForSpectator();// 0x1572c10
	void OnRep_TertiarySlotWeapon();// 0x233a4c0
	void OnRep_SecondarySlotWeapon();// 0x233a4a0
	void OnRep_Punch();// 0x233a460
	void OnRep_PrimarySlotWeapon();// 0x233a480
	void OnRep_HeldWeapon();// 0x233a460
	SolarPlayerWeapon* GetWeaponBySlot(int InSlotType);// 0x2339fd0
	SolarUnArmWeapon* GetUnArmWeapon();// 0x2339fa0
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x2339f40
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x2339f10
	int GetLastActiveWeaponSlot();// 0x2339ee0
	bool GetIsUnArm();// 0x2339eb0
	float GetCurrentWeaponReloadTime(int Mode);// 0x2339ad0
	bool GetCurrentWeaponIsOverloading();// 0x2339aa0
	Texture2D* GetCurrentWeaponIcon();// 0x2339a70
	float GetCurrentWeaponBoltTime(int Mode);// 0x23399d0
	SolarPlayerWeapon* GetCurrentWeapon();// 0x23399a0
	float GetCurrentSwitchWeaponTime();// 0x2339940
	int GetCurrentActiveSlot();// 0x2339910
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x23398e0
	void GameStatisticsWeaponSkill(const int InFireMode);// 0x2339850
	void CrosshairQuitReload();// 0x1571730
	void CrosshairEnterReload();// 0x1571710
	void CloseScopeForSpectator();// 0x1571a50
	void CleanWeaponSlotsUI();// 0x2339810

--------------------------------
Class: WeaponSystemBase.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0xf8, Size: 1]
	SolarWeaponFireInputResolver* WeaponSystemFireInputResolver;//[Offset: 0x100, Size: 1]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x108, Size: 1]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x110, Size: 1]
	Actor* MyPossessPawn;//[Offset: 0x170, Size: 1]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x232f100
	void SwitchSingleWeaponPressMode();// 0x232f0e0
	void SwitchScopeButtonRotatableMode();// 0x232f0c0
	void SwitchDoScopeMode();// 0x8f2720
	void SwitchAutoScopeEnable();// 0x1564a00
	void SwitchAutoFireEnable();// 0x1564ae0
	void SwitchAutoFire(bool Open);// 0x232f030
	void SwitchAssistAim(bool opened);// 0x232efa0
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x232ef10
	void SetCrosshairVisible(bool InVisible);// 0x232ee80
	void SetAutoScope(bool bOpen);// 0x232edf0
	void ServerPlayNoAmmoSound();// 0xc455a0
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x232e6b0
	void OnTouchScreen();// 0x8f2720
	void OnToggleAutoFire();// 0x2028880
	void OnToggleAssistAim();// 0x232dc20
	void OnOtherPlayerSpectateMyOwner();// 0x1564ba0
	void NetMulticastPlayNoAmmoSound();// 0xc45560
	bool IsUsingSpecialQuickAdsButton();// 0x232db20
	SolarWeaponFireInputResolver* GetFireInputResolver();// 0x232d710
	void GetFireButtonInputState(out enum OutLeftFireButton, out enum OutRightFireButton, out enum OutQuickAdsButton);// 0x232d5d0
	WeaponSysStateStruct GetCurrentState();// 0x232d590
	bool CheckAutoFire(out bool canfire);// 0x232d3c0

--------------------------------
Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x230, Size: 1]
	byte[] HitDetectableTypes;//[Offset: 0x238, Size: 1]
	float Interval;//[Offset: 0x248, Size: 1]
	class UserWidget* Crosshair;//[Offset: 0x250, Size: 1]
	SoftObjectPath FireIconPath;//[Offset: 0x258, Size: 1]
	GameplayCueTag HitCueTag;//[Offset: 0x270, Size: 1]
	SlateBrush FireBtnBrush;//[Offset: 0x278, Size: 1]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x310, Size: 1]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x320, Size: 1]
	SolarDamageInfo DamageInfo;//[Offset: 0x378, Size: 1]
	class SolarAbility* MeleeAbilityClass;//[Offset: 0x3b8, Size: 1]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x22c71c0
	void ServerDealMeleeDamage(SolarCharacterBase* Target, Vector ClientHitLoc, bool bHeavyPunch);// 0x22c6860
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x22c5bd0
	SlateBrush GetFireButtonBrush();// 0x22c57f0
	SolarCharacterBase* GetAttackTargetCharacter();// 0x22c57d0

--------------------------------
Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x232de70

--------------------------------
Class: SolarWeaponFireInputResolver.Object
	enum GetRightFireButtonState();// 0x22eef20
	enum GetQuickAdsButtonState();// 0x22eef00
	enum GetLeftFireButtonState();// 0x22eeee0

--------------------------------
Class: WeaponSystemAssistAim.Object
	WeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg;//[Offset: 0x50, Size: 1]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x232eaf0
	bool Init(Actor* InWeaponHolder);// 0x232d9b0
	bool GetActive();// 0x232d560

--------------------------------
Class: WeaponAssistAimWeaponConfig.DataAsset.Object
	float MaxTargetDetectionDistance;//[Offset: 0x30, Size: 1]
	BaseFollowSpeedByTag[] BaseFollowSpeedByTags;//[Offset: 0x38, Size: 1]
	GameplayTagRequirements TargetVelocityFollowTagRequirements;//[Offset: 0x48, Size: 1]
	float TargetVelocityFollowDeactivationDelay;//[Offset: 0x98, Size: 1]
	RuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve;//[Offset: 0x128, Size: 1]
	float TargetVelocityFollowHorizontalRatioCurveScale;//[Offset: 0x1b0, Size: 1]
	float TargetVelocityFollowVerticalRatioCurveScale;//[Offset: 0x1b4, Size: 1]
	float TargetVelocityFollowMaxHorizontalSpeed;//[Offset: 0x1b8, Size: 1]
	float TargetVelocityFollowMaxVerticalSpeed;//[Offset: 0x1bc, Size: 1]
	RuntimeFloatCurve TargetVelocityFollowRatioScaleByDistanceCurve;//[Offset: 0x1c0, Size: 1]
	RuntimeFloatCurve GlobalSensitivityScaleCurve;//[Offset: 0x248, Size: 1]
	float GlobalSensitivityScaleCurveScale;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: BaseFollowSpeedByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 1]
	float SameTargetTriggerCooldown;//[Offset: 0x50, Size: 1]
	float HorizontalSpeed;//[Offset: 0x54, Size: 1]
	float VerticalSpeed;//[Offset: 0x58, Size: 1]
	RuntimeFloatCurve SpeedScaleByDistanceCurve;//[Offset: 0x60, Size: 1]

--------------------------------
Class: WeaponSystemInteract

--------------------------------
Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 1]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponSystemVehicleComponent.WeaponSystemBase.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x180, Size: 1]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x1e8, Size: 1]
	SolarCharacter* MyPawn;//[Offset: 0x1f0, Size: 1]
	WeaponAction WeaponEquipAction;//[Offset: 0x220, Size: 1]
	WeaponAction WeaponUnequipAction;//[Offset: 0x228, Size: 1]
	<FName,enum> SavedWeaponScopeMap;//[Offset: 0x230, Size: 1]
	bool bQuickAdsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	float QuickAdsPressedTime;//[Offset: 0x290, Size: 1]
	void ServerStatVehicleWeaponFire(const int InFireMode);// 0x233a920
	void ServerReload(const byte ModeIndex, const int Need);// 0x233a850
	void ServerChangeWeaponScopeType(enum InScopeType);// 0x233a7d0
	void OnRep_WeaponUnequipAction();// 0x233a500
	void OnRep_WeaponEquipAction();// 0x233a4e0
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x233a3d0
	void OnQuickAdsFire();// 0x233a3b0
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x2339970

--------------------------------
Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 1]
	int ActionParameter;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 1]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ScoutEnemyObject.Object
	ScoutEnemyConfig* ScoutEnemyConfig;//[Offset: 0x70, Size: 1]

--------------------------------
Class: ScoutEnemyConfig.DataAsset.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ScoutMaxNum;//[Offset: 0x34, Size: 1]
	float TimeToScanEffect;//[Offset: 0x38, Size: 1]
	float MaxDetectionDistance;//[Offset: 0x3c, Size: 1]
	Vector2D BondingBoxExtent;//[Offset: 0x40, Size: 1]
	bool bSupportHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	<enum,float> BoxScaleRatioByScope;//[Offset: 0x50, Size: 1]
	byte[] TargetOccBlockTypes;//[Offset: 0xa0, Size: 1]
	GameplayTagContainer BlockWithMyTags;//[Offset: 0xb0, Size: 1]
	GameplayTagContainer BlockWithEnemyTags;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: DuckRollingMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class PrimitiveComponent* ShieldComponentClass;//[Offset: 0x608, Size: 1]
	<SoftObjectPath,SoftObjectPath> MaterialEffectMaterialMapping;//[Offset: 0x610, Size: 1]
	float HeadRelativeHeight;//[Offset: 0x660, Size: 1]
	PrimitiveComponent* ShieldComponent;//[Offset: 0x668, Size: 1]
	Object*[] MeshOverrides;//[Offset: 0x670, Size: 1]
	Object*[] LoadedEffectMaterials;//[Offset: 0x680, Size: 1]
	void ReceiveOnRegister();// 0x2649560

--------------------------------
Class: BattleUpgradeEffectContainer.FastArraySerializer
	BattleUpgradeEffect[] DataArray;//[Offset: 0x108, Size: 1]
	SolarCharacter* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: BattleUpgradeEffect.FastArraySerializerItem
	int Level;//[Offset: 0xc, Size: 1]
	int EffectID;//[Offset: 0x10, Size: 1]
	int[] EffectCandidate;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object

--------------------------------
Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x70, Size: 1]
	ActionNode*[] ExecutingNodes;//[Offset: 0x80, Size: 1]
	int TotalCount();// 0x20b7b80
	ActionNode* GetCurrentExecutingNode();// 0x20b7360
	SequenceNode* Append(ActionNode* Node);// 0x20b7080

--------------------------------
Class: ActionNode.Object
	MulticastInlineDelegateProperty OnBeganCallback;//[Size: 1]
	MulticastInlineDelegateProperty OnEndedCallback;//[Size: 1]
	MulticastInlineDelegateProperty OnResetCallback;//[Size: 1]
	MulticastInlineDelegateProperty OnDisposedCallback;//[Size: 1]
	void Reset();// 0x1ff26b0
	bool Finished();// 0x1ff1fe0
	void Finish();// 0x1ff1f20
	bool Execute(float DeltaTime);// 0x1ff1e90
	bool Disposed();// 0x1ff1e70
	void Dispose();// 0x1ff1e50

--------------------------------
Class: CacheConditionInfo

--------------------------------
Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x22b9850
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0xb43660
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x22b9660
	void PauseTimerInternal(TimerHandle Handle);// 0x22b8790
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0xb43660
	bool IsValidTimerInternal(TimerHandle Handle);// 0x22b8190
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x22b80f0
	void ClearTimerInternal(TimerHandle Handle);// 0x22b7c00
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x22b7960

--------------------------------
Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x50, Size: 1]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x58, Size: 1]
	bool IsSsm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x68, Size: 1]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	delegate DisconnectedDelegate;//[Offset: 0x7c, Size: 1]
	delegate ConnectedDelegate;//[Offset: 0x8c, Size: 1]
	delegate MessageReceivedDelegate;//[Offset: 0x9c, Size: 1]
	SolarPlayerReport MyReport;//[Offset: 0xb0, Size: 1]
	SolarPlayerState* MyPS;//[Offset: 0x4d8, Size: 1]
	void UpdateTeamRank(byte TeamID, int Rank);// 0xb43660
	void UpdateTeamMVPPlayer(const byte TeamID, FString InPlayerID);// 0xb43660
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0xb43660
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0xb43660
	bool UpdateBotAIData(int AIIndex, SolarPlayerState* PlayerState);// 0xb43660
	void TryEndBattle();// 0xb43660
	void SyncSsmDataToGameState();// 0xb43660
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0xb43660
	void SsmDSChangeRoleIDRequest(FString InPlayerID, int InRoleID);// 0xb43660
	void SetKnockoutPoints(FString InClanId, const int InKnockoutPoints);// 0xb43660
	void SendSceenshot2Server(FString UserId, FString PlayerId, FString BattleID, int64 ScreenshotTime, int ImageSize, int ImageWidth, int ImageHeight, FString ImageType, FString ImageBuffer);// 0xb43660
	void SendInputDeviceChangedWrapper(enum NowInputType);// 0xb43660
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0xb43660
	void ReportTournamentSpectate(out <FString,FString> TournamentSpectateData);// 0xb43660
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0xb43660
	void RecordLastUsedVehicle();// 0xb43660
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerID, SolarPlayerState* InPlayer);// 0xb43660
	void PlayerCancelJoinRequest(FString PlayerId);// 0xb43660
	void PlayerCancelJoin(FString PlayerId);// 0xb43660
	void OpenSupplement(int MaxSecond);// 0x2649560
	void OnStartBattleResponse();// 0x22b4e60
	void OnRecvData(out const byte[] Data);// 0xb43660
	void OnRecordBattleStartTime(const float InStartTime);// 0xb43660
	bool OnReceivedTeamPreJoinRequest(out const FString[] PlayerIds, int TeamID);// 0x22b4d40
	void OnReceivedPlayerJoinData(FString PlayerId);// 0x22b4ca0
	void OnReceivedPlayerCancelJoin(FString PlayerId);// 0x22b4c00
	void OnPostLoadMapWithWorld(World* World);// 0xb43660
	void OnPlayerLogin(FString PlayerId);// 0xb43660
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x22b4a40
	void OnDisconnected(int ConnId);// 0xb43660
	void OnConnected(int ConnId);// 0xb43660
	void NotifyTournamentSpectateState(bool bIsEnterReplay, out FString BattleID);// 0xb43660
	void NotifyRoomDataChanged(out const CustomRoomData CustomRoomData);// 0xb43660
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0xb43660
	void NotifyPlayerReward();// 0xb43660
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0xb43660
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0xb43660
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0xb43660
	void NotifyEquipCharacterSkinRequest(FString PlayerId, int CharacterId, int SkinId);// 0xb43660
	void NotifyClientBattleStateFish();// 0xb43660
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0xb43660
	bool IsEnableAITeamManager();// 0xb43660
	bool IsAllowReconnectGame();// 0xb43660
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0xb43660
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0xb43660
	void GetWeaponUpgradeSlotByWeaponID(out UpgradeSlotStruct[] outData, FString PlayerId, const int weaponid);// 0xb43660
	int GetWeaponSkinIDByWeaponID(FString PlayerId, const int weaponid);// 0xb43660
	int GetWarmGameType();// 0xb43660
	int GetTournamentID();// 0xb43660
	void GetStartBattleRequestInfo(out StartBattleRequestInfo OutResult);// 0xb43660
	SolarGameModeInfo GetSolarGameModeInfo();// 0xb43660
	int GetRuleID();// 0xb43660
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x22b46d0
	int GetRankMatchID();// 0xb43660
	int[] GetPlayerUsableTailFlameIds(FString PlayerId);// 0xb43660
	int[] GetPlayerUsableJetpackIds(FString PlayerId);// 0xb43660
	byte[] GetPlayerTeamIDs();// 0xb43660
	FString[] GetPlayerRoleAndOpenIDs();// 0xb43660
	int GetPlayerCount();// 0xb43660
	FString GetPlayerClanID(FString PlayerId);// 0xb43660
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0xb43660
	int GetNumMode();// 0xb43660
	int[] GetMLRelatedAIDataMLRatio();// 0xb43660
	int[] GetMLRelatedAIDataMLFeature();// 0xb43660
	bool GetMLRelatedAIDataMLClosed();// 0xb43660
	int GetMaxPlayerNum();// 0xb43660
	FString GetLocalPlayerID();// 0xb43660
	FString GetLocalIPAddress();// 0x22b4650
	KnockoutParams GetKnockoutPointParams();// 0xb43660
	bool GetIsCloseMatch();// 0xb43660
	bool GetHasMonster();// 0xb43660
	bool GetHasMachineLearning();// 0xb43660
	int GetGameModeGroupId();// 0xb43660
	int GetEntryID();// 0xb43660
	int GetCurrentMatchBotTeamPresetID();// 0xb43660
	int[] GetClientMatchingMapIds();// 0xb43660
	float GetBotShootSimulatorRatio();// 0xb43660
	FString GetBattleID();// 0xb43660
	<int,int> GetAILevelConfig();// 0xb43660
	int GetAIAccompanyTimelineID();// 0xb43660
	int GetAboutToEnterPlayerCount();// 0xb43660
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0xb43660
	void CloseSupplement();// 0xb43660
	bool CheckPlayerLeave(FString PlayerId);// 0xb43660
	bool CheckJoinToken(FString Token, FString PlayerId);// 0xb43660
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0xb43660
	void CheckBattleOver();// 0xb43660

--------------------------------
Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x228, Size: 1]
	int ReceiveBufferSize;//[Offset: 0x22c, Size: 1]
	float TimeBetweenTicks;//[Offset: 0x230, Size: 1]
	bool SendData(int ConnectionId, byte[] Data);// 0x16cf120
	void Disconnect(int ConnectionId);// 0x16cf090
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x16cee20

--------------------------------
Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 1]
	MulticastInlineDelegateProperty OnMatchChannelChange;//[Size: 1]
	static SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x2096220
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x2095c10

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x1ff1f20

--------------------------------
Class: CustomRoomData
	FString Name;//[Offset: 0x0, Size: 1]
	int64 MinPlayerLimit;//[Offset: 0x10, Size: 1]
	int64 MaxPlayerLimit;//[Offset: 0x18, Size: 1]
	FString OwnerID;//[Offset: 0x20, Size: 1]
	FString Passwd;//[Offset: 0x30, Size: 1]
	int LevelLimit;//[Offset: 0x40, Size: 1]
	int64 ShowID;//[Offset: 0x48, Size: 1]
	int64 MaxOBPlayerLimit;//[Offset: 0x50, Size: 1]
	bool bIsEnabledSwapPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bIsEnabledInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bIsEnableTeamJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	enum RoomType;//[Offset: 0x5b, Size: 1]
	TournamentData TournamentData;//[Offset: 0x5c, Size: 1]
	int RewardPoolID;//[Offset: 0x6c, Size: 1]
	int RewardPoolPrizeType;//[Offset: 0x70, Size: 1]

--------------------------------
Class: TournamentData
	int StartTime;//[Offset: 0x0, Size: 1]
	int DelayTime;//[Offset: 0x4, Size: 1]
	int Turn;//[Offset: 0x8, Size: 1]
	enum TournamentType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 1]
	uint64 UserId;//[Offset: 0x10, Size: 1]
	FString NickName;//[Offset: 0x18, Size: 1]
	int CharacterId;//[Offset: 0x28, Size: 1]
	int SkinId;//[Offset: 0x2c, Size: 1]
	int PlayerRank;//[Offset: 0x30, Size: 1]
	int Gender;//[Offset: 0x34, Size: 1]
	int AccountFlag;//[Offset: 0x38, Size: 1]
	int TeamRank;//[Offset: 0x3c, Size: 1]
	int TeamID;//[Offset: 0x40, Size: 1]
	int PosInTeam;//[Offset: 0x44, Size: 1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	int KillNum;//[Offset: 0x4c, Size: 1]
	int KillNumToRealPlayer;//[Offset: 0x50, Size: 1]
	int[] VehicleKillNum_ID;//[Offset: 0x58, Size: 1]
	int[] VehicleKillNum_Value;//[Offset: 0x68, Size: 1]
	int KillTeammate;//[Offset: 0x78, Size: 1]
	int KillInAirNum;//[Offset: 0x7c, Size: 1]
	int KillDownInAirNum;//[Offset: 0x80, Size: 1]
	int WeaponSkillKillNum;//[Offset: 0x84, Size: 1]
	int P_KillStreak;//[Offset: 0x88, Size: 1]
	int[] KillStreakHistory;//[Offset: 0x90, Size: 1]
	int RevengeNum;//[Offset: 0xa0, Size: 1]
	int DeathNum;//[Offset: 0xa4, Size: 1]
	int KillDownNum;//[Offset: 0xa8, Size: 1]
	int KillDownTeammate;//[Offset: 0xac, Size: 1]
	float AccurateDamage;//[Offset: 0xb0, Size: 1]
	int AccurateDameageTimes;//[Offset: 0xb4, Size: 1]
	int AccurateKillTimes;//[Offset: 0xb8, Size: 1]
	int AccurateKillDownTimes;//[Offset: 0xbc, Size: 1]
	float CauseDamage;//[Offset: 0xc0, Size: 1]
	float CauseDamageToRealPlayer;//[Offset: 0xc4, Size: 1]
	float ReceivedDamage;//[Offset: 0xc8, Size: 1]
	int AssistNum;//[Offset: 0xcc, Size: 1]
	float CollectEnergy;//[Offset: 0xd0, Size: 1]
	int BuyESElectricNum;//[Offset: 0xd4, Size: 1]
	int ResurrectionCapsule;//[Offset: 0xd8, Size: 1]
	int TeamFriendRevive;//[Offset: 0xdc, Size: 1]
	float ReceivedHeal;//[Offset: 0xe0, Size: 1]
	float HealSelf;//[Offset: 0xe4, Size: 1]
	float TeammateHeal;//[Offset: 0xe8, Size: 1]
	int OpenAirBoxNum;//[Offset: 0xec, Size: 1]
	float LifeTime;//[Offset: 0xf0, Size: 1]
	int SaveCount;//[Offset: 0xf4, Size: 1]
	int FlyCount;//[Offset: 0xf8, Size: 1]
	int VehicleTime;//[Offset: 0xfc, Size: 1]
	int CurCharacterLevel;//[Offset: 0x100, Size: 1]
	int TotalCharacterExp;//[Offset: 0x104, Size: 1]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	int[] CharacterExpReason;//[Offset: 0x110, Size: 1]
	int CharacterExp;//[Offset: 0x120, Size: 1]
	int AccountExp;//[Offset: 0x124, Size: 1]
	int TotalAccountExp;//[Offset: 0x128, Size: 1]
	int AccountLevel;//[Offset: 0x12c, Size: 1]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int RankID;//[Offset: 0x134, Size: 1]
	int RankBeforeScore;//[Offset: 0x138, Size: 1]
	int RankSurviveScore;//[Offset: 0x13c, Size: 1]
	int RankBeforeSurviveScore;//[Offset: 0x140, Size: 1]
	int RankDefeatScore;//[Offset: 0x144, Size: 1]
	int RankBeforeDefeatScore;//[Offset: 0x148, Size: 1]
	float RankDefeatRatio;//[Offset: 0x14c, Size: 1]
	int RankAfterScore;//[Offset: 0x150, Size: 1]
	int RankLegend;//[Offset: 0x154, Size: 1]
	byte RankProtectType;//[Offset: 0x158, Size: 1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	int WinninScoreID;//[Offset: 0x15c, Size: 1]
	int Zomborg;//[Offset: 0x160, Size: 1]
	float MvpScore;//[Offset: 0x164, Size: 1]
	float KDA;//[Offset: 0x168, Size: 1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 1]
	int[] SettlementItems;//[Offset: 0x170, Size: 1]
	FString[] StringExtraRewards;//[Offset: 0x180, Size: 1]
	int[] SendGiftGold;//[Offset: 0x190, Size: 1]
	int[] SendGiftDiamond;//[Offset: 0x1a0, Size: 1]
	FString[] SendGiftPlayerName;//[Offset: 0x1b0, Size: 1]
	FString[] SendGiftPlayerID;//[Offset: 0x1c0, Size: 1]
	int[] WeaponExpIds;//[Offset: 0x1d0, Size: 1]
	int[] WeaponLevel;//[Offset: 0x1e0, Size: 1]
	int[] CurWeaponExp;//[Offset: 0x1f0, Size: 1]
	int[] WeaponExps;//[Offset: 0x200, Size: 1]
	int[] WeaponKillNum_ID;//[Offset: 0x210, Size: 1]
	float[] WeaponKillNum_Value;//[Offset: 0x220, Size: 1]
	int[] WeaponDamage_ID;//[Offset: 0x230, Size: 1]
	float[] WeaponDamage_Value;//[Offset: 0x240, Size: 1]
	int[] VehicleDamage_ID;//[Offset: 0x250, Size: 1]
	float[] VehicleDamage_Value;//[Offset: 0x260, Size: 1]
	int[] VehicleDistance_ID;//[Offset: 0x270, Size: 1]
	int[] VehicleDistance_Value;//[Offset: 0x280, Size: 1]
	int SettlementConfigID;//[Offset: 0x290, Size: 1]
	int GameModeSubID;//[Offset: 0x294, Size: 1]
	FString KillerPlayerId;//[Offset: 0x298, Size: 1]
	uint64 KillerUserId;//[Offset: 0x2a8, Size: 1]
	FString KillerNickName;//[Offset: 0x2b0, Size: 1]
	FString KillerOS;//[Offset: 0x2c0, Size: 1]
	FString OS;//[Offset: 0x2d0, Size: 1]
	int[] CharacterKillNumIDs;//[Offset: 0x2e0, Size: 1]
	int[] CharacterKillNumValues;//[Offset: 0x2f0, Size: 1]
	int WarmType;//[Offset: 0x300, Size: 1]
	int[] AchievementIDs;//[Offset: 0x308, Size: 1]
	int[] AchievementValues;//[Offset: 0x318, Size: 1]
	int LikeValue;//[Offset: 0x328, Size: 1]
	int[] StrategyConditionIDs;//[Offset: 0x330, Size: 1]
	int SettlementDisplayStrategyID;//[Offset: 0x340, Size: 1]
	int LastUseVehicleID;//[Offset: 0x344, Size: 1]
	FString[] SavedTeammateIDArr;//[Offset: 0x348, Size: 1]
	int[] SavedTeammateBonusArr;//[Offset: 0x358, Size: 1]
	byte[] SettlementRewards;//[Offset: 0x368, Size: 1]
	byte[] CrateRewardData;//[Offset: 0x378, Size: 1]
	FString ClanId;//[Offset: 0x388, Size: 1]
	int KnockoutPoints;//[Offset: 0x398, Size: 1]
	bool bIsKnockoutPointsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	int BattlePassAddExp;//[Offset: 0x3a0, Size: 1]
	int BattlePassExp;//[Offset: 0x3a4, Size: 1]
	int BattlePassID;//[Offset: 0x3a8, Size: 1]
	int[] BattlePassTaskWeek;//[Offset: 0x3b0, Size: 1]
	int[] BattlePassTaskID;//[Offset: 0x3c0, Size: 1]
	int[] BattlePassTaskAdd;//[Offset: 0x3d0, Size: 1]
	int[] BattlePassTaskVal;//[Offset: 0x3e0, Size: 1]
	int[] UsedCharacterIDs;//[Offset: 0x3f0, Size: 1]
	int CardPose;//[Offset: 0x400, Size: 1]
	int Cardbackground;//[Offset: 0x404, Size: 1]
	int SameClanCnt;//[Offset: 0x408, Size: 1]
	int CombatCore;//[Offset: 0x40c, Size: 1]
	bool IsCheater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	byte[] SettlePunishTypes;//[Offset: 0x418, Size: 1]

--------------------------------
Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x428, Size: 1]

--------------------------------
Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 1]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	enum AccessoryType;//[Offset: 0x5, Size: 1]
	int AccessoryID;//[Offset: 0x8, Size: 1]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 1]
	LinearColor IconColorOverride;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: StartBattleRequestInfo
	int aiNum;//[Offset: 0x0, Size: 1]
	int AILevel;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarGameModeInfo
	int GameModeId;//[Offset: 0x0, Size: 1]
	FString MapName;//[Offset: 0x8, Size: 1]
	int NumMode;//[Offset: 0x18, Size: 1]
	int PlayerCount;//[Offset: 0x1c, Size: 1]
	int TeamCount;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 1]
	int AccountLevel;//[Offset: 0x10, Size: 1]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 1]
	FString OpenId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KnockoutParams
	float KnockoutKillPoint;//[Offset: 0x0, Size: 1]
	float[] KnockoutRankPoints;//[Offset: 0x8, Size: 1]
	float KnockoutDamagePoint;//[Offset: 0x18, Size: 1]
	float KnockoutDamageTakenPoint;//[Offset: 0x1c, Size: 1]
	float ScalarParam;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarTableManager.Object
	enum SystemLang;//[Offset: 0x30, Size: 1]
	static void SetIMInitFlag(bool Flag);// 0x220feb0
	static void SetCurrentLangEnum(enum InLang);// 0x220fe40
	static void SetCurrentLang(FString InLang);// 0x220fdb0
	void ReceiveInit();// 0xb43660
	void OnSetCurrentLang(FString InLang);// 0xb43660
	static void MakeUpperLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x220faf0
	static void MakeUpperLocalText(out FString OutLocalText);// 0x220fa50
	static void MakeLowerLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x220f960
	static void MakeLowerLocalText(out FString OutLocalText);// 0x220f8c0
	static bool IsLocalTextIDValid(int ID);// 0x220f760
	static FString GetLocalTextWithLang(int ID, enum InLang, bool bMakeUpperText);// 0x220ec60
	static FString GetLocalText(int ID, bool bMakeUpperText);// 0x220eb50
	static bool GetIMInitFlag();// 0x220eb20
	static enum GetCurrentLangEnum();// 0x220eaf0
	static FString GetCurrentLang();// 0x220ea70
	static enum ConvertLangNameToEnum(FString LangName);// 0x220e940

--------------------------------
Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 1]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 1]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	byte MatchTimes;//[Offset: 0x43, Size: 1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bClickSocialEntranceBtnDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bClickSocialEntranceBtnFacebook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	bool bClickSocialEntranceBtnYouTube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bClickSocialEntranceBtnTikTok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bClickSocialEntranceBtnInstagram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool bClickSocialTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 1]
	bool bHasReportedOnline15min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bHasReportedOnline30min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bHasPlayedPackEnterAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool bHasClickClanPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	bool bHasClickVipCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int BattlePassID;//[Offset: 0x60, Size: 1]
	int[] MarkingPassTaskID;//[Offset: 0x68, Size: 1]
	int[] DisplayedProductIDs;//[Offset: 0x78, Size: 1]
	int[] ClickedPosterRecIDs;//[Offset: 0x88, Size: 1]
	uint32[] ReadMailIds;//[Offset: 0xa0, Size: 1]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x21fab30
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x21faa60
	void UpdateMarkTask(int InBattlePassID, int TaskID, bool Add);// 0x21fa950
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x21fa8a0
	void UpdateClickedPosterRecIDs(const int InID);// 0x21fa790
	void SetMarkingTask(int InBattlePassID, out int[] InTaskID);// 0x21fa540
	void PrintTwiceConfirmCheckWindowList();// 0x8f2720
	void GetMarkingTask(int InBattlePassID, out int[] OutTaskID);// 0x21f9df0
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x21f9370
	void ClearDisplayIDs();// 0x21f9350

--------------------------------
Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 1]
	DateTime Timestamp;//[Offset: 0x8, Size: 1]
	enum Duration;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DateTime

--------------------------------
Class: SolarRedHintManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object

--------------------------------
Class: SolarPopPanelManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object

--------------------------------
Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 1]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 1]
	static bool UseRenderThread();// 0x21bb8e0
	static bool SupportsMultithreading();// 0x21bb7a0
	static double Seconds();// 0x21bb770
	void ReceiveShutdown();// 0x2649560
	void ReceiveInit();// 0x2649560
	static bool IsThisApplicationForeground();// 0x21bb070
	static bool IsRunningOnBattery();// 0x21bb040
	static bool Is64bitOperatingSystem();// 0x21baf40
	static int64 GetVideoMemory();// 0x21baf10
	FString GetUniqueDeviceId();// 0x21baed0
	static FString GetTimeZoneId();// 0x9dcd50
	static FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x21badb0
	SolarPlatformStats* GetSolarPlatformStats();// 0x21bad80
	int GetSimultaneousInstanceId();// 0x21bad50
	static FString GetPrimaryGPUBrand();// 0x21bac70
	static FString GetPathVarDelimiter();// 0x21babc0
	static void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x21baa80
	static FString GetOSVersion();// 0x9dcbb0
	static uint32 GetMoniterWidth();// 0x21baa20
	static int GetMoniterRefreshRate();// 0x21ba9f0
	static uint32 GetMoniterHeight();// 0x21ba9c0
	static int GetMaxPathLength();// 0x21ba990
	GameUserSettings* GetGameUserSettings();// 0x21ba960
	static FString GetEnvironmentVariable(FString VariableName);// 0x21ba850
	Engine* GetEngine();// 0x21ba820
	static bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x21ba6e0
	static float GetDeviceTemperatureLevel();// 0x21ba6b0
	static FString GetDeviceMakeAndModel();// 0x9dc670
	static FString GetDefaultDeviceProfileName();// 0x21ba630
	static FString GetCPUVendor();// 0x21ba500
	static uint32 GetCPUInfo();// 0x21ba4d0
	static FString GetCPUChipset();// 0x9dc4f0
	static FString GetCPUBrand();// 0x9dc570
	static int GetBatteryLevel();// 0x21ba4a0
	static FString ClipboardPaste();// 0x21a3d20
	static void ClipboardCopy(FString str);// 0x21a26f0

--------------------------------
Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 1]
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0xb43660
	void ReceiveShutdown();// 0x2649560
	void ReceivePostWorldInitialization(World* World);// 0xb43660
	void ReceiveInit();// 0x2649560
	uint64 GetRHIUsedMemory();// 0x21bacf0
	float GetRenderThreadTime();// 0x21bad20
	int GetNumDrawCalls();// 0x21baa50
	int GetMinFPS();// 0xb43660
	float GetGameThreadTime();// 0x21ba930
	int GetAverageFPS();// 0xb43660

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 1]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 1]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 1]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 1]
	int WindowPosX;//[Offset: 0x90, Size: 1]
	int WindowPosY;//[Offset: 0x94, Size: 1]
	int FullscreenMode;//[Offset: 0x98, Size: 1]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 1]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 1]
	uint32 Version;//[Offset: 0xa4, Size: 1]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 1]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 1]
	float FrameRateLimit;//[Offset: 0xb0, Size: 1]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 1]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 1]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 1]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 1]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 1]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 1]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 1]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 1]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 1]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 1]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 1]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 1]
	MulticastInlineDelegateProperty OnGameUserSettingsUINeedsUpdate;//[Size: 1]
	void ValidateSettings();// 0x30f3ba0
	bool SupportsHDRDisplayOutput();// 0x7d3fe0
	void SetVSyncEnabled(bool bEnable);// 0x3e2b8f0
	void SetVisualEffectQuality(int Value);// 0x3e2ba10
	void SetViewDistanceQuality(int Value);// 0x3e2b980
	void SetToDefaults();// 0x3513650
	void SetTextureQuality(int Value);// 0x3e2b860
	void SetShadowQuality(int Value);// 0x3e2b7d0
	void SetShadingQuality(int Value);// 0x3e2b740
	void SetScreenResolution(IntPoint Resolution);// 0x3e2b6c0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x3e2b640
	void SetResolutionScaleValue(int NewScaleValue);// 0x3e2b5b0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x3e2b530
	void SetPostProcessingQuality(int Value);// 0x3e2b4a0
	void SetOverallScalabilityLevel(int Value);// 0x3e2b410
	void SetFullscreenMode(byte InFullscreenMode);// 0x3e2b390
	void SetFrameRateLimit(float NewLimit);// 0x3e2b310
	void SetFoliageQuality(int Value);// 0x3e2b280
	void SetDynamicResolutionEnabled(bool bEnable);// 0x3e2b1f0
	void SetBenchmarkFallbackValues();// 0x3e2b140
	void SetAudioQualityLevel(int QualityLevel);// 0x3e2b0b0
	void SetAntiAliasingQuality(int Value);// 0x3e2b020
	void SaveSettings();// 0x7c99c0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x3e2af20
	void RevertVideoMode();// 0x3e2af00
	void ResetToCurrentSettings();// 0x7c99e0
	void LoadSettings(bool bForceReload);// 0x3e2ae70
	bool IsVSyncEnabled();// 0x3e2ae40
	bool IsVSyncDirty();// 0x3e2ae10
	bool IsScreenResolutionDirty();// 0x3e2ade0
	bool IsHDREnabled();// 0x3e2adb0
	bool IsFullscreenModeDirty();// 0x3e2ad80
	bool IsDynamicResolutionEnabled();// 0x3e2ad50
	bool IsDynamicResolutionDirty();// 0x3e2ad20
	bool IsDirty();// 0x3e2acf0
	int GetVisualEffectQuality();// 0x3e2ac60
	int GetViewDistanceQuality();// 0x3e2ac30
	int GetTextureQuality();// 0x3e2ac00
	static int GetSyncInterval();// 0x3e2abd0
	int GetShadowQuality();// 0x20b77e0
	int GetShadingQuality();// 0x3e2aba0
	IntPoint GetScreenResolution();// 0x3e2ab20
	float GetResolutionScaleNormalized();// 0x3e2aaf0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x3e2a950
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x3e2a7b0
	float GetRecommendedResolutionScale();// 0x3e2a770
	byte GetPreferredFullscreenMode();// 0x3e2a740
	int GetPostProcessingQuality();// 0x21bad50
	int GetOverallScalabilityLevel();// 0x3e2a5d0
	IntPoint GetLastConfirmedScreenResolution();// 0x3e2a590
	byte GetLastConfirmedFullscreenMode();// 0x3e2a560
	static GameUserSettings* GetGameUserSettings();// 0x3e2a530
	byte GetFullscreenMode();// 0x3e2a500
	float GetFrameRateLimit();// 0x3e2a4d0
	static int GetFramePace();// 0x3e2a4a0
	int GetFoliageQuality();// 0x3e2a470
	IntPoint GetDesktopResolution();// 0x3e2a430
	static IntPoint GetDefaultWindowPosition();// 0x3e2a3f0
	static byte GetDefaultWindowMode();// 0x3e2a3c0
	float GetDefaultResolutionScale();// 0x3e2a380
	static IntPoint GetDefaultResolution();// 0x3e2a340
	int GetCurrentHDRDisplayNits();// 0x3e2a310
	int GetAudioQualityLevel();// 0x3397ac0
	int GetAntiAliasingQuality();// 0x9255f0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x3e2a240
	void ConfirmVideoMode();// 0x30f3d10
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x3e2a1b0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x3e2a120
	void ApplyNonResolutionSettings();// 0x30f3d30
	void ApplyHardwareBenchmarkResults();// 0x3dc0950

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 1]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 1]
	Font* SmallFont;//[Offset: 0x50, Size: 1]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 1]
	Font* MediumFont;//[Offset: 0x70, Size: 1]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 1]
	Font* LargeFont;//[Offset: 0x90, Size: 1]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 1]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 1]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 1]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 1]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 1]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 1]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 1]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 1]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 1]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 1]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 1]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 1]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 1]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 1]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 1]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 1]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 1]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 1]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 1]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 1]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 1]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 1]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 1]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 1]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 1]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 1]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 1]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 1]
	Object* GameSingleton;//[Offset: 0x288, Size: 1]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 1]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 1]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 1]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 1]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 1]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 1]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 1]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 1]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 1]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 1]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 1]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 1]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 1]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 1]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 1]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 1]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 1]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 1]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 1]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 1]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 1]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 1]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 1]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 1]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 1]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 1]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 1]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 1]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 1]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 1]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 1]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 1]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 1]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 1]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 1]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 1]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 1]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 1]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 1]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 1]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 1]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 1]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 1]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 1]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 1]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 1]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 1]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 1]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 1]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 1]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 1]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 1]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 1]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 1]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 1]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 1]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 1]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 1]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 1]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 1]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 1]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 1]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 1]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 1]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 1]
	float MinLightMapDensity;//[Offset: 0x658, Size: 1]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 1]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 1]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 1]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 1]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 1]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 1]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 1]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 1]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 1]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 1]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 1]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 1]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 1]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 1]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 1]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 1]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 1]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 1]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 1]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 1]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 1]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 1]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 1]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 1]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 1]
	int TickCycles;//[Offset: 0x7c0, Size: 1]
	int GameCycles;//[Offset: 0x7c4, Size: 1]
	int ClientCycles;//[Offset: 0x7c8, Size: 1]
	float NearClipPlane;//[Offset: 0x7cc, Size: 1]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 1]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 1]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 1]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 1]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 1]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 1]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 1]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 1]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 1]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 1]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 1]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 1]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 1]
	Color C_AddWire;//[Offset: 0x8a4, Size: 1]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 1]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 1]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 1]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 1]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 1]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 1]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 1]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 1]
	Color C_Volume;//[Offset: 0x8c8, Size: 1]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 1]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 1]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 1]
	enum TransitionType;//[Offset: 0x8e8, Size: 1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 1]
	FString TransitionGameMode;//[Offset: 0x900, Size: 1]
	float MeshLODRange;//[Offset: 0x910, Size: 1]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 1]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 1]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 1]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 1]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 1]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 1]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 1]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 1]
	float DisplayGamma;//[Offset: 0x94c, Size: 1]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 1]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 1]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 1]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 1]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 1]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 1]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a8, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a8, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a8, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9ac, Size: 1]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b4, Size: 1]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b8, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9c0, Size: 1]
	float SelectionHighlightIntensity;//[Offset: 0x9d0, Size: 1]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9d4, Size: 1]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d8, Size: 1]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc28, Size: 1]
	FString[] ServerActors;//[Offset: 0xc38, Size: 1]
	FString[] RuntimeServerActors;//[Offset: 0xc48, Size: 1]
	float NetErrorLogInterval;//[Offset: 0xc58, Size: 1]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc5c, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xc78, Size: 1]

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 1]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 1]

--------------------------------
Class: RuntimeAssetsCollectionBase.Object

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 1]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 1]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 1]
	Color Out;//[Offset: 0x4, Size: 1]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 1]
	FName NewGameName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 1]
	FName OldClassName;//[Offset: 0x8, Size: 1]
	FName NewClassName;//[Offset: 0x10, Size: 1]
	FName OldSubobjName;//[Offset: 0x18, Size: 1]
	FName NewSubobjName;//[Offset: 0x20, Size: 1]
	FName NewClassClass;//[Offset: 0x28, Size: 1]
	FName NewClassPackage;//[Offset: 0x30, Size: 1]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 1]
	FString NewPluginName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 1]
	FName NewStructName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 1]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 1]
	Timecode GetTimecode();// 0x3f24650
	enum GetSynchronizationState();// 0x3f24620
	QualifiedFrameTime GetQualifiedFrameTime();// 0x3f245e0
	FrameRate GetFrameRate();// 0x3f24570
	Timecode GetDelayedTimecode();// 0x3f24530
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x3f244f0

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 1]
	int Minutes;//[Offset: 0x4, Size: 1]
	int Seconds;//[Offset: 0x8, Size: 1]
	int Frames;//[Offset: 0xc, Size: 1]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	FString Comment;//[Offset: 0x18, Size: 1]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 1]
	FName DriverClassName;//[Offset: 0x8, Size: 1]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 1]
	float GetPingBackend;//[Offset: 0x34, Size: 1]
	float FPS;//[Offset: 0x38, Size: 1]
	byte GetPingBattleServer();// 0x21bac40
	float GetPacketsLossRate();// 0x21bab90
	float GetAverageFPS();// 0x21ba470

--------------------------------
Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x21ab2c0
	bool IsAccountFlagOn();// 0x21aac90

--------------------------------
Class: SolarLuaManager.Object
	MulticastInlineDelegateProperty OnHandleLuaException;//[Size: 1]
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x50, Size: 1]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x70, Size: 1]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x21ab230
	void OnLuaContextCleanup(bool bFullCleanup);// 0xb43660
	static enum GetBuildConfiguration();// 0x21aa0a0
	void AddToDoNotShowAgainList(FString Msg);// 0x21a9c80

--------------------------------
Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x2649560

--------------------------------
Class: SolarLuaHelper.Object
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x30, Size: 1]
	DataTable* KeyMappingDisplayInfoDataTable;//[Offset: 0x38, Size: 1]
	SolarPlayerReport[] SettleTeamReports;//[Offset: 0x40, Size: 1]
	static bool WriteFile(FString FilePath, FString Content);// 0x21a6a60
	static void UELogWarning(FString str);// 0x20cdf30
	static void UELogNetwork(FString str);// 0x20cdf30
	static void UELogError(FString str);// 0x20cdf30
	static void UELog(FString str);// 0x20cdf30
	static Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x21a69b0
	static bool TryConvertFilenameToLongPackageName(FString InFilename, out FString OutPackageName);// 0x21a68b0
	static void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x21a6790
	static void StaticSetAkState(FName StateGroup, FName State);// 0x21a66d0
	static void StaticSetAkBusConfig(FString BusName, enum ChannelConfiguration);// 0x21a6600
	static void StaticPostAkEventByNameGlobal(FString InEventName);// 0x21a6570
	static int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x21a6410
	static int StaticPostAkEventByName(FString InEventName);// 0x21a6370
	static void SolarSetVSyncEnabled(bool bEnable);// 0x21a62f0
	static void SolarSetShadowQuality(int InQuality);// 0x21a6270
	static void SolarSetMSAAEnabled(bool bEnable);// 0x21a61f0
	static void SolarSetGraphicsQuality(enum InLevel);// 0x21a6180
	static void SolarSetFrameRate(enum FrameRateLevel);// 0x21a6110
	static void SolarSetColorGrading(enum InTheme);// 0x21a60a0
	static void SolarRefreshContentScaleFactorLevel();// 0x21a6080
	static bool SolarGetTextureStreamingEnable();// 0x21a6050
	static void SolarEnableTextureStreaming(bool bEnable);// 0x21a5fd0
	static void SolarEnableDynamicShadow(bool bEnable);// 0x21a5f50
	static int ShouldEnterLobby();// 0x21a5f20
	static void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x21a5df0
	static void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x21a5cc0
	static void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x21a5bb0
	static void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x21a5ad0
	static void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x21a5a00
	static void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x21a5920
	static void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x21a5850
	void SetRenderBatch(int Mode);// 0x21a57c0
	void SetPlayerSettlementReport(out const SolarGameModeInfo GameInfo);// 0xb43660
	void SetPlayerNameColorByVIPState(TextBlock* TextWidget, byte VipType);// 0xb43660
	static void SetPatchBuildVersion(FString Version);// 0x21a5730
	static void SetEnableSoftwareCursorWidgets(const bool bIsEnabled);// 0x21a56b0
	static void SetCurThirdPartyInfo(FString InCurThirdPartyInfo);// 0x21a5620
	static void SetChangeListNumber(FString ChangeListNum);// 0x21a5590
	static void SetActorYawByDeltaRotatedImpl(Actor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated);// 0x21a5480
	static void SetActorYawByDelta(Actor* InActor, float InDeltaYaw);// 0x21a53c0
	static void ResumeBatching();// 0x21a5380
	static Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x21a52d0
	static void ResetIOSgestureRecognizers();// 0x9a1270
	void ReloadVoiceBanks();// 0x21a52b0
	static FString ReadFileContent(FString FilePath);// 0x21a51d0
	static int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x21a50f0
	void PlayVoiceLocaly(int CharacterId, int SkinId, enum Type);// 0x21a4fe0
	void OnBroadcastModeChanged(const bool bOpen);// 0x21a4f50
	static bool MoveFile(FString DestFilePath, FString SrcFilePath);// 0x21a4e60
	static Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x21a4d80
	static byte[] LoadFileToArray(FString FilePath);// 0x21a4c80
	bool IsWorldTearingDown();// 0x21a4c50
	static bool IsLocalBuild();// 0x212a4a0
	static bool IsInputTypeGamepad(PlayerController* InPlayerController);// 0x21a4bc0
	bool IsBattlePassInfoUpdated(SolarPlayerState* InPlayerState);// 0x21a4b20
	static bool HasReviveItemManager(Object* InWorldContext);// 0x21a4920
	static FString HashMd5(FString InputText);// 0x21a49b0
	static int64 GetUtcNowTimestamp();// 0x21a48f0
	FString GetTaskDesc(int TaskID);// 0xb43660
	static FString GetSourceCommitHash();// 0x21a4840
	static FString GetSourceBuildVersion();// 0x21a4840
	SolarGameState* GetSolarGameState();// 0x21a4810
	static FString GetShortName(FString LongName);// 0x21a4730
	static FString[] GetServersUrlList();// 0x21a46b0
	static FString GetServerEnvTag();// 0x21a4630
	static Vector2D GetScreenSizeXY();// 0x21a45f0
	static FString GetPatchBuildVersion();// 0x21a4570
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x2649560
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x2649560
	static FString GetMainBuildVersion();// 0x21a44f0
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x21a44c0
	SolarPlayerState* GetLocalSolarPlayerState();// 0x21a4490
	SolarPlayerController* GetLocalSolarPlayerController();// 0x21a4460
	PlayerController* GetLocalPlayerController();// 0x21a4430
	static Key GetLeftMouseKeyDown();// 0x21a4370
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x21a4140
	static FString GetHostByDomainName(FString DomainName, bool bAppendPort);// 0x21a4020
	FString GetGameModeParam(int GameModeId, FString Key);// 0xb43660
	static FString GetExtBackdoorUrl();// 0x21a3fa0
	static EmojiBubbleSubsystem* GetEmojiBubbleSubsystem(SolarGameInstanceBase* GI);// 0x21a3f10
	static bool GetCurrentInputType(PlayerController* InPlayerController, out enum OutInputType);// 0x21a3e30
	static CommonInputSubsystem* GetCommonInputSubsystem(PlayerController* PlayerController);// 0x21a3da0
	static FString GetClipboardPasteText();// 0x21a3d20
	static FString GetChangeListNumber();// 0x21a3ca0
	static FString GetBuildVariation();// 0x21a3c20
	static FString GetBuildMode();// 0x21a3ba0
	FString GetBroadcastPlayerName(FString SolarPlayerID);// 0xb43660
	int GetBroadcastPlayerId(int PlayerId);// 0xb43660
	FString GetBroadcastHeroName(FString SolarPlayerID);// 0xb43660
	static Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x21a3a90
	static FString GetBackdoorUrl();// 0x21a3a10
	static FString GetAndroidPkgName();// 0x21a3990
	static FString[] GetAllLoadedPackagesPath();// 0x21a3910
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x21a3740
	static FString GetActualBuildVersion();// 0x21a36c0
	static FString GetAbsolutePathForWrite(FString FilePath);// 0x21a35e0
	static FString GetAbsolutePathForRead(FString FilePath);// 0x21a3500
	static Color FromHex(FString HexString);// 0x21a3460
	static FString[] FindFiles(FString Directory, FString FileExtension);// 0x21a3320
	static void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x21a31c0
	void DoLuaDebug(out const FString[] cmdArray);// 0xb43660
	static bool DirectoryExist(FString TargetDirectory);// 0x21a3120
	static bool DeleteFile(FString FilePath);// 0x21a3080
	static bool DeleteDirectoryRecursively(FString Path);// 0x21a2fe0
	static bool DeleteDirectory(FString Path);// 0x21a2f40
	static FString DecodeFile(FString InFilePath);// 0x21a2e60
	static LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x21a2d80
	Actor* CreateEmptySkeletalMeshActor();// 0x21a2d50
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x21a2b80
	static bool CreateDirectoryTree(FString Path);// 0x21a2ae0
	static bool CreateDirectory(FString Path);// 0x21a2a40
	static bool CopyFile(FString DestFilePath, FString SrcFilePath);// 0x21a28c0
	void ConvertKeyMappingName(out const Key Key, out FString OutDisplayName);// 0x21a2780
	static void CloseVirtualKeyboard();// 0x9a1270
	static void ClipboardCopyText(FString Content);// 0x21a26f0
	static void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x21a2670
	static bool CheckIsNeedDownLoad(int ChunkID);// 0x21a25e0
	static void ApplyVehicleSkinPreview(Object* PreviewVehicleObj, int SkinId, int PageType, Vector DefaultLoc);// 0x21a2490

--------------------------------
Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x2a0, Size: 1]
	SolarPlayerState*[] RealPlayerStateArray;//[Offset: 0x2b0, Size: 1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 1]
	int[] MapVehicleSpawnTypes;//[Offset: 0x2c8, Size: 1]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x2e8, Size: 1]
	int RemainingPlayersCount;//[Offset: 0x2f8, Size: 1]
	int AlivePlayersCount;//[Offset: 0x2fc, Size: 1]
	int RemainingTeamCount;//[Offset: 0x300, Size: 1]
	int PlayersCount;//[Offset: 0x304, Size: 1]
	int TeamCount;//[Offset: 0x308, Size: 1]
	int TotalBoardingNum;//[Offset: 0x30c, Size: 1]
	int CapsulePlayerNum;//[Offset: 0x310, Size: 1]
	int SettlementStageConfigID;//[Offset: 0x314, Size: 1]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x318, Size: 1]
	float StartTime;//[Offset: 0x368, Size: 1]
	int NumPlayers;//[Offset: 0x36c, Size: 1]
	int GameWarmID;//[Offset: 0x370, Size: 1]
	int TeammateNumMode;//[Offset: 0x374, Size: 1]
	bool bLuaReportBattleEndServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	GameStartConditionList GameStartConditions;//[Offset: 0x380, Size: 1]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x3d8, Size: 1]
	SolarTeamInfo*[] Teams;//[Offset: 0x3e0, Size: 1]
	byte NumReplicatedTeams;//[Offset: 0x3f0, Size: 1]
	SolarPlayerActivityHeatComponent* SolarPlayerActivityHeatComponent;//[Offset: 0x440, Size: 1]
	void SetTeamLastVehicleLocation(byte InTeamId, out const Vector InVehiclePosition);// 0x2156eb0
	void SetSettlementStageConfigID(const int InConfigID);// 0x2156d20
	void ServerUpdateMapVehicleSpawnTypes(out const int[] InSpawnTargetVehicleTypes);// 0x21565d0
	void PlayTeamVictoryVoice();// 0x21565b0
	void OnSafeAreaIndexChanged(int NewIndex);// 0x2156520
	void OnRep_SettlementStageConfigID();// 0x2156500
	void OnRep_RemainingTeamCountChange();// 0x21564e0
	void OnRep_OnPlayersCountChange();// 0x21564c0
	void OnRep_OnAlivePlayersCountChange();// 0x21564a0
	void OnRep_NumReplicatedTeams();// 0x2156480
	void OnRep_NumPlayers(int PreviousNumPlayers);// 0x21563f0
	void OnRep_CapsulePlayerNum();// 0x21563d0
	void OnRecordingConnectionChanged();// 0x21563b0
	void OnLocalSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x21562e0
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0x2649560
	void NotifyBombingEnd(int BombId);// 0x2156250
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x2156140
	void NotifyAbnormalPlayer(SolarPlayerState* AbnormalPlayerState, out const FText OutReason);// 0x2649560
	void NetMulticastNotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, const FText BanReason);// 0x2155f70
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x2155bb0
	bool IsSupportWeaponUpgrade();// 0x2155b80
	bool IsSupportCharacterTacticalAbility();// 0x2155b50
	bool IsSupportCharacterSuperAbility();// 0x2155b20
	bool IsSupportCharacterRole();// 0x2155af0
	bool IsSupportCharacterInGameLeveling();// 0x2155ac0
	float GetWorldStartTimeSeconds();// 0x21546c0
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x2155a20
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x21558e0
	SolarPlayerState* GetTeamPlayerState(const byte InTeamId, const byte InPosInTeam);// 0x2155770
	int GetTeamNumCount();// 0x2155740
	byte GetTeammateNum(const byte InTeamId);// 0x2155850
	SolarTeamInfo* GetTeamByName(FString InTeamName);// 0x2155640
	SolarTeamInfo* GetTeam(byte InTeamId);// 0x21555b0
	enum GetTacticalSkillStateOperationOnInit();// 0x2155580
	enum GetSuperSkillStateOperationOnInit();// 0x2155510
	SolarPlayerState* GetSpecTargetOrLocalPlayerState();// 0x21554e0
	SolarSafeArea* GetSolarSafeArea();// 0x21554b0
	int GetSettlementStageConfigID();// 0x2155490
	int GetRemainingTeamCount();// 0x2155460
	int GetRemainingPlayersCount();// 0x2155430
	void GetPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x21551d0
	SolarPlayerState* GetPlayerStateByPlayerId(FString InPlayerID);// 0x2155120
	SolarPlayerState* GetPlayerStateByNickName(FString InNickName);// 0x2155070
	int GetPlayersCount();// 0x21552d0
	SolarCharacter* GetPlayerByPlayerID(FString InPlayerID);// 0x2154fc0
	void GetOnlyPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x2154ec0
	void GetOnlyBotTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x2154dc0
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x2154d10
	SolarPlayerState* GetLocalSolarPlayerState();// 0x2154720
	bool GetCanShowBattlePrompt();// 0x21546f0
	float GetBattleStartTimeSeconds();// 0x21546c0
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x2154610
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x2154570
	int GetAlivePlayersCount();// 0x2154550
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamId, bool bExceptCheater);// 0x2154470
	byte CalculateTeamNum();// 0x2154440
	void CacheSafeArea(SolarSafeArea* SafeArea);// 0x21543b0

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x278, Size: 1]
	FName PreviousMatchState;//[Offset: 0x280, Size: 1]
	int ElapsedTime;//[Offset: 0x288, Size: 1]
	void OnRep_MatchState();// 0x1571630
	void OnRep_ElapsedTime();// 0x15711b0

--------------------------------
Class: SolarSafeArea.SCMMapElementBase.Actor.Object
	int CurrentIndex;//[Offset: 0x284, Size: 1]
	float TargetTime;//[Offset: 0x288, Size: 1]
	float BeginShrinkTime;//[Offset: 0x28c, Size: 1]
	float DamageValue;//[Offset: 0x290, Size: 1]
	Vector BeginLocation;//[Offset: 0x294, Size: 1]
	float BeginScale;//[Offset: 0x2a0, Size: 1]
	enum AreaStatus;//[Offset: 0x2a4, Size: 1]
	enum LocalPlayerCameraInSafeAreaState;//[Offset: 0x2b5, Size: 1]
	enum LocalViewFocusedCharacterInSafeAreaState;//[Offset: 0x2b6, Size: 1]
	bool bCanCausingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float FirstDamageDelay;//[Offset: 0x30c, Size: 1]
	float DamageInterval;//[Offset: 0x310, Size: 1]
	FString LeaveSafeAreaSoundName;//[Offset: 0x318, Size: 1]
	FString EnterSafeAreaSoundName;//[Offset: 0x328, Size: 1]
	FString InPoisonPerSecSoundName;//[Offset: 0x338, Size: 1]
	float InPoisonSoundSecond;//[Offset: 0x348, Size: 1]
	int WarningNotificationIndex;//[Offset: 0x34c, Size: 1]
	<int,int> NoticeDataMap;//[Offset: 0x350, Size: 1]
	<int,FString> SoundEventNameDataMap;//[Offset: 0x3a0, Size: 1]
	<int,int> QuickVoiceDataMap;//[Offset: 0x3f0, Size: 1]
	int ShrinkEndNotificationIndex;//[Offset: 0x440, Size: 1]
	int ShrinkEndNoticeId;//[Offset: 0x444, Size: 1]
	FString ShrinkEndSoundEventName;//[Offset: 0x448, Size: 1]
	SolarPlayerController* LocalController;//[Offset: 0x458, Size: 1]
	void StartShrink();// 0x1571910
	void ShowPoisonPerSecond();// 0x1571170
	void ShowPoisonEffect(bool bShow);// 0x21fa700
	void ShowEffectInside(bool bInside);// 0x2649560
	void Resume();// 0x816c00
	void ReceiveShrinkEnd();// 0x2649560
	void ReceiveActorLeaveSafeAreaCircle(Actor* Actor);// 0x2649560
	void ReceiveActorLeavePoisonCircle(Actor* Actor);// 0x2649560
	void ReceiveActorEnterSafeAreaCircle(Actor* Actor);// 0x2649560
	void ReceiveActorEnterPoisonCircle(Actor* Actor);// 0x2649560
	void Pause();// 0x8168c0
	void OnRep_CurrentIndexChange();// 0x21fa3b0
	void LocalPlayerCameraLeavePoisonCircle();// 0x2649560
	void LocalPlayerCameraEnterPoisonCircle();// 0x2649560
	bool IsPause();// 0x21fa360
	bool IsLocationInSafeArea(out const Vector Pos);// 0x21fa2c0
	bool IsLocationInPoisonCircle(out const Vector InLocation);// 0x21fa220
	bool IsInSafeArea(Actor* Actor);// 0x21fa150
	void GMStartShrinkArea();// 0x21f9560
	float GetShrinkTargetTime();// 0x21f9f70
	enum GetSafeAreaStatus();// 0x21f9f20
	Vector GetNextAreaLocation();// 0x21f9ee0
	int GetCurrentIndex();// 0x21f96e0
	float GetCurrentDamage();// 0x21f96a0
	Vector GetCurrentAreaBeginLocation();// 0x21f9660
	float GetBeginShrinkTime();// 0x21f9580

--------------------------------
Class: SCMMapElementBase.Actor.Object
	bool bPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	FString Side;//[Offset: 0x230, Size: 1]
	FString Job;//[Offset: 0x240, Size: 1]
	FString ElementID;//[Offset: 0x250, Size: 1]
	enum Type;//[Offset: 0x260, Size: 1]
	enum State;//[Offset: 0x261, Size: 1]
	enum Visibility;//[Offset: 0x262, Size: 1]
	class SCMMapElementRPCComponent* MapElementRPCComponentClass;//[Offset: 0x268, Size: 1]
	FName ElementName;//[Offset: 0x270, Size: 1]
	byte bUseSceneActorOptimization;//[Offset: 0x278, Size: 1]
	enum SetElementVisibility(const enum NewType);// 0x2096570
	enum SetElementState(const enum NewState);// 0x2096450
	void OnRep_ElementVisibility();// 0x2096200
	void OnRep_ElementState();// 0x20961e0
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x2649560
	void OnElementStateChanged(const enum CurrentState);// 0x2649560

--------------------------------
Class: SCMMapElementRPCComponent.ActorComponent.Object

--------------------------------
Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 1]
	int Number;//[Offset: 0x8, Size: 1]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 1]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 1]
	GameStateBase* Owner;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SolarGameplayConfigComponent.ActorComponent.Object
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	class GameplayConfigBase* CGMConfig;//[Offset: 0xb8, Size: 1]
	class GameplayConfigBase* TestCGMConfig;//[Offset: 0xc0, Size: 1]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xc8, Size: 1]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd0, Size: 1]
	GameplayConfigBase* GetConfigs();// 0x214fd30

--------------------------------
Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarPlayerActivityHeatComponent.ActorComponent.Object
	float WeaponScore;//[Offset: 0xc0, Size: 1]
	float VehicleScore;//[Offset: 0xc4, Size: 1]
	float AbilityScore;//[Offset: 0xc8, Size: 1]
	CurveFloat* DistScoreCurve;//[Offset: 0xd0, Size: 1]
	float DefenderOrReaperScore;//[Offset: 0xd8, Size: 1]
	float FirstKillTimeBefore;//[Offset: 0xdc, Size: 1]
	float LastKillTimeLater;//[Offset: 0xe0, Size: 1]
	void ReceiveKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent);// 0x21cb9a0
	void ReceiveActivityHeatFragmentsFromReplay(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x21cb880
	void OnPlayerWin(FString SolarPlayerID);// 0x21ca8b0
	void OnPlayerResurrectionParachute(FString SolarPlayerID);// 0x21ca6b0
	void OnPlayerDeath(FString SolarPlayerID);// 0x21ca540
	void OnPlayerCruiseEnded(FString SolarPlayerID);// 0x21ca4a0
	ReplayActivityHeatFragment[] GetPlayerActivityHeatFragmentsById(FString SolarPlayerID);// 0x21c7f90
	void FillInPlayerActivityHeatKillDetail(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent, out PlayerActivityHeatKillDetail OutKillDetail);// 0x21c76b0
	int AddPlayerActivityHeatRawData(FString SolarPlayerID, enum ActivityHeatType);// 0x21c5be0

--------------------------------
Class: PlayerActivityHeatKillDetail
	float KillTime;//[Offset: 0x0, Size: 1]
	Vector VictimPosition;//[Offset: 0x4, Size: 1]
	FString KillerID;//[Offset: 0x10, Size: 1]
	FString VictimID;//[Offset: 0x20, Size: 1]
	bool IsAbilityKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool IsScopedKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool IsVehicleKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool IsAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int weaponid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 1]
	FString ActionDisplayName;//[Offset: 0x18, Size: 1]
	FString ActionName;//[Offset: 0x28, Size: 1]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float Scale;//[Offset: 0x3c, Size: 1]
	FString RealAction;//[Offset: 0x40, Size: 1]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 1]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 1]
	FString Description;//[Offset: 0x70, Size: 1]
	FString[] RelatedActions;//[Offset: 0x80, Size: 1]
	bool Stationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: EmojiBubbleSubsystem.GameInstanceSubsystem.Subsystem.Object
	DataTable* EmojiTable;//[Offset: 0x30, Size: 1]
	void ShowEmojiBubbleToContainerInLobby(int EmojiID, SolarLobbyCharacter* InLobbyCharacter, FString PlayerId);// 0x20426d0
	void ShowEmojiBubbleToContainer(int EmojiID, SolarCharacter* InCharacter);// 0x2042600
	void ResetAllEmojiBubble();// 0x2041750
	bool GetEmojiConfigByID(int EmojiID, out EmojiBubbleConfig OutConfig);// 0x2040ee0

--------------------------------
Class: SolarLobbyCharacter.Pawn.Actor.Object
	CurveVector* DissolveCurvePath;//[Offset: 0x290, Size: 1]
	MaterialInterface* DissolveMatPath;//[Offset: 0x2b8, Size: 1]
	CurveVector* FresnelCurvePath;//[Offset: 0x2e0, Size: 1]
	MaterialInterface* FresnelMatPath;//[Offset: 0x308, Size: 1]
	ParticleSystem* SwitchParticleEffectPath;//[Offset: 0x330, Size: 1]
	float SwitchEffectInterval;//[Offset: 0x360, Size: 1]
	float SelfDelayShowSeconds;//[Offset: 0x364, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x370, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x378, Size: 1]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x380, Size: 1]
	SkeletalMeshComponent* MirrorSkeletalMesh;//[Offset: 0x388, Size: 1]
	Actor* LobbyAccessory;//[Offset: 0x390, Size: 1]
	Actor* MirrorLobbyAccessory;//[Offset: 0x398, Size: 1]
	SkeletalMeshComponent* DissovleSkeletalMesh;//[Offset: 0x3a0, Size: 1]
	SkeletalMeshComponent* FresnelSkeletalMesh;//[Offset: 0x3a8, Size: 1]
	SkeletalMeshComponent* MirrorDissovleSkeletalMesh;//[Offset: 0x3b0, Size: 1]
	SkeletalMeshComponent* MirrorFresnelSkeletalMesh;//[Offset: 0x3b8, Size: 1]
	MaterialInterface* DissovleMat;//[Offset: 0x3c0, Size: 1]
	MaterialInterface* FresnelMat;//[Offset: 0x3c8, Size: 1]
	CurveVector* DissovleCurve;//[Offset: 0x3d0, Size: 1]
	CurveVector* FresnelCurve;//[Offset: 0x3d8, Size: 1]
	MaterialInstanceDynamic*[] DynamicDissovleMats;//[Offset: 0x3e8, Size: 1]
	MaterialInstanceDynamic*[] DynamicFresnelMats;//[Offset: 0x3f8, Size: 1]
	bool bCanPlayVoiceInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool bOpenMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool CharacterIsVisiblity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	int CurSkinId;//[Offset: 0x420, Size: 1]
	int CurChunkId;//[Offset: 0x424, Size: 1]
	bool bIsPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	class Object* AnimBPClass;//[Offset: 0x430, Size: 1]
	void UpdateLobbyAccessory(FString InAccessoryPath);// 0x219f8b0
	void StopPlayIdleShow();// 0x219f890
	void StartPlaySwitchEffect();// 0x219f870
	void StartPlayFresnelSwitchEffect();// 0x219f850
	void StartPlayDissovleSwitchEffect();// 0x219f830
	void SetSwitchEffetComp(SkeletalMeshComponent* EffectComp, SkeletalMeshComponent* DefaultComp, MaterialInterface* EffectMat, out MaterialInstanceDynamic*[] DyniamEffectMats);// 0x219f620
	void SetPropVisiable(bool isVisiable);// 0x219f590
	void SetMeshVisibility(bool IsVisible);// 0x219f500
	void SetIsPlayIdleShow(bool InIsPlayIdleShow);// 0x219f470
	void SetCharacterRotationByDelta(float InDeltaYaw);// 0x219f2d0
	void SetCharacterMeshAndMat(int InSkinID, bool IsForce);// 0x219f200
	void SetCharacterByLoadedData(SolarLobbyCharacterData* InData);// 0x219f0e0
	void PlayIdleShow();// 0x219f080
	void OpenLookAtAndSetPostProcessABPCameraLocation(const bool bOpen, FString ModuleCameraName);// 0x219ef90
	bool IsCanOpenMirror();// 0x219eb80
	bool IsCanOpenChangeAnim();// 0x219eb50
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x219ea80
	void InitCharacterByLua();// 0x2649560
	SolarAkGameObject* GetSolarAkGameObject();// 0x219ea60
	SolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int InSkinID, bool IsLowRes);// 0x219e990
	bool GetIsPlayIdleShow();// 0x219e970
	SolarLobbyAnimInstance* GetCharAnimInstance();// 0x219e940
	void DetachCharacterSocketPS();// 0x219e7d0
	void DelayShowSelf(SolarLobbyCharacterData* InData);// 0x219e740
	void ClearSwitchEffect();// 0x219e720
	void ClearCharacterByLua();// 0x2649560
	void AttachCharacterSocketPS(out PSAttachElem[] PSAttachArray);// 0x219e650

--------------------------------
Class: SolarLobbyCharacterData.DataAsset.Object
	SoftObjectPath SkinShareImage;//[Offset: 0x30, Size: 1]
	SoftObjectPath SkinBackgroundShare;//[Offset: 0x48, Size: 1]
	SoftObjectPath Mesh;//[Offset: 0x60, Size: 1]
	SoftObjectPath Material;//[Offset: 0x78, Size: 1]
	<uint16,CharacterTransformData> CharacterTransformData;//[Offset: 0x90, Size: 1]
	SoftObjectPath[] MaterialArray;//[Offset: 0xe0, Size: 1]
	<FString,MaterialInterface*> CharacterChangeMat;//[Offset: 0xf0, Size: 1]
	SoftObjectPath AnimBlueprint;//[Offset: 0x140, Size: 1]
	SoftObjectPath WinAnimation;//[Offset: 0x158, Size: 1]
	SoftObjectPath[] IdleShowList;//[Offset: 0x170, Size: 1]
	SoftObjectPath LobbyIdleAnimation;//[Offset: 0x180, Size: 1]
	SoftObjectPath AccessoryBlueprint;//[Offset: 0x198, Size: 1]
	SoftObjectPath EnterAnim;//[Offset: 0x1b0, Size: 1]
	SoftObjectPath ExitAnim;//[Offset: 0x1c8, Size: 1]
	SoftObjectPath RefuseAnim;//[Offset: 0x1e0, Size: 1]
	SoftObjectPath EncounterIdleAnim;//[Offset: 0x1f8, Size: 1]
	SoftObjectPath[] EncounterIdleShowList;//[Offset: 0x210, Size: 1]
	SoftObjectPath RecommendAnimBlueprint;//[Offset: 0x220, Size: 1]
	bool bParameterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	PSAttachElem[] PSAttachArray;//[Offset: 0x240, Size: 1]
	SoftObjectPath IdleShowSequence;//[Offset: 0x250, Size: 1]
	SoftObjectPath LeftHandProp;//[Offset: 0x268, Size: 1]
	SoftObjectPath RightHandProp;//[Offset: 0x280, Size: 1]

--------------------------------
Class: CharacterTransformData
	Vector CharacterOffset;//[Offset: 0x0, Size: 1]
	Rotator CharacterRot;//[Offset: 0xc, Size: 1]
	Vector CharacterScale;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PSAttachElem
	SoftObjectPath ParticleSystemPath;//[Offset: 0x0, Size: 1]
	FName SocketName;//[Offset: 0x18, Size: 1]
	Vector LocationOffset;//[Offset: 0x20, Size: 1]
	Rotator RotationOffset;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: SolarLobbyAnimInstance.AnimInstance.Object
	bool bPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bResetToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool EnableAnimSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	void ShowRecommendUI(bool bVisible);// 0x219f7a0
	void SetEnableAnimSound(bool InEnableAnimSound);// 0x219f3e0
	void SetCharacterInIdleShow(bool IsPlayingIdleShow);// 0x219f170
	void SetCharacterCanBeLooked(bool IsVisible);// 0x2649560
	void ResetToIdle();// 0x219f0c0
	void RefreshTick();// 0x219f0a0
	void RandIdleShow();// 0x2649560
	void LookAtFunctionSwitcher(const bool bOpen);// 0x2649560
	void KawaiiPhysicsSwitcher(const bool bOpen);// 0x2649560
	void GetCameraLocation(FString ModuleCameraName);// 0x2649560
	void ExitAnimFinish();// 0x219e920
	void AnimPlayIdleShow(bool Enable);// 0x219e5c0

--------------------------------
Class: EmojiBubbleConfig.TableRowBase
	class SolarUserWidget* EmojiClassType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CommonInputSubsystem.LocalPlayerSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty OnInputMethodChanged;//[Size: 1]
	int NumberOfInputMethodChangesRecently;//[Offset: 0x60, Size: 1]
	double LastInputMethodChangeTime;//[Offset: 0x68, Size: 1]
	double LastTimeInputMethodThrashingBegan;//[Offset: 0x70, Size: 1]
	enum LastInputType;//[Offset: 0x78, Size: 1]
	enum CurrentInputType;//[Offset: 0x79, Size: 1]
	FName GamepadInputType;//[Offset: 0x7c, Size: 1]
	<FName,enum> CurrentInputLocks;//[Offset: 0x88, Size: 1]
	bool bIsGamepadSimulatedClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool ShouldShowInputKeys();// 0xbc9b90
	void SetGamepadInputType(const FName InGamepadInputType);// 0xbc9b00
	bool SetCurrentInputType(enum NewInputType);// 0xbc9a70
	bool IsUsingPointerInput();// 0xbc9a40
	bool IsInputMethodActive(enum InputMethod);// 0xbc99b0
	enum GetDefaultInputType();// 0xbc9900
	enum GetCurrentInputType();// 0xbc98d0
	FName GetCurrentGamepadName();// 0xbc9890

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x3e9b540
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x3e9b330

--------------------------------
Class: SolarLoginManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void InitFromLogin();// 0xb43660
	void Init(SolarGameInstanceBase* GameInstance);// 0x2649560

--------------------------------
Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 1]
	SolarGameInstanceBase* SolarGameInstance;//[Offset: 0x30, Size: 1]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 1]
	void SaveLockSettings();// 0x21a53a0
	void LoadLockSettings();// 0x21a4d60
	void Init(SolarGameInstanceBase* GameInstance);// 0x21a4a90

--------------------------------
Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 1]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x21a29b0

--------------------------------
Class: SolarInteractableManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int ZoneNum;//[Offset: 0x40, Size: 1]
	int TotalNum;//[Offset: 0x44, Size: 1]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x48, Size: 1]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x58, Size: 1]
	SolarShieldUpgradeItemShop*[] ActiveShieldUpgradeItemShopList;//[Offset: 0x68, Size: 1]
	FString SceneObjectLevelName;//[Offset: 0x78, Size: 1]
	SolarGlobalRepInfo* GlobalMapRepInfo;//[Offset: 0x88, Size: 1]
	void OnSceneObjectsLoadComplete(FString LevelName);// 0x2182710
	void OnClientShowShieldUpgradeItemShops();// 0x21822d0
	int GetShieldUpgradeItemShopGroupID();// 0x21821c0

--------------------------------
Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 1]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarGlobalRepInfo.Info.Actor.Object
	SolarShieldItemShopDataArray ShieldItemShopInteractInfo;//[Offset: 0x228, Size: 1]
	int ShieldUpgradeItemShopGroupID;//[Offset: 0x358, Size: 1]
	void OnRep_ShieldUpgradeItemShopGroupID();// 0x2165aa0
	void OnRep_ShieldItemShopInteractInfo();// 0x2165a80

--------------------------------
Class: SolarShieldItemShopDataArray.FastArraySerializer
	SolarShieldItemShopDataEntry[] Elements;//[Offset: 0x108, Size: 1]

--------------------------------
Class: SolarShieldItemShopDataEntry.FastArraySerializerItem
	Vector_NetQuantize Pos;//[Offset: 0xc, Size: 1]
	int Uid;//[Offset: 0x18, Size: 1]
	byte InteractState;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SolarInputMappingManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	MulticastInlineDelegateProperty OnInputMappingUpdate;//[Size: 1]
	<FString,InputKeyMappingEntry> KeyMappingEntryDict;//[Offset: 0x48, Size: 1]
	InputKeyMappingEntry[] CacheKeyMappingEntries;//[Offset: 0x98, Size: 1]
	static void SplitInputChord(out const InputChord InInputChord, out FString KeyStr1, out FString KeyStr2);// 0x2183060
	InputKeyMappingEntry[] GetKeyMappingEntries();// 0xb43660
	InputKeyMappingEntry FindKeyMappingEntry(FString ActionID);// 0x2181e30
	static InputKeyMappingEntry CreateKeyMappingEntry(FString InActionID, FString InActionName, const enum InActionType, float InScale, FString InKeyStr1, FString InKeyStr2, FString InKeyStr3, const enum InInputTriggerType1, const enum InInputTriggerType2, const enum InInputTriggerType3);// 0x21819d0
	static bool CreateInputChord(FString KeyStr1, FString KeyStr2, out InputChord OutInputChord);// 0x2181830
	void ApplyKeyMappings();// 0x2181810

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 1]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]

--------------------------------
Class: InputKeyMappingEntry
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ActionID;//[Offset: 0x8, Size: 1]
	FString ActionName;//[Offset: 0x18, Size: 1]
	enum ActionType;//[Offset: 0x28, Size: 1]
	float Scale;//[Offset: 0x2c, Size: 1]
	InputKeyMappingPair[] KeyMappingPairList;//[Offset: 0x30, Size: 1]

--------------------------------
Class: InputKeyMappingPair
	FString KeyStr1;//[Offset: 0x0, Size: 1]
	FString KeyStr2;//[Offset: 0x10, Size: 1]
	enum TriggerType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarHttpManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,int> ReportStr2ReprotTimes;//[Offset: 0x48, Size: 1]
	int ReportRetryTimes;//[Offset: 0x98, Size: 1]
	MulticastInlineDelegateProperty OnImgUploaded;//[Size: 1]
	int Jank;//[Offset: 0xcc, Size: 1]
	int BigJank;//[Offset: 0xd0, Size: 1]
	float FPS25;//[Offset: 0xd4, Size: 1]
	int PeakPlayerNum;//[Offset: 0x100, Size: 1]
	int PeakAINum;//[Offset: 0x104, Size: 1]
	int PeakVehicleNum;//[Offset: 0x108, Size: 1]
	void UploadToHTTP(FString URL, FString str);// 0x2178da0
	void UploadImg(out const int AppId, out const int AppUid, FString AppToken, out const int GameID, out const int Uid, FString SourceImgPath);// 0x2178b70
	FString StringToBase64(FString str);// 0x2178980
	void StopRecordJank();// 0x2178960
	void StartRecordJank();// 0x2178940
	void ResetPerfData(bool bKeepCurrentData);// 0x2178510
	void ReportAbnormalPlayerWeaponToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0xb43660
	void ReportAbnormalPlayerVehicleToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0xb43660
	void ReportAbnormalPlayerToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0xb43660
	void ReportAbnormalPlayerBaittingToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InDamageType, FString InBotLocation, FString InPlayerLocation);// 0xb43660
	void ReCordOnlineError(FString InStr);// 0xb43660
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x2649560
	bool IsFileSizeExceedLimit(FString SourceImgPath, out const int64 SizeLimit);// 0x2177ba0
	void InitializeDelegates();// 0x2177b80
	FString GetHttpReportUrl();// 0x21779c0
	float GetAvgNum(int PerfType);// 0x2177920
	void ClearDelegates();// 0x21776c0
	void CleanPerfDirtyData();// 0x2177680
	FString Base64ToMD5(FString str);// 0x2177480

--------------------------------
Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x40, Size: 1]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x90, Size: 1]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xe0, Size: 1]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x130, Size: 1]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x180, Size: 1]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1d0, Size: 1]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x220, Size: 1]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x270, Size: 1]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2c0, Size: 1]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 1]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 1]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 1]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 1]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 1]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 1]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 1]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 1]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 1]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 1]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 1]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 1]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 1]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 1]
	void UpdateCanSendSaveMsg();// 0x2170bf0
	void UpdateCameraLayer(int NewLayer);// 0x2649560
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x2170af0
	bool TrySaveAllHomeActors();// 0x2170ac0
	void TryResetAllHomeActors();// 0x2170aa0
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x21709d0
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x2170920
	void TryRemoveAllInvalidHomeActors();// 0x2170900
	void TryRemoveAllHomeActors();// 0x21708e0
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x2170760
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x2170680
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x21705a0
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x2170470
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x2649560
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x21703c0
	void SetLastSelectingThisID(out const FString InThisID);// 0x21702b0
	void SetLastCreateThisID(out const FString InThisID);// 0x2170200
	void SetIsConstruct(bool bNewConstruct);// 0x2170170
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x21700a0
	void SetHoldingType(enum NewType);// 0x2170010
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x216ff40
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x216fe40
	void SetCurBuildingID(int NewItemID);// 0x216fdb0
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x2649560
	void SelectHomeActor_Other(FString ThisID);// 0x2649560
	void SaveBuilding_Request(bool bSave);// 0x2649560
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x216fbc0
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x2649560
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x2649560
	void RemoveAllHomeActors_Request();// 0x2649560
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x2649560
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x2649560
	bool OnIsDragChanged(bool bIsDrag);// 0x2649560
	void OnInvalidActorsCountChanged(int NewCount);// 0x2649560
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x216faf0
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x2649560
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x2649560
	void NotifyWhenClickActorOnOtherFloor();// 0x2649560
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x2649560
	void NotifyLoadingUIChanged(bool bShow);// 0x2649560
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x216f880
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x216f7b0
	bool HasFoundation();// 0x216f760
	DataTable* GetTextureDataTable();// 0x216f730
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x216f5e0
	SolarHomeShaderConfig* GetShaderConfig();// 0x216f580
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] outData);// 0x216f460
	FString GetLastCreateThisID();// 0x216f3a0
	int GetInvalidActorsCount();// 0x216f380
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x216f350
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x216f320
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x216f1b0
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x216f030
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x216eea0
	enum GetHomeActorSecondType(int ItemID);// 0x2649560
	enum GetHomeActorFirstType(int ItemID);// 0x2649560
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x216edc0
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x216ec30
	FString GetCurSelectingThisID();// 0x216e9a0
	enum GetCurHoldingItemType();// 0x216e980
	int GetCurBuildingID();// 0x216e960
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x216e8c0
	void ExportHomeActorDataToPath(FString FilePath);// 0x2649560
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x2649560
	void DeSelectAllHomeActors_Request();// 0x216e860
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x2649560
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x2649560
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x216e5b0
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x216e430
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x216e2b0
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x216e130
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x216df70
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x216dd90
	void Clear();// 0x216dd70
	void ChangeCameraLayer(int DeltaLayer);// 0x216dce0
	bool CanPreviewWithBuilding(int TypeID);// 0x2649560
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x216dbc0

--------------------------------
Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x228, Size: 1]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x230, Size: 1]
	HomeActorServerData HomeActorServerData;//[Offset: 0x268, Size: 1]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d0, Size: 1]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x330, Size: 1]
	BoxComponent*[] BoxComps;//[Offset: 0x338, Size: 1]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x348, Size: 1]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x398, Size: 1]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a0, Size: 1]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b0, Size: 1]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x216a960
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x216a890
	void SetStaticData(out const HomeActorStaticData NewData);// 0x216a730
	void SetServerData(out const HomeActorServerData NewData);// 0x216a5b0
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x216a3e0
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x216a160
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2169f40
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x2169e70
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x2169c60
	void OnCanSaveChanged(bool bNewCanSave);// 0x2169bd0
	DataTable* GetTextureDataTable();// 0x21697e0
	StaticMeshComponent* GetStaticMeshComp();// 0x17572e0
	HomeActorStaticData GetStaticData();// 0x2169760
	SolarHomeShaderConfig* GetShaderConfig();// 0x2169730
	HomeActorServerData GetServerData();// 0x2169700
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x21695d0
	enum GetHitSurface(out const Vector HitNormal);// 0x2169530
	bool GetCanSave();// 0x2169510
	bool CanSelected();// 0x2169410
	bool CanRemove();// 0x21693e0

--------------------------------
Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 1]
	FString ThisID;//[Offset: 0x8, Size: 1]
	enum Owner;//[Offset: 0x18, Size: 1]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	Vector CurLocation;//[Offset: 0x20, Size: 1]
	Rotator CurRotation;//[Offset: 0x2c, Size: 1]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 1]
	FString ParentObject;//[Offset: 0x48, Size: 1]
	FString[] ChildObjects;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 1]
	FString TexturesID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 1]
	enum FirstType;//[Offset: 0x8, Size: 1]
	enum SecondType;//[Offset: 0xc, Size: 1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	FString BpPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: HomeOriginalShader

--------------------------------
Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 1]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 1]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 1]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 1]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 1]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 1]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 1]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 1]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 1]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 1]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 1]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 1]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 1]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 1]

--------------------------------
Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 1]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x228, Size: 1]
	BoxComponent*[] BoxComps;//[Offset: 0x230, Size: 1]
	BaseSpaceData BaseSpaceData;//[Offset: 0x240, Size: 1]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x2170c10
	void ShowBaseSpace();// 0x2170360
	void OnBaseSpaceUnOccupied();// 0x216fad0
	void OnBaseSpaceOccupied();// 0x216fab0
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x216f9e0
	void HideBaseSpace();// 0x216f790
	BaseSpaceData GetData();// 0x216ea60

--------------------------------
Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 1]
	enum BaseSpaceType;//[Offset: 0x4, Size: 1]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x298, Size: 1]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a0, Size: 1]
	<float,int> LayerMap;//[Offset: 0x2f0, Size: 1]
	float FloorUnit;//[Offset: 0x360, Size: 1]
	float WallUnit;//[Offset: 0x364, Size: 1]
	float BaseUnit;//[Offset: 0x368, Size: 1]
	float RoundOnBase;//[Offset: 0x36c, Size: 1]
	float RoundOnFloor;//[Offset: 0x370, Size: 1]
	float ArrowOnBase;//[Offset: 0x374, Size: 1]
	float ArrowOnFloor;//[Offset: 0x378, Size: 1]
	float ArrowToWall;//[Offset: 0x37c, Size: 1]
	Transform[] BasisFloorsTransArr;//[Offset: 0x388, Size: 1]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	void OpenAirWall();// 0x2174c90
	void Init(int InBuildWidth, int InBuildHeight);// 0x21740d0
	bool GetIsAirWallOpen();// 0x2174090
	void CloseAirWall();// 0x2174040

--------------------------------
Class: SolarHomePlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0xea0, Size: 1]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xea8, Size: 1]
	SolarHomeActor* DragActor;//[Offset: 0xeb0, Size: 1]
	float MinCheckDistance;//[Offset: 0xeb8, Size: 1]
	float MaxCheckDistance;//[Offset: 0xebc, Size: 1]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xec0, Size: 1]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec9, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0xed0, Size: 1]
	float MoveCheckDis;//[Offset: 0xed8, Size: 1]
	float CheckDis;//[Offset: 0x1070, Size: 1]
	SolarHomeCameraManager* CameraManager;//[Offset: 0x1100, Size: 1]
	Vector LookAtLocation;//[Offset: 0x1108, Size: 1]
	Vector OriginalLookAtLocation;//[Offset: 0x1114, Size: 1]
	Actor* CurrentViewTarget;//[Offset: 0x1120, Size: 1]
	Actor* OriginalViewTarget;//[Offset: 0x1128, Size: 1]
	void StopBuilding();// 0x2174eb0
	void StartFadeOutEffect();// 0x2174e90
	void StartBuilding();// 0x2174e70
	void SolarGM_Home_ResetLayer(int InLayer);// 0x15b05a0
	void SolarGM_FillUpHome();// 0x8f2720
	void SolarGM_ExportHomeActorToPath(FString FilePath);// 0x2100560
	void ShowBuildMainUI(bool bShow);// 0x2649560
	void SetNormalCameraTarget();// 0x2174e30
	void SetConstructionCameraTarget();// 0x2174df0
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x2649560
	void ResetConstructionCamera();// 0x2174cd0
	void ResetCameraRotation();// 0x2174cb0
	void OnTouchMove(int Index, out const Vector Location);// 0x2174bc0
	void OnTouchEnd(int Index, out const Vector Location);// 0x2174af0
	void OnTouchBegin(int Index, out const Vector Location);// 0x2174a20
	void OnDragBegin(out const Vector Location);// 0x21747b0
	void OnCameraRight(const float Value);// 0x2174730
	void OnCameraForward(const float Value);// 0x21746b0
	bool GetIsConstruction();// 0x21740b0
	int GetCameraCurrentLayer();// 0x2174060
	void BindConstructionInput();// 0x2173ca0
	void BindBattleInput();// 0x2173c80

--------------------------------
Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xb8, Size: 1]
	Vector LookAtLocation;//[Offset: 0x134, Size: 1]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x140, Size: 1]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x150, Size: 1]
	CameraActor* BuildCamera;//[Offset: 0x158, Size: 1]
	Actor* BattleCamera;//[Offset: 0x160, Size: 1]
	CameraComponent* BuildCameraComp;//[Offset: 0x168, Size: 1]
	void UpdateSliderScaleUI(float InScale);// 0x2649560
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x2649560
	void SetNormalCameraTarget();// 0x2174e50
	void SetConstructionCameraTarget();// 0x2174e10
	void RotateCameraSpin(const float Value);// 0x2174d70
	void RotateCameraPitch(const float Value);// 0x2174cf0
	void MoveCameraRight(const float Value);// 0x2174480
	void MoveCameraForward(const float Value);// 0x2174400
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x21741a0
	bool ChangeCameraMode(enum InMode);// 0x2173e80
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x2173db0
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x2173ce0

--------------------------------
Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 1]
	float MouseMoveScale;//[Offset: 0x4, Size: 1]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 1]
	float MouseZoomScale;//[Offset: 0xc, Size: 1]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 1]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 1]
	float MouseRotateScale;//[Offset: 0x18, Size: 1]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 1]
	float MinPitch;//[Offset: 0x20, Size: 1]
	float MaxPitch;//[Offset: 0x24, Size: 1]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 1]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 1]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 1]
	float DefultTime;//[Offset: 0x38, Size: 1]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 1]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 1]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 1]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 1]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 1]

--------------------------------
Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 1]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 1]
	Vector Acceleration;//[Offset: 0x10, Size: 1]
	Vector Velocity;//[Offset: 0x1c, Size: 1]
	Vector Loction;//[Offset: 0x28, Size: 1]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 1]
	byte RollByte;//[Offset: 0x35, Size: 1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 1]
	byte MovementMode;//[Offset: 0x3c, Size: 1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 1]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 1]
	byte JetPackFlag;//[Offset: 0x48, Size: 1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: HomeShaderData

--------------------------------
Class: SolarHomeDragUI.Actor.Object

--------------------------------
Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 1]
	Rotator Rotation;//[Offset: 0x10, Size: 1]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 1]
	FString ParentThisID;//[Offset: 0x30, Size: 1]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 1]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 1]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 1]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 1]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 1]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 1]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 1]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 1]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 1]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 1]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x28, Size: 1]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x30, Size: 1]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	SolarGameInstanceBase* SolarGameInstance;//[Offset: 0x40, Size: 1]
	void SynchronizeInputSettings();// 0x21617d0
	void SaveGameSettings();// 0x21617b0
	void ResetToDefault(enum SettingPart);// 0x2161730
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x2161660
	void RefreshDynamicShadow();// 0x2161640
	void RefreshAnalogCursorSpeed();// 0x2161620
	void OnSettingConfigSaved();// 0x2161600
	void OnPickupSettingChanged();// 0x21615e0
	bool IsLowLevelDevice();// 0x21615b0
	bool IsHighlightMomentOpen();// 0x2161580
	bool IsDefaultEnableDynamicShadow();// 0x2161550
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x91ba60
	void Init(SolarGameInstanceBase* GameInstance);// 0x21614c0
	int GetCurNativeRefreshRate();// 0x2161210
	bool FixConfigVersion();// 0x2161070

--------------------------------
Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 1]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 1]
	WeaponUserSettings WeaponSettings;//[Offset: 0x90, Size: 1]
	LanguageUserSettings LanguageSettings;//[Offset: 0xb0, Size: 1]
	CharacterVoiceUserSettings CharacterVoiceSettings;//[Offset: 0xb3, Size: 1]
	SoundUserSettings SoundSettings;//[Offset: 0xb8, Size: 1]
	BasicUserSettings BasicSettings;//[Offset: 0x118, Size: 1]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x124, Size: 1]
	ShakeUserSettings ShakeSettings;//[Offset: 0x1b8, Size: 1]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x1b9, Size: 1]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x1be, Size: 1]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x1c0, Size: 1]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	enum ConfigVersion;//[Offset: 0x1d9, Size: 1]
	bool bFirstTimeLanunchGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 1]
	FString ToJsonObjectString();// 0x21617f0
	WeaponUserSettings GetWeaponSettings();// 0x2161480
	SoundUserSettings GetSoundSettings();// 0x2161440
	ShakeUserSettings GetShakeSettings();// 0x2161400
	SensitivityUserSettings GetSensitivitySettings();// 0x2161370
	PickupUserSettings GetPickupSettings();// 0x2161330
	LanguageUserSettings GetLanguageSettings();// 0x21612f0
	GraphicsUserSettings GetGraphicsSettings();// 0x21612b0
	bool GetEnableOpponentPerspectiveByDefault();// 0x2161280
	VehicleControlUserSettings GetDriverSettings();// 0x2161240
	ChatOperatorUserSettings GetChatOperatorSettings();// 0x21611d0
	CharacterVoiceUserSettings GetCharacterVoiceSettings();// 0x2161190
	BasicUserSettings GetBasicSettings();// 0x2161140
	void FromJsonObjectString(FString JsonStr);// 0x21610a0
	bool CheckJsonObjectString(FString JsonStr);// 0x2160fc0

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bVehicleWeaponAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bEnableRecoilRecovery_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoScope_SpecialButtonGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoScopeShotgunSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bAutoScopeShotgunAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bAutoScopeSniperSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bAutoScopeSniperAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bAutoScopeSpecial_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bSniperSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bShotgunSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x10, Size: 1]
	enum DoScopeMode_Global;//[Offset: 0x18, Size: 1]
	bool bOpenVehicleWeaponCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bVehicleAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bVehicleAutoScope_SpecialButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bCanScopeButtonRotateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 1]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 1]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 1]
	ConditionValue Sound_Character;//[Offset: 0x18, Size: 1]
	int MicroPhoneVolume;//[Offset: 0x20, Size: 1]
	int LoudSpeakerVolume;//[Offset: 0x24, Size: 1]
	enum Sound_Quality;//[Offset: 0x28, Size: 1]
	enum AudioMode;//[Offset: 0x29, Size: 1]
	int MicLevel;//[Offset: 0x2c, Size: 1]
	int SpeakerLevel;//[Offset: 0x30, Size: 1]
	int ChooseMicIndex;//[Offset: 0x34, Size: 1]
	int ChooseSpeakerIndex;//[Offset: 0x38, Size: 1]
	FString MicDeviceID;//[Offset: 0x40, Size: 1]
	FString SpeakerDeviceID;//[Offset: 0x50, Size: 1]

--------------------------------
Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int CurValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 1]
	int ItemNum;//[Offset: 0x4, Size: 1]

--------------------------------
Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 1]
	enum ContentScaleFactorLevel;//[Offset: 0x1, Size: 1]
	enum ColorThemeType;//[Offset: 0x2, Size: 1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool VSyncIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FloatValue AdaptationUIValue;//[Offset: 0x8, Size: 1]
	bool EnableDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	enum SelectQualityLevel;//[Offset: 0xd, Size: 1]
	int SavedVersion;//[Offset: 0x10, Size: 1]

--------------------------------
Class: FloatValue
	float Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 1]
	enum CurCharacterVoiceLanguage;//[Offset: 0x1, Size: 1]
	bool HasLoadedChinese;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: CharacterVoiceUserSettings
	enum CurVoiceLanguage;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	enum curGyroscpeChooseLevel;//[Offset: 0x5, Size: 1]
	bool bHorizontalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bVerticalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x8, Size: 1]
	enum OpenHighlightMoment;//[Offset: 0x9, Size: 1]
	enum OpenOutline;//[Offset: 0xa, Size: 1]

--------------------------------
Class: SensitivityUserSettings
	enum Sensitivity_AccMode;//[Offset: 0x0, Size: 1]
	FloatValue Sensitivity_CurveScale;//[Offset: 0x4, Size: 1]
	FloatValue Sensitivity_Free;//[Offset: 0x8, Size: 1]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0xc, Size: 1]
	FloatValue Sensitivity_SuperSkills;//[Offset: 0x10, Size: 1]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x14, Size: 1]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x34, Size: 1]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x54, Size: 1]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x74, Size: 1]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x78, Size: 1]
	VehicleCameraSensitivityData Sensitivity_Vehicle_NoShoot;//[Offset: 0x7c, Size: 1]
	VehicleCameraSensitivityData Sensitivity_Vehicle_Shoot;//[Offset: 0x88, Size: 1]

--------------------------------
Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 1]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 1]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 1]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 1]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 1]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 1]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 1]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 1]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 1]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 1]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 1]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 1]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 1]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 1]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: VehicleCameraSensitivityData
	FloatValue Sensitivity_Lens_Two;//[Offset: 0x0, Size: 1]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x4, Size: 1]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ShakeUserSettings
	enum ShakeMainStatus;//[Offset: 0x0, Size: 1]

--------------------------------
Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	enum LastWheeledVehicleDriveType;//[Offset: 0x3, Size: 1]
	bool bCanVehicleCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 1]
	enum Mic;//[Offset: 0x1, Size: 1]

--------------------------------
Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 1]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x48, Size: 1]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x168, Size: 1]

--------------------------------
Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 1]
	RangeData Sound_Action;//[Offset: 0x8, Size: 1]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 1]
	RangeData Sound_Character;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 1]
	float MaxValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SensitivitySettingsRange
	RangeData Sensitivity_CurveScale;//[Offset: 0x0, Size: 1]
	RangeData Sensitivity_Free;//[Offset: 0x8, Size: 1]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x10, Size: 1]
	RangeData Sensitivity_SuperSkills;//[Offset: 0x18, Size: 1]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x20, Size: 1]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x60, Size: 1]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_NoShoot;//[Offset: 0xa0, Size: 1]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_Shoot;//[Offset: 0xb8, Size: 1]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0xd0, Size: 1]
	RangeData Sensitivity_VehicleFire;//[Offset: 0xd8, Size: 1]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 1]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 1]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 1]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 1]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 1]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 1]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 1]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCameraSensitivityRangeData
	RangeData Sensitivity_Lens_Two;//[Offset: 0x0, Size: 1]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x8, Size: 1]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 1]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 1]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 1]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 1]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 1]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 1]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 1]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 1]
	static void SolarDebugLog(enum Channel, FString Message);// 0x2151990
	static void EnableDebugLogChannel(enum Channel);// 0x214fa70
	static void DisableDebugLogChannel(enum Channel);// 0x214fa00

--------------------------------
Class: SolarGameModeSelectionManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 1]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 1]
	void SaveGameModeLockSettings();// 0x21518e0
	void LoadGameModeLockSettings();// 0x2151110

--------------------------------
Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 1]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 1]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 1]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x214f7e0

--------------------------------
Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0xb43660
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x20d3920
	void SendAntiDataToSsmOnClient(FString Param, const byte AntiType);// 0xb43660
	void InitializeBind();// 0x20d3090
	FString GetAntiLogOnClient(const byte Type);// 0xb43660
	void AnoUnRegisterCallBack();// 0xb43660
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0xb43660
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x20d2bf0
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x20d2b00
	void AnoSDKResume();// 0x20d2ae0
	void AnoSDKPause();// 0x20d2ae0
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0xb43660

--------------------------------
Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 1]
	FString AntiData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarAkSoundManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void UnloadBankIgnoreStrategy(out const FName BankName);// 0x20cf510
	void SetVoiceLanguage();// 0x20ceb40
	void ReloadVoiceBanks();// 0x20ce690
	void OnBankLoadedForEventAtLocationCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x20ce220
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x20ce150
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x20ce080
	void LoadBankIgnoreStrategy(out const FName BankName);// 0x20cdfc0

--------------------------------
Class: SolarActivityManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object

--------------------------------
Class: SolarABTestManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object

--------------------------------
Class: SettlementStageManager.Object
	SolarGameInstanceBase* SolarGameInstance;//[Offset: 0x30, Size: 1]
	int CurStageIndex;//[Offset: 0x38, Size: 1]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 1]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 1]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 1]
	void UpdateModeConfig(const int InConfigID);// 0x20b7bb0
	void SkipToTarget();// 0x2649560
	void ShowNextStage();// 0x2649560
	void ShowDiePage();// 0x2649560
	void Init();// 0x2649560
	class SolarUWSettlementBase GetSettlementUIClass();// 0x20b7810
	int GetSettlementStageID();// 0x20b77e0
	SettlementConfig GetSettlementConfigRow();// 0x20b7680
	SettlementFormula* GetFormula();// 0x20b7390
	FString GetClassRelativePathName(const class Object InClass);// 0x2649560
	void CloseDiePage();// 0x2649560

--------------------------------
Class: SettlementFormula.Actor.Object
	static FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x20b79b0
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x20b78f0
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x2649560
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x20b7850
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x2649560
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x2649560
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x2649560
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x20b7520
	float GetKDA(out const SettlementParam_KDA InParam);// 0x2649560
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x20b73c0
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x2649560
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x20b7240
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x20b7120
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x2649560

--------------------------------
Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 1]
	float LifeTime;//[Offset: 0x8, Size: 1]
	int PlayerRank;//[Offset: 0xc, Size: 1]
	float GoldPunishRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 1]
	float UseTime;//[Offset: 0x8, Size: 1]
	int WeaponKillNum;//[Offset: 0xc, Size: 1]
	int WeaponAssitNum;//[Offset: 0x10, Size: 1]
	float ExpRatio;//[Offset: 0x14, Size: 1]
	float EXPPunishRatio;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x8, Size: 1]
	int DownNum;//[Offset: 0xc, Size: 1]
	int AssitNum;//[Offset: 0x10, Size: 1]
	int SaveNum;//[Offset: 0x14, Size: 1]
	float LifeTime;//[Offset: 0x18, Size: 1]
	float DamageValue;//[Offset: 0x1c, Size: 1]
	int Rank;//[Offset: 0x20, Size: 1]
	float EXPPunishRatio;//[Offset: 0x24, Size: 1]
	float CoinPunishRatio;//[Offset: 0x28, Size: 1]
	int RankCorePunish;//[Offset: 0x2c, Size: 1]
	int BaseExp;//[Offset: 0x30, Size: 1]
	float ExpRatio;//[Offset: 0x34, Size: 1]

--------------------------------
Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x8, Size: 1]
	int DeathNum;//[Offset: 0xc, Size: 1]
	int AssitNum;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 1]
	FString LocVariable;//[Offset: 0x8, Size: 1]
	FString Content;//[Offset: 0x18, Size: 1]
	FString ItemList;//[Offset: 0x28, Size: 1]
	int Order;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x8, Size: 1]
	int DownNum;//[Offset: 0xc, Size: 1]
	int AssitNum;//[Offset: 0x10, Size: 1]
	int SaveNum;//[Offset: 0x14, Size: 1]
	float LifeTime;//[Offset: 0x18, Size: 1]
	float DamageValue;//[Offset: 0x1c, Size: 1]
	int Rank;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MvpCharacterID;//[Offset: 0x348, Size: 1]
	int MvpSkinID;//[Offset: 0x34c, Size: 1]
	SettlementStageManager* SettlementStageManager;//[Offset: 0x350, Size: 1]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x22cd9f0
	void PlayMvpCharacterVoice();// 0x22ccaf0

--------------------------------
Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 1]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 1]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 1]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]

--------------------------------
Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 1]
	int Page_SkipIndex;//[Offset: 0x28, Size: 1]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KeyMappingManager.Object
	MulticastInlineDelegateProperty OnKeyMappingUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnKeyMappingConfirm;//[Size: 1]
	MulticastInlineDelegateProperty OnKeyboardUpdate;//[Size: 1]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 1]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 1]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x206ba70
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x206b8f0
	void ResetKeyMapping();// 0x206b820
	bool IsComboKey(FString KeyName);// 0x206afe0
	void ImportKeyMappingSetting();// 0x206af30
	bool HasKeyModified();// 0x206aee0
	FString[] GetAllActionNames(int PlanIndex);// 0x206ad00
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x206ab80
	void ApplyResult();// 0x206a5b0

--------------------------------
Class: KeyMappingFileMgr.Object

--------------------------------
Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 1]
	FString LogTypeName;//[Offset: 0x40, Size: 1]
	SolarGameInstanceBase* Owner;//[Offset: 0x58, Size: 1]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x60, Size: 1]
	static SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x2156f80
	void SetSwapLogFileSize(int InSize);// 0x2156e30
	void SetSwapLogFileInterval(int InInterval);// 0x2156db0
	void SetLogValueSeparater(FString InValueSeparater);// 0x2156c40
	void SetLogTerminator(FString InTerminator);// 0x2156b60
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x2156a80
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x21569a0
	void SetLogFileExtension(FString InLogFileExtension);// 0x21568c0
	void SetLogFileDir(FString InLogFileDir);// 0x21567e0
	void SetLogElementSeparater(FString InElementSeparater);// 0x2156700
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x2156680
	void ReceiveShutdown();// 0xb43660
	void ReceiveInit();// 0xb43660
	void NotifyBattleStart(FString InBattleID);// 0x21560a0
	void NotifyBattleEnd();// 0x2156080
	static void LogInternal(FString InLog);// 0x2155ee0
	static void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x2155dc0
	static void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x2155cd0
	static void LogGameStats_Key(FString InKey);// 0x2155c40
	bool IsUseEmptyHeadData(FString InPlayerID);// 0xb43660
	int GetSwapLogFileSize();// 0x2155560
	int GetSwapLogFileInterval();// 0x2155540
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0xb43660
	static FString GetProperLogElement(FString InElement);// 0x2155300
	FString GetLogValueSeparater();// 0x2154c50
	FString GetLogTerminator();// 0x2154b90
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x2154b30
	FString GetLogFileNameSuffix();// 0x2154a70
	FString GetLogFileNamePrefix();// 0x21549b0
	FString GetLogFileExtension();// 0x21548f0
	FString GetLogFileDir();// 0x2154830
	FString GetLogElementSeparater();// 0x2154770
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerID);// 0x2649560
	int GetLogCheckIntervalMS();// 0x2154750
	FString GetHeadDataString(FString InPlayerID);// 0xb43660
	FString GetEmptyHeadDataString();// 0xb43660
	bool CanReportBIWrapper(FString InLogType);// 0xb43660

--------------------------------
Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 1]
	int PIEInstance;//[Offset: 0x4, Size: 1]
	FString BattleID;//[Offset: 0x8, Size: 1]
	FString WorldName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 1]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 1]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 1]
	DataTable* BackpackTrailAssembingDTInstance;//[Offset: 0x48, Size: 1]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 1]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 1]
	DataTable* BuffEffectDTInstance;//[Offset: 0x60, Size: 1]
	DataTable* ScreenEffectDTInstance;//[Offset: 0x68, Size: 1]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x70, Size: 1]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x78, Size: 1]
	SolarRoleSkillDataConfig* RoleConfigAsset;//[Offset: 0x80, Size: 1]
	float HeadHitValue;//[Offset: 0x88, Size: 1]
	float ShieldReducePhy;//[Offset: 0x8c, Size: 1]
	float ShieldReduceEn;//[Offset: 0x90, Size: 1]
	float ArmorReducePhy;//[Offset: 0x94, Size: 1]
	float ArmorReduceEn;//[Offset: 0x98, Size: 1]
	int BackpackEnergyID;//[Offset: 0x9c, Size: 1]
	int BackpackExtraEnergyID;//[Offset: 0xa0, Size: 1]
	int MedicineItemId;//[Offset: 0xa4, Size: 1]
	int RadarItemId;//[Offset: 0xa8, Size: 1]
	int ShieldRechargerItemId;//[Offset: 0xac, Size: 1]
	int ShieldBigRechargerItemId;//[Offset: 0xb0, Size: 1]
	float UnPickupItemTime;//[Offset: 0xb4, Size: 1]
	float UnAutoPickupItemTime;//[Offset: 0xb8, Size: 1]
	float AutoPickupTime;//[Offset: 0xbc, Size: 1]
	float AutoMarkCDTime;//[Offset: 0xc0, Size: 1]
	int[] AutoMarkItemTypeList;//[Offset: 0xc8, Size: 1]
	float AutoMarkTeammateDistance;//[Offset: 0xd8, Size: 1]
	float PickupCapsuleRadius;//[Offset: 0xdc, Size: 1]
	float PickupCapsuleHalfHeight;//[Offset: 0xe0, Size: 1]
	void OnInitialized();// 0xb43660
	SolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig();// 0x2088270
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x213f110
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x213ef70
	LinearColor GetHUDColorByQuality(int Quality);// 0x213eed0
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x213ee30
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x213f010
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x213ee00
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x213edd0
	FString GetFGByQuality(int Quality);// 0x213ec90
	LinearColor GetColorByQuality(int Quality);// 0x213ea50

--------------------------------
Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	WeaponAttributeGameplayTags WeaponAttributeTags;//[Offset: 0x38, Size: 1]
	enum AimTraceOriginType;//[Offset: 0x50, Size: 1]
	float MuzzleInWallCheckDistance;//[Offset: 0x54, Size: 1]
	float SpreadSmoothSpeed;//[Offset: 0x58, Size: 1]
	bool bEnableNewShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bEnableGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bEnableRecoilRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bRecoilRecoveryBlockGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	float RecoilRecoveryScale;//[Offset: 0x60, Size: 1]
	enum AimOffsetAdjustType;//[Offset: 0x64, Size: 1]
	Vector2D StandardViewportSize;//[Offset: 0x68, Size: 1]
	float StandardDPIScale;//[Offset: 0x70, Size: 1]
	bool bWeaponReceiveShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x78, Size: 1]
	bool bSecondLimitFullForGameDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float DoScopeInterval;//[Offset: 0x84, Size: 1]
	float DoScopeMixedTimeThreshold;//[Offset: 0x88, Size: 1]
	float SprintingFireDelay;//[Offset: 0x8c, Size: 1]
	<class Actor,WeaponHitResponse> WeaponHitResponseClassMap;//[Offset: 0x90, Size: 1]
	<FName,WeaponHitResponse> WeaponHitResponseTagMap;//[Offset: 0xe0, Size: 1]
	<class Actor,WeaponHitResponse> WeaponHitResponseSameTeamClassMap;//[Offset: 0x130, Size: 1]
	<FName,WeaponHitResponse> WeaponHitResponseSameTeamTagMap;//[Offset: 0x180, Size: 1]
	RuntimeFloatCurve HitEffectScaleRuntimeCurve;//[Offset: 0x1d0, Size: 1]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	RuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve;//[Offset: 0x260, Size: 1]
	RuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve;//[Offset: 0x2e8, Size: 1]
	float WeaponSkillDataUIDisplayDistance;//[Offset: 0x370, Size: 1]
	float PriamayFireIgnoreInterval;//[Offset: 0x374, Size: 1]
	float AssistAimAutoFireRadius;//[Offset: 0x378, Size: 1]
	byte[] AssistAimAutoFireBlockTypes;//[Offset: 0x380, Size: 1]
	WeaponAssistAimConfig* AssistAimConfig;//[Offset: 0x390, Size: 1]
	SoftObjectPath PartUpgradeMaterial;//[Offset: 0x398, Size: 1]
	float PartUpgradeFadeInterval;//[Offset: 0x3b0, Size: 1]
	<enum,FString> CharaterPostureMap;//[Offset: 0x3b8, Size: 1]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x408, Size: 1]
	DataTable* WeaponPartEffectDescTable;//[Offset: 0x428, Size: 1]
	int WeaponPartEffectTipMaxinum;//[Offset: 0x430, Size: 1]
	<enum,FString> HitFeedbackMapForUI;//[Offset: 0x438, Size: 1]
	float CrosshairAimEnemyEndTimeForPlayerWeapon;//[Offset: 0x488, Size: 1]
	float CrosshairAimEnemyEndTimeForVehicleWeapon;//[Offset: 0x48c, Size: 1]
	<int,enum> AudioPromptForNoAmmoTable;//[Offset: 0x490, Size: 1]
	<enum,FName> WeaponEquipSound;//[Offset: 0x4e0, Size: 1]
	<enum,FName> WeaponUnequipSound;//[Offset: 0x530, Size: 1]
	<enum,FName> WeaponOpenScopeSound;//[Offset: 0x580, Size: 1]
	<enum,FName> WeaponCloseScopeSound;//[Offset: 0x5d0, Size: 1]
	int WeaponSummonBlockNoticeID;//[Offset: 0x620, Size: 1]
	int WeaponSummonOverRangeNoticeID;//[Offset: 0x624, Size: 1]
	DataTable* WeaponSkinTable;//[Offset: 0x628, Size: 1]
	<enum,FName> PartSocketNameTable;//[Offset: 0x630, Size: 1]
	DataTable* WeaponLODTable;//[Offset: 0x680, Size: 1]
	float EnableHeadShotDamageMinScale;//[Offset: 0x688, Size: 1]
	FString GetStateByPosture(enum posture);// 0x2054f80
	FString GetStateByAnimState(enum CharacterState);// 0x2054ea0
	bool GetIsGroundByAnimState(enum CharacterState);// 0x2054d80

--------------------------------
Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x2649560

--------------------------------
Class: WeaponAttributeGameplayTags
	GameplayTag Spread;//[Offset: 0x0, Size: 1]
	GameplayTag HorizontalRecoil;//[Offset: 0x8, Size: 1]
	GameplayTag VerticalRecoil;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponHitResponse
	bool bForceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bForcePenetrate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectHalo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bTakeDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bShowExplode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bShowDecal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]

--------------------------------
Class: WeaponAssistAimConfig.DataAsset.Object
	byte AssistAimTargetFlag;//[Offset: 0x30, Size: 1]
	byte[] TargetDetectionBlockTypes;//[Offset: 0x38, Size: 1]
	byte[] LockAimingBlockTypes;//[Offset: 0x48, Size: 1]
	bool bEnableAssistFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bEnableGlobalSensitivityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll;//[Offset: 0x60, Size: 1]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAllGamepad;//[Offset: 0xc0, Size: 1]
	WeaponAssistAimByCharacterTag[] AssistAimWeaponConfigsByCharacterTag;//[Offset: 0x120, Size: 1]

--------------------------------
Class: WeaponAssistAimWeaponConfigAll
	WeaponAssistAimWeaponConfig* DefaultConfig;//[Offset: 0x0, Size: 1]
	WeaponAssistAimWeaponConfig* DefaultScopeConfig;//[Offset: 0x8, Size: 1]
	<enum,WeaponAssistAimWeaponConfig*> ScopeConfigMap;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponAssistAimByCharacterTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 1]
	WeaponAssistAimWeaponConfig* AssistAimConfig;//[Offset: 0x50, Size: 1]

--------------------------------
Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 1]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 1]
	float CoefficientHUD;//[Offset: 0x58, Size: 1]
	float CoefficientWorld;//[Offset: 0x5c, Size: 1]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 1]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 1]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 1]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 1]
	float BoneWeight;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarRoleSkillDataConfig.DataAsset.Object
	PassiveSkillDataAsset* ClassCommonPassiveSkill;//[Offset: 0x30, Size: 1]
	<enum,HeroClassConfig> HeroClassConfigs;//[Offset: 0x58, Size: 1]
	DataTable* RoleSkillDataTable;//[Offset: 0xa8, Size: 1]
	DataTable* BattleUpgradeEffectTypeDataTable;//[Offset: 0xb0, Size: 1]
	int RoleSkillCannotActiveNoticeID;//[Offset: 0xb8, Size: 1]
	SoftClassPath UniqueSkillForbiddenGameplayEffect;//[Offset: 0xc0, Size: 1]
	SoftClassPath TacticalSkillForbiddenGameplayEffect;//[Offset: 0xd8, Size: 1]
	SoftClassPath InitCDValueGameplayEffect;//[Offset: 0xf0, Size: 1]
	SoftClassPath SuperSkillBlockGameplayEffect;//[Offset: 0x108, Size: 1]
	SoftClassPath TacticalSkillBlockGameplayEffect;//[Offset: 0x120, Size: 1]
	class GameplayEffect* UsingContinuousSkillStatusEffect;//[Offset: 0x138, Size: 1]
	class GameplayEffect* HoldingSkillStatusEffect;//[Offset: 0x140, Size: 1]
	DataTable* WeaponUIStyleDataTable;//[Offset: 0x148, Size: 1]
	<int,FString> CharacterUpgradeEffects;//[Offset: 0x150, Size: 1]
	enum GetLevelUpRewardType(const int CharacterId, const int TargetLevel);// 0x21f9d20
	SoftObjectPath GetLevelUpInnerIconPath(const int CharacterId, const int TargetLevel);// 0x21f9bf0
	FString GetLevelUpInnerDescription(const int CharacterId, const int TargetLevel);// 0x21f9ad0
	SoftObjectPath[] GetLevelUpAllInnerIconPath(const int CharacterId, const int TargetLevel);// 0x21f9950
	FString[] GetLevelUpAllInnerDescription(const int CharacterId, const int TargetLevel);// 0x21f97e0
	FString GetEffectIdForCharacterUpgrade(const int TargetLevel);// 0x21f9700
	enum GetClassTypeForCharacter(const int CharacterId);// 0x21f95c0

--------------------------------
Class: PassiveSkillDataAsset.PrimaryDataAsset.DataAsset.Object
	SoftClassPath SkillClassPath;//[Offset: 0x30, Size: 1]
	SoftObjectPath SkillIconPath;//[Offset: 0x48, Size: 1]
	WrappedLocalTextID SkillName;//[Offset: 0x60, Size: 1]
	WrappedLocalTextID SkillDescription;//[Offset: 0x64, Size: 1]
	PassiveSkillLevelDescription[] LevelUpConfigs;//[Offset: 0x68, Size: 1]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: WrappedLocalTextID
	int LocalTextId;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PassiveSkillLevelDescription
	WrappedLocalTextID InnerDescriptionLocalTextID;//[Offset: 0x0, Size: 1]
	WrappedLocalTextID ShortDescriptionLocalTextID;//[Offset: 0x4, Size: 1]
	SoftObjectPath InnerIconPath;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HeroClassConfig
	PassiveSkillDataAsset* SpecificPassiveSkill;//[Offset: 0x0, Size: 1]
	float HPGridUnit;//[Offset: 0x28, Size: 1]
	bool bEnableCombatRegeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int RegenGrids;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 1]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 1]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 1]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 1]

--------------------------------
Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 1]
	FString PanelAliasName;//[Offset: 0x10, Size: 1]
	float CurScale;//[Offset: 0x20, Size: 1]
	float MinScale;//[Offset: 0x24, Size: 1]
	float MaxScale;//[Offset: 0x28, Size: 1]
	float CurOpacity;//[Offset: 0x2c, Size: 1]
	float MinOpacity;//[Offset: 0x30, Size: 1]
	float MaxOpacity;//[Offset: 0x34, Size: 1]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	float minOffsetY;//[Offset: 0x3c, Size: 1]
	float maxOffsetY;//[Offset: 0x40, Size: 1]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bVisibleInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	Vector2D Translation;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCustomizedGameModeManager.Object
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 1]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x40, Size: 1]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x50, Size: 1]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x260, Size: 1]
	FString Side;//[Offset: 0x268, Size: 1]
	FString Job;//[Offset: 0x278, Size: 1]
	FString ElementID;//[Offset: 0x288, Size: 1]
	enum Type;//[Offset: 0x298, Size: 1]
	enum State;//[Offset: 0x299, Size: 1]
	enum Visibility;//[Offset: 0x29a, Size: 1]
	FName ElementTypeName;//[Offset: 0x29c, Size: 1]
	FString GroupKey;//[Offset: 0x2a8, Size: 1]
	Vector[] PlayerLocations;//[Offset: 0x2b8, Size: 1]
	void SetElementVisibility(const enum NewType);// 0x21dee70
	enum SetElementState(const enum NewState);// 0x20964e0
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x2649560
	void OnElementStateChanged(const enum CurrentState);// 0x2649560

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x250, Size: 1]

--------------------------------
Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 1]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x2017f10
	Object* GetCrossLevelData(FString InSoltName);// 0x2017700

--------------------------------
Class: CrashReportManager.Object
	void SetUserID(FString InUserId);// 0x203ad00
	void SetDeviceUUID(FString InDeviceUUID);// 0x203ac60
	static void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x203ab30

--------------------------------
Class: BattlePassConfigInfo.Object
	BattlePassLevelInfo[] BattlePassLevel;//[Offset: 0x28, Size: 1]
	bool IsMaxLevelWithExp(int BattlePassID, int TotalExp);// 0x200a820
	void Initialize();// 0x200a800
	int GetLevelByTestExp(int BattlePassID, int InTestExp);// 0x200a6d0
	int GetExpNeedForLv(int BattlePassID, int Level);// 0x200a600
	int GetBattllePassMaxLevel(int BattlePassID);// 0x200a560

--------------------------------
Class: BattlePassLevelInfo

--------------------------------
Class: SolarAssetManager.AssetManager.Object
	MulticastInlineDelegateProperty OnAssetManagerPreloadCompleted;//[Size: 1]
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x460, Size: 1]
	<FString,Object*> CachedObjMap;//[Offset: 0x468, Size: 1]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x20d3b60
	void PreloadGameNormalAssets(SolarGameInstanceBase* GameInstancePtr);// 0x20d3790
	void OnBindingActorDestory(Actor* Actor);// 0x20d35a0
	float GetPreloadAssetsProgress();// 0x20d2f90

--------------------------------
Class: SolarChunkAssignData.DataAsset.Object
	DirectoryPath[] DirectoriesToNeverClean;//[Offset: 0x30, Size: 1]
	<FString,ChunkAssignRule> Rules;//[Offset: 0x40, Size: 1]

--------------------------------
Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 1]
	int ChunkID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 1]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0xb43660

--------------------------------
Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 1]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 1]
	void OnMessageReceived(out const byte[] Data);// 0xb43660

--------------------------------
Class: SolarApplicationLifetimeManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 1]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 1]
	void ReceiveOnWindowMinimized(const bool bIsMinimized);// 0xb43660
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0xb43660
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0xb43660

--------------------------------
Class: SolarGameProgressManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	MulticastInlineDelegateProperty OnGameStart;//[Size: 1]
	void OnWorldConditionsCompleted();// 0x2151700
	void OnStreamingLevelComplete();// 0x21516e0
	void OnShadersCompileComplete();// 0x21516c0
	void OnGameStart__DelegateSignature();// 0x2649560
	static void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x2150f70
	static void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x2150eb0
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x2150e20
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x2150d50
	static bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x2150c70
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x2150b80
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x2150ae0
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x21509b0
	static bool HasGameStarted(const Object* WorldContextObject);// 0x2150920
	static SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x214fca0

--------------------------------
Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 1]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 5]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x80, Size: 1]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xd0, Size: 1]
	int MobileMaxFrameRate;//[Offset: 0x120, Size: 1]
	int HighRefreshRateThreshold;//[Offset: 0x124, Size: 1]
	int DefaultMSAALevel;//[Offset: 0x128, Size: 1]
	ContentScaleFactorLevelItem ContentScaleFactorLevelItems;//[Offset: 0x130, Size: 4]
	<enum,enum> DefaultContentScaleFactorLevel;//[Offset: 0x290, Size: 1]

--------------------------------
Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 1]
	float FrameRateLobby;//[Offset: 0x4, Size: 1]
	float FrameRateInGame;//[Offset: 0x8, Size: 1]
	float FrameRatePC;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ContentScaleFactorLevelItem
	enum ContentScaleFactorLevel;//[Offset: 0x0, Size: 1]
	<enum,float> DeviceLevelContentScaleFactorMap;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* SolarGameInstance;//[Offset: 0x30, Size: 1]
	void GetMatchResult(out MatchResult MatchResult);// 0xb43660

--------------------------------
Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 1]
	FString BattleAddr;//[Offset: 0x10, Size: 1]
	FString Token;//[Offset: 0x20, Size: 1]
	int ModeID;//[Offset: 0x30, Size: 1]
	int RuleID;//[Offset: 0x34, Size: 1]
	FString SelfPlayerID;//[Offset: 0x38, Size: 1]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 1]
	FString MapName;//[Offset: 0x58, Size: 1]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 1]

--------------------------------
Class: MatchResult_Group
	int groupid;//[Offset: 0x0, Size: 1]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 1]
	FString playerName;//[Offset: 0x10, Size: 1]
	int AvatarID;//[Offset: 0x20, Size: 1]
	int fightCharacterID;//[Offset: 0x24, Size: 1]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 1]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 1]
	FString CharacterName;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SolarSpecialEffectsMgr.Object

--------------------------------
Class: PakHashManager.Object
	MulticastInlineDelegateProperty OnPakHashCheckFailed;//[Size: 1]
	bool bEnablePakHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	<FString,FString> MountedPakHashMap;//[Offset: 0x60, Size: 1]
	bool IsPakFileHashsReady();// 0x2088410
	bool IsEnablePakHash();// 0x204ae30
	<FString,FString> GetReadyPakFileHashs();// 0x2088180
	FString[] GetAllMountedPakNames();// 0x20880a0
	bool CheckAllMountedPaks(out const <FString,FString> BasePakMap, out const <FString,FString> PatchPakMap);// 0x2649560
	void CalculatePakFileMD5();// 0x2088060

--------------------------------
Class: SolarFontManager.Object
	Font* ChineseFont;//[Offset: 0x30, Size: 1]
	void SaveChineseFontSetting(bool bHasLoad);// 0x2140570
	bool MergeCompositeFont(FString NewFontAssetPath);// 0x2140150
	Font* LoadNewFont(FString NewFontAssetPath);// 0x21400a0
	bool IsNeedMergeChineseFont(bool bAutoLoad);// 0x213fee0
	void Init();// 0xb43660

--------------------------------
Class: AndroidInputManager.Object
	MulticastInlineDelegateProperty OnAndroidBackPressed;//[Size: 1]

--------------------------------
Class: RegistedActorContainer

--------------------------------
Class: AntiCheatSetting
	int64 ID;//[Offset: 0x0, Size: 1]
	int64 ValueType;//[Offset: 0x8, Size: 1]
	double ValueStart;//[Offset: 0x10, Size: 1]
	double ValueEnd;//[Offset: 0x18, Size: 1]
	int64 Tolerance;//[Offset: 0x20, Size: 1]
	int64 ProbeInterval;//[Offset: 0x28, Size: 1]
	FString VariableName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ScreenshotConfig
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int MaxCountInRound;//[Offset: 0x4, Size: 1]
	FString ScreenshotMoment;//[Offset: 0x8, Size: 1]
	int ScreenshotInterval;//[Offset: 0x18, Size: 1]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 1]
	int ScreenshotQuality;//[Offset: 0x20, Size: 1]
	FString ImageSaveType;//[Offset: 0x28, Size: 1]
	FString ScreenshotMode;//[Offset: 0x38, Size: 1]
	int ImageMaxSize;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SingleWeaponConfig.DataAsset.Object
	WeaponDebugFlag DebugFlag;//[Offset: 0x30, Size: 1]
	enum WeaponBrand;//[Offset: 0x34, Size: 1]
	enum WeaponType;//[Offset: 0x35, Size: 1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 1]
	MoveSpeedReduceCurveConfig[] MoveSpeedReduceCurveConfigs;//[Offset: 0x88, Size: 1]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x98, Size: 1]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x9c, Size: 1]
	SolarWeaponFireSocketData[] FireSockets;//[Offset: 0xa0, Size: 1]
	FName[] MultiMuzzleSocketNames;//[Offset: 0xb0, Size: 1]
	FName[] MultiBulletSocketNames;//[Offset: 0xc0, Size: 1]
	FName[] MultiCastShellSocketNames;//[Offset: 0xd0, Size: 1]
	FName[] MultiCastShellOnScopeSocketNames;//[Offset: 0xe0, Size: 1]
	bool bIsSingleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bCanSuspendBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	bool bIsHeavyFireWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	bool bIsFlamethrowerWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	bool bUseSpecialFireInputRespondConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	SolarWeaponFireInputRespondConfig FireInputRespondConfig;//[Offset: 0xf5, Size: 1]
	bool bSupportSingleShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff, Size: 1]
	bool bSupportAutoShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bSupportBurstShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	float AimOffsetReferenceAimDistance;//[Offset: 0x104, Size: 1]
	float MaxSpread;//[Offset: 0x108, Size: 1]
	float MinSpread;//[Offset: 0x10c, Size: 1]
	float HipFireBaseSpread;//[Offset: 0x110, Size: 1]
	float ShoulderFireBaseSpread;//[Offset: 0x114, Size: 1]
	float ADSBaseSpread;//[Offset: 0x118, Size: 1]
	float VhADSBaseSpread;//[Offset: 0x11c, Size: 1]
	WeaponShootConfig* WeaponShootConfig;//[Offset: 0x120, Size: 1]
	bool bCalcSpreadByStandardDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	float SpreadStandardDistance;//[Offset: 0x12c, Size: 1]
	float SpreadStandardOriginMaxRange;//[Offset: 0x130, Size: 1]
	bool bCalcSpreadByDistributionCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0x138, Size: 1]
	<FString,float> SpreadCOPMap;//[Offset: 0x1c0, Size: 1]
	float SpreadStatuSpeed;//[Offset: 0x210, Size: 1]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x218, Size: 1]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x268, Size: 1]
	Vector2D[] CustomSpreadArray;//[Offset: 0x2b8, Size: 1]
	class SolarWeaponAT_CtrlFireBase* CtrlFireTaskClass;//[Offset: 0x2c8, Size: 1]
	class SolarWeaponAT_FireBase* FireTaskClass;//[Offset: 0x2d0, Size: 1]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x2d8, Size: 1]
	int PrimaryAmmoIndex;//[Offset: 0x2e0, Size: 1]
	int PrimaryAmmoCap;//[Offset: 0x2e4, Size: 1]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x2e8, Size: 1]
	int SecondaryAmmoIndex;//[Offset: 0x2f0, Size: 1]
	int SecondaryAmmoCap;//[Offset: 0x2f4, Size: 1]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x2f8, Size: 1]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x300, Size: 1]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	float OverloadMaxValue;//[Offset: 0x314, Size: 1]
	float NormalOverloadCoolingRate;//[Offset: 0x318, Size: 1]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x320, Size: 1]
	float OverloadCoolingPeriod;//[Offset: 0x328, Size: 1]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x330, Size: 1]
	float OverloadWarningRate;//[Offset: 0x338, Size: 1]
	float WeaponSwitchTime;//[Offset: 0x33c, Size: 1]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float AutoFireDelayMs;//[Offset: 0x344, Size: 1]
	float AutoFireEndDelayMs;//[Offset: 0x348, Size: 1]
	float AutoFireCompensationRate;//[Offset: 0x34c, Size: 1]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll;//[Offset: 0x358, Size: 1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAllGamepad;//[Offset: 0x3b8, Size: 1]
	SolarWeaponFPPData DefaultFPPData;//[Offset: 0x418, Size: 1]
	SolarWeaponFPPConfig[] FPPConfigByAspectRatioArray;//[Offset: 0x480, Size: 1]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	float ScopeOpenTime;//[Offset: 0x494, Size: 1]
	float ScopeOpenFOVTimeScale;//[Offset: 0x498, Size: 1]
	enum[] SupportChangeTypeArray;//[Offset: 0x4a0, Size: 1]
	int[] DefaultPartsArray;//[Offset: 0x4b0, Size: 1]
	float RecoilFireTimeWithScope;//[Offset: 0x4c0, Size: 1]
	float RecoilRecoverTimeWithScope;//[Offset: 0x4c4, Size: 1]
	float RecoilMagnitudeWithScope;//[Offset: 0x4c8, Size: 1]
	CurveFloat* RecoilCurveWithScope;//[Offset: 0x4d0, Size: 1]
	int RecoilSkipSequenceSumWithScope;//[Offset: 0x4d8, Size: 1]
	Vector2D[] RecoilCurveSequenceWithScope;//[Offset: 0x4e0, Size: 1]
	float RecoilFireTimeNoScope;//[Offset: 0x4f0, Size: 1]
	float RecoilRecoverTimeNoScope;//[Offset: 0x4f4, Size: 1]
	float RecoilMagnitudeNoScope;//[Offset: 0x4f8, Size: 1]
	CurveFloat* RecoilCurveNoScope;//[Offset: 0x500, Size: 1]
	int RecoilSkipSequenceSumNoScope;//[Offset: 0x508, Size: 1]
	Vector2D[] RecoilCurveSequenceNoScope;//[Offset: 0x510, Size: 1]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	float GatlingRotaryAcceleration;//[Offset: 0x524, Size: 1]
	float GatlingFireRotarySpeed;//[Offset: 0x528, Size: 1]
	float GatlingMaxRotarySpeed;//[Offset: 0x52c, Size: 1]
	float GatlingHoldTime;//[Offset: 0x530, Size: 1]
	float GatlingRotaryAttenuation;//[Offset: 0x534, Size: 1]
	float GatlingScatteringMagnification;//[Offset: 0x538, Size: 1]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x540, Size: 1]
	class GameplayAbility[] GasAbilities;//[Offset: 0x548, Size: 1]
	float HeadshotDamageFactor;//[Offset: 0x558, Size: 1]
	FName Socket;//[Offset: 0x55c, Size: 1]
	FName LeftHandIKTargetSocket;//[Offset: 0x564, Size: 1]
	FName LeftHandIKTargetFemaleSocket;//[Offset: 0x56c, Size: 1]
	Vector LeftHandIkEffectLocation;//[Offset: 0x574, Size: 1]
	Vector LeftHandIkJointLocation;//[Offset: 0x580, Size: 1]
	Vector LeftHandIkJointLocationForGunIdle;//[Offset: 0x58c, Size: 1]
	Vector LeftHandIkJointLocationForGunIdleWhenCrouch;//[Offset: 0x598, Size: 1]
	Vector RightHandIkEffectLocation;//[Offset: 0x5a4, Size: 1]
	Vector RightHandIkJointLocation;//[Offset: 0x5b0, Size: 1]
	LeftHandGripConfig LeftHandGripRotationConfig;//[Offset: 0x5bc, Size: 1]
	LeftHandGripConfig LeftHandGripRotationConfigForGunIdle;//[Offset: 0x640, Size: 1]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	class CrossHairWidget* Crosshair;//[Offset: 0x6c8, Size: 1]
	class FeedbackWidget* FeedbackWidget;//[Offset: 0x6d0, Size: 1]
	SolarWeaponCrosshairData CrosshairWidgetData;//[Offset: 0x6d8, Size: 1]
	SoftObjectPath WeaponIcon;//[Offset: 0x710, Size: 1]
	SlateBrush PrimaryFireBrush;//[Offset: 0x728, Size: 1]
	int PrimaryFireTxt;//[Offset: 0x7c0, Size: 1]
	SlateBrush SecondaryFireBrush;//[Offset: 0x7c8, Size: 1]
	int SecondaryFireTxt;//[Offset: 0x860, Size: 1]
	FString WeaponTextType;//[Offset: 0x868, Size: 1]
	SoftObjectPath ItemIcon;//[Offset: 0x878, Size: 1]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x890, Size: 1]
	void InitSupportChangeTypeArray(int[] Data);// 0x20b9e70
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x20b9c40
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed);// 0x20b9a40
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x20b9900
	void InitScopeData(bool onekey, float scopetime);// 0x20b9830
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x20b9680
	void InitBase(int WPType);// 0x20b95f0
	bool GetIsSupportPart(enum Type);// 0x20b9560

--------------------------------
Class: WeaponDebugFlag
	bool bIgnoreActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bMechanicalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShowShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: MoveSpeedReduceCurveConfig
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 1]
	RuntimeFloatCurve MoveSpeedReduceCurveOnHoldingWeapon;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SolarWeaponFireSocketData
	FName[] MultiBulletSocketNames;//[Offset: 0x0, Size: 1]
	FName[] MuzzleSocketNames;//[Offset: 0x10, Size: 1]
	FName[] AdsMuzzleSocketNames;//[Offset: 0x20, Size: 1]
	FName[] MuzzleBlockCheckSocketNames;//[Offset: 0x30, Size: 1]
	FName[] MultiCastShellSocketNames;//[Offset: 0x40, Size: 1]
	FName[] AdsMultiCastShellSocketNames;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SolarWeaponFireInputRespondConfig
	bool bAutoCloseScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bShootAtPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShootAtPressAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bCanAutoShootWhilePress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bCanAutoShootWhilePressAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bCanShootWhileScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bCanShootWhileScopingAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bCanManuallyCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bCanManuallyCanceledAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: WeaponShootConfig.DataAsset.Object
	bool bEnableNewSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bEnableNewRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bEnableNewWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool bEnableNewCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	float ShootOriginRange;//[Offset: 0x34, Size: 1]
	float StandardShootDistance;//[Offset: 0x38, Size: 1]
	Vector RotationPivot;//[Offset: 0x3c, Size: 1]
	<enum,Vector> RotationPivotMap;//[Offset: 0x48, Size: 1]
	float BaseSpread;//[Offset: 0x98, Size: 1]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0xa0, Size: 1]
	float AverageSpreadDistribution;//[Offset: 0x128, Size: 1]
	RuntimeFloatCurve VisualSpreadScaleCurve;//[Offset: 0x130, Size: 1]
	WeaponAttributeModifiersByTag[] ModifiersByOwnerTag;//[Offset: 0x1b8, Size: 1]
	enum SprayingRecoveryMode;//[Offset: 0x1c8, Size: 1]
	RuntimeFloatCurve SprayingRecoveryCurve;//[Offset: 0x1d0, Size: 1]
	WeaponSpreadPattern* SpreadPattern;//[Offset: 0x258, Size: 1]
	WeaponRecoilPattern* RecoilPattern;//[Offset: 0x260, Size: 1]
	BlendSpace* TPPKickAnimBlendSpace;//[Offset: 0x268, Size: 1]
	Vector TPPKickBlendSpaceMaxValue;//[Offset: 0x270, Size: 1]
	WeaponTPPKickPattern* TPPKickPattern;//[Offset: 0x280, Size: 1]
	<enum,float> RecoilHoriRecRangeWithCoScaleMap;//[Offset: 0x288, Size: 1]
	WeaponGunKickPattern* GunKickPattern;//[Offset: 0x2d8, Size: 1]
	<enum,GunKickScale> GunKickScaleMap;//[Offset: 0x2e0, Size: 1]
	bool bEnableEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bStopEndShakeOnShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x338, Size: 1]
	CurveVector* EndShakeRotationCurve;//[Offset: 0x340, Size: 1]
	CurveFloat* EndShakeScaleBySpeedCurve;//[Offset: 0x348, Size: 1]
	CurveVector* EndShakeScaleByVelocityCurve;//[Offset: 0x350, Size: 1]
	float SkewOffsetSmoothSpeed;//[Offset: 0x358, Size: 1]
	float SkewRotationSmoothSpeed;//[Offset: 0x35c, Size: 1]
	WeaponSkewAdjustment[] SkewAdjustments;//[Offset: 0x360, Size: 1]
	CrossHairShootConfig DefaultCrossHairConfig;//[Offset: 0x370, Size: 1]
	<enum,CrossHairShootConfig> CrossHairConfigMap;//[Offset: 0x380, Size: 1]
	WeaponCameraShakePattern* ShakePatternOnShot;//[Offset: 0x3d0, Size: 1]
	WeaponCameraShakePattern* ShakePatternOnScopeShot;//[Offset: 0x3d8, Size: 1]
	<enum,float> ShakeScaleMapOnScopeShot;//[Offset: 0x3e0, Size: 1]

--------------------------------
Class: WeaponAttributeModifiersByTag.WeaponAttributeModifierContainer
	GameplayTagRequirements TagRequirements;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponAttributeModifierContainer
	WeaponAttributeModifier[] Modifiers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeaponAttributeModifier
	GameplayTag AttributeTag;//[Offset: 0x0, Size: 1]
	WeaponAttributeParam[] Modifiers;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WeaponAttributeParam
	enum ParamType;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: WeaponSpreadPattern.SolarPattern.Object

--------------------------------
Class: SolarPattern.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponRecoilPattern.RecoverableRecoilPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	bool bEnableRecoveryCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	RangeFloat HoriRecoveryRangeWithCorrection;//[Offset: 0x214, Size: 1]

--------------------------------
Class: RecoverableRecoilPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	bool bLimitMaxOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Vector MaxOffset;//[Offset: 0x3c, Size: 1]
	bool bLimitRecoveryStopOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	Vector RecoveryStopOffset;//[Offset: 0x4c, Size: 1]
	float IncreaseTime;//[Offset: 0x58, Size: 1]
	RuntimeFloatCurve IncreaseCurve;//[Offset: 0x60, Size: 1]
	WeaponRecoilVectorGenerator OffsetGenerator;//[Offset: 0xe8, Size: 1]
	RuntimeFloatCurve DecreaseTimeCurve;//[Offset: 0x100, Size: 1]
	RuntimeFloatCurve DecreaseRatioCurve;//[Offset: 0x188, Size: 1]

--------------------------------
Class: SolarIncreaseAndDecreasePattern.SolarPattern.Object
	enum TransitionMode;//[Offset: 0x30, Size: 1]

--------------------------------
Class: RangeFloat
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: WeaponRecoilVectorGenerator
	WeaponRecoilValueGenerator* XGenerator;//[Offset: 0x0, Size: 1]
	WeaponRecoilValueGenerator* YGenerator;//[Offset: 0x8, Size: 1]
	WeaponRecoilValueGenerator* ZGenerator;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponRecoilValueGenerator.Object

--------------------------------
Class: WeaponTPPKickPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	Vector MaxOffset;//[Offset: 0x38, Size: 1]
	float IncreaseTime;//[Offset: 0x44, Size: 1]
	CurveVector* IncreaseCurve;//[Offset: 0x48, Size: 1]
	WeaponRecoilVectorGenerator OffsetGenerator;//[Offset: 0x50, Size: 1]
	float DecreaseTime;//[Offset: 0x68, Size: 1]
	RuntimeFloatCurve DecreaseRatioCurve;//[Offset: 0x70, Size: 1]
	CurveVector* DecreaseOffsetCurve;//[Offset: 0xf8, Size: 1]
	WeaponRecoilVectorGenerator DecreaseOffsetGenerator;//[Offset: 0x100, Size: 1]

--------------------------------
Class: WeaponGunKickPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	ValueCurveBySprayingTime SprayingOffset;//[Offset: 0x38, Size: 1]
	ValueCurveBySprayingTime SprayingRotation;//[Offset: 0x50, Size: 1]
	float SprayingRestartSmoothTime;//[Offset: 0x68, Size: 1]
	float SprayingRecoveryTime;//[Offset: 0x6c, Size: 1]
	RuntimeFloatCurve SprayingRecoveryRatioCurve;//[Offset: 0x70, Size: 1]
	float IncreaseTime;//[Offset: 0xf8, Size: 1]
	RuntimeFloatCurve IncreaseCurve;//[Offset: 0x100, Size: 1]
	Vector MaxOffset;//[Offset: 0x188, Size: 1]
	WeaponRecoilVectorGenerator OffsetGenerator;//[Offset: 0x198, Size: 1]
	Rotator MaxRotation;//[Offset: 0x1b0, Size: 1]
	WeaponRecoilRotatorGenerator RotationGenerator;//[Offset: 0x1c0, Size: 1]
	float DecreaseTime;//[Offset: 0x1d8, Size: 1]
	RuntimeFloatCurve DecreaseRatioCurve;//[Offset: 0x1e0, Size: 1]

--------------------------------
Class: ValueCurveBySprayingTime
	CurveVector* ValueCurve;//[Offset: 0x0, Size: 1]
	float TimeScale;//[Offset: 0x8, Size: 1]
	Vector ValueScale;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponRecoilRotatorGenerator
	WeaponRecoilValueGenerator* PitchGenerator;//[Offset: 0x0, Size: 1]
	WeaponRecoilValueGenerator* YawGenerator;//[Offset: 0x8, Size: 1]
	WeaponRecoilValueGenerator* RollGenerator;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GunKickScale
	float XOffsetScale;//[Offset: 0x0, Size: 1]
	float YOffsetScale;//[Offset: 0x4, Size: 1]
	float ZOffsetScale;//[Offset: 0x8, Size: 1]
	float PitchScale;//[Offset: 0xc, Size: 1]
	float YawScale;//[Offset: 0x10, Size: 1]
	float RollScale;//[Offset: 0x14, Size: 1]

--------------------------------
Class: WeaponSkewAdjustment
	enum InputType;//[Offset: 0x0, Size: 1]
	enum AdjustmentType;//[Offset: 0x1, Size: 1]
	RuntimeFloatCurve AdjustmentCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrossHairShootConfig
	float GunKickOffsetInheritRatio;//[Offset: 0x0, Size: 1]
	float SkewOffsetInheritRatio;//[Offset: 0x4, Size: 1]
	RecoverableRecoilPattern* CrossHairKickPattern;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WeaponCameraShakePattern.SolarPattern.Object

--------------------------------
Class: SolarWeaponAT_CtrlFireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	MulticastInlineDelegateProperty OnDoFire;//[Size: 1]

--------------------------------
Class: SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	MulticastInlineDelegateProperty OnTaskEnd;//[Size: 1]
	GameplayAbility* OwnerAbility;//[Offset: 0x90, Size: 1]
	SolarCharacter* TaskCharacter;//[Offset: 0x98, Size: 1]
	WeaponSystemBase* TaskWeaponSysBase;//[Offset: 0xa0, Size: 1]
	static SolarWeaponAT_TaskBase* CreateTaskDynamically(class SolarWeaponAT_TaskBase RealClass, GameplayAbility* OwningAbility, const FName TaskInstanceName, SolarCharacter* InCharacter);// 0x22ea480

--------------------------------
Class: SolarAbilityTask.AbilityTask.GameplayTask.Object

--------------------------------
Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x68, Size: 1]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SolarWeaponAT_FireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	AmmoConfig* Ammo;//[Offset: 0xc8, Size: 1]
	void K2_RequireEndFireTask();// 0x2649560
	void K2_RealFireTick(float DeltaTime);// 0x2649560
	void K2_PrepareRealFire();// 0x2649560
	void K2_ActivateRealFire();// 0x2649560

--------------------------------
Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 1]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 1]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 1]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 1]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 1]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 1]
	bool bScaleHitEffectByChargingTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 1]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 1]
	float DeltaAngle;//[Offset: 0x78, Size: 1]
	FString Name;//[Offset: 0x80, Size: 1]
	FString Des;//[Offset: 0x90, Size: 1]
	int PropID;//[Offset: 0xa0, Size: 1]
	float LifeTime;//[Offset: 0xa4, Size: 1]
	enum FireMethodType;//[Offset: 0xa8, Size: 1]
	enum TrajectoryType;//[Offset: 0xa9, Size: 1]
	float CustomValue;//[Offset: 0xac, Size: 1]
	class SolarBullet* BulletClass;//[Offset: 0xb0, Size: 1]
	enum BulletBounce;//[Offset: 0xb8, Size: 1]
	int BounceTimes;//[Offset: 0xbc, Size: 1]
	enum TriggerType;//[Offset: 0xc0, Size: 1]
	float MaxRange;//[Offset: 0xc4, Size: 1]
	float EffRange;//[Offset: 0xc8, Size: 1]
	float Radius;//[Offset: 0xcc, Size: 1]
	float InitSpeed;//[Offset: 0xd0, Size: 1]
	enum FireCostType;//[Offset: 0xd4, Size: 1]
	int FireCostPerAttack;//[Offset: 0xd8, Size: 1]
	int FireSpeedChangeTime;//[Offset: 0xdc, Size: 1]
	float FireSpeedChangeCOP;//[Offset: 0xe0, Size: 1]
	float FastestFireInterval;//[Offset: 0xe4, Size: 1]
	float SlowestFireInterval;//[Offset: 0xe8, Size: 1]
	float BaseFireInterval;//[Offset: 0xec, Size: 1]
	float FireIntervalRevertPreTime;//[Offset: 0xf0, Size: 1]
	float FireIntervalReavertSpeed;//[Offset: 0xf4, Size: 1]
	float BoltActionTime;//[Offset: 0xf8, Size: 1]
	float StartBoltDuration;//[Offset: 0xfc, Size: 1]
	float AutoFireBreakTime;//[Offset: 0x100, Size: 1]
	float FirePrepareTime;//[Offset: 0x104, Size: 1]
	float FireStateBreakTime;//[Offset: 0x108, Size: 1]
	float FireStreakBreakTime;//[Offset: 0x10c, Size: 1]
	int FireIdx;//[Offset: 0x110, Size: 1]
	bool bTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float BaseReloadTime;//[Offset: 0x118, Size: 1]
	float ReloadBoltTime;//[Offset: 0x11c, Size: 1]
	float PostFireOverload;//[Offset: 0x120, Size: 1]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	float FlySoundReceiveRadius;//[Offset: 0x128, Size: 1]
	float FlySoundIgnoreDistance;//[Offset: 0x12c, Size: 1]
	int SingleSoundCount;//[Offset: 0x130, Size: 1]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x138, Size: 1]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x148, Size: 1]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x158, Size: 1]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x168, Size: 1]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x178, Size: 1]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x188, Size: 1]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x198, Size: 1]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1a8, Size: 1]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1b8, Size: 1]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1c8, Size: 1]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1d8, Size: 1]
	FString Play_Fire_Empty_1p;//[Offset: 0x1e8, Size: 1]
	FString Play_Fire_Empty_3p;//[Offset: 0x1f8, Size: 1]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x208, Size: 1]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x218, Size: 1]
	float VhADSSpreadCOP;//[Offset: 0x220, Size: 1]
	float ADSSpreadCOP;//[Offset: 0x224, Size: 1]
	float SpreadFirePreTime;//[Offset: 0x228, Size: 1]
	float SpreadPostFireSpeed;//[Offset: 0x22c, Size: 1]
	float SpreadRestorePreTime;//[Offset: 0x230, Size: 1]
	float SpreadRestoreSpeed;//[Offset: 0x234, Size: 1]
	WeaponFireTPPAnimConfig TPPRecoilConfig;//[Offset: 0x238, Size: 1]
	WeaponFireFPPAnimConfig FPPRecoilConfigNoScope;//[Offset: 0x260, Size: 1]
	WeaponFireFPPAnimConfig FPPRecoilConfigWithScope;//[Offset: 0x2d0, Size: 1]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x340, Size: 1]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x370, Size: 1]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x3a0, Size: 1]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x3e0, Size: 1]
	float ADSRecoilCOP;//[Offset: 0x498, Size: 1]
	<FString,float> RecoilCOPMap;//[Offset: 0x4a0, Size: 1]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x4f0, Size: 1]
	bool bAutoBurstFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	float BurstFireInterval;//[Offset: 0x504, Size: 1]
	float BurstFireInternalInterval;//[Offset: 0x508, Size: 1]
	float FireAnimationPlayRate;//[Offset: 0x50c, Size: 1]
	int AmmoSoundType;//[Offset: 0x510, Size: 1]
	float ProjectileMaxGravity;//[Offset: 0x514, Size: 1]
	float ParticleStartDistance;//[Offset: 0x518, Size: 1]
	float TrajectoryStartDistance;//[Offset: 0x51c, Size: 1]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool bTakeDamageAfterDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x528, Size: 1]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x530, Size: 1]
	SlateBrush TriggerIcon;//[Offset: 0x538, Size: 1]
	enum VirtualBulletType;//[Offset: 0x5d0, Size: 1]
	bool bStepOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	AmmoConfig* TraceOverrideAmmo;//[Offset: 0x5d8, Size: 1]
	byte TraceTargetFlag;//[Offset: 0x5e0, Size: 1]
	TracerBulletData TracerData;//[Offset: 0x5e8, Size: 1]
	CurveFloat* BulletOffsetCurve;//[Offset: 0x628, Size: 1]
	Vector2D[] BulletOffsetAngles;//[Offset: 0x630, Size: 1]
	CurveFloat* BulletDamageCurve;//[Offset: 0x640, Size: 1]
	CurveFloat* BulletScaleCurve;//[Offset: 0x648, Size: 1]
	CurveFloat* BulletMovementCurve;//[Offset: 0x650, Size: 1]
	bool bThirdPesonViewXScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x660, Size: 1]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x670, Size: 1]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x680, Size: 1]
	int SkillType;//[Offset: 0x688, Size: 1]
	int NameLocalTextIDNumber;//[Offset: 0x68c, Size: 1]
	int DescriptionLocalTextIDNumber;//[Offset: 0x690, Size: 1]
	int RangeLocalTextID;//[Offset: 0x694, Size: 1]
	int DifficultyLocalTextID;//[Offset: 0x698, Size: 1]
	SolarDamageInfo DamageInfo;//[Offset: 0x6a0, Size: 1]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x1ffe380
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x1ffe180
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x1ffde50
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x1ffd9b0
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x1ffd750
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x1ffd610
	void InitPostFireSpreadCurveStruct(FString Path);// 0x1ffd570
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x1ffd350
	void InitBaseData(int Trigger);// 0x1ffd2c0

--------------------------------
Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ChargeTime;//[Offset: 0x4, Size: 1]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 1]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 1]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 1]
	int OverrideAmmoID;//[Offset: 0x28, Size: 1]
	FString ChargeSoundName;//[Offset: 0x30, Size: 1]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 1]
	FString FireSoundName;//[Offset: 0x50, Size: 1]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 1]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 1]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int FireCostFullShot;//[Offset: 0x84, Size: 1]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 1]
	CurveFloat* AmmoEffectXScaleCurve;//[Offset: 0x98, Size: 1]
	CurveFloat* AmmoEffectYZScaleCurve;//[Offset: 0xa0, Size: 1]
	CurveFloat* OverloadCurve;//[Offset: 0xa8, Size: 1]
	float ChargeAnimationRate;//[Offset: 0xb0, Size: 1]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: WeaponFireTPPAnimConfig
	float SingleFirePulse;//[Offset: 0x0, Size: 1]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 1]
	float LoopFirePulse;//[Offset: 0x8, Size: 1]
	float LoopStiffnessCoefficient;//[Offset: 0xc, Size: 1]
	float RecoverSpeed;//[Offset: 0x10, Size: 1]
	float BlendSpaceScale;//[Offset: 0x14, Size: 1]
	BlendSpace* BlendSpace;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeaponFireFPPAnimConfig
	float SingleFireStraightPulse;//[Offset: 0x0, Size: 1]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 1]
	float SingleFireBackwardOffset;//[Offset: 0x8, Size: 1]
	float LoopFireStraightPulse;//[Offset: 0xc, Size: 1]
	float LoopStiffnessCoefficient;//[Offset: 0x10, Size: 1]
	float LoopFireBackwardOffset;//[Offset: 0x14, Size: 1]
	CurveFloat* StraightStiffnessCurve;//[Offset: 0x18, Size: 1]
	float StraightRecoverSpeed;//[Offset: 0x20, Size: 1]
	Vector ShakePivotOffset;//[Offset: 0x24, Size: 1]
	Vector2D[] ShakeOffsets;//[Offset: 0x30, Size: 1]
	Rotator[] ShakeRotations;//[Offset: 0x40, Size: 1]
	bool bNeedEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x58, Size: 1]
	CurveVector* EndShakeRotateCurve;//[Offset: 0x60, Size: 1]

--------------------------------
Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 1]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 1]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 1]
	float APointMin;//[Offset: 0x14, Size: 1]
	float APointMax;//[Offset: 0x18, Size: 1]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 1]
	float BPointMin;//[Offset: 0x20, Size: 1]
	float BPointMax;//[Offset: 0x24, Size: 1]

--------------------------------
Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 1]
	float ADSRollCOP;//[Offset: 0x30, Size: 1]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 1]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 1]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 1]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 1]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 1]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 1]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 1]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 1]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 1]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 1]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 1]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 1]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 1]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 1]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 1]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 1]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 1]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 1]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 1]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 1]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 1]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 1]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 1]

--------------------------------
Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 1]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 1]
	float HomingRange;//[Offset: 0x8, Size: 1]
	bool bTraceTargetOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString TracingTargetWarningSound;//[Offset: 0x10, Size: 1]
	FString TracingTargetWarningRTPC;//[Offset: 0x20, Size: 1]
	FString TracingAuthorPromptSound;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarWeaponFPPData
	<enum,SolarWeaponScopeFPPConfig> ScopeFPPConfigByScopeTypeMap;//[Offset: 0x0, Size: 1]
	SolarWeaponScopeFPPData DefaultFPPDataForScopeType;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SolarWeaponScopeFPPConfig
	<int,SolarWeaponScopeFPPData> ScopeFPPDataByWeaponSkinIDMap;//[Offset: 0x0, Size: 1]
	SolarWeaponScopeFPPData DefaultFPPDataForWeaponSkinID;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SolarWeaponScopeFPPData
	Vector RelativeLocation;//[Offset: 0x0, Size: 1]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SolarWeaponFPPConfig
	RangeFloat AspectRatioRange;//[Offset: 0x0, Size: 1]
	SolarWeaponFPPData FPPData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CrossHairWidget.UserWidget.Widget.Visual.Object
	<enum,CrosshairLayout> CrosshairStorageLayout;//[Offset: 0x260, Size: 1]
	CrosshairSprite CrosshairSprites;//[Offset: 0x2b0, Size: 1]
	CrosshairCanvasPanel* RootPanel;//[Offset: 0x2e8, Size: 1]
	float MinSpread;//[Offset: 0x2f0, Size: 1]
	CrosshairLayout CurrentLayout;//[Offset: 0x2f8, Size: 1]
	void SetCrosshairSprite(PaperSprite* InSprite);// 0x2649560
	void OnWeaponFired();// 0x2649560
	void OnUpdateReloadProgress(float InReloadProgress, int InReservedAmmo, int InMaxAmmo);// 0x2649560
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);// 0x2649560
	void OnUpdateCoolDownProgress(float InCoolDownProgress);// 0x2649560
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress, int InChargeBurstCount);// 0x2649560
	void OnUpdateAimState(bool InbLockEnemy);// 0x2649560
	void OnReloadStarted(float InReloadTime, int InReservedAmmo);// 0x2649560
	void OnReloadFinished(bool InbReloadSuccess, int InReloadAmmo, int InReservedAmmo, int InMaxAmmo);// 0x2649560
	void OnPlayWeaponSpecialFire(enum InState, float PlayRate);// 0x2649560
	void OnOverloadStateChanged(bool bEnter);// 0x2649560
	void OnCrosshairInNormalState();// 0x2649560
	void OnAmmoChanged(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x2649560
	void InitializeCrosshairSpread(float Spread);// 0x2649560
	void InitializeCrosshair(const enum WeaponType, const bool bIsWeaponEnergy);// 0x203a450
	void HandleCrosshairState(enum InCrosshairState, bool InbQuitState);// 0x203a380
	Widget* GetSpreadCanvasWidget();// 0x2649560
	UserWidget* GetReloadWidget();// 0x2649560
	UserWidget* GetOverloadWidget();// 0x2649560
	UserWidget* GetCoolDownWidget();// 0x2649560
	UserWidget* GetChargeWidget();// 0x2649560
	UserWidget* GetAmmoWidget();// 0x2649560
	Vector2D CalcDeltaScaleBySpread(const float Spread);// 0x2039880
	Vector2D CalcDeltaPosBySpread(const float Spread);// 0x20397e0
	float CalcDeltaAngleBySpread(const float Spread);// 0x2039740

--------------------------------
Class: CrosshairLayout
	float InitSpread;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CrosshairSprite
	SoftObjectPath Normal;//[Offset: 0x0, Size: 1]
	SoftObjectPath Energy;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CrosshairCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<enum,StateMapItemStruct> CrosshairStateConfigList;//[Offset: 0x168, Size: 1]
	Widget*[] IgonreWidgetToStateMap;//[Offset: 0x1b8, Size: 1]
	UICrossHairSpreadStruct[] SpreadItemList;//[Offset: 0x1c8, Size: 1]
	UICrossHairAimColorStruct[] AimColorItemList;//[Offset: 0x1d8, Size: 1]
	TweenImage* ReloadingTween;//[Offset: 0x1e8, Size: 1]
	GaugeImage* BulletGauge;//[Offset: 0x1f0, Size: 1]
	TweenImage* OverloadingTween;//[Offset: 0x1f8, Size: 1]
	ProgressBar* OverloadBar_Normal;//[Offset: 0x200, Size: 1]
	ProgressBar* OverloadBar_Warn;//[Offset: 0x208, Size: 1]
	TweenWidget* OverloadNormalPanelTween;//[Offset: 0x210, Size: 1]
	ProgressBar*[] CoolDownBars;//[Offset: 0x218, Size: 1]

--------------------------------
Class: StateMapItemStruct
	StateItemStruct[] ChildWidgetConfigList;//[Offset: 0x0, Size: 1]
	bool bLoadChildWidgetTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: StateItemStruct
	Widget* CrosshairChildWidget;//[Offset: 0x0, Size: 1]
	enum VisibilityType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: UICrossHairSpreadStruct
	Widget* TargetWidget;//[Offset: 0x0, Size: 1]
	enum SpreadType;//[Offset: 0x8, Size: 1]
	bool bPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float Angle;//[Offset: 0xc, Size: 1]
	bool Pos_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	Vector2D ScaleFactor;//[Offset: 0x14, Size: 1]
	bool Scale_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bRenderAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	float RenderAngleFactor;//[Offset: 0x20, Size: 1]
	bool Angle_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	Vector2D OrginalVector;//[Offset: 0x28, Size: 1]
	Vector2D OrginalScale;//[Offset: 0x30, Size: 1]
	float OrginalAngle;//[Offset: 0x38, Size: 1]
	Vector2D Dir;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: UICrossHairAimColorStruct
	Image* TargetImg;//[Offset: 0x0, Size: 1]
	LinearColor TargetColor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TweenImage.TweenBase.UserWidget.Widget.Visual.Object
	Image* TargetImg;//[Offset: 0x2d8, Size: 1]
	UIScaleTween ScaleTween;//[Offset: 0x2e0, Size: 1]
	UIPositionTween PostionTween;//[Offset: 0x320, Size: 1]
	ImageColorTween ColorTween;//[Offset: 0x360, Size: 1]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x3a8, Size: 1]
	void InitImageTween();// 0x2305390

--------------------------------
Class: TweenBase.UserWidget.Widget.Visual.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float Interval;//[Offset: 0x264, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bEndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	MulticastInlineDelegateProperty OnTweenStart;//[Size: 1]
	MulticastInlineDelegateProperty OnTweenStop;//[Size: 1]
	Widget* LinkWidget;//[Offset: 0x2c0, Size: 1]
	float Progress;//[Offset: 0x2cc, Size: 1]
	void Stop();// 0x2305ff0
	void Reset();// 0x2305ad0
	void Play();// 0x2305a20
	void InitAndPlay();// 0x2305370
	void Init();// 0x2305350

--------------------------------
Class: UIScaleTween.UITweenBaseStruct
	Vector2D OriginalScale;//[Offset: 0x20, Size: 1]
	Vector2D TargetScale;//[Offset: 0x28, Size: 1]
	bool bHandleAsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: UITweenBaseStruct
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum InterpolationType;//[Offset: 0x9, Size: 1]
	byte EaseType;//[Offset: 0xa, Size: 1]
	CurveFloat* InterpolationCurve;//[Offset: 0x10, Size: 1]
	Widget* Widget;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UIPositionTween.UITweenBaseStruct
	Vector2D OriginalPosition;//[Offset: 0x20, Size: 1]
	Vector2D TargetPosition;//[Offset: 0x28, Size: 1]
	bool bHandleAsRelativeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: ImageColorTween.UITweenBaseStruct
	LinearColor Original;//[Offset: 0x20, Size: 1]
	LinearColor TargetColor;//[Offset: 0x30, Size: 1]
	Image* Image;//[Offset: 0x40, Size: 1]

--------------------------------
Class: UIRenderOpacityTween.UITweenBaseStruct
	float OriginalOpacity;//[Offset: 0x20, Size: 1]
	float TargetOpacity;//[Offset: 0x24, Size: 1]

--------------------------------
Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x260, Size: 1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	Vector2D ImageSize;//[Offset: 0x264, Size: 1]
	float InitialDegree;//[Offset: 0x26c, Size: 1]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	Vector2D CenterOffset;//[Offset: 0x274, Size: 1]
	Object* ResourceObject;//[Offset: 0x280, Size: 1]
	float Progress;//[Offset: 0x288, Size: 1]
	MaterialInterface* MaterialDegree360;//[Offset: 0x290, Size: 1]
	MaterialInterface* MaterialDegree180;//[Offset: 0x298, Size: 1]
	MaterialInterface* MaterialDegree90;//[Offset: 0x2a0, Size: 1]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x2a8, Size: 1]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2b0, Size: 1]
	Image* TargetImage;//[Offset: 0x2b8, Size: 1]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2c0, Size: 1]
	void UpdateProgress(float InProgress);// 0x2055750
	void SetProgress(float InProgress);// 0x2055750
	void SetImage(Object* RO);// 0x20556c0
	Image* GetInternalImage();// 0x2054d60

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x138, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x308, Size: 1]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x310, Size: 1]
	SlateBrushAsset* FillImage;//[Offset: 0x318, Size: 1]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x320, Size: 1]
	float Percent;//[Offset: 0x328, Size: 1]
	byte BarFillType;//[Offset: 0x32c, Size: 1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	Vector2D BorderPadding;//[Offset: 0x330, Size: 1]
	delegate PercentDelegate;//[Offset: 0x338, Size: 1]
	LinearColor FillColorAndOpacity;//[Offset: 0x348, Size: 1]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x358, Size: 1]
	void SetPercent(float InPercent);// 0x35145a0
	void SetIsMarquee(bool InbIsMarquee);// 0x3514360
	void SetFillColorAndOpacity(LinearColor InColor);// 0x3514090

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush FillImage;//[Offset: 0xa0, Size: 1]
	SlateBrush MarqueeImage;//[Offset: 0x138, Size: 1]

--------------------------------
Class: TweenWidget.TweenBase.UserWidget.Widget.Visual.Object
	Widget* TargetWidget;//[Offset: 0x2d8, Size: 1]
	UIScaleTween ScaleTween;//[Offset: 0x2e0, Size: 1]
	UIPositionTween PostionTween;//[Offset: 0x320, Size: 1]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x360, Size: 1]

--------------------------------
Class: FeedbackWidget.UserWidget.Widget.Visual.Object
	FeedbackCanvasPanel* FeedbackPanel;//[Offset: 0x260, Size: 1]
	float VisibilityTime;//[Offset: 0x268, Size: 1]
	float VisibilityTimer;//[Offset: 0x26c, Size: 1]
	FeedbackSingleData CurrentFeedbackSingleData;//[Offset: 0x270, Size: 1]

--------------------------------
Class: FeedbackCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<FString,FeedbackSingleData> FeedbackMap;//[Offset: 0x168, Size: 1]

--------------------------------
Class: FeedbackSingleData
	UserWidget* AnimationWidget;//[Offset: 0x0, Size: 1]
	FName AnimationName;//[Offset: 0x8, Size: 1]
	float AnimationPlaySpeed;//[Offset: 0x10, Size: 1]
	float AnimationStartTime;//[Offset: 0x14, Size: 1]
	float AnimationAgainStartTime;//[Offset: 0x18, Size: 1]
	int AnimationLoopNumber;//[Offset: 0x1c, Size: 1]
	FName AudioName;//[Offset: 0x20, Size: 1]
	enum AnimationType;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarWeaponCrosshairData
	byte HasReload;//[Offset: 0x0, Size: 1]
	byte HasForbid;//[Offset: 0x1, Size: 1]
	byte HasOverload;//[Offset: 0x2, Size: 1]
	byte HasChargeProgress;//[Offset: 0x3, Size: 1]
	byte HasFeedback;//[Offset: 0x4, Size: 1]
	enum WeaponType;//[Offset: 0x5, Size: 1]
	bool bIsEnergyType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	class UserWidget* CrossHairWidget;//[Offset: 0x8, Size: 1]
	class UserWidget* BulletContainerWidget;//[Offset: 0x10, Size: 1]
	class UserWidget* WeaponRechamberWidget;//[Offset: 0x18, Size: 1]
	SolarNoAmmoAlertWidgetLayout AmmoAlertWidgetLayout;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarNoAmmoAlertWidgetLayout
	bool bOverrideLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector2D Offset;//[Offset: 0x4, Size: 1]
	float SpinAngle;//[Offset: 0xc, Size: 1]
	Vector2D Scale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponPartClipComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x2325b10
	Rotator GetHandRotOffset();// 0x23254d0
	Vector GetHandLocOffset();// 0x2325490
	float GetDropLifeSpan();// 0x23253e0
	FName GetCharacterHandSocket();// 0x2325330
	FName GetCharacterHandInverseSocket();// 0x23252f0

--------------------------------
Class: WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartID;//[Offset: 0x600, Size: 1]
	WeaponPartDataAsset* PartDataAsset;//[Offset: 0x608, Size: 1]

--------------------------------
Class: WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int[] OnlyDataForWeaponSkinIDArray;//[Offset: 0x38, Size: 1]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x48, Size: 1]
	Transform PreviewTransform;//[Offset: 0x60, Size: 1]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x90, Size: 1]
	SoftObjectPath PartIcon;//[Offset: 0xa8, Size: 1]
	<int,Vector> SpecificScaleMap;//[Offset: 0xc0, Size: 1]
	WeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig;//[Offset: 0x110, Size: 1]

--------------------------------
Class: WeaponPartWeaponAttributeDataAsset.DataAsset.Object
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x30, Size: 1]
	WeaponPartWeaponAttributeByWeaponType[] ModifiersByWeaponType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: WeaponPartWeaponAttributeByWeaponType
	enum WeaponType;//[Offset: 0x0, Size: 1]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 1]
	WeaponPartWeaponAttributeByWeaponID[] ModifiersByWeaponID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeaponPartWeaponAttributeByWeaponID
	int weaponid;//[Offset: 0x0, Size: 1]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb0, Size: 1]
	SolarWeapon* MyWeapon;//[Offset: 0xb8, Size: 1]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xc0, Size: 1]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x2100560
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x231c760
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x231cd40
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x231c760
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x231c6d0
	void GotoState(enum State, float Interval);// 0x231c5b0
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x231c3c0

--------------------------------
Class: FireUniqueID
	uint32 Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BulletHitDetailData
	Pawn* SourcePawn;//[Offset: 0x0, Size: 1]
	Actor* HitActor;//[Offset: 0x8, Size: 1]
	PrimitiveComponent* HitComponent;//[Offset: 0x10, Size: 1]
	Vector HitActorLocation;//[Offset: 0x18, Size: 1]
	Vector HitLocation;//[Offset: 0x24, Size: 1]
	Vector HitNormal;//[Offset: 0x30, Size: 1]
	FName HitBone;//[Offset: 0x3c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x44, Size: 1]

--------------------------------
Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 1]
	Vector Velocity;//[Offset: 0xc, Size: 1]
	float SpeedScale;//[Offset: 0x18, Size: 1]
	int Mode;//[Offset: 0x1c, Size: 1]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	float Scale;//[Offset: 0x24, Size: 1]
	int LastClipAmmo;//[Offset: 0x28, Size: 1]
	float LastFireTime;//[Offset: 0x2c, Size: 1]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarProjBullet.SolarBullet.Actor.Object
	ShapeComponent* CollisionComp;//[Offset: 0x390, Size: 1]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x398, Size: 1]
	Vector SpawnedLocation;//[Offset: 0x440, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x4a8, Size: 1]
	ParticleSystemComponent* CurrentTrajectoryParticle;//[Offset: 0x4b0, Size: 1]
	bool bAttachToActorOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	float DeferExplodeTime;//[Offset: 0x4bc, Size: 1]
	float FlySoundPlayDistance;//[Offset: 0x4c0, Size: 1]
	bool bForceExplodeOnLifeSpanExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	class Actor[] HitActorImmediateExplodeArray;//[Offset: 0x4c8, Size: 1]
	ParticleSystem* ExplosionParticle;//[Offset: 0x4d8, Size: 1]
	FString ExplosionSoundName;//[Offset: 0x4e0, Size: 1]
	float ServerWaitClientTime;//[Offset: 0x4f0, Size: 1]
	class GameplayAbility* BulletGameplayAbilityClass;//[Offset: 0x4f8, Size: 1]
	void StopSound(enum Opt);// 0x21ea480
	void StartSound(enum Opt);// 0x21ea400
	void OnTeamIgnoreCollisionActorChange(bool bAdd, Actor* InActor, byte TeamID);// 0x21e9ed0
	void OnStop(out const HitResult HitResult);// 0x21e9df0
	void OnAttachedActorDestroyed(Actor* Other);// 0x21e9750
	void K2_OnExplode();// 0x2649560

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf0, Size: 1]
	float MaxSpeed;//[Offset: 0xf4, Size: 1]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf8, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf8, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf8, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf8, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf9, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf9, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf9, Size: 1]
	float PreviousHitTime;//[Offset: 0xfc, Size: 1]
	Vector PreviousHitNormal;//[Offset: 0x100, Size: 1]
	float ProjectileGravityScale;//[Offset: 0x10c, Size: 1]
	float Buoyancy;//[Offset: 0x110, Size: 1]
	float Bounciness;//[Offset: 0x114, Size: 1]
	float Friction;//[Offset: 0x118, Size: 1]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x11c, Size: 1]
	float MinFrictionFraction;//[Offset: 0x120, Size: 1]
	MulticastInlineDelegateProperty OnProjectileBounce;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileStop;//[Size: 1]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 1]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 1]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 1]
	float InterpLocationTime;//[Offset: 0x160, Size: 1]
	float InterpRotationTime;//[Offset: 0x164, Size: 1]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 1]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 1]
	void StopSimulating(out const HitResult HitResult);// 0x3eed660
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x3eed5d0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x3eed430
	void ResetInterpolation();// 0x1570ed0
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2649560
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2649560
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x3eed1c0
	Vector LimitVelocity(Vector NewVelocity);// 0x3eed110
	bool IsVelocityUnderSimulationThreshold();// 0x3eed0b0
	bool IsInterpolationComplete();// 0x3eed080

--------------------------------
Class: SolarVirtualBulletHitParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 1]
	float FireTimeStamp;//[Offset: 0x4, Size: 1]
	float HitTimeStamp;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0xc, Size: 1]
	int8 FireChargePhase;//[Offset: 0x18, Size: 1]
	float FireChargeTime;//[Offset: 0x1c, Size: 1]
	int HitStartIndex;//[Offset: 0x20, Size: 1]
	Vector_NetQuantize StartLoc;//[Offset: 0x24, Size: 1]
	Vector_NetQuantize TargetLoc;//[Offset: 0x30, Size: 1]
	AmmoConfig* Ammo;//[Offset: 0x40, Size: 1]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x48, Size: 1]
	HitResult[] Hits;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SolarWeaponHitAntiData
	Vector_NetQuantize RelavantHitLocationWithCharacter;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize HitBoneScale;//[Offset: 0xc, Size: 1]
	Quat HitBoneRotation;//[Offset: 0x20, Size: 1]
	Vector_NetQuantize HitLoc;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarVirtualBulletSpawnParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 1]
	float FireTimeStamp;//[Offset: 0x4, Size: 1]
	float PreElapsedTime;//[Offset: 0x8, Size: 1]
	Vector PlayerViewDir;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x18, Size: 1]
	byte IsScopeOpen;//[Offset: 0x24, Size: 1]
	int8 FireChargePhase;//[Offset: 0x25, Size: 1]
	float FireChargeTime;//[Offset: 0x28, Size: 1]
	Vector_NetQuantize StartLoc;//[Offset: 0x2c, Size: 1]
	Vector_NetQuantize TargetLoc;//[Offset: 0x38, Size: 1]
	Vector_NetQuantizeNormal Dir;//[Offset: 0x44, Size: 1]
	Vector_NetQuantize MuzzleFxLoc;//[Offset: 0x50, Size: 1]
	float CurveOffsetAngle;//[Offset: 0x5c, Size: 1]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x60, Size: 1]
	AmmoConfig* Ammo;//[Offset: 0x78, Size: 1]
	FString AntiData;//[Offset: 0x80, Size: 1]
	Actor* Target;//[Offset: 0x90, Size: 1]
	Vector HitTargetRelativeLocation;//[Offset: 0x98, Size: 1]

--------------------------------
Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bLocalCharacterLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 1]
	Vector CurrentLoc;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SpawnProjParam
	Vector_NetQuantize Start;//[Offset: 0x0, Size: 1]
	Vector Velocity;//[Offset: 0xc, Size: 1]
	byte Mode;//[Offset: 0x18, Size: 1]
	byte CurRocketNum;//[Offset: 0x19, Size: 1]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 1]
	float Scale;//[Offset: 0x1c, Size: 1]
	float SpeedScale;//[Offset: 0x20, Size: 1]
	Actor* Target;//[Offset: 0x24, Size: 1]
	uint32 SpawnID;//[Offset: 0x2c, Size: 1]
	float Timestamp;//[Offset: 0x30, Size: 1]
	SolarPlayerController* InstigatorController;//[Offset: 0x34, Size: 1]
	Vector_NetQuantize RelativeLocation;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 1]
	int8 FireMode;//[Offset: 0x4, Size: 1]
	int8 IsScopeOpen;//[Offset: 0x5, Size: 1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	Vector StartLocation;//[Offset: 0x8, Size: 1]
	Vector WeaponLocation;//[Offset: 0x14, Size: 1]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 1]
	float DamageScale;//[Offset: 0x24, Size: 1]
	int LastClipAmmo;//[Offset: 0x28, Size: 1]
	float LastFireTime;//[Offset: 0x2c, Size: 1]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x30, Size: 1]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	Vector Scale;//[Offset: 0x18, Size: 1]
	byte LocationType;//[Offset: 0x24, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	enum PoolingMethod;//[Offset: 0x26, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 1]
	Vector Scale;//[Offset: 0xc, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	enum PoolingMethod;//[Offset: 0x19, Size: 1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]

--------------------------------
Class: WeaponAnimationInfo
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 1]
	float PlayRate;//[Offset: 0x18, Size: 1]
	bool bUseAdaptivePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	AnimMontage* Animation;//[Offset: 0x20, Size: 1]
	AnimMontage* AnimOverride;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xc8, Size: 1]
	WeaponPartClipComp* ClipComp;//[Offset: 0xd0, Size: 1]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xd8, Size: 1]
	WeaponPartGripComp* GripComp;//[Offset: 0xe0, Size: 1]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0xe8, Size: 1]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0xf0, Size: 1]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0xf8, Size: 1]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	FName ScopeSocket;//[Offset: 0x104, Size: 1]
	FName GripSocket;//[Offset: 0x10c, Size: 1]
	FName ClipSocket;//[Offset: 0x114, Size: 1]
	FName OldClipSocket;//[Offset: 0x11c, Size: 1]
	FName MuzzleSocket;//[Offset: 0x124, Size: 1]
	FName GunStockSocket;//[Offset: 0x12c, Size: 1]
	SolarWeapon* MyWeaponActor;//[Offset: 0x138, Size: 1]
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x2326000
	void ShowParts(bool Show, byte Flag);// 0x2325f30
	bool IsPartExist(int ID);// 0x2325a40
	bool IsDefaultPart(const int PartID);// 0x2325970
	bool IsAmmoExist(int ID);// 0x23258d0
	WeaponPartComp*[] GetValidWeaponParts();// 0x2325720

--------------------------------
Class: WeaponPartScopeComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	float FovValue;//[Offset: 0x6c4, Size: 1]
	float HipToAdsTime;//[Offset: 0x6c8, Size: 1]
	CurveFloat* FovChangeCurve;//[Offset: 0x6d0, Size: 1]
	float HitEffectScale;//[Offset: 0x6d8, Size: 1]
	MaterialInstance* ScopeCrossHairMaterial;//[Offset: 0x7e0, Size: 1]
	StaticMesh* ScopeCrossHairMesh;//[Offset: 0x7e8, Size: 1]
	MaterialInstance* ScopeEnemyMakerMaterial;//[Offset: 0x7f0, Size: 1]
	StaticMesh* ScopeEnemyMakerMesh;//[Offset: 0x7f8, Size: 1]
	StaticMesh* ScopeMeshForFPP;//[Offset: 0x800, Size: 1]
	StaticMesh* ScopeMeshForTPP;//[Offset: 0x808, Size: 1]
	void OpenScope(float Time);// 0x2325c70
	bool IsOpened();// 0x2325a10
	enum GetScopeType();// 0x23256f0
	Vector GetScopeAimCenterPoint();// 0x23256b0
	Rotator GetFPPRotation();// 0x2325450
	Vector GetFPPLocation();// 0x2325410
	float GetDistanceToEyeWhenScope();// 0x23253b0
	void CloseScope();// 0x23251c0

--------------------------------
Class: WeaponPartMuzzleComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x23258a0
	bool HasFlameArrester();// 0x2325870

--------------------------------
Class: WeaponPartGripComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartGunStockComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x228, Size: 1]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x238, Size: 1]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x240, Size: 1]
	SceneComponent* PreviewRoot;//[Offset: 0x248, Size: 1]
	void ShowHitPointAt(out const Vector Loc);// 0x2649560
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x22f2f90
	void SetPoints(out const Vector[] Points);// 0x2649560
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x22f2f00
	void K2_OnDisplaySummonPreview();// 0x2649560
	void HideHitPoint();// 0x2649560
	void HideAllSummonPreview();// 0x1570d30
	void Hide();// 0x2649560
	SplineMeshComponent* GetSplineMeshComponent();// 0x2649560
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x22f1f70
	void ChangeSummonPreviewAttachParent();// 0x2649560

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x540, Size: 1]
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 1]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 1]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 1]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 1]
	float Duration;//[Offset: 0x610, Size: 1]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 1]
	float LoopPosition;//[Offset: 0x61c, Size: 1]
	Vector DefaultUpVector;//[Offset: 0x620, Size: 1]
	void UpdateSpline();// 0x3f17030
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x3f16b60
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x3f169f0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x220f2a0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3f16820
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3f166b0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x3f16530
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x3f162f0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x3f16400
	void SetSplineLocalPoints(out const Vector[] Points);// 0x3f16240
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x220f2a0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x3f15ff0
	void SetDrawDebug(bool bShow);// 0x3f15f60
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x3f15e80
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x3f15d60
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x3f15c90
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x3f15bc0
	bool IsClosedLoop();// 0x3f15b90
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x3f15ae0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x3f159f0
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x3f15940
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x3f15850
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x3f157a0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x3f156f0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x3f15600
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x3f15550
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3f15470
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3f15390
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f15260
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f15180
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f15090
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f14fa0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x3f14e00
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x3f14cb0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x3f14b50
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x3f149f0
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f148c0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f12f30
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f147d0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f146e0
	byte GetSplinePointType(int PointIndex);// 0x3f14640
	float GetSplineLength();// 0x3f14610
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x3f14490
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x3f143e0
	Vector GetScaleAtSplineInputKey(float InKey);// 0x3f14340
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x3f142a0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f14170
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f14090
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f13fa0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f13eb0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f13d90
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f13cc0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f13be0
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f13b00
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f139d0
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f138f0
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f13800
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f13710
	int GetNumberOfSplineSegments();// 0x3f136e0
	int GetNumberOfSplinePoints();// 0x3f136b0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f13580
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f134a0
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f133b0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f132c0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x3f13140
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x3f13010
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f12f30
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x3f12e90
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3f12dc0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3f12cf0
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x3f12c50
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3f12b20
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f12a40
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3f12950
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3f12860
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x3f127c0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3f126e0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f125f0
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x3f12490
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f123a0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x3f122f0
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f12200
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f12120
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f12030
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f11f40
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x3f11ea0
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3f11db0
	void ClearSplinePoints(bool bUpdateSpline);// 0x3f11d20
	void AddSplineWorldPoint(out const Vector Position);// 0x3f11c80
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x3f11b10
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x3f119f0
	void AddSplineLocalPoint(out const Vector Position);// 0x3f11960
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x3f11860
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x3f11750

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 1]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 1]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 1]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 1]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 1]
	Quat OutVal;//[Offset: 0x10, Size: 1]
	Quat ArriveTangent;//[Offset: 0x20, Size: 1]
	Quat LeaveTangent;//[Offset: 0x30, Size: 1]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 1]
	float OutVal;//[Offset: 0x4, Size: 1]
	float ArriveTangent;//[Offset: 0x8, Size: 1]
	float LeaveTangent;//[Offset: 0xc, Size: 1]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 1]
	Vector Position;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	Rotator Rotation;//[Offset: 0x28, Size: 1]
	Vector Scale;//[Offset: 0x34, Size: 1]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x608, Size: 1]
	Vector SplineUpDir;//[Offset: 0x660, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x66c, Size: 1]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x670, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x680, Size: 1]
	float SplineBoundaryMax;//[Offset: 0x688, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68c, Size: 1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68c, Size: 1]
	byte ForwardAxis;//[Offset: 0x68d, Size: 1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x690, Size: 1]
	void UpdateMesh();// 0x3f1ab10
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x3f1aa30
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x3f1a960
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x3f1a880
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x3f1a7a0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x3f1a6d0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x3f1a4f0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x3f1a410
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x3f1a140
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x3f1a060
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x3f19f90
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x3f19eb0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x3f19dd0
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x3f19d00
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x3f19c20
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x3f19b40
	Vector GetStartTangent();// 0x3f19a00
	Vector2D GetStartScale();// 0x3f199c0
	float GetStartRoll();// 0x3f19990
	Vector GetStartPosition();// 0x3f19950
	Vector2D GetStartOffset();// 0x3f19910
	Vector GetSplineUpDir();// 0x3f198d0
	byte GetForwardAxis();// 0x3f194a0
	Vector GetEndTangent();// 0x3f19460
	Vector2D GetEndScale();// 0x3f19420
	float GetEndRoll();// 0x3f193f0
	Vector GetEndPosition();// 0x3f193b0
	Vector2D GetEndOffset();// 0x3f19370
	float GetBoundaryMin();// 0x3f192a0
	float GetBoundaryMax();// 0x3f19270

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 1]
	Vector StartTangent;//[Offset: 0xc, Size: 1]
	Vector2D StartScale;//[Offset: 0x18, Size: 1]
	float StartRoll;//[Offset: 0x20, Size: 1]
	Vector2D StartOffset;//[Offset: 0x24, Size: 1]
	Vector EndPos;//[Offset: 0x2c, Size: 1]
	Vector2D EndScale;//[Offset: 0x38, Size: 1]
	Vector EndTangent;//[Offset: 0x40, Size: 1]
	float EndRoll;//[Offset: 0x4c, Size: 1]
	Vector2D EndOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: MultiHitResult.HitResult
	byte Num;//[Offset: 0x88, Size: 1]
	byte Seed;//[Offset: 0x89, Size: 1]
	byte Mode;//[Offset: 0x8a, Size: 1]
	Vector_NetQuantize Start;//[Offset: 0x8c, Size: 1]
	Vector_NetQuantize End;//[Offset: 0x98, Size: 1]

--------------------------------
Class: WeaponShotHitResult
	Actor* Actor;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 1]
	FName BoneName;//[Offset: 0x14, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x34, Size: 1]

--------------------------------
Class: FireMode
	enum HoldAction;//[Offset: 0x0, Size: 1]
	byte Index;//[Offset: 0x1, Size: 1]
	int AmmoReserve;//[Offset: 0x8, Size: 1]
	int AmmoCapacity;//[Offset: 0xc, Size: 1]
	float FireRateAccumulation;//[Offset: 0x10, Size: 1]
	float FireRateAccumulationBurstInterval;//[Offset: 0x14, Size: 1]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x38, Size: 1]

--------------------------------
Class: WeaponMechanicalState
	enum UniqueState;//[Offset: 0x0, Size: 1]
	enum SideFlags;//[Offset: 0x4, Size: 1]
	SolarWeapon* Weapon;//[Offset: 0x10, Size: 1]
	SingleWeaponConfig* Config;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 1]
	float Scale;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb0, Size: 1]
	SolarCharacterBase* CacheCharacter;//[Offset: 0xb8, Size: 1]
	World* CacheWorld;//[Offset: 0xc0, Size: 1]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 1]
	SolarVirtualBullet[] PendingBulletsInSimulated;//[Offset: 0xd8, Size: 1]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xe8, Size: 1]
	SolarVirtualBullet[] BulletsInDedicatedServer;//[Offset: 0xf8, Size: 1]
	SolarBullet* EffectBulletCDO;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarVirtualBullet
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 1]
	enum BulletType;//[Offset: 0x4, Size: 1]
	ParticleSystemComponent* BulletEffect;//[Offset: 0x10, Size: 1]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x18, Size: 1]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x20, Size: 1]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x28, Size: 1]
	Actor*[] IgnoreHitedActors;//[Offset: 0x30, Size: 1]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0x170, Size: 1]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x17c, Size: 1]
	byte IsScopeOpen;//[Offset: 0x188, Size: 1]

--------------------------------
Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponFireLaserCollector.ActorComponent.Object
	SolarWeapon* OwnerWeapon;//[Offset: 0xb8, Size: 1]
	AkComponent* FireAkComponent;//[Offset: 0xc0, Size: 1]
	AkComponent* ImpactAkComponent;//[Offset: 0xc8, Size: 1]
	WeaponFireLaserElement ActElement;//[Offset: 0xd0, Size: 1]
	WeaponFireLaserElement[] FadingElements;//[Offset: 0x118, Size: 1]
	ParticleSystem* ExplodeEffectParticle;//[Offset: 0x140, Size: 1]
	ParticleSystem* DecalsEffectParticle;//[Offset: 0x148, Size: 1]
	ParticleSystemComponent*[] CacheParticles;//[Offset: 0x150, Size: 1]

--------------------------------
Class: WeaponFireLaserElement
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 1]

--------------------------------
Class: WeaponSpreadAndRecoil.Object
	SolarWeapon* Weapon;//[Offset: 0x28, Size: 1]
	WeaponSpreadPatternRuntime* SpreadPattern;//[Offset: 0x38, Size: 1]
	WeaponRecoilPatternRuntime* RecoilPattern;//[Offset: 0x40, Size: 1]
	WeaponTPPKickPatternRuntime* TPPKickPattern;//[Offset: 0x48, Size: 1]
	WeaponGunKickPatternRuntime* GunKickPattern;//[Offset: 0x50, Size: 1]
	RecoverableRecoilPatternRuntime* CrossHairKickPattern;//[Offset: 0x58, Size: 1]
	WeaponCameraShakePatternRuntime* ShakePatternOnShot;//[Offset: 0x60, Size: 1]
	WeaponCameraShakePatternRuntime* ShakePatternOnScopeShot;//[Offset: 0x68, Size: 1]

--------------------------------
Class: WeaponSpreadPatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: SolarPatternRuntime.Object
	SolarPattern* PattenData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponRecoilPatternRuntime.RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: WeaponTPPKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: WeaponGunKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: WeaponCameraShakePatternRuntime.SolarPatternRuntime.Object

--------------------------------
Class: ParticleLoopListener.Object
	void OnParticleFinished(ParticleSystemComponent* PS);// 0x22e50f0

--------------------------------
Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 1]

--------------------------------
Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 1]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 1]
	class SolarBullet* PrimaryOverrideTraceBulletClass;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xb8, Size: 1]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x108, Size: 1]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x158, Size: 1]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	float MoveSpeedCoeffient;//[Offset: 0x174, Size: 1]
	MaterialInterface* OriginalMaterial;//[Offset: 0x178, Size: 1]
	float ShieldRechargeCostCoefficient;//[Offset: 0x180, Size: 1]
	void OnRep_SpeedCoeffient();// 0x20bf710
	void OnRep_ReplicateEffectData();// 0x20bf6f0
	int GetCharacterLevel();// 0x20bdf10

--------------------------------
Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 1]
	<FName,SoundGroupBase*> SoundGroupTable;//[Offset: 0x80, Size: 1]
	<byte,FName> SurfaceTypeToHitByBulletSoundGroup;//[Offset: 0xd0, Size: 1]
	Transform DefaultTransform;//[Offset: 0x120, Size: 1]

--------------------------------
Class: SoundGroupBase.Object

--------------------------------
Class: SolarTeamInfoComponent.ActorComponent.Object
	int KillDownCount;//[Offset: 0xb0, Size: 1]
	int AssistCount;//[Offset: 0xb4, Size: 1]
	int DeathCount;//[Offset: 0xb8, Size: 1]
	int SaveCount;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 1]
	float CurValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xe0, Size: 1]
	enum[] SpecialFuncTag;//[Offset: 0x130, Size: 1]
	int[] GetValue_IntArray(FString InPlayerID, enum InType);// 0x21504c0
	int GetValue_Int(FString InPlayerID, enum InType);// 0x21502e0
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerID);// 0x214fed0

--------------------------------
Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x204c440
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x204c340
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x204c290
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x204c1e0
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x204c0e0
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x204c030
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x204bf30
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x204be30
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x204bd80
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x204bc80
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x204bbd0
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x204bb20
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x204ba20
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x204b970
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x204b870
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x204b770
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x204b5a0
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x204b450
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x204b340
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x204b1f0
	SolarGameMode* GetGameModeOwner();// 0x204ac60

--------------------------------
Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	MulticastInlineDelegateProperty PreStartPlay;//[Size: 1]
	delegate CalledStartPlay;//[Offset: 0x320, Size: 1]
	MulticastInlineDelegateProperty PostStartPlay;//[Size: 1]
	MulticastInlineDelegateProperty PreHandleMatchHasStarted;//[Size: 1]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x350, Size: 1]
	MulticastInlineDelegateProperty PostHandleMatchHasStarted;//[Size: 1]
	MulticastInlineDelegateProperty PreRestartPlayer;//[Size: 1]
	delegate CalledRestartPlayer;//[Offset: 0x380, Size: 1]
	MulticastInlineDelegateProperty PostRestartPlayer;//[Size: 1]
	MulticastInlineDelegateProperty PreEndPlay;//[Size: 1]
	delegate CalledEndPlay;//[Offset: 0x3b0, Size: 1]
	MulticastInlineDelegateProperty PostEndPlay;//[Size: 1]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d0, Size: 1]
	int GamePlayMode;//[Offset: 0x3e4, Size: 1]
	class Actor[] ManagerClasses;//[Offset: 0x3e8, Size: 1]
	FString CharacterClassPath;//[Offset: 0x3f8, Size: 1]
	int CharacterIdInTrainningCourse;//[Offset: 0x408, Size: 1]
	int SkinIdInTrainningCourse;//[Offset: 0x40c, Size: 1]
	int BagIdInTrainingCourse;//[Offset: 0x410, Size: 1]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	int SpecifiedCharacterSkinID;//[Offset: 0x418, Size: 1]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	int SpecifiedCharacterBagID;//[Offset: 0x420, Size: 1]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x428, Size: 1]
	MulticastInlineDelegateProperty OnPostSpawnDefaultSolarCharacterAtTransform;//[Size: 1]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x440, Size: 1]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x448, Size: 1]
	SolarTeamInfo*[] Teams;//[Offset: 0x450, Size: 1]
	SolarTeamInfo*[] AliveTeams;//[Offset: 0x460, Size: 1]
	SolarPlayerState*[] AlivePlayers;//[Offset: 0x470, Size: 1]
	class SolarTeamInfo* TeamClass;//[Offset: 0x480, Size: 1]
	DataTable* TeamDataTable;//[Offset: 0x488, Size: 1]
	SolarFlyTrail* FlyTrailActor;//[Offset: 0x540, Size: 1]
	FString[] BannedPlayerIDList;//[Offset: 0x548, Size: 1]
	void UpdatePlayerDataForBotAI(int AIConfigID, SolarPlayerState* PlayerState);// 0x2649560
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x2649560
	void UpdateDeserterTag(SolarPlayerState* PlayerState);// 0x21457c0
	void UpdateBotPlayerData(SolarPlayerState* PlayerState);// 0x2649560
	void UpdateAliveTeamsAndPlayers();// 0x15727b0
	FString TryKickOutOnlinePlayer(FString PlayerId, const bool IsAllowReconnect);// 0x2145690
	void SolarGM_SetAntiCheatData(FString InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer);// 0x21454d0
	void SetGamePlayMode(int InGamePlayMode);// 0x2145440
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x2145280
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x21450a0
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x2649560
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x2649560
	void PresettleAll();// 0x1572070
	void PreAssignTeam(byte DesiredTeamID, SolarPlayerState* PlayerState);// 0x2144ef0
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(SolarPlayerState* NewPlayer, SolarCharacter* NewCharacter);// 0x2649560
	void OnStartBattleresponded();// 0x2144da0
	bool OnPlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x2144c60
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x2649560
	void KickOutPlayerToLobby(FString InPlayerID);// 0x2144bc0
	void KickOutAllPlayerToLobby();// 0x2144ba0
	bool IsBannedForCheating(FString PlayerId);// 0x2144af0
	void InitCharacterClassPath(int CharacterId);// 0x2649560
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x21449b0
	int[] GetRandomAISkinID(const SolarPlayerState* InPS);// 0x2649560
	int GetMatchTeammateCount();// 0x2144880
	int GetGamePlayMode();// 0x2144850
	static GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x21447c0
	void GetEmptyTeams(out SolarTeamInfo*[] OutTeams, bool Reverse);// 0x21446c0
	int GetBotAINumber();// 0x2649560
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x2649560
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x2649560
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x2649560
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x2649560
	SolarPlayerState* CreateBotAISingle(int CharacterId, out const Vector Location, enum[] JoinPolicies, class SolarBotAIController ControllerClass, const int Difficultly);// 0x21442b0
	SolarPlayerState* CreateBotAIAndJoinTeamByName(int CharacterId, out const Vector Location, FString TeamName, class SolarBotAIController ControllerClass, const int Difficultly);// 0x21440d0
	SolarPlayerState* CreateBotAIAndJoinTeamByID(int CharacterId, out const Vector Location, const byte TeamID, class SolarBotAIController ControllerClass, const int Difficultly);// 0x2143f00
	SolarPlayerState* CreateBotAIAndJoinTeam(int CharacterId, out const Vector Location, SolarTeamInfo* TeamInfo, class SolarBotAIController ControllerClass, const int Difficultly);// 0x2143d30
	bool CanPlayerBattle(SolarPlayerState* PlayerState);// 0x2143c90

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 1]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	int NumSpectators;//[Offset: 0x2d4, Size: 1]
	int NumPlayers;//[Offset: 0x2d8, Size: 1]
	int NumBots;//[Offset: 0x2dc, Size: 1]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 1]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 1]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 1]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 1]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 1]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	void StartMatch();// 0x1572570
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x3e1b4a0
	void Say(FString Msg);// 0x3e1b400
	void RestartGame();// 0x1572310
	bool ReadyToStartMatch();// 0x3e1b150
	bool ReadyToEndMatch();// 0x3e1b120
	void K2_OnSetMatchState(FName NewState);// 0x2649560
	bool IsMatchInProgress();// 0x3df4410
	bool HasMatchEnded();// 0x3e1ae60
	FName GetMatchState();// 0x3e1ad50
	void EndMatch();// 0x1572110
	void AbortMatch();// 0x15720d0

--------------------------------
Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xe0, Size: 1]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xe8, Size: 1]
	SolarGameMode* GameModeOwner;//[Offset: 0xf0, Size: 1]
	bool bEnableIrisAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bEnableMLSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool bPreserveBotOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	class SolarBotAITeamManager* BotTeamManagerClass;//[Offset: 0x100, Size: 1]
	class SolarPreservedBotManager* BotPreservedManagerClass;//[Offset: 0x108, Size: 1]
	class SolarBotAIWarmServiceSystem* BotWarmServiceSystemClass;//[Offset: 0x110, Size: 1]
	class SolarBotTimelineSystem* BotTimelineSystemClass;//[Offset: 0x118, Size: 1]
	int MaxNumPreservedBots;//[Offset: 0x120, Size: 1]
	float MaxRatioPreservedBots;//[Offset: 0x124, Size: 1]
	SolarBotAITeamManager* BotTeamManager;//[Offset: 0x138, Size: 1]
	SolarPreservedBotManager* BotPreservedManager;//[Offset: 0x140, Size: 1]
	SolarBotAIWarmServiceSystem* BotWarmServiceSystem;//[Offset: 0x148, Size: 1]
	SolarBotTimelineSystem* BotTimelineSystem;//[Offset: 0x150, Size: 1]
	bool bInitBotByTeamPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bCanBotTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bCanPlayerTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	bool bCanBotTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	bool bCanPlayerTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	bool PreserveBot(SolarBotAIController* InBotController, out const Vector InPreservedLocation);// 0x2144fc0
	bool PopPreservedBot(out SolarBotAIController* OutController, out const Vector OutTeleportLocation, SolarBotAIController* InSpecificController);// 0x2144dc0
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x2649560
	void GetDeathBoxExtraStuff(SolarPlayerState* BotState, SolarPlayerState* PlayerState, out <int,int> Stuff);// 0x21444b0

--------------------------------
Class: SolarBotAITeamManager.Object
	float UpdateInterval;//[Offset: 0x28, Size: 1]
	float DefaultSeparateDistance;//[Offset: 0x2c, Size: 1]
	float DefaultReturnDistance;//[Offset: 0x30, Size: 1]
	class SolarBotTeamVisualizer* DebugVisualizerClass;//[Offset: 0x90, Size: 1]
	SolarBotTeamVisualizer* DebugVisualizer;//[Offset: 0x98, Size: 1]
	DataTable* GlobalGameTeamConfigs;//[Offset: 0xa0, Size: 1]
	<SolarCharacter*,SolarBotAIController*> AllocatedCharacters;//[Offset: 0xa8, Size: 1]
	SolarCharacter*[] AbandonedCharacters;//[Offset: 0xf8, Size: 1]
	<enum,BotEmojiSetting> EmojiTaskSettings;//[Offset: 0x108, Size: 1]
	<int,enum> ResponseToVoiceType;//[Offset: 0x158, Size: 1]
	<enum,enum> ResponseToMarkType;//[Offset: 0x1a8, Size: 1]
	<enum,BotResponseSetting> ResponseTaskSettings;//[Offset: 0x1f8, Size: 1]
	void UpdateAllocatedList(SolarBotAIController* InController, out const SolarCharacter*[] AliveCharacterArray);// 0x20e46b0
	bool TryCancelCurrentRescueTarget(SolarBotAIController* InController, const SolarCharacter* CancelledCharacter);// 0x20e45e0
	bool ShouldTeamActivate(out const SolarBotTeamInfo BotInfo);// 0x20e4490
	void SetTeamBlackboardValueAsVector(int TeamID, out const FName KeyName, Vector VectorValue, enum InBotState, bool bSkipIndependent);// 0x20e4140
	void SetTeamBlackboardValueAsString(int TeamID, out const FName KeyName, FString StringValue, enum InBotState, bool bSkipIndependent);// 0x20e3f40
	void SetTeamBlackboardValueAsRotator(int TeamID, out const FName KeyName, Rotator VectorValue, enum InBotState, bool bSkipIndependent);// 0x20e3d90
	void SetTeamBlackboardValueAsObject(int TeamID, out const FName KeyName, Object* ObjectValue, enum InBotState, bool bSkipIndependent);// 0x20e3be0
	void SetTeamBlackboardValueAsName(int TeamID, out const FName KeyName, FName NameValue, enum InBotState, bool bSkipIndependent);// 0x20e3a30
	void SetTeamBlackboardValueAsInt(int TeamID, out const FName KeyName, int IntValue, enum InBotState, bool bSkipIndependent);// 0x20e3880
	void SetTeamBlackboardValueAsFloat(int TeamID, out const FName KeyName, float FloatValue, enum InBotState, bool bSkipIndependent);// 0x20e36d0
	void SetTeamBlackboardValueAsEnum(int TeamID, out const FName KeyName, byte EnumValue, enum InBotState, bool bSkipIndependent);// 0x20e3520
	void SetTeamBlackboardValueAsClass(int TeamID, out const FName KeyName, class Object ClassValue, enum InBotState, bool bSkipIndependent);// 0x20e3370
	void SetTeamBlackboardValueAsBool(int TeamID, out const FName KeyName, bool BoolValue, enum InBotState, bool bSkipIndependent);// 0x20e31b0
	void SetBotDropOut(const SolarBotAIController* InController, bool bDropOut);// 0x20e2ef0
	void OnTeamDeactive(out const SolarBotTeamInfo TeamInfo);// 0x2649560
	void OnTeamActivate(out const SolarBotTeamInfo TeamInfo);// 0x2649560
	void OnBotUnRegister(out const SolarBotMemberInfo BotInfo);// 0x2649560
	void OnBotStateChanged(out const SolarBotMemberInfo BotInfo, enum OldState);// 0x2649560
	void OnBotRegister(out const SolarBotMemberInfo BotInfo);// 0x2649560
	bool IsValidTeamID(int InTeamId);// 0x20e2bf0
	bool IsTeamLeader(const SolarBotAIController* InController);// 0x20e2b50
	bool IsIndependent(const SolarBotAIController* InController);// 0x20e2a80
	bool GetTeamPlayerInfo(const SolarBotAIController* InController, out SolarCharacter*[] PlayerArray);// 0x20e28f0
	bool GetRescueInfo(SolarBotAIController* InController, out SolarCharacter*[] DyingPlayerArray, out SolarCharacter*[] DeadPlayerArray, out SolarCharacter*[] DyingBotArray, out SolarCharacter*[] DeadBotArray);// 0x20e2680
	bool GetBotTeamInfo(const SolarBotAIController* InController, out SolarBotTeamInfo OutTeamInfo);// 0x20e2450
	bool GetBotMemberInfo(const SolarBotAIController* InController, out SolarBotMemberInfo OutMemberInfo);// 0x20e2170
	static SolarBotAITeamManager* Get(const Object* Context);// 0x20e20e0
	bool CheckBotTeamState(const SolarBotAIController* InController, enum MemberState);// 0x20e2010
	Vector CalculateTeamPosition(out const SolarBotTeamInfo TeamInfo);// 0x20e1e00
	bool AllocatedRescueTarget(SolarBotAIController* InController, SolarCharacter* RescuedCharacter);// 0x20e1c90
	void AbandonedCurrentRescueTarget(SolarBotAIController* InController, SolarCharacter* AbandonedCharacter);// 0x20e1bc0

--------------------------------
Class: SolarBotTeamVisualizer.Info.Actor.Object
	Color[] DrawDebugColors;//[Offset: 0x228, Size: 1]
	Font* TextFont;//[Offset: 0x238, Size: 1]
	BotTeamDebugInfo[] BotTeamDebugInfos;//[Offset: 0x240, Size: 1]

--------------------------------
Class: BotTeamDebugInfo
	int TeamID;//[Offset: 0x0, Size: 1]
	BotMemberDebugInfo[] MemberDebugInfos;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BotMemberDebugInfo
	Vector MemberLocation;//[Offset: 0x0, Size: 1]
	FString IDStr;//[Offset: 0x10, Size: 1]
	enum MemberState;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BotEmojiSetting
	<int,float> EmojiPool;//[Offset: 0x0, Size: 1]
	GameplayTagContainer TagsRequested;//[Offset: 0x50, Size: 1]
	float PersonalCD;//[Offset: 0x70, Size: 1]
	float TeamCD;//[Offset: 0x74, Size: 1]
	float MinTimeDelay;//[Offset: 0x78, Size: 1]
	float MaxTimeDelay;//[Offset: 0x7c, Size: 1]
	float TriggeredProbability;//[Offset: 0x80, Size: 1]

--------------------------------
Class: BotResponseSetting
	float PersonalCD;//[Offset: 0x0, Size: 1]
	float TeamCD;//[Offset: 0x4, Size: 1]
	float MinTimeDelay;//[Offset: 0x8, Size: 1]
	float MaxTimeDelay;//[Offset: 0xc, Size: 1]
	float TriggeredProbability;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SolarBotTeamInfo
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int TeamID;//[Offset: 0x4, Size: 1]
	Vector TeamPosition;//[Offset: 0x8, Size: 1]
	float SeparateDistance;//[Offset: 0x14, Size: 1]
	float ReturnDistance;//[Offset: 0x18, Size: 1]
	bool bPlayerNeedPraise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bHasInitByTeamConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	SolarBotMemberInfo[] MemberInfos;//[Offset: 0x20, Size: 1]
	<enum,float> TeamEmojiTimeStamp;//[Offset: 0x30, Size: 1]
	<enum,float> TeamResponseTimeStamp;//[Offset: 0x80, Size: 1]

--------------------------------
Class: SolarBotMemberInfo
	SolarBotAIController* BotController;//[Offset: 0x0, Size: 1]
	enum MemberState;//[Offset: 0x8, Size: 1]
	enum[] PreferPickHeroTypes;//[Offset: 0x10, Size: 1]
	<enum,float> MemberEmojiTimeStamp;//[Offset: 0x20, Size: 1]
	<enum,float> MemberResponseTimeStamp;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SolarPreservedBotManager.Object
	<int,Vector> SilenceLocationInDiffMap;//[Offset: 0x88, Size: 1]
	float MinDetectDistance;//[Offset: 0xdc, Size: 1]
	SolarPreservedBotPopTask*[] PopTasks;//[Offset: 0x100, Size: 1]
	EQSParametrizedQueryExecutionRequest DefaultPopQuery;//[Offset: 0x110, Size: 1]
	<enum,EQSParametrizedQueryExecutionRequest> PopQueryMap;//[Offset: 0x158, Size: 1]
	EnvQuery* SeparateQuery;//[Offset: 0x1a8, Size: 1]
	byte SeparateEQSRunMode;//[Offset: 0x1b0, Size: 1]
	SolarBotTimelineAIItemSetting DefaultItemTemplate;//[Offset: 0x1b8, Size: 1]
	float TimeBetweenDyingAndDead;//[Offset: 0x2a8, Size: 1]
	MulticastInlineDelegateProperty OnSendBotsSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnSendBotsFail;//[Size: 1]
	static void TryUpdateEquipment(const Object* Context, out const SolarBotTimelineAIItemSetting ItemSetting);// 0x21e36e0
	static bool TryPopBotByNum(const Object* Context, int PopNum, out const PopParameter InPopParam);// 0x21e3560
	static void TryPopAllBotByGuarantee(const Object* Context, out const Vector PopLocation);// 0x21e34a0
	static void TryPopAllBot(const Object* Context, out const PopParameter InPopParam);// 0x21e3380
	void TryKillOneBot();// 0x21e3360
	static void TryAddPreservedBot(SolarPlayerState* InBot, const float DelayTime);// 0x21e32a0
	void OnPopSingleBotSuccess(SolarPreservedBotPopTask* InTask);// 0x21e2cf0
	void OnPopBotsFinished(SolarPreservedBotPopTask* InTask);// 0x21e2c60
	void OnGetFinalTeleportLocSuccess(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS, out const Vector TeleportLoc);// 0x21e2ab0
	void OnGetFinalTeleportLocFail(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS);// 0x20415a0
	static void OnCharacterDeath(const SolarPlayerController* InPlayer);// 0x21e2980
	void InitBotPreservedManager(byte InActivePlayerNum, int GameModeId);// 0x21e2650
	static SolarPreservedBotManager* Get(const Object* Context);// 0x21e2160

--------------------------------
Class: SolarPreservedBotPopTask.Object
	int CurrentTaskID;//[Offset: 0x28, Size: 1]
	Vector[] PickedTeleportCenters;//[Offset: 0x40, Size: 1]
	SolarPlayerState*[] FailedBots;//[Offset: 0x50, Size: 1]
	SolarBotAIController*[] PendingSeparateBots;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnGetTeleportLocationSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnPopBotsFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnGetFinalTeleportLocSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnGetFinalTeleportLocFail;//[Size: 1]
	Vector GetWarmTargetLocation();// 0x21e2520

--------------------------------
Class: SolarBotTimelineAIItemSetting
	<enum,SolarBotTimelineEquipmentArray> Equipment;//[Offset: 0x0, Size: 1]
	<int,IntPoint> Consumable;//[Offset: 0x50, Size: 1]
	<enum,SolarBotTimelineEquipmentArray> WeaponPart;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: SolarBotTimelineEquipmentArray
	<int,int> IDArray;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PopParameter
	SolarPlayerState*[] WarmTargets;//[Offset: 0x0, Size: 1]
	Vector PopLocation;//[Offset: 0x10, Size: 1]
	TraceRecord[] TargetTraces;//[Offset: 0x20, Size: 1]
	EnvQuery* TeleportLocEQS;//[Offset: 0x30, Size: 1]
	byte TeleportLocEQSRunMode;//[Offset: 0x38, Size: 1]
	bool bForcePop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: TraceRecord
	Vector[] TargetTrace;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 1]
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 1]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 1]
	byte RunMode;//[Offset: 0x40, Size: 1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 1]
	enum ParamType;//[Offset: 0x8, Size: 1]
	float Value;//[Offset: 0xc, Size: 1]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 1]
	FName SelectedKeyName;//[Offset: 0x10, Size: 1]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 1]
	byte SelectedKeyID;//[Offset: 0x20, Size: 1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: SolarBotAIWarmServiceSystem.Object
	<SolarPlayerState*,WarmTargetState> WarmTargets;//[Offset: 0x28, Size: 1]
	TimeItemsSetting[] ItemsByTime;//[Offset: 0x78, Size: 1]
	float TriggerWarmServiceValue;//[Offset: 0x8c, Size: 1]
	float MaxGroupDistance;//[Offset: 0x90, Size: 1]
	byte MaxServiceBot;//[Offset: 0x94, Size: 1]
	int TraceRecordLength;//[Offset: 0x98, Size: 1]
	float TraceRecordInterval;//[Offset: 0xa8, Size: 1]
	float UpdateInterval;//[Offset: 0xb8, Size: 1]
	EnvQuery* TeleportLocEQS;//[Offset: 0xc0, Size: 1]
	byte TeleportLocEQSRunMode;//[Offset: 0xc8, Size: 1]
	int PopAllTriggerPlayerNum;//[Offset: 0xcc, Size: 1]
	int PopAllTriggerTime;//[Offset: 0xd0, Size: 1]
	EnvQuery* PopAllBotEQS;//[Offset: 0xd8, Size: 1]
	byte PopAllBotEQSRunMode;//[Offset: 0xe0, Size: 1]
	float RewardScore;//[Offset: 0xe4, Size: 1]
	byte MaxNumFishingBot;//[Offset: 0xe8, Size: 1]
	byte NumPlayerKillThreshold;//[Offset: 0xe9, Size: 1]
	byte NumRealPlayerKillThreshold;//[Offset: 0xea, Size: 1]
	EnvQuery* FishingTeleportEQS;//[Offset: 0xf0, Size: 1]
	byte FishingTeleportEQSRunMode;//[Offset: 0xf8, Size: 1]
	class GameplayEffect* FishingInvisibleEffectClass;//[Offset: 0x100, Size: 1]
	int FishingBotCharacterID;//[Offset: 0x108, Size: 1]
	int FishingBotSkinID;//[Offset: 0x10c, Size: 1]
	int[] FilterDamageWeaponIDs;//[Offset: 0x110, Size: 1]
	int[] FilterDamageVehicleIDs;//[Offset: 0x120, Size: 1]
	bool bCheckAccidentHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	float LimitAccidentAngle;//[Offset: 0x134, Size: 1]
	byte ExReportMinAimbotThreshold;//[Offset: 0x138, Size: 1]
	byte ExReportMinBiteThreshold;//[Offset: 0x139, Size: 1]
	SolarPlayerState*[] SuspiciousPlayers;//[Offset: 0x140, Size: 1]
	SolarPlayerState*[] FishingBots;//[Offset: 0x150, Size: 1]
	static void UpdateWarmTargetStateByEvent(const SolarPlayerState* InPS, const enum InEventType);// 0x20e8a00
	static void StartPlayerWarmService(SolarPlayerState* InPS);// 0x20e8980
	static void RecordWarmTargetKDAState(const SolarPlayerState* InPS, const SolarPlayerState* KilledPC);// 0x20e88c0
	void OnRequestWarmServiceSuccess(out const SolarPlayerState*[] PlayerArray);// 0x20e8810
	void OnRequestWarmServiceFail(out const SolarPlayerState*[] PlayerArray);// 0x20e8760
	void OnPopBotForFishing(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS, out const Vector TeleportLoc);// 0x20e8640
	float GetWarmScoreByEvent(const SolarPlayerState* InPS, const enum InEventType);// 0x20e8570
	float GetTimeOutBattle(const SolarPlayerState* InPS);// 0x20e84d0
	float GetTimeBeforeOutPoisonCirecle(const SolarPlayerState* InPS);// 0x20e8430
	float GetTargetTickValue(const SolarPlayerState* InPS, out const WarmTargetState InState);// 0x20e8320
	float GetLastBattleMVPScore(const SolarPlayerState* InPS);// 0x20e8280
	byte GetKilledPlayerNum(const SolarPlayerState* InPS);// 0x20e81e0
	byte GetKilledBotNum(const SolarPlayerState* InPS);// 0x20e8140
	float GetFrustrationValue(const SolarPlayerState* InPS);// 0x20e80a0
	byte GetEnemyNumInRange(const SolarPlayerState* InPS, float RangeRadius);// 0x20e7fd0
	int GetActivePlayerNumBP(const int PlayerNum, const int PlayerTeamNum);// 0x20e7f00
	static SolarBotAIWarmServiceSystem* Get(const Object* Context);// 0x20e7e70

--------------------------------
Class: WarmTargetState
	float BoringValue;//[Offset: 0x0, Size: 1]
	int ServedTimes;//[Offset: 0x4, Size: 1]
	bool bNeedWarmService;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte KillPlayerNum;//[Offset: 0x9, Size: 1]
	byte KillBotNum;//[Offset: 0xa, Size: 1]
	float LastBattleTime;//[Offset: 0xc, Size: 1]
	int CurTraceRecordIdx;//[Offset: 0x10, Size: 1]
	Vector[] TraceRecords;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TimeItemsSetting
	float TriggerTime;//[Offset: 0x0, Size: 1]
	SolarBotTimelineAIItemSetting Items;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarBotTimelineSystem.Object
	DataTable* GlobalTimelineSettings;//[Offset: 0x28, Size: 1]
	float UpdateInterval;//[Offset: 0x30, Size: 1]
	bool bUsePlayerLandTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bEnableFinalDownsize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float FinalDownsizeDuration;//[Offset: 0x38, Size: 1]
	DataTable* CurrentActionTimelineTable;//[Offset: 0x40, Size: 1]
	DataTable* CurrentUpdateItemTimelineTable;//[Offset: 0x48, Size: 1]
	DataTable* CurrentDownsizeTimelineTable;//[Offset: 0x50, Size: 1]
	SolarPlayerState*[] DirtyBots;//[Offset: 0x168, Size: 1]
	void InitTimeline();// 0x20ebc40
	static SolarBotTimelineSystem* Get(const Object* Context);// 0x20ebbb0

--------------------------------
Class: FeedBotStrategyInfo
	FString PlayerId;//[Offset: 0x0, Size: 1]
	float FeedPriority;//[Offset: 0x10, Size: 1]
	float Difficulty;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarFlyTrail.Actor.Object
	SolarTrailProxyComponent*[] CachedProxyComponents;//[Offset: 0x228, Size: 1]
	SoftObjectPath TrailEffectClass;//[Offset: 0x238, Size: 1]
	class SolarTrailEffect* FallbackTrailEffectClass;//[Offset: 0x250, Size: 1]
	class Object* CachedTrailEffectClass;//[Offset: 0x278, Size: 1]
	CharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo;//[Offset: 0x2d0, Size: 1]
	PackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo;//[Offset: 0x3f0, Size: 1]
	class SkydiveTrailEffect* SkydiveTrailEffectClass;//[Offset: 0x510, Size: 1]
	<SolarPlayerState*,CharacterSkydiveTrailData> SkydiveTrailData;//[Offset: 0x518, Size: 1]
	SolarPlayerState* LocalPlayerSkydiveTrailProxy;//[Offset: 0x568, Size: 1]
	void OnRep_TrailEffectClass();// 0x2140220

--------------------------------
Class: SolarTrailProxyComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* PlayerBeingTracked;//[Offset: 0x318, Size: 1]

--------------------------------
Class: SolarTrailEffect.Actor.Object
	void OnFinished();// 0x2649560
	Transform GetTrackingTransform(const SolarCharacter* Character);// 0x213fae0
	void AttachToCharacter(const SolarCharacter* Character);// 0x2132e80

--------------------------------
Class: CharacterSkydiveTrailStaticInfoContainer.FastArraySerializer
	CharacterSkydiveTrailStaticInfo[] InfoArray;//[Offset: 0x108, Size: 1]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: CharacterSkydiveTrailStaticInfo.FastArraySerializerItem
	FString CharacterId;//[Offset: 0x10, Size: 1]
	SolarPlayerState* PlayerState;//[Offset: 0x20, Size: 1]
	FString TrailAssemblingId;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PackedSkydiveTrailFrameInfoContainer.FastArraySerializer
	PackedSkydiveTrailFrameInfo[] InfoArray;//[Offset: 0x108, Size: 1]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: PackedSkydiveTrailFrameInfo.FastArraySerializerItem
	float Timestamp;//[Offset: 0xc, Size: 1]
	SkydiveTrailFrameInfo[] FrameInfos;//[Offset: 0x10, Size: 1]
	SolarPlayerState*[] FinishedPlayerStates;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkydiveTrailFrameInfo
	FString CharacterId;//[Offset: 0x0, Size: 1]
	SolarPlayerState* OwnerPlayerState;//[Offset: 0x10, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	Vector Velocity;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SkydiveTrailEffect.Actor.Object
	SolarFlyTrail* FlyTrailManager;//[Offset: 0x228, Size: 1]
	void UpdateTrailEffect(const float CurrentTime);// 0x2140e70
	void OnTrailFinish();// 0x816980
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer);// 0x2649560
	void InitAppearanceByPlayerState(const SolarPlayerState* PlayerState);// 0x1599f80
	void AddTrailPoint(float Timestamp, out const Vector Location, out const Rotator Rotation, out const Vector Velocity);// 0x213dfc0

--------------------------------
Class: CharacterSkydiveTrailData

--------------------------------
Class: PlayerStatisticsData.Object
	MulticastInlineDelegateProperty OnPlayerStatDataUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnIncreaseWeaponKillNum;//[Size: 1]
	Vector GetValue_Vector(enum InType);// 0x2150880
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x2150790
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x21506a0
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x21505d0
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x21503d0
	int GetValue_Int(enum InType);// 0x2150250
	float GetValue_FloatFromMap(enum InType, int IntKey, bool Floor);// 0x2150140
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x2150050
	float GetValue_Float(enum InType, bool Floor);// 0x214ff80

--------------------------------
Class: ExpRankMedalData
	FString Area;//[Offset: 0x0, Size: 1]
	FString Country;//[Offset: 0x10, Size: 1]
	int Rank;//[Offset: 0x20, Size: 1]
	int CharacterId;//[Offset: 0x24, Size: 1]
	int CharacterType;//[Offset: 0x28, Size: 1]
	int RankScore;//[Offset: 0x2c, Size: 1]
	int RankType;//[Offset: 0x30, Size: 1]
	int AutoID;//[Offset: 0x34, Size: 1]

--------------------------------
Class: LastBattleInfo
	float MvpScore;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 1]
	int HitDown;//[Offset: 0x8, Size: 1]
	int AssistNum;//[Offset: 0xc, Size: 1]
	int RescueNum;//[Offset: 0x10, Size: 1]
	int AliveTime;//[Offset: 0x14, Size: 1]
	int CauseDamage;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SettlementReward
	int ItemID;//[Offset: 0x0, Size: 1]
	int Amount;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SettlementCrateReward
	int64 crateID;//[Offset: 0x0, Size: 1]
	SettlementReward[] Items;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KillEnemySnapshot

--------------------------------
Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 1]
	int AccountLevel;//[Offset: 0x4, Size: 1]
	int CurCharacterLevel;//[Offset: 0x58, Size: 1]
	int TotalCharacterExp;//[Offset: 0x5c, Size: 1]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	int RankBeforeScore;//[Offset: 0x64, Size: 1]
	int RankAfterScore;//[Offset: 0x68, Size: 1]
	int RankSurviveScore;//[Offset: 0x6c, Size: 1]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 1]
	int RankDefeatScore;//[Offset: 0x74, Size: 1]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 1]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 1]
	int RankLegend;//[Offset: 0x80, Size: 1]
	byte RankProtectType;//[Offset: 0x84, Size: 1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	int WinninScoreID;//[Offset: 0x88, Size: 1]
	int BattlePassID;//[Offset: 0x8c, Size: 1]
	int BattlePassAddExp;//[Offset: 0x90, Size: 1]
	int BattlePassExp;//[Offset: 0x94, Size: 1]
	int[] BattlePassTaskID;//[Offset: 0x98, Size: 1]
	int[] BattlePassTaskWeek;//[Offset: 0xa8, Size: 1]
	int[] BattlePassTaskAdd;//[Offset: 0xb8, Size: 1]
	int[] BattlePassTaskVal;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 1]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementHandleConfig;//[Offset: 0xb0, Size: 1]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xb8, Size: 1]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 1]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x170, Size: 1]
	void UnlockAchievement(int InAchievementID);// 0x20c7550
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x20c7480
	bool IsAchievementCompleted(int InAchievementID);// 0x20c60a0
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x20c5fd0
	int GetAchievementPorgressValue(int InAchievementID);// 0x20c59e0

--------------------------------
Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x20c59b0
	int GetAchievedTargetValue(int InAchievementID);// 0x20c5910
	int[] GetAchievedConditionValue(int InAchievementID);// 0x20c5830

--------------------------------
Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 1]
	int ProgressValue;//[Offset: 0x4, Size: 1]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum AchievementReportType;//[Offset: 0x9, Size: 1]

--------------------------------
Class: SpatializeInfoTrack.SpatializeInfo.Info.Actor.Object
	TrackArray TrackArray;//[Offset: 0x230, Size: 1]
	float Timeout;//[Offset: 0x3ec, Size: 1]
	float MinRevealDistance;//[Offset: 0x3f0, Size: 1]
	int MaxTrackNum;//[Offset: 0x3f4, Size: 1]
	<TrackItem,3DMeshWidgetTrack*> CurTrackWidgets;//[Offset: 0x3f8, Size: 1]
	void UpdateWidgets(bool bFromNetUpdate);// 0x22fd640

--------------------------------
Class: SpatializeInfo.Info.Actor.Object

--------------------------------
Class: TrackArray.FastArraySerializer
	TrackItem[] Tracks;//[Offset: 0x108, Size: 1]

--------------------------------
Class: TrackItem.SpatializeItem.FastArraySerializerItem
	float Time;//[Offset: 0x18, Size: 1]
	FString PID;//[Offset: 0x20, Size: 1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bProjected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector FloorLocation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: SpatializeItem.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 1]

--------------------------------
Class: 3DMeshWidgetTrack.3DMeshWidget.Actor.Object
	Vector BoxHalfExtent;//[Offset: 0x240, Size: 1]
	float PlayerNearbyAlpha;//[Offset: 0x24c, Size: 1]
	bool bDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	FName MaterialAlphaParamName;//[Offset: 0x254, Size: 1]
	FName MaterialCountDownName;//[Offset: 0x25c, Size: 1]
	float MaxTraceDist;//[Offset: 0x264, Size: 1]
	float DistFromGround;//[Offset: 0x268, Size: 1]
	StaticMeshComponent* StaticMeshCountDown;//[Offset: 0x270, Size: 1]
	TextRenderComponent* DistTextComp;//[Offset: 0x278, Size: 1]
	MaterialInstanceDynamic* DynamicMaterialIcon;//[Offset: 0x280, Size: 1]
	MaterialInstanceDynamic* DynamicMaterialCountDown;//[Offset: 0x288, Size: 1]
	MaterialInstanceDynamic* DynamicMaterialDistText;//[Offset: 0x290, Size: 1]

--------------------------------
Class: 3DMeshWidget.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 1]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 1]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x540, Size: 1]
	MaterialInterface* TextMaterial;//[Offset: 0x558, Size: 1]
	bool bFullyExpandedUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	Font* Font;//[Offset: 0x568, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x570, Size: 1]
	byte VerticalAlignment;//[Offset: 0x571, Size: 1]
	Color TextRenderColor;//[Offset: 0x574, Size: 1]
	float XScale;//[Offset: 0x578, Size: 1]
	float YScale;//[Offset: 0x57c, Size: 1]
	float WorldSize;//[Offset: 0x580, Size: 1]
	float InvDefaultSize;//[Offset: 0x584, Size: 1]
	float HorizSpacingAdjust;//[Offset: 0x588, Size: 1]
	float VertSpacingAdjust;//[Offset: 0x58c, Size: 1]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 1]
	void SetYScale(float Value);// 0x3f219b0
	void SetXScale(float Value);// 0x3f21930
	void SetWorldSize(float Value);// 0x3f218b0
	void SetVertSpacingAdjust(float Value);// 0x3f217b0
	void SetVerticalAlignment(byte Value);// 0x3f21830
	void SetTextRenderColor(Color Value);// 0x3f21730
	void SetTextMaterial(MaterialInterface* Material);// 0x3f216a0
	void SetText(FString Value);// 0x3f21600
	void SetHorizSpacingAdjust(float Value);// 0x3f21500
	void SetHorizontalAlignment(byte Value);// 0x3f21580
	void SetFont(Font* Value);// 0x3f21470
	void K2_SetText(out const FText Value);// 0x3f213a0
	Vector GetTextWorldSize();// 0x3f21290
	Vector GetTextLocalSize();// 0x3f21250

--------------------------------
Class: SolarBattleWeaponData
	int weaponid;//[Offset: 0x0, Size: 1]
	int SkinId;//[Offset: 0x4, Size: 1]

--------------------------------
Class: HeroPickInfo.Info.Actor.Object
	FString SideName;//[Offset: 0x228, Size: 1]
	enum HeroPickType;//[Offset: 0x238, Size: 1]
	int TeammateNumMode;//[Offset: 0x23c, Size: 1]
	HeroPickWidget* HeroPickWidget;//[Offset: 0x240, Size: 1]
	PlayerSelectInfo[] PlayerSelectInfos;//[Offset: 0x248, Size: 1]
	float HeroPickTime;//[Offset: 0x258, Size: 1]
	float WaitingToStartTime;//[Offset: 0x260, Size: 1]
	int CurrentPickPlayerIndex;//[Offset: 0x264, Size: 1]
	float Duration;//[Offset: 0x268, Size: 1]
	void OnRep_WaitingToStartTime();// 0x8f2720
	void OnRep_SelectPlayerChange();// 0x2059320
	void OnRep_PlayerSelectInfos();// 0x2059300
	void OnRep_HeroPickTime();// 0x8f2720

--------------------------------
Class: HeroPickWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	HeroPickInfo* PickInfo;//[Offset: 0x350, Size: 1]
	TileView* CharacterList;//[Offset: 0x358, Size: 1]
	HeroPickPlayerSlot*[] PlayerSlots;//[Offset: 0x360, Size: 1]
	<int,HeroPickCharacterData*> SelectDataMap;//[Offset: 0x370, Size: 1]
	HeroPickDetail* UI_HeroPick_Detail;//[Offset: 0x3d8, Size: 1]
	int CurrentSelectCharacterID;//[Offset: 0x3e0, Size: 1]
	bool Enable3DLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	void ShowPlayerConfirm(int Pos);// 0x2059cc0
	void ShowMyTurn(bool bShow);// 0x2649560
	void ShowMainUICharacter(bool bShow);// 0x2649560
	void SetMidCharacterNameAndIcon(int InCharacterId, int SkinId);// 0x20599d0
	void SetHeroHPAndSpeed(const int HP, const int Speed);// 0x2649560
	void SetHeroFeatures(out const int[] InHeroFeatures);// 0x2649560
	void SetCountDowText(FString Text);// 0x2649560
	void SetClassNameAndIcon(FString ClassName, out const Texture2D* ClassIcon);// 0x2649560
	void SetCharacterNameAndIcon(FString Name, FString SkinName, out const Texture2D* CharacterIcon);// 0x2649560
	void RefreshTacticalSkillIcon(out const Texture2D* TacticalSkillIcon);// 0x2649560
	void RefreshSuperSkillIcon(out const Texture2D* SuperSkillIcon);// 0x2649560
	void RefreshPassiveSKillIcon(out const Texture2D* PassiveSkillIcon);// 0x2649560
	void PlayCharacterConfirmVoice(int SkinId);// 0x2649560
	int GetTeammateNumMode();// 0x2058e80
	void Enable3DHeroPickLayout(bool Enalbe3DLayout);// 0x2649560
	void Display3DHeroSelectedAnim(int CharacterId, int SkinId, bool IsConfirm);// 0x2649560
	void ConfirmSelect();// 0x2058b90
	void BP_OnSelfConfirmSelected();// 0x2649560

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x950, Size: 1]
	float EntryWidth;//[Offset: 0x954, Size: 1]
	enum TileAlignment;//[Offset: 0x958, Size: 1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x959, Size: 1]
	void SetEntryWidth(float NewWidth);// 0x3524350
	void SetEntryHeight(float NewHeight);// 0x35242d0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x888, Size: 1]
	byte SelectionMode;//[Offset: 0x889, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x88a, Size: 1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88b, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	float EntrySpacing;//[Offset: 0x890, Size: 1]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	float ListItemStartPosOffset;//[Offset: 0x898, Size: 1]
	Object*[] ListItems;//[Offset: 0x8a0, Size: 1]
	bool EnableDelayAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	float DelayAddInterval;//[Offset: 0x8c4, Size: 1]
	int NumInPanel;//[Offset: 0x8c8, Size: 1]
	Object*[] DelayAddedListItems;//[Offset: 0x8d0, Size: 1]
	bool DelayAddAnimFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryInitialized;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemDoubleClicked;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemIsHoveredChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemSelectionChanged;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnItemScrolledIntoView;//[Size: 1]
	void SetSelectionMode(byte SelectionMode);// 0x3510180
	void SetSelectedIndex(int Index);// 0x3510000
	void ScrollIndexIntoView(int Index);// 0x350ee70
	void RemoveItem(Object* Item);// 0x350edc0
	void NavigateToIndex(int Index);// 0x350ed10
	bool IsRefreshPending();// 0x350ece0
	int GetNumItems();// 0x350ea70
	Object*[] GetListItems();// 0x350ea40
	Object* GetItemAt(int Index);// 0x350e900
	int GetIndexForItem(Object* Item);// 0x350e830
	Object*[] GetDelayAddedListItems();// 0x350e710
	void ClearListItems();// 0x350e6c0
	void BP_SetSelectedItem(Object* Item);// 0x350e630
	void BP_SetListItems(out const Object*[] InListItems);// 0x350e580
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x350e4b0
	void BP_SetDelayAddListItems(out const Object*[] InListItems);// 0x350e400
	void BP_ScrollItemIntoView(Object* Item);// 0x350e370
	void BP_NavigateToItem(Object* Item);// 0x350e2e0
	bool BP_IsItemVisible(Object* Item);// 0x350e240
	bool BP_GetSelectedItems(out Object*[] Items);// 0x350e180
	Object* BP_GetSelectedItem();// 0x350e150
	int BP_GetNumItemsSelected();// 0x350e120
	void BP_DoDelayAddTick(float DeltaTime);// 0x350e0a0
	void BP_ClearSelection();// 0x350e080
	void BP_CancelScrollIntoView();// 0x350e060
	void AddItem(Object* Item);// 0x350dfd0

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x138, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x140, Size: 1]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool bClampScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	bool bDisableScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 1]
	float FixedLineScrollOffset;//[Offset: 0x148, Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryGenerated;//[Size: 1]
	MulticastInlineDelegateProperty BP_OnEntryReleased;//[Size: 1]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x170, Size: 1]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x1f0, Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x750, Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x754, Size: 1]
	Margin ScrollbarPadding;//[Offset: 0x75c, Size: 1]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3510410
	void SetScrollOffset(const float InScrollOffset);// 0x350fdd0
	void SetScrollBarVisibility(enum InVisibility);// 0x350ff80
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x350fef0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x350fe50
	void SetEnableScrollAnimation(bool bNewEnableScrollAnimation);// 0x350f5c0
	void SetDisableScroll(bool bInDisableScroll);// 0x350f530
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x350f060
	void ScrollToTop();// 0x350ef20
	void ScrollToBottom();// 0x350ef00
	void RequestRefresh();// 0x350ee50
	void RegenerateAllEntries();// 0x350eda0
	float GetScrollOffset();// 0x350eb40
	UserWidget*[] GetDisplayedEntryWidgets();// 0x350e770
	bool GetDisableScroll();// 0x350e740

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 1]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush VerticalBackgroundImage;//[Offset: 0xa0, Size: 1]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x138, Size: 1]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1d0, Size: 1]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x268, Size: 1]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x300, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x398, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x430, Size: 1]
	SlateBrush DraggedThumbImage;//[Offset: 0x4c8, Size: 1]

--------------------------------
Class: HeroPickPlayerSlot.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum UiState;//[Offset: 0x350, Size: 1]
	void UpdateSelectPercent(float Percent);// 0x2649560
	void UpdateIconAndName(FString HeroName, int HeroExpLevel, out const Texture2D* IconPath);// 0x2649560
	void ShowConfirm();// 0x2649560
	void SetPlayerPos(FString playerName, const byte InPosInTeam);// 0x2649560
	void ChangeUIStage(enum State);// 0x2649560

--------------------------------
Class: HeroPickCharacterData.Object
	int CharacterId;//[Offset: 0x28, Size: 1]
	int SkinId;//[Offset: 0x2c, Size: 1]
	int CharacterProficiencyLevel;//[Offset: 0x30, Size: 1]
	enum OwnType;//[Offset: 0x3c, Size: 1]
	int ConfigSortNum;//[Offset: 0x40, Size: 1]
	FString HeroName;//[Offset: 0x48, Size: 1]
	int[] SelectedPlayerPos;//[Offset: 0x58, Size: 1]
	int ConfirmPos;//[Offset: 0x68, Size: 1]

--------------------------------
Class: HeroPickDetail.SolarUserWidget.UserWidget.Widget.Visual.Object
	void UpdateCharacterDetails(const int CharacterId);// 0x2059e20
	void RefreshSkillInfo(int SkillType, FString Attribute, FString SkillName, FString SkillDescription, out const Texture2D* SkillIcon);// 0x2649560

--------------------------------
Class: PlayerSelectInfo
	SolarPlayerState* Player;//[Offset: 0x0, Size: 1]
	int PlayerPos;//[Offset: 0x8, Size: 1]
	int CharacterId;//[Offset: 0xc, Size: 1]
	int SkinId;//[Offset: 0x10, Size: 1]
	int HeroExpLevel;//[Offset: 0x14, Size: 1]
	bool HasConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float PlayerSelectTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: PlayAnimationParams

--------------------------------
Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x3f8, Size: 1]
	SolarCharacter* OwnerCharacter;//[Offset: 0x400, Size: 1]
	void UnregisterOverlappingObstacle(const Actor* InObstacle);// 0x211d360
	void RegisterOverlappingObstacle(const Actor* InObstacle);// 0x211d2d0

--------------------------------
Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0x9b8, Size: 1]
	SolarCharacterCameraDataAsset* CharacterCameraConfig;//[Offset: 0x9c8, Size: 1]

--------------------------------
Class: SolarCharacterCameraDataAsset.DataAsset.Object
	float ThirdPersonVerticalOffset;//[Offset: 0x30, Size: 1]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x34, Size: 1]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x38, Size: 1]
	float ThirdPersonHorizontalOffset;//[Offset: 0x3c, Size: 1]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x40, Size: 1]
	float FollowForwardOffsetMultiplier;//[Offset: 0x48, Size: 1]
	float CrouchCameraLagTime;//[Offset: 0x4c, Size: 1]
	float UnCrouchCameraLagTime;//[Offset: 0x50, Size: 1]
	float ShoulderShotVerticalOffset;//[Offset: 0x54, Size: 1]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x58, Size: 1]
	float ShoulderShotHorizontalOffset;//[Offset: 0x5c, Size: 1]
	float ShoulderShotDistanceToTarget;//[Offset: 0x60, Size: 1]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0x68, Size: 1]
	float ShoulderShotCameraFOV;//[Offset: 0x70, Size: 1]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0x74, Size: 1]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0x78, Size: 1]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0x7c, Size: 1]
	float DistanceToScopePivot;//[Offset: 0x80, Size: 1]
	float ArmDistanceToCamera;//[Offset: 0x84, Size: 1]
	float ScopeHorizontalOffset;//[Offset: 0x88, Size: 1]
	float SwimDistanceToTarget;//[Offset: 0x8c, Size: 1]
	float SwimDistSwitchSpeed;//[Offset: 0x90, Size: 1]
	float TakeOffCamPitchMin;//[Offset: 0x94, Size: 1]
	float TakeOffCamPitchMax;//[Offset: 0x98, Size: 1]
	float LandingSpeedThreshold;//[Offset: 0x9c, Size: 1]
	CamEffectSettings ParkourCamSettings;//[Offset: 0xa0, Size: 1]
	Vector CruiseCameraOffset;//[Offset: 0xd8, Size: 1]
	Vector CruiseTargetOffset;//[Offset: 0xe4, Size: 1]
	float CruiseDistanceToTarget;//[Offset: 0xf0, Size: 1]
	Vector SkydiveCameraOffset;//[Offset: 0xf4, Size: 1]
	Vector SkydiveTargetOffset;//[Offset: 0x100, Size: 1]
	float SkydiveDistanceToTarget;//[Offset: 0x10c, Size: 1]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0x110, Size: 1]
	float SkydiveViewPitchMax;//[Offset: 0x114, Size: 1]
	float SkydiveViewPitchMin;//[Offset: 0x118, Size: 1]
	CameraSettings JetFlySettingsVertical;//[Offset: 0x11c, Size: 1]
	CameraSettings JetFlySettingsFront;//[Offset: 0x13c, Size: 1]
	CameraSettings JetFlySettingsBack;//[Offset: 0x15c, Size: 1]
	CameraSettings JetFlySettingsLeft;//[Offset: 0x17c, Size: 1]
	CameraSettings JetFlySettingsRight;//[Offset: 0x19c, Size: 1]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0x1c0, Size: 1]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0x248, Size: 1]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0x2d0, Size: 1]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0x2d8, Size: 1]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0x2dc, Size: 1]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0x2e0, Size: 1]
	class CameraShake* CameraShakeLand;//[Offset: 0x2e8, Size: 1]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0x2f0, Size: 1]
	float CameraShakeLandDistanceMin;//[Offset: 0x2f8, Size: 1]
	float CameraShakeLandDistanceMax;//[Offset: 0x2fc, Size: 1]
	<enum,class CameraShake> CamShakeConfig;//[Offset: 0x300, Size: 1]
	float TargetOffsetLerpSpeed;//[Offset: 0x350, Size: 1]

--------------------------------
Class: CamEffectSettings
	float FadeIn;//[Offset: 0x0, Size: 1]
	float FadeOut;//[Offset: 0x4, Size: 1]
	float Duration;//[Offset: 0x8, Size: 1]
	bool bEnableOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 1]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	CurveVector* RotationCurve;//[Offset: 0x20, Size: 1]
	bool bEnableFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	CurveFloat* FOVCurve;//[Offset: 0x30, Size: 1]

--------------------------------
Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 1]
	float CameraFOV;//[Offset: 0x4, Size: 1]
	Vector TargetOffset;//[Offset: 0x8, Size: 1]
	Vector CameraOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarGlobalEventSystem.GameInstanceSubsystem.Subsystem.Object
	<class SolarGlobalEventBase,ListenerEventsByClass(MulticastInlineDelegateProperty)> ListenerEventsByClass;//[Offset: 0x30, Size: 1]
	<FName,ListenerEventsByName(MulticastInlineDelegateProperty)> ListenerEventsByName;//[Offset: 0x80, Size: 1]
	<GameplayTag,ListenerEventsByGameplayTag(MulticastInlineDelegateProperty)> ListenerEventsByGameplayTag;//[Offset: 0xd0, Size: 1]
	void UnbindGlobalEventByName(FName EventName, out const delegate Event);// 0x21661c0
	void UnbindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x21660d0
	void UnbindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x2165fe0
	void UnbindAllGlobalEventsByName(Object* Unsubscriber, FName EventName);// 0x2165f10
	void UnbindAllGlobalEventsByGameplayTag(Object* Unsubscriber, GameplayTag EventGameplayTag);// 0x2165e40
	void UnbindAllGlobalEventsByClass(Object* Unsubscriber, class SolarGlobalEventBase EventClass);// 0x2165d70
	void GetAllBoundObjectsToEventByName(FName EventName, out Object*[] Objects);// 0x2165970
	void GetAllBoundObjectsToEventByGameplayTag(GameplayTag EventGameplayTag, out Object*[] Objects);// 0x2165880
	void GetAllBoundObjectsToEventByClass(class SolarGlobalEventBase EventClass, out Object*[] Objects);// 0x2165790
	void GetAllActiveGlobalEventsClass(out class SolarGlobalEventBase[] Events);// 0x21656e0
	void GetAllActiveGlobalEventNames(out FName[] Events);// 0x2165630
	void GetAllActiveGlobalEventGameplayTag(out GameplayTag[] Events);// 0x2165580
	void ClearGlobalEventByName(FName EventName, const bool bForceClear);// 0x2165430
	void ClearGlobalEventByGameplayTag(GameplayTag EventGameplayTag, const bool bForceClear);// 0x2165360
	void ClearGlobalEventByClass(class SolarGlobalEventBase EventClass, const bool bForceClear);// 0x2165290
	void ClearAllGlobalEventsClass(const bool bForceClear);// 0x2165200
	void ClearAllGlobalEventNames(const bool bForceClear);// 0x2165170
	void ClearAllGlobalEventGameplayTags(const bool bForceClear);// 0x21650e0
	void CallGlobalEventByName(Object* Publisher, FName EventName, Object* Payload, out const FString[] MetaData);// 0x2164f40
	void CallGlobalEventByGameplayTag(Object* Publisher, GameplayTag EventGameplayTag, Object* Payload, out const FString[] MetaData);// 0x2164da0
	void CallGlobalEventByClass(Object* Publisher, class SolarGlobalEventBase EventClass, Object* Payload, out const FString[] MetaData);// 0x2164c00
	void BindGlobalEventByName(FName EventName, out const delegate Event);// 0x21649f0
	void BindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x2164900
	void BindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x2164810

--------------------------------
Class: SolarGlobalEventBase.Object

--------------------------------
Class: SShotImageInfo
	FString UserId;//[Offset: 0x0, Size: 1]
	FString PlayerId;//[Offset: 0x10, Size: 1]
	FString BattleID;//[Offset: 0x20, Size: 1]
	int64 ScreenshotTime;//[Offset: 0x30, Size: 1]
	int ImageSize;//[Offset: 0x38, Size: 1]
	int ImageWidth;//[Offset: 0x3c, Size: 1]
	int ImageHeight;//[Offset: 0x40, Size: 1]
	FString ImageType;//[Offset: 0x48, Size: 1]
	FString ImageBuffer;//[Offset: 0x58, Size: 1]

--------------------------------
Class: LocTextParam
	FString ParamName;//[Offset: 0x0, Size: 1]
	int LocTextID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: RotationBarMarkWidget.UserWidget.Widget.Visual.Object
	FName FlagName;//[Offset: 0x288, Size: 1]
	FName TextName;//[Offset: 0x290, Size: 1]
	Image* FlagImage;//[Offset: 0x298, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 1]
	Actor* TargetActor;//[Offset: 0x2a8, Size: 1]
	void SetupOrder(int InOrderID);// 0x2649560
	void SetUpdateState(bool ShouldUpdateLocation);// 0xbc2150
	void SetPosition(Vector2D InPosition);// 0x2096720
	void SetFlagIcon(PaperSprite* InSprite);// 0x2096690
	void InitializeMark(Actor* InTargetActor, bool InMoveable);// 0x2095d00
	float GetAngle();// 0x2095b50

--------------------------------
Class: SolarInputModeDataBase

--------------------------------
Class: ScreenshotSetting
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int MaxCountInRound;//[Offset: 0x4, Size: 1]
	bool[] ScreenshotMoment;//[Offset: 0x8, Size: 1]
	int ScreenshotInterval;//[Offset: 0x18, Size: 1]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 1]
	int ScreenshotQuality;//[Offset: 0x20, Size: 1]
	FString ImageSaveType;//[Offset: 0x28, Size: 1]
	enum ScreenshotMode;//[Offset: 0x38, Size: 1]
	int ImageMaxSize;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: FixedAntiCheatData
	int FOV;//[Offset: 0x0, Size: 1]
	byte AxisConstraint;//[Offset: 0x4, Size: 1]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector HeadBoneScale;//[Offset: 0x8, Size: 1]
	bool CurrWeaponRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float LatestTimeDiscrepancyError;//[Offset: 0x18, Size: 1]

--------------------------------
Class: GameplayHitInfo

--------------------------------
Class: SolarSwitchTargetCameraControlComp.ActorComponent.Object
	class SolarSpectateLevelSequenceActor* SpectateLevelSequenceActorClass;//[Offset: 0xb0, Size: 1]
	float CameraBlendCurveHeightScale;//[Offset: 0xb8, Size: 1]
	float CameraBlendSpeed;//[Offset: 0xbc, Size: 1]
	float MinCameraBlendDistanceBetweenTargets;//[Offset: 0xc0, Size: 1]
	SolarSpectateLevelSequenceActor* SpectateLevelSequenceActor;//[Offset: 0x100, Size: 1]
	CameraActor* IntermediatePointCameraActor;//[Offset: 0x118, Size: 1]
	Actor* IntermediateEndTarget;//[Offset: 0x130, Size: 1]
	CameraComponent* EndTargetCameraCache;//[Offset: 0x138, Size: 1]
	void OnViewTargetBlendComplete();// 0x220fc90
	void OnScoutPlayerWorkComplete();// 0x220fc70

--------------------------------
Class: SolarSpectateLevelSequenceActor.LevelSequenceActor.Actor.Object
	SoftObjectPath SwitchTargetSequencePath;//[Offset: 0x2b8, Size: 1]
	FString AtLeastPlayToMark;//[Offset: 0x2d0, Size: 1]
	LevelSequence* SwitchTargetSequence;//[Offset: 0x2f8, Size: 1]
	CineCameraActor* SequenceCamera;//[Offset: 0x300, Size: 1]
	CameraRig_Crane* SequenceCameraRigCrane;//[Offset: 0x308, Size: 1]
	void OnSequenceStoped();// 0x220bcf0
	void OnSequenceFinished();// 0x220bcd0

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x228, Size: 1]
	float CraneYaw;//[Offset: 0x22c, Size: 1]
	float CraneArmLength;//[Offset: 0x230, Size: 1]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 1]
	SceneComponent* CraneYawControl;//[Offset: 0x240, Size: 1]
	SceneComponent* CranePitchControl;//[Offset: 0x248, Size: 1]
	SceneComponent* CraneCameraMount;//[Offset: 0x250, Size: 1]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: SolarPlayerCameraManager.PlayerCameraManager.Actor.Object
	Actor* OldViewTarget;//[Offset: 0x2fc0, Size: 1]
	CameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve;//[Offset: 0x2fc8, Size: 1]
	void OnPlayerGetOnViewTargetVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x21ca5e0
	MinimalViewInfo GetDebugPOV();// 0x21c7b40

--------------------------------
Class: CameraModifier_CameraShakeWithCurve.CameraModifier.Object
	<class CameraShakeWithCurve,CameraShakeWithCurvePool> ShakePoolByClass;//[Offset: 0x48, Size: 1]
	CameraShakeWithCurveTemplatePool[] ShakePoolByTemplate;//[Offset: 0x98, Size: 1]
	ActiveCameraShakeWithCurve[] ActiveShakes;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CameraShakeWithCurvePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraShakeWithCurve.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bDisableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	CameraModifier_CameraShakeWithCurve* Modifier;//[Offset: 0x30, Size: 1]
	float ShakeTime;//[Offset: 0x38, Size: 1]
	RuntimeFloatCurve ShakeCurve;//[Offset: 0x40, Size: 1]
	CameraShakeWithCurve_Element*[] ShakeElements;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: CameraShakeWithCurve_Element.Object

--------------------------------
Class: CameraShakeWithCurveTemplatePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ActiveCameraShakeWithCurve
	CameraShakeWithCurve* ShakeInstance;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BP_HUD_BattleRoyaleMap01_C.BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object

--------------------------------
Class: BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object

--------------------------------
Class: BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a0, Size: 1]
	MulticastInlineDelegateProperty OnWindowVisibiltyChanged;//[Size: 1]
	void RemoveInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void AddInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void BP_SCustomHUDBase_AutoGenFunc(Object* Publisher, Object* Payload, out const FString[] MetaData, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void EventOnWindowVisibiltyChanged(byte UIType, byte Visibility);// 0x2649560
	void ExecuteUbergraph_BP_HUD_Framework(int EntryPoint, byte K2Node_CustomEvent_UIType, byte K2Node_CustomEvent_Visibility, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2649560
	void OnWindowVisibiltyChanged__DelegateSignature(byte UIType, byte Visibility);// 0x2649560

--------------------------------
Class: BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object

--------------------------------
Class: BattleHUDBase.SolarHUD.HUD.Actor.Object
	class HUDDispatcherBase* Dispatcher;//[Offset: 0x318, Size: 1]
	HUDDispatcherBase* WidgetEventDispatcher;//[Offset: 0x320, Size: 1]
	bool bUseBattleDeathView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	SolarPlayersHPModel* PlayersHPModel;//[Offset: 0x330, Size: 1]
	SolarPlayersShieldModel* PlayersShieldModel;//[Offset: 0x338, Size: 1]
	SolarTeamInfoModel* TeamInfoModelModel;//[Offset: 0x340, Size: 1]
	void ShowDiePage_Deprecated();// 0x200b600
	void OnPlayerStateRepInController(enum RepType, PlayerState* PlayerState);// 0x200ad60
	void OnPlayerStateRepInCharacter(enum RepType, PlayerState* PlayerState);// 0x200ac90
	void OnNewTeamInfo(SolarTeamInfo* TeamInfo);// 0x200aaa0
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x200a8f0
	UISubsystem* GetUISubSystem();// 0x200a7d0
	void CloseDiePage_Deprecated(const class UserWidget InDiePageClass);// 0x200a4a0

--------------------------------
Class: SolarHUD.HUD.Actor.Object

--------------------------------
Class: HUDDispatcherBase.Object
	MulticastInlineDelegateProperty OnSkydivingLeaderIndexReplicated;//[Size: 1]
	MulticastInlineDelegateProperty OnSkydivingMemberStatusUpdated;//[Size: 1]
	delegate TrySkydiveUnfollow;//[Offset: 0x58, Size: 1]
	float SkydivingLeaderTransferCooldown;//[Offset: 0xc0, Size: 1]
	float SkydivingLeaderVoiceCooldown;//[Offset: 0xc4, Size: 1]
	MulticastInlineDelegateProperty OnTeammateStateReplicated;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammatePlayerStateReplicated;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterPSInGameChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerOperationInGameChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammatePSRemoveWhenPreparation;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammatePSRemoveWhenBattle;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateHPChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateShieldChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateReviveItemChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateReviveManagerChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateReviveStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateResurrectTimeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateCallForHelpNotify;//[Size: 1]
	MulticastInlineDelegateProperty OnKillLeaderChangedNotify;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateNetStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnNavMapMarked;//[Size: 1]
	MulticastInlineDelegateProperty OnNavMapMarkCleared;//[Size: 1]
	MulticastInlineDelegateProperty OnTalentInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateCharacterIdChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateSkinIdChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkillCDStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateTalentStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSpecTargetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBindHPPanelDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnBindItemPanelDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnBindPowerBarDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRefreshBackpackItemDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRefreshBackpackEquipDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRefreshBackpackWeaponDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRefreshBackpackWeaponPartDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnRefreshBroadCastModeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnSetActiveOpenBoxBtnDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnSetActiveOpenBoxProgressDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnSetTreasureBoxActorDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnSetAirdropBoxActorDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnHideTreasureBoxUIDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnHideAirdropBoxUIDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnSetPickupSwitchDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnAirdropCharChangeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnAirdropProgressChangeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerNumberChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCapsulePlayerNumChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBombingStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnBombingStopped;//[Size: 1]
	MulticastInlineDelegateProperty OnItemDiscarded;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingRequestOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingRequestClosed;//[Size: 1]
	MulticastInlineDelegateProperty OnMigrateAccountVisibilityRequestChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomizeVisibilityRequestChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDriveCustomizeOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnDriveCustomizeClosed;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackTookPickup;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackReleasedPickup;//[Size: 1]
	MulticastInlineDelegateProperty OnToggleCursorVisibility;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackVisibilitySet;//[Size: 1]
	MulticastInlineDelegateProperty OnElectricShopVisibilitySet;//[Size: 1]
	MulticastInlineDelegateProperty OnBigMapVisibilitySet;//[Size: 1]
	MulticastInlineDelegateProperty OnRescueBtnVisibilitySet;//[Size: 1]
	MulticastInlineDelegateProperty OnBuyResurrectBtnVisibilitySet;//[Size: 1]
	MulticastInlineDelegateProperty OnBigMapCloseButtonClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupFlagChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupListVisibilityChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupItemSet;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupItemCalculated;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupCheckValidUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupCheckHighlightUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupCheckStatesUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupItemSelected;//[Size: 1]
	MulticastInlineDelegateProperty OnTogglePickupDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDead;//[Size: 1]
	MulticastInlineDelegateProperty OnJoyStickSprintStateReset;//[Size: 1]
	MulticastInlineDelegateProperty OnJoyStickInputReset;//[Size: 1]
	MulticastInlineDelegateProperty OnJoyStickResetAll;//[Size: 1]
	MulticastInlineDelegateProperty OnTutorialSequenceRequested;//[Size: 1]
	MulticastInlineDelegateProperty OnDrivingTutorialStopped;//[Size: 1]
	MulticastInlineDelegateProperty OnFireButtonsInputReset;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamDeathMatchLeaderboard;//[Size: 1]
	MulticastInlineDelegateProperty OnGameModeChangeWeapon;//[Size: 1]
	bool bBackpackVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	bool bElectricShopVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 1]
	bool bBigMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x652, Size: 1]
	bool bMapVehicleSpawnListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x653, Size: 1]
	bool bRescueBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 1]
	bool bBuyResurrectBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x655, Size: 1]
	MulticastInlineDelegateProperty OnInBattle;//[Size: 1]
	MulticastInlineDelegateProperty OnNotInBattle;//[Size: 1]
	MulticastInlineDelegateProperty OnRadarStationUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnAngleViewEnabled;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterSwimStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterWaterClimbAvailable;//[Size: 1]
	delegate OnHitTraceUpdated;//[Offset: 0x6b8, Size: 1]
	MulticastInlineDelegateProperty OnHitTraceRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnHitTraceCleared;//[Size: 1]
	MulticastInlineDelegateProperty OnProfessionFunctionalChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnBackpackModeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupListAdd;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupListRemove;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRepliableMessageChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerFlagDisplayChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateModeEntered;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateModeExited;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateReferToChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateTargetItemsChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMarkButtonHoverChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMarkButtonTouchMoved;//[Size: 1]
	MulticastInlineDelegateProperty OnMarkButtonBeenLongPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnMarkButtonDragSelectEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnBattleModeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterSet;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterIDSet;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterHPChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterDead;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterEnterWater;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterSelfRebirth;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterLevelUp;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterGainExp;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterLevelExpChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterAllReady;//[Size: 1]
	MulticastInlineDelegateProperty OnBattleUpgradeEffect;//[Size: 1]
	MulticastInlineDelegateProperty OnSelectingBattleUpgradeEffectBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnSelectingBattleUpgradeEffectFinish;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateBattleUpgradeEffectUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnTeammateRebirth;//[Size: 1]
	MulticastInlineDelegateProperty OnDamagingActorsChange;//[Size: 1]
	MulticastInlineDelegateProperty OnAimingEnemy;//[Size: 1]
	MulticastInlineDelegateProperty OnScoutCharactersChange;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterLevelChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRapidBoostActivationChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTrySpawnSuperRadar;//[Size: 1]
	MulticastInlineDelegateProperty OnSuperScaningStart;//[Size: 1]
	MulticastInlineDelegateProperty OnSuperScaningRemovePlayer;//[Size: 1]
	MulticastInlineDelegateProperty OnSuperScaningEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnSuperScanCameraMoveForward;//[Size: 1]
	MulticastInlineDelegateProperty OnSuperScanCameraMoveRight;//[Size: 1]
	MulticastInlineDelegateProperty OnSuperScaningWidgetShow;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityChange;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityStartCD;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityEndCD;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityCDDurationChange;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityStartCDUTCTimeUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityStateChange;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityContinous;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityBuffContinous;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityBuffUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityBuffEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityBuffPause;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityBuffResume;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityHideControlHUD;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityInputAction;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityAddSummonBuff;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleAbilityUsingStatusChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterNightComesActorChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMobileWeaponInputAction;//[Size: 1]
	MulticastInlineDelegateProperty OnRoleGEShieldMultiRecoverCoolDownEffect;//[Size: 1]
	MulticastInlineDelegateProperty OnMemberFlagIDChanged01;//[Size: 1]
	MulticastInlineDelegateProperty OnMemberFlagIDChanged02;//[Size: 1]
	MulticastInlineDelegateProperty OnMemberFlagIDChanged03;//[Size: 1]
	MulticastInlineDelegateProperty OnMemberFlagIDChanged04;//[Size: 1]
	MulticastInlineDelegateProperty OnSideAttributeSetRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnSideAttributeSetAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnSideAttributeSetChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDrivingStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleWeaponAbilityActivated;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleScopeInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleScopeValueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipVehicleWeaponDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleWeaponScopeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnTransformerChangeWeaponDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleTypeChangeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleWeaponNoAmmoAlert;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleAbilityActivationChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMapVehicleSpawnListInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnInputSprintLockStart;//[Size: 1]
	MulticastInlineDelegateProperty OnSprintIconActived;//[Size: 1]
	MulticastInlineDelegateProperty OnSprintIconHide;//[Size: 1]
	MulticastInlineDelegateProperty OnSprintLockIconActived;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamMessageReceive;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetForbiddenChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetForbiddenChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetTotalTimesSet;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetTotalTimesSet;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetRestTimesSet;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetRestTimesSet;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetChargeStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetCDStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetChargeStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetCDStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetTimesCharging;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetTimesCharging;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetCoolingDown;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetCoolingDown;//[Size: 1]
	MulticastInlineDelegateProperty OnVJetModuleLevelChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHJetModuleLevelChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkydiveFlyStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSkydiveAltitudeUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnSkydiveSpeedUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnShowGameNoticeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnStartCountDownDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnStopCountDownDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnHideInteractionListRequested;//[Size: 1]
	MulticastInlineDelegateProperty OnCancelHideInteractionListRequested;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractionTriggerAppear;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractionTriggerDisappear;//[Size: 1]
	MulticastInlineDelegateProperty OnStartInteractionCountDown;//[Size: 1]
	MulticastInlineDelegateProperty OnStopInteractionCountDown;//[Size: 1]
	MulticastInlineDelegateProperty OnStartReviveTeammateCountDownDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnStopReviveTeammateCountDownDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveWillBeDisabledHintDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnStartReviveItemRecycleCountDownDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnOverlapElectricShopDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateVehicleInteractionDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCruiseHeightSet;//[Size: 1]
	MulticastInlineDelegateProperty OnEnterCruisingDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEnterParachutingDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEnterLandingDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopWeaponUpgradeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopShieldUpgradeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopPurchaseSuccessDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopItemCDRefreshDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopItemRefreshDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopSlotWeaponUpgradeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopWeaponChangeDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnEShopPoolRefreshDelegate;//[Size: 1]
	MulticastInlineDelegateProperty TryOpenElectricShopDelegate;//[Size: 1]
	delegate OnTeammateHomePanelGetting;//[Offset: 0xfc8, Size: 1]
	delegate OnHomeBattleUIGetting;//[Offset: 0xfd8, Size: 1]
	delegate OnHomeMainBuildGetting;//[Offset: 0xfe8, Size: 1]
	delegate OnHomeFriendListGetting;//[Offset: 0xff8, Size: 1]
	delegate OnHomeLevelUpUIGetting;//[Offset: 0x1008, Size: 1]
	MulticastInlineDelegateProperty OnShieldAvailableChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRechargeShieldEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldFXUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldValueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMaxShieldValueUpdate;//[Size: 1]
	MulticastInlineDelegateProperty FOnSteamRechargeShield;//[Size: 1]
	MulticastInlineDelegateProperty TryCancelCountDown;//[Size: 1]
	MulticastInlineDelegateProperty OnEnemyShieldChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnEnemyShieldValueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldUpgradeStart;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldUpgradeInterrupt;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldUpgradeFinish;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldUpgradeItemCountChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShieldUpgradeItemCountChangedBP;//[Size: 1]
	MulticastInlineDelegateProperty OnAckShieldUpgradeShopInteract;//[Size: 1]
	delegate TryOpenTreasureBoxDelegate;//[Offset: 0x1118, Size: 1]
	delegate TryOpenAirDropTreasureBoxDelegate;//[Offset: 0x1128, Size: 1]
	MulticastInlineDelegateProperty TryCancelAirDropTreasureBoxDelegate;//[Size: 1]
	delegate TryPickupFirstItemDelegate;//[Offset: 0x1148, Size: 1]
	delegate CheckPickupItemValidDelegate;//[Offset: 0x1158, Size: 1]
	MulticastInlineDelegateProperty SelectPreviousItem;//[Size: 1]
	MulticastInlineDelegateProperty SelectNextItem;//[Size: 1]
	MulticastInlineDelegateProperty OnPickupEntryPlayAnim;//[Size: 1]
	MulticastInlineDelegateProperty OnRequstPickupEntryPlayAnim;//[Size: 1]
	MulticastInlineDelegateProperty OnRequstPickupEntryPlayAnimCustom;//[Size: 1]
	MulticastInlineDelegateProperty NotifyTeammateReviving;//[Size: 1]
	delegate OnInteractEvent;//[Offset: 0x11d8, Size: 1]
	MulticastInlineDelegateProperty OnBattleControlTeammateStateRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnSetBackpackDropMaskVisibility;//[Size: 1]
	MulticastInlineDelegateProperty OnEndBackpackDragDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnBattleHUDVisibilityChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMicroPhonePressed;//[Size: 1]
	MulticastInlineDelegateProperty OnSpeakerPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnSwitchEMP;//[Size: 1]
	MulticastInlineDelegateProperty OnToggleAssitAim;//[Size: 1]
	MulticastInlineDelegateProperty OnToggleAutoFire;//[Size: 1]
	MulticastInlineDelegateProperty OnTreatmentEnd;//[Size: 1]
	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);// 0x2649560
	void VehicleWeaponNoAmmoAlert__DelegateSignature();// 0x2649560
	void VehicleTypeChanged__DelegateSignature();// 0x2649560
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, byte InAbilityIndex, float InDurationTime);// 0x2649560
	void TwoIntUIInteractDelegate__DelegateSignature(int Value01, int Value02);// 0x2649560
	void TwoIntImplementableDelegate__DelegateSignature(int Value01, int Value02);// 0x2649560
	bool TrySkydiveUnfollow__DelegateSignature();// 0x2649560
	void TransformerWeaponChanged__DelegateSignature(enum InType);// 0x2649560
	void ToggledBigMapVisibility();// 0x233b290
	void ToggledBackpackVisibility();// 0x233b270
	void StopDrivingTutorial();// 0x233b250
	void SprintLockIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x2649560
	void SolarPlayerStateDelegate__DelegateSignature(SolarPlayerState* InPlayerState);// 0x2649560
	void SimpleUIInteractDelegate__DelegateSignature();// 0x2649560
	void SimpleTriggerDelegate__DelegateSignature();// 0x2649560
	void SimpleStringDelegate__DelegateSignature(FString Value);// 0x2649560
	void SimpleSpectatorDelegate__DelegateSignature();// 0x2649560
	void SimplePlayerStateDelegate__DelegateSignature(SolarPlayerState* TeammatePS);// 0x2649560
	void SimpleOnRefreshDelegate__DelegateSignature();// 0x2649560
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup);// 0x2649560
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int InIthisID);// 0x2649560
	bool SimpleOnBindRetDelegate__DelegateSignature();// 0x2649560
	void SimpleOnBindDelegate__DelegateSignature();// 0x2649560
	void SimpleImplementableDelegate__DelegateSignature();// 0x2649560
	void SimpleFloatDelegate__DelegateSignature(float Value);// 0x2649560
	void SimpleCharacterLuaDelegate__DelegateSignature();// 0x2649560
	void SimpleBoolDelegate__DelegateSignature(bool Value);// 0x2649560
	void ShowSuperScanChooseUI(bool bShow);// 0x233b0f0
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(const int ShieldLevel, const int ShieldMaxLevel, const int ShieldUpgradeItemNum, const int NeedShieldUpgradeItemNum, const int MaxShieldUpgradeItemNum);// 0x2649560
	void SetRescueBtnVisibility(bool bVisible);// 0x233af40
	void SetMapVehicleSpawnListVisibility(bool bVisible);// 0x233aeb0
	void SetElectricShopVisibility(bool bVisible);// 0x233ac80
	void SetBuyResurrectBtnVisibility(const bool bVisible);// 0x233aad0
	void SetBigMapVisibility(bool bVisible);// 0x233aa40
	void SetBackpackVisibility(bool bInValue);// 0x233a9b0
	void RequestHideInteractionList();// 0x233a790
	void RequestCancelHideInteractionList();// 0x233a770
	void RemoveItemFromPickup(Object* InCardItem, const bool bPickup);// 0x233a6a0
	void PlayerTutorialSequence(const bool bPlay);// 0x233a610
	void PickupListRemoveDelegate__DelegateSignature(Object* CardItem, bool bPickup);// 0x2649560
	void PickupListDelegate__DelegateSignature(Object* CardItem);// 0x2649560
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);// 0x2649560
	void OnWidgetButtonClicked__DelegateSignature();// 0x2649560
	void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive);// 0x2649560
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue);// 0x2649560
	void OnVehicleScopeInitialized__DelegateSignature(UserWidget* Widget, bool bInSpectate);// 0x2649560
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum UiState, SolarVehiclePawn* InVehicleComponent);// 0x2649560
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);// 0x2649560
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn);// 0x2649560
	void OnTreatmentDelegate__DelegateSignature();// 0x2649560
	void OnTeamMessageReceive__DelegateSignature(FString MemberName, FString Message1, bool bLocalPlayer, bool bSound, int PosInTeam, FString Message2);// 0x2649560
	void OnTeammateTalentStateChanged__DelegateSignature(enum TalentState, byte PosInTeam, float AdditionalParam);// 0x2649560
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);// 0x2649560
	void OnTeammateShieldChanged__DelegateSignature(byte PosInTeam, out const ShieldInfo OldShield, out const ShieldInfo NewShield);// 0x2649560
	void OnTeammateReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer, SolarPlayerState* SolarPlayerState);// 0x2649560
	void OnTeammateReviveItemChanged__DelegateSignature(byte PosInTeam, byte ReviveItemNum, bool bCanRebirth);// 0x2649560
	void OnTeammateResurrectTimeChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, int ResurrectTime);// 0x2649560
	void OnTeammateRescueStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x2649560
	void OnTeammatePlatStateRemove__DelegateSignature(byte PosInTeam, bool bLastOne);// 0x2649560
	void OnTeammateIntegerDataChanged__DelegateSignature(int Data, byte PosInTeam);// 0x2649560
	void OnTeammateHPChanged__DelegateSignature(byte PosInTeam, float CurrentHP, float MaxHP);// 0x2649560
	void OnTeammateCallForHelpNotify__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x2649560
	void OnTeammateBattleStateChanged__DelegateSignature(SCMPlayerState* TeammateState);// 0x2649560
	void OnTeammateActionStateChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, const GameplayTag Tag, int NewCount);// 0x2649560
	void OnSwitchEMP__DelegateSignature(SolarCharacter* InCharacter, bool InbSwitchOnEMP);// 0x2649560
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow);// 0x2649560
	void OnSuperScaningStart__DelegateSignature(out const FString[] InScanPlayers);// 0x2649560
	void OnSuperScaningRemovePlayer__DelegateSignature(FString InRemovePlayer);// 0x2649560
	void OnSuperScaningEnd__DelegateSignature();// 0x2649560
	void OnStopCountDownDelegate__DelegateSignature(const int InTextId);// 0x2649560
	void OnSteamRechargeShieldDecl__DelegateSignature(const bool bUseBigRecharger);// 0x2649560
	void OnStartCountDownDelegate__DelegateSignature(out const CountDownInfo InCountDownInfo);// 0x2649560
	void OnSprintIconHide__DelegateSignature();// 0x2649560
	void OnSprintIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x2649560
	void OnSpectateTargetItemsChanged__DelegateSignature(ReplicateItemData[] InItemDatas);// 0x2649560
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x233a520
	void OnSpectateReferToChanged__DelegateSignature(const SolarPlayerState* ReferToPlayerState, enum State);// 0x2649560
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2649560
	void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage);// 0x2649560
	void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int Assist);// 0x2649560
	void OnSpecTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x2649560
	void OnSkydivingMemberDataUpdated__DelegateSignature(SolarPlayerState* MemberPS);// 0x2649560
	void OnSkydivingFollowRequestResponded__DelegateSignature(SolarPlayerState* Follower, bool bAgreed);// 0x2649560
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);// 0x2649560
	void OnSkydiveFlyStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x2649560
	void OnSkydiveDataUpdate__DelegateSignature(float NewData);// 0x2649560
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);// 0x2649560
	void OnSkillActivationChanged__DelegateSignature(bool bActivated);// 0x2649560
	void OnSideAttributeSetRemoved__DelegateSignature(FString SideName);// 0x2649560
	void OnSideAttributeSetChanged__DelegateSignature(FString SideName, out const SideAttributeSet SideRef);// 0x2649560
	void OnShowGameNotice__DelegateSignature(const int InNoticeID, out const HUDNoticeParams InNoiceParams);// 0x2649560
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2649560
	void OnShieldDelegate__DelegateSignature();// 0x2649560
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x2649560
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);// 0x2649560
	void OnSetTreasureBoxActorDelegate__DelegateSignature(Actor* InActor);// 0x2649560
	void OnSetPickupSwitchDelegate__DelegateSignature(enum InType, bool InFlag);// 0x2649560
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible);// 0x2649560
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);// 0x2649560
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int SelectedIndex);// 0x2649560
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x2649560
	void OnScoutedCharactersChange__DelegateSignature(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x2649560
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int NewCount);// 0x2649560
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x2649560
	void OnRoleAbilityStateChange__DelegateSignature(int RoleAbilityIndex, int State);// 0x2649560
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int RoleAbilityIndex, float InServerTime);// 0x2649560
	void OnRoleAbilityStartCD__DelegateSignature(int RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay);// 0x2649560
	void OnRoleAbilityInputAction__DelegateSignature(int RoleAbilityIndex, bool bPress, bool bCanActive);// 0x2649560
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide);// 0x2649560
	void OnRoleAbilityEndCD__DelegateSignature(int RoleAbilityIndex);// 0x2649560
	void OnRoleAbilityEnd__DelegateSignature(int RoleAbilityIndex);// 0x2649560
	void OnRoleAbilityContinous__DelegateSignature(int RoleAbilityIndex, bool bTurnOn, float Duration);// 0x2649560
	void OnRoleAbilityChange__DelegateSignature(int RoleAbilityIndex, bool bHaveAbility, int CharacterId, int PlayerLevel);// 0x2649560
	void OnRoleAbilityCDDurationChange__DelegateSignature(int RoleAbilityIndex, int Duration, bool bDurationReduced);// 0x2649560
	void OnRoleAbilityBuffUpdate__DelegateSignature(out const ActiveGameplayEffectHandle ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime);// 0x2649560
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex);// 0x2649560
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, out const ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x2649560
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex, float Duration, float PreDuration, out const ActiveGameplayEffectHandle ActiveEffectHandle);// 0x2649560
	void OnRoleAbilityAddSummonBuff__DelegateSignature(out const SoftObjectPath ImagePath, const Actor* InActor);// 0x2649560
	void OnReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer);// 0x2649560
	void OnRepliableMessageChanged__DelegateSignature();// 0x2649560
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead);// 0x2649560
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);// 0x2649560
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);// 0x2649560
	void OnPlayerDead__DelegateSignature(out const KillInfo DeathMsgInfo);// 0x2649560
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);// 0x2649560
	void OnPickupItemSet__DelegateSignature(out const Actor*[] ObjectList, enum Type);// 0x2649560
	void OnPickupItemSelected__DelegateSignature(Object* SelectWidget, int SelectWidgetThisID);// 0x2649560
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);// 0x2649560
	void OnPickupCheckValidUpdated__DelegateSignature(out const ItemCountsList ItemCountsList);// 0x2649560
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);// 0x2649560
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum Type, bool IsRecommend);// 0x2649560
	void OnOverlapElectricShopDelegate__DelegateSignature(const bool InOverlap);// 0x2649560
	void OnNavMapMarked__DelegateSignature(byte PosInTeam, out const Vector2D MarkPosition);// 0x2649560
	void OnNavMapMarkCleared__DelegateSignature(byte PosInTeam);// 0x2649560
	void OnMobileWeaponInputAction__DelegateSignature(byte InButtonType);// 0x2649560
	void OnMemberFlagIDChanged__DelegateSignature(int FlagID, bool bClanFlag);// 0x2649560
	void OnMaxShieldValueUpdate__DelegateSignature(const float MaxShieldVal);// 0x2649560
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, Vector2D TouchLocalPos);// 0x2649560
	void OnMarkButtonSimpleTriggered__DelegateSignature();// 0x2649560
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);// 0x2649560
	void OnKillLeaderChangedNotify__DelegateSignature(SolarPlayerState* KillLeader);// 0x2649560
	void OnJetTimesChanged__DelegateSignature(int NewTimes);// 0x2649560
	void OnJetModuleLevelChanged__DelegateSignature(int NewLevel);// 0x2649560
	void OnJetFlyStateChanged__DelegateSignature(bool bStart);// 0x2649560
	void OnJetFlyForbiddenChanged__DelegateSignature(enum ForbiddenType, bool bAdded);// 0x2649560
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);// 0x2649560
	void OnInteractionTriggerDelegate__DelegateSignature(out const InteractionTriggerInfo TriggerInfo);// 0x2649560
	void OnInputTypeChanged__DelegateSignature(SolarPlayerState* PlayerState);// 0x2649560
	void OnInputSprintLockStart__DelegateSignature();// 0x2649560
	void OnInitElectricShopDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x2649560
	UserWidget* OnHomelandGetWidget__DelegateSignature();// 0x2649560
	int OnHitTraceUpdated__DelegateSignature(int HitTraceID, enum HitTraceType, float Angle, float WidgetScale);// 0x2649560
	void OnHideUIByThisIDDelegate__DelegateSignature(int64 InThisID);// 0x2649560
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2649560
	void OnEShopWeaponChangeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x2649560
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int InWeaponSlot);// 0x2649560
	void OnEShopShieldUpgradeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x2649560
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int InProductID, SolarCharacter* InCharacter);// 0x2649560
	void OnEShopInfoUpdateDelegate__DelegateSignature(SolarElectricShop* InElectricShop);// 0x2649560
	void OnEnemyShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2649560
	void OnEnemyShieldChanged__DelegateSignature(FString SolarPlayerID, float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x2649560
	void OnDrivingTutorialStopped__DelegateSignature();// 0x2649560
	void OnDrivingStateChanged__DelegateSignature(enum DriveState);// 0x2649560
	void OnDamagingActorsChange__DelegateSignature();// 0x2649560
	void OnCreateReviveWorldMarkDelegate__DelegateSignature(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x2649560
	void OnCharacterStateChanged__DelegateSignature();// 0x2649560
	void OnCharacterSet__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x2649560
	void OnCharacterSelfRebirth__DelegateSignature(SolarCharacter* RebirthCharacter);// 0x2649560
	void OnCharacterRescueStateChanged__DelegateSignature(byte NewRescueState);// 0x2649560
	void OnCharacterNightComesActorChanged__DelegateSignature(Actor* InActor);// 0x2649560
	void OnCharacterLevelUp__DelegateSignature(int NewLevel, int OldLevel);// 0x2649560
	void OnCharacterLevelExpChanged__DelegateSignature(int NewLevel, float NewExpRatio);// 0x2649560
	void OnCharacterLevelChanged__DelegateSignature(int InLevel);// 0x2649560
	void OnCharacterIDSet__DelegateSignature(int CharacterId);// 0x2649560
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);// 0x2649560
	void OnCharacterGainExp__DelegateSignature(int ExpAdded);// 0x2649560
	void OnCharacterDead__DelegateSignature(SolarCharacter* InCharacter);// 0x2649560
	void OnCharacterAllReady__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x2649560
	void OnBombingStarted__DelegateSignature(int BombId, out const Vector Location, float Radius);// 0x2649560
	void OnBattleUpgradeEffect__DelegateSignature(enum EffectType, int ParamSum);// 0x2649560
	void OnBattleModeChanged__DelegateSignature(byte NewModeType);// 0x2649560
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible);// 0x2649560
	void OnBackpackTookPickup__DelegateSignature(out const Vector2D NewPosition);// 0x2649560
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(AirDropTreasureBox* InAirdropBox);// 0x2649560
	void OnAimingEnemy__DelegateSignature(SolarCharacter* InEnemy);// 0x2649560
	void MapVehicleSpawnListInitialized__DelegateSignature();// 0x2649560
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int TeamIndex, FString playerName, bool IsLocalPlayer);// 0x2649560
	void JoyStickSimpleDeleghate__DelegateSignature();// 0x2649560
	bool IsElectricShopVisible();// 0x233a2c0
	bool IsBigMapVisible();// 0x233a100
	void IntUIInteractDelegate__DelegateSignature(int Value);// 0x2649560
	void IntImplementableDelegate__DelegateSignature(int Value);// 0x2649560
	void InternalCallSkydiveSpeed();// 0x233a0e0
	void InternalCallSkydiveFlyStateChanged();// 0x233a0c0
	void IntCharacterLuaDelegate__DelegateSignature(int Value);// 0x2649560
	void IntBackpackDelegate__DelegateSignature(int Value);// 0x2649560
	SolarUserWidget* GetWorldMarkPanel();// 0x233a070
	UserWidget* GetTeammateHomePanel();// 0x2339f70
	static HUDDispatcherBase* GetHUDDispatcher_FromUI(const Widget* InWidget);// 0x2339d60
	static HUDDispatcherBase* GetHUDDispatcher_FromPC(const PlayerController* InPC);// 0x2339cd0
	static HUDDispatcherBase* GetHUDDispatcher_FromHUD(const HUD* InHUD);// 0x2339c40
	static HUDDispatcherBase* GetHUDDispatcher_FromCharacter(const SolarCharacter* InCharacter, bool bCheckControlled);// 0x2339b70
	UserWidget* GetHomeMainBuild();// 0x2339e80
	UserWidget* GetHomeLevelUpUI();// 0x2339e50
	UserWidget* GetHomeFriendList();// 0x2339e20
	UserWidget* GetHomeBattleUI();// 0x2339df0
	void EquipVehicleWeapon__DelegateSignature(SolarVehicleWeapon* InVehicleWeapon);// 0x2649560
	void BroadcastVJetForbiddenChanged(enum Types, bool bAdded);// 0x2339740
	void BroadcastVJetCDStateChanged(bool bCD);// 0x23396b0
	void BroadcastTrySpawnSuperRadar(bool bSpawn);// 0x2339620
	bool BroadcastTryPickupFirstItem(const bool bAutoPickup);// 0x2339580
	void BroadcastToggleCursorVisibility(const bool bIsVisible);// 0x23394f0
	void BroadcastToggleAutoFire();// 0x23394d0
	void BroadcastToggleAssitAim();// 0x23394b0
	void BroadcastSpectateTargetItemsChanged(out const ReplicateItemData[] InItemDatas);// 0x2339400
	void BroadcastSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x2339330
	void BroadcastSpectateBattleUpgradeEffectUpdate(SolarSpectateInfo* SpectateInfo);// 0x23392a0
	void BroadcastSkydiveSpeed();// 0x2339280
	bool BroadcastShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2339090
	void BroadcastShieldUpgradeStart();// 0x2339070
	void BroadcastShieldUpgradeShopInteract();// 0x2339050
	void BroadcastShieldUpgradeItemCountChanged(const int NewCount, const int LastCount);// 0x2338f80
	void BroadcastShieldUpgradeInterrupt();// 0x2338f60
	void BroadcastShieldUpgradeFinish();// 0x2338f40
	void BroadcastShieldFXUpdated();// 0x2338f20
	bool BroadcastShieldChanged(const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x2338dc0
	bool BroadcastShieldAvailable(const bool bAvailable);// 0x2338d20
	void BroadcastSettingRequestOpened(const int InOwnerType);// 0x2338c90
	void BroadcastSettingRequestClosed();// 0x2338c70
	void BroadcastSetBackpackDropMaskVisibility(const bool bVisible);// 0x2338be0
	void BroadcastSelectPreviousItem();// 0x2338a00
	void BroadcastSelectNextItem();// 0x23389e0
	void BroadcastSelectingBattleUpgradeEffectFinish(int SelectedIndex);// 0x2338b50
	void BroadcastSelectingBattleUpgradeEffectBegin(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x2338a20
	void BroadcastScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x2338780
	void BroadcastRescueBtnVisibility();// 0x2338730
	void BroadcastRequsetPickupEntryPlayAnimCustom(Object* InCustomObj);// 0x23386a0
	void BroadcastRequsetPickupEntryPlayAnim(const int InThisID);// 0x2338610
	void BroadcastProfessionFunctionalChanged(const bool bEnabled);// 0x2338580
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay);// 0x23384f0
	void BroadcastPickupToggleChanged();// 0x23384d0
	void BroadcastPickupEntryPlayAnim(const float InAnimTime);// 0x2338450
	void BroadcastOnTeammateStateChangedDelegate();// 0x2338430
	void BroadcastOnTeammateRebirth();// 0x2338410
	void BroadcastOnStopRescueTeammateCountDown(const int InTextId);// 0x2338380
	void BroadcastOnStopInteractionCountDown(out const CountDownInfo InCountInfo);// 0x2338240
	void BroadcastOnStopCountDownDelegate(const int InTextId);// 0x23381b0
	void BroadcastOnStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x23380e0
	void BroadcastOnStartRescueTeammateCountDown(out const CountDownInfo InCountDownInfo);// 0x2337fa0
	void BroadcastOnStartInteractionCountDown(out const CountDownInfo InCountInfo);// 0x2337e60
	void BroadcastOnStartCountDownDelegate(out const CountDownInfo InCountDownInfo);// 0x2337d20
	void BroadcastOnSkydiveFlyStateChanged();// 0x2337d00
	void BroadcastOnShowGameNoticeDelegate(const int InNoticeID, out const HUDNoticeParams InNoticeParams);// 0x2337bb0
	void BroadcastOnSetTreasureBoxActorDelegate(Actor* InActor);// 0x2337b20
	void BroadcastOnSetPickupSwitchDelegate(const enum InType, const bool InFlag);// 0x2337a50
	void BroadcastOnSetAirdropBoxActorDelegate(Actor* InActor);// 0x23379c0
	void BroadcastOnSetActiveOpenBoxProgressDelegate(const bool Inactive);// 0x2337930
	void BroadcastOnSetActiveOpenBoxBtnDelegate(const bool Inactive);// 0x23378a0
	void BroadcastOnRightMouseButtonDownEvent();// 0x2337880
	void BroadcastOnReviveWorldMarkPlayAnim(SolarPlayerState* InPlayerState);// 0x23377f0
	void BroadcastOnReviveWillBeDisabledHint(const int HintDuration);// 0x2337760
	void BroadcastOnReviveStateChanged(SolarPlayerState* RevivingMeTeammatePlayer);// 0x23376d0
	void BroadcastOnReviveDisabledHint();// 0x23376b0
	void BroadcastOnRemoveReviveWorldMark(SolarPlayerState* InPlayerState);// 0x2337620
	void BroadcastOnRemoveAllReviveWorldMark();// 0x2337600
	void BroadcastOnRefreshBackpackWeaponPartDelegate();// 0x23375e0
	void BroadcastOnRefreshBackpackWeaponDelegate();// 0x23375c0
	void BroadcastOnRefreshBackpackItemDelegate();// 0x23375a0
	void BroadcastOnRefreshBackpackEquipDelegate();// 0x2337580
	void BroadcastOnOverlapElectricShopDelegate(const bool InOverlap);// 0x23374f0
	void BroadcastOnOnCreateReviveWorldMark(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x2337420
	void BroadcastOnInteractionTriggerDisappear(out const InteractionTriggerInfo TriggerInfo);// 0x2337300
	void BroadcastOnInteractionTriggerAppear(out const InteractionTriggerInfo TriggerInfo);// 0x23371e0
	bool BroadcastOnInteractEvent();// 0x23371b0
	void BroadcastOnInitElectricShopDelegate(SolarCharacter* InCharcter);// 0x2337120
	void BroadcastOnHideTreasureBoxUIDelegate(const int64 InThisID);// 0x2337090
	void BroadcastOnHideAirdropBoxUIDelegate(const int64 InThisID);// 0x2337000
	void BroadcastOnGameUserPickupSettingChanged();// 0x2336fe0
	void BroadcastOnEShopWeaponUpgradeDelegate(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2336f10
	void BroadcastOnEShopWeaponChangeDelegate(SolarCharacter* InCharacter);// 0x2336e80
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int InWeaponSlot);// 0x2336df0
	void BroadcastOnEShopShieldUpgradeDelegate(SolarCharacter* InCharacter);// 0x2336d60
	void BroadcastOnEShopPurchaseSuccessDelegate(int InProductID, SolarCharacter* InCharacter);// 0x2336c90
	void BroadcastOnEShopPoolRefreshDelegate(SolarElectricShop* InElectricShop);// 0x2336c00
	void BroadcastOnEShopItemRefreshDelegate(SolarElectricShop* InElectricShop);// 0x2336b70
	void BroadcastOnEShopItemCDRefreshDelegate(SolarElectricShop* InElectricShop);// 0x2336ae0
	void BroadcastOnBindPowerBarDelegates();// 0x2336ac0
	void BroadcastOnBindItemPanelDelegates();// 0x2336aa0
	void BroadcastOnBindHPPanelDelegates();// 0x2336a80
	void BroadcastOnBattleControlTeammateStateRemoved();// 0x2336a60
	void BroadcastOnAirdropProgressChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x23369d0
	void BroadcastOnAirdropCharChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x2336940
	void BroadcastMigrateAccountVisibilityRequestChanged(const bool bVisible);// 0x23368b0
	void BroadcastMaxShieldValueUpdate(const float MaxShieldValue);// 0x2336830
	void BroadcastJoyStickSprintStateReset();// 0x2336810
	void BroadcastJoyStickResetAll();// 0x23367f0
	void BroadcastJoyStickInputReset();// 0x23367d0
	void BroadcastItemDiscarded(const int InItemID, const int InTotalCount);// 0x2336700
	void BroadcastHJetTimesChargingProgress(float Value, float Percent);// 0x2336630
	void BroadcastHJetForbiddenChanged(enum Types, bool bAdded);// 0x2336560
	void BroadcastHJetCDStateChanged(bool bCD);// 0x23364d0
	void BroadcastFireButtonsReset();// 0x23364b0
	bool BroadcastEnemyShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x23362c0
	bool BroadcastEnemyShieldChanged(FString InSolarPlayerID, const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x23360f0
	void BroadcastEndBackpackDragDrop(const bool bVisible);// 0x2336060
	void BroadcastDriveCustomizeOpened(const int InLayoutType);// 0x2335fd0
	void BroadcastDriveCustomizeClosed();// 0x2335fb0
	void BroadcastDamagingActorsChange();// 0x2335f90
	void BroadcastCustomizeVisibilityRequestChanged(const bool bVisible);// 0x2335f00
	bool BroadcastCheckPickupItemVaild(const int InThisID);// 0x2335e60
	void BroadcastCharacterRescueStateChanged(const byte NewRescueState);// 0x2335de0
	void BroadcastCharacterLevelExpChanged(const int NewLevel, const float NewExpRatio);// 0x2335d10
	void BroadcastCharacterHPState();// 0x2335cf0
	void BroadcastCharacterGainExp(const int ExpAdded);// 0x2335c60
	void BroadcastBuyResurrectBtnVisibility();// 0x2335c10
	void BroadcastBattleUpgradeEffect(const enum EffectType, const int ParamSum);// 0x2335b40
	void BroadcastBattleModeChanged(byte InModeType);// 0x2335ac0
	void BroadcastBattleHUDVisibilityChanged(const bool bVisible);// 0x2335a30
	void BroadcastBackpackTakesPickup(out const Vector2D NewPosition);// 0x23359a0
	void BroadcastBackpackReleasesPickup();// 0x2335980
	void BroadcastBackpackModeChanged(const int NewMode);// 0x23358f0
	void BroadcastAimingEnemy(SolarCharacter* InEnemy);// 0x2335860
	void BoolUIInteractDelegate__DelegateSignature(bool bValue);// 0x2649560
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);// 0x2649560
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);// 0x2649560
	void BindLocalSpectateDelegates(SolarSpectateInfo* SpectateInfo);// 0x23357d0
	void AddItemToPickup(Object* InCardItem);// 0x2335740
	void ActionWheelCommandExecDelegate__DelegateSignature();// 0x2649560
	void ActionWheelCommandCancelDelegate__DelegateSignature();// 0x2649560

--------------------------------
Class: CountDownInfo
	int TextID;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float RemainingTime;//[Offset: 0x8, Size: 1]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int PassiveTextID;//[Offset: 0x10, Size: 1]
	GameplayTag GameplayTag;//[Offset: 0x14, Size: 1]
	int ContributorCharacterId;//[Offset: 0x40, Size: 1]
	enum State;//[Offset: 0x44, Size: 1]

--------------------------------
Class: SideAttributeSet.FastArraySerializerItem
	FString SideName;//[Offset: 0x10, Size: 1]
	SideAttribute SideTreatmentDurationReductionMultiple;//[Offset: 0x20, Size: 1]
	SideAttribute SideShieldChargeDurationReductionMultiple;//[Offset: 0x38, Size: 1]
	SideAttribute SideBigShieldChargeDurationReductionMultiple;//[Offset: 0x50, Size: 1]
	SideAttribute SideItemDiscountMultiple;//[Offset: 0x68, Size: 1]
	SideAttribute SideItemAdditionMultiple;//[Offset: 0x80, Size: 1]

--------------------------------
Class: SideAttribute
	float Value;//[Offset: 0x0, Size: 1]
	SCMPlayerState*[] Contributors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HUDNoticeParams
	<FString,FString> Params;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KillInfo
	FString KillerPlayerId;//[Offset: 0x0, Size: 1]
	int KillerSkinID;//[Offset: 0x10, Size: 1]
	int KillerTeamID;//[Offset: 0x14, Size: 1]
	FString KillerName;//[Offset: 0x18, Size: 1]
	int KillerFlag;//[Offset: 0x28, Size: 1]
	FString VictimPlayerID;//[Offset: 0x30, Size: 1]
	int VictimSkinID;//[Offset: 0x40, Size: 1]
	int VictimTeamID;//[Offset: 0x44, Size: 1]
	FString VictimName;//[Offset: 0x48, Size: 1]
	int VictimFlag;//[Offset: 0x58, Size: 1]
	FString KillIcon;//[Offset: 0x60, Size: 1]
	FString KillLeaderID;//[Offset: 0x70, Size: 1]
	enum KillParamsCompressInfo;//[Offset: 0x80, Size: 1]
	int KillNum;//[Offset: 0x84, Size: 1]
	int WeaponSkinID;//[Offset: 0x88, Size: 1]
	byte KillerVipType;//[Offset: 0x8c, Size: 1]
	byte VictimVipType;//[Offset: 0x8d, Size: 1]
	enum KillerInputType;//[Offset: 0x8e, Size: 1]
	enum VictimInputType;//[Offset: 0x8f, Size: 1]
	bool bDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: ItemCountsList
	<enum,int> Type2IntMap;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InteractionTriggerInfo
	GameplayTag GameplayTag;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarInputSubsystem.WorldSubsystem.Subsystem.Object
	bool TestInputActionFlag(enum InFlagBit);// 0x2183220
	void RemoveInputActionFlag(enum InFlagBit);// 0x2182a50
	void OnInputMethodChanged(enum InInputType);// 0x2182420
	void OnControllerConnectionChange(bool bIsConnected, int UserId, int ControllerId);// 0x21822f0
	void AddInputActionFlag(enum InFlagBit);// 0x2181790

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: SolarPlayersHPModel.SolarCharactersModelBase.Object

--------------------------------
Class: SolarCharactersModelBase.Object
	<FString,SingleCharacterModelBase*> PlayersModel;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarPlayersShieldModel.SolarCharactersModelBase.Object

--------------------------------
Class: SolarTeamInfoModel.Object
	MulticastInlineDelegateProperty OnTeamInfoReplicated;//[Size: 1]
	void SimpleTeamInfoDelegate__DelegateSignature(SolarTeamInfo* PreTeamInfo, SolarTeamInfo* NowTeamInfo);// 0x2649560
	void OnMyTeamInfoReplicated(SolarTeamInfo* InPreTeamInfo, SolarTeamInfo* InMyTeamInfo);// 0x22b85a0

--------------------------------
Class: BP_SolarUnArmWeapon_C.SolarUnArmWeapon.Actor.Object

--------------------------------
Class: BP_Character_BattleRoyaleMap01_C.BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object

--------------------------------
Class: BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2170, Size: 1]
	MulticastInlineDelegateProperty OnPlayerRevive;//[Size: 1]
	ActorMarkBase* DeathBoxMark;//[Offset: 0x2188, Size: 1]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0x2190, Size: 1]
	int Index;//[Offset: 0x21a0, Size: 1]
	int UI_Relive_StartTime;//[Offset: 0x21a4, Size: 1]
	TimerHandle LandedDetectionHandel;//[Offset: 0x21a8, Size: 1]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x21b0, Size: 1]
	<int,float> Level-Damage;//[Offset: 0x21b8, Size: 1]
	void GetWeaponLevelDamageBonus(out float Result, bool Temp_bool_Variable, float Temp_float_Variable, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default);// 0x2649560
	void Death Cleanup UI(SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x2649560
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2649560
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2649560
	void SetReviveCameraFade(float Time);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void Debug Set DayAndNightTime(float Time);// 0x2649560
	void SetMapID(int MapID);// 0x2649560
	void Event_OnResBegin(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x2649560
	void BeginPlayBlueprint();// 0x2649560
	void OnCharacterEjectStateChanged(byte State);// 0x2649560
	void ExecuteUbergraph_BP_Character_BattleRoyale(int EntryPoint, bool CallFunc_IsInSkywardDive_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_Time, float K2Node_CustomEvent_Time, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_MapID, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, SolarMapManager* CallFunc_GetSolarMapManager_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, float CallFunc_GetCurBattleTime_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, byte K2Node_Event_State, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, S_SkillState K2Node_Select_Default);// 0x2649560
	void OnPlayerRevive__DelegateSignature(SolarCharacter* TargetCharacter);// 0x2649560

--------------------------------
Class: BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2148, Size: 1]
	class GameplayAbility[] DefaultAbilitiesExtra;//[Offset: 0x2150, Size: 1]
	S_AiItem NewVar;//[Offset: 0x2160, Size: 1]
	void GetWeaponLevelDamageBonus(out float Result, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x2649560
	byte [A]GetHealthState(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x2649560
	bool [S]SkyDiveFly(Vector Location, float Height, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, bool K2Node_Select_Default);// 0x2649560
	bool [S]Set Sky Dive State(bool CallFunc_TryActivateAbilityByClass_ReturnValue);// 0x2649560
	void OnCompleted_84F20D844D539263D5B45F9EDF867241(SolarPlayerWeapon* Weapon);// 0x2649560
	void OnCompleted_C9B9AA40496B70A95EF897A2092C6753(SolarPlayerWeapon* Weapon);// 0x2649560
	void OnCompleted_9F8149E84A6F3575574B32ADD8BF2960(SolarPlayerWeapon* Weapon);// 0x2649560
	void BeginPlayBlueprint();// 0x2649560
	void SetWeapon(byte Slot, int WeapoinId, out const WeaponPartsData Parts);// 0x2649560
	void BatchSetItem(out const S_AiItem[] ItemList);// 0x2649560
	void [s]GiveWeapon(const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x2649560
	void ExecuteUbergraph_BP_Character_Framework(int EntryPoint, const byte Temp_byte_Variable, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const int K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, byte Temp_byte_Variable, int Temp_int_Variable, const byte K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, const byte[] K2Node_MakeArray_Array, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, FString CallFunc_Conv_BoolToString_ReturnValue, SolarPlayerWeapon* Temp_object_Variable, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, class GameplayAbility CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue, byte K2Node_CustomEvent_Slot, int K2Node_CustomEvent_WeapoinId, const WeaponPartsData K2Node_CustomEvent_Parts, bool CallFunc_SetWeaponParts_ReturnValue, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, const S_AiItem[] K2Node_CustomEvent_ItemList, S_AiItem CallFunc_Array_Get_Item, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const bool K2Node_CustomEvent_bDestroyPrevWeapon, const byte K2Node_CustomEvent_Slot, const int K2Node_CustomEvent_ItemID, const <FString,FString> K2Node_MakeMap_Map, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2090, Size: 1]
	SolarAbilityComponent* SolarAbility;//[Offset: 0x2098, Size: 1]
	Vector PreviousLocation;//[Offset: 0x20a0, Size: 1]
	float Time;//[Offset: 0x20ac, Size: 1]
	float CurrentTime;//[Offset: 0x20b0, Size: 1]
	float PreviousTime;//[Offset: 0x20b4, Size: 1]
	float DeltaTime;//[Offset: 0x20b8, Size: 1]
	Vector DeltaLocation;//[Offset: 0x20bc, Size: 1]
	bool OnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c8, Size: 1]
	float Speed;//[Offset: 0x20cc, Size: 1]
	Vector2D Direction;//[Offset: 0x20d0, Size: 1]
	float[] SpeedRecord;//[Offset: 0x20d8, Size: 1]
	Vector[] LocationRecord;//[Offset: 0x20e8, Size: 1]
	float[] Record_X;//[Offset: 0x20f8, Size: 1]
	float[] Record_y;//[Offset: 0x2108, Size: 1]
	float SpeedFixBase;//[Offset: 0x2118, Size: 1]
	CurveFloat* SpeedFix;//[Offset: 0x2120, Size: 1]
	MulticastInlineDelegateProperty OnEjectingStateChanged;//[Size: 1]
	byte EjectState;//[Offset: 0x2138, Size: 1]
	int PoisonDamageNum;//[Offset: 0x213c, Size: 1]
	SolarCharacter* Temp_BlindMarkInstigator;//[Offset: 0x2140, Size: 1]
	SolarCameraComponent* GetSolarCameraComponent();// 0x2649560
	SolarSpringArmComponent* GetSolarSpringArmComponent();// 0x2649560
	void RefreshRenderConsoleVarForSkydive(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, SolarCityName* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	bool Is Observation Target(bool CallFunc_IsBeingSpectated_ReturnValue, bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	float FixSpeed(float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	void FigureSpeed(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_GetFixedSpeed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2649560
	float GetFixedY(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x2649560
	float GetFixedX(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x2649560
	void SetCameraInput(Vector NewLocalVar, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_GetFixedY_ReturnValue, float CallFunc_GetFixedX_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x2649560
	void SetCameraInput(float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FString CallFunc_Conv_Vector2dToString_ReturnValue);// 0x2649560
	Vector GetFixedLocation(Vector InLocation, int NewLocalVar, Vector NewLocalVar, bool Temp_bool_Variable, bool Temp_bool_Variable, Vector Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Divide_VectorInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Array_Get_Item, Vector K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	float GetFixedSpeed(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void DecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float tmpAltitudePercent, float CallFunc_GetSkydiveLandingHeight_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x2649560
	void UndecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float L_Var, CurveFloat* UndecelerationEffectCurve, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetFloatValue_ReturnValue);// 0x2649560
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x2649560
	void InpActEvt_Home_K2Node_InputKeyEvent(Key Key);// 0x2649560
	void InpActEvt_End_K2Node_InputKeyEvent(Key Key);// 0x2649560
	void InpActEvt_Delete_K2Node_InputKeyEvent(Key Key);// 0x2649560
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x2649560
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x2649560
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2649560
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x2649560
	void ReceiveEndPlay(byte EndPlayReason);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x2649560
	void Event_UseReviveItem(SCMPlayerState* Player);// 0x2649560
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x2649560
	void OnCharacterEjectStateChanged(byte State);// 0x2649560
	void ExecuteUbergraph_BP_SolarCharacterPlayer(int EntryPoint, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, ParticleSystemComponent*[] CallFunc_GetAllSkydiveFlyingEffects_OutEffects, float K2Node_Event_DistanceToGround, ParticleSystemComponent*[] CallFunc_GetAllSkydiveLandingEffects_OutEffects, bool K2Node_Event_bIsInWater, Key K2Node_InputKeyEvent_Key, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, float K2Node_Event_FallingRate, byte K2Node_Event_EndPlayReason, bool CallFunc_IsEditor_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Key K2Node_InputKeyEvent_Key, float K2Node_Event_InDuration, bool K2Node_Event_bInOpenScope, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_LastStage, enum K2Node_Event_CurrentStage, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue, byte K2Node_CustomEvent_State, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ABP_SolarCharacter_FPP_C* K2Node_DynamicCast_AsABP_Solar_Character_FPP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBeingSpectated_ReturnValue, Key K2Node_InputKeyEvent_Key);// 0x2649560
	void OnEjectingStateChanged__DelegateSignature(byte State, SolarCharacter* TargetCharacter);// 0x2649560

--------------------------------
Class: CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	class CGFormula* Formula;//[Offset: 0x38, Size: 1]
	SettlementPageConfig* SettlePageConfig;//[Offset: 0x40, Size: 1]
	<FString,SCMMapConfig> MapConfig;//[Offset: 0x48, Size: 1]
	DataManagerConfig DataManagerConfig;//[Offset: 0x98, Size: 1]
	JobManagerConfig JobConfig;//[Offset: 0xa8, Size: 1]
	bool EnableUltimateSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	enum UltimateSkillStateOperationOnInit;//[Offset: 0xb1, Size: 1]
	bool EnableTacticalSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	enum TacticalSkillStateOperationOnInit;//[Offset: 0xb3, Size: 1]
	int AirDropSkillMode;//[Offset: 0xb4, Size: 1]
	bool EnableWeaponUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int InitInGamePlayerLevel;//[Offset: 0xbc, Size: 1]
	bool EnablePlayerUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	InGameLevelingConfig InGameLevelingConfig;//[Offset: 0xc8, Size: 1]
	enum[] CharacterDamageUpgradeTypes;//[Offset: 0xd0, Size: 1]
	ExpItemConfig ExpItemConfig;//[Offset: 0xe0, Size: 1]
	ExpItemReduceRate ExpItemReduceRateConfig;//[Offset: 0xf0, Size: 1]
	BoxBurstItemConfig BoxBurstItemConfig;//[Offset: 0xf8, Size: 1]
	bool bIfShouldSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bIfSupportDeathverge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	<int,int> DeathBoxEnergyLimitConfig;//[Offset: 0x108, Size: 1]
	bool bAutoMarkDamagedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool EnableSect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	CustomRoomData CustomRoomData;//[Offset: 0x160, Size: 1]
	bool bIsCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool bEnableTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	float InitTrackingDelay;//[Offset: 0x1dc, Size: 1]
	float TrackingTimeInterval;//[Offset: 0x1e0, Size: 1]
	float DefaultTrackMaxRevealDistance;//[Offset: 0x1e4, Size: 1]
	float TrackReplaceDistance;//[Offset: 0x1e8, Size: 1]
	float MinRevealDistance;//[Offset: 0x1ec, Size: 1]
	float TrackTimeout;//[Offset: 0x1f0, Size: 1]
	int MaxTrackNum;//[Offset: 0x1f4, Size: 1]
	FinalsBGMData FinalsBGMData;//[Offset: 0x1f8, Size: 1]
	bool bEnableSkydivingTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	class Actor* FlyTrailClass;//[Offset: 0x228, Size: 1]
	class Actor* DebugTrailEffectClass;//[Offset: 0x250, Size: 1]
	bool IsEnableSect();// 0x2017cb0
	bool IsCustomRoomMode();// 0xc90770
	int GetRequiredExpForLevel(int InLevel);// 0x2017b70
	int GetMaxShieldMatCountToDeathbox(const int InLevel);// 0x2017ad0
	int GetMaxInGameLevel();// 0x2017aa0
	float GetExpItemReduceRate(int DeathCount);// 0x2017a00
	int GetExpItemCountByLevel(const int InLevel, const int InLevelGap);// 0x2017930
	CustomRoomData GetCustomRoomData();// 0x20177b0
	int[] GetBurstItemSplitPiles(const int ItemID);// 0x2017620
	float[] GetBurstItemModelScale(const int ItemID);// 0x2017540
	int GetBurstItemMaxPileNum(const int ItemID);// 0x20174a0
	int[] GetBurstItemIDs();// 0x2017420

--------------------------------
Class: CGFormula.Info.Actor.Object
	KnockoutParams KnockoutParams;//[Offset: 0x228, Size: 1]
	bool bInitKnockParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	static FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x2013d30
	bool IsSettlementBagItem(SolarPlayerState* InPS);// 0x2649560
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x2013c70
	int GetZomborg(SolarPlayerState* InPS);// 0x2649560
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x2649560
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID);// 0x2649560
	void GetTeamScoreComparison(SolarPlayerState* InPS, out FString OutTeamScore);// 0x2649560
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x2649560
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult);// 0x2649560
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS);// 0x2649560
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x2649560
	float GetKDA(SolarPlayerState* InPS);// 0x2649560
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x2649560
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS);// 0x2649560
	int GetCombatCore(SolarPlayerState* InPS);// 0x2013b10
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason);// 0x2649560
	int GetAccountExp(SolarPlayerState* InPS);// 0x2649560
	int CalculateTeamRank(SolarPlayerState* InPS);// 0x2013930
	enum[] CalculatePunish(SolarPlayerState* InPS);// 0x2013850
	int CalculatePlayerRank(SolarPlayerState* InPS);// 0x20137b0
	float CalculateMVPScore(SolarPlayerState* InPS);// 0x2649560
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x2013650

--------------------------------
Class: SettlePageParam
	int WeaponExpSettlmentNum;//[Offset: 0x0, Size: 1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SettlementPageConfig.DataAsset.Object
	int PageSkipIndex;//[Offset: 0x30, Size: 1]
	class SolarUWSettlementBase[] SettlementPage;//[Offset: 0x38, Size: 1]
	FString EnterSettleSoundEvent;//[Offset: 0x48, Size: 1]
	FString ExitSettleSoundEvent;//[Offset: 0x58, Size: 1]
	int[] PageIndexs;//[Offset: 0x68, Size: 1]
	bool IsCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]

--------------------------------
Class: SCMMapConfig
	FString Desc;//[Offset: 0x0, Size: 1]
	SoftObjectPath LevelMap;//[Offset: 0x10, Size: 1]
	int MiniMapId;//[Offset: 0x28, Size: 1]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	<FString,SCMElementMapConfig> ElementGroups;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SCMElementMapConfig
	SoftObjectPath ElementLevel;//[Offset: 0x0, Size: 1]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	enum LoadType;//[Offset: 0x19, Size: 1]

--------------------------------
Class: DataManagerConfig
	DataTable* GeneralDataTable;//[Offset: 0x0, Size: 1]
	DataTable* DataTable;//[Offset: 0x8, Size: 1]

--------------------------------
Class: JobManagerConfig
	DataTable* JobTable;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InGameLevelingConfig
	DataTable* ExpTable;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ExpItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 1]
	DataTable* KilledConfigTable;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ExpItemReduceRate
	DataTable* ConfigTable;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BoxBurstItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FinalsBGMData
	bool bEnableFinalsBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte FinalsBGMSafeAreaIndex;//[Offset: 0x1, Size: 1]
	byte FinalsBGMPlayTeamCount;//[Offset: 0x2, Size: 1]
	byte FinalsBGMStopTeamCount;//[Offset: 0x3, Size: 1]
	FString FinalsBGMName_Play;//[Offset: 0x8, Size: 1]
	FString FinalsBGMName_Stop;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarCityName.Actor.Object
	SolarStrongholdNamesConfig* NameConfigCN;//[Offset: 0x228, Size: 1]
	SolarStrongholdNamesConfig* NameConfigEN;//[Offset: 0x230, Size: 1]
	Texture* NameTextureCN;//[Offset: 0x238, Size: 1]
	Texture* NameTextureEN;//[Offset: 0x240, Size: 1]
	MaterialInterface* NameMaterial;//[Offset: 0x248, Size: 1]
	FString PointName;//[Offset: 0x250, Size: 1]
	MaterialInterface* TextMaterial;//[Offset: 0x260, Size: 1]
	SoftObjectPath FontPath;//[Offset: 0x268, Size: 1]
	float BaseScale;//[Offset: 0x280, Size: 1]
	float HightLimit;//[Offset: 0x284, Size: 1]
	float MinimumDistance;//[Offset: 0x288, Size: 1]
	int LocTextID;//[Offset: 0x28c, Size: 1]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	float GradientFadeTime;//[Offset: 0x294, Size: 1]
	enum PreviewLang;//[Offset: 0x298, Size: 1]
	SoftObjectPath PreviewFontPath;//[Offset: 0x2a0, Size: 1]
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x2c0, Size: 1]
	MaterialInstanceDynamic* TextMaterialDynamic;//[Offset: 0x2c8, Size: 1]
	void SetSolarCityNameTickAndShow(enum OldMode, enum CurMode);// 0x2127580
	void SetSolarCityNameTick(bool bNeedTick);// 0x21274f0
	void OnCharacterOnRep();// 0x21264b0
	FString[] GetLocalizationCityNamesWithAllLanguages();// 0x2125fb0
	FString GetLocalizationCityName(bool bGetNameWithLang);// 0x2125ed0

--------------------------------
Class: SolarStrongholdNamesConfig.DataAsset.Object
	<FString,Vector4> NamesMap;//[Offset: 0x30, Size: 1]

--------------------------------
Class: BP_SetRenderParametersBasedOnDifferentStates_C.SolarRenderParametersBasedOnDifferentStates.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 1]
	SolarCharacter* Solar Character;//[Offset: 0x240, Size: 1]
	TimerHandle Loop Timer;//[Offset: 0x248, Size: 1]
	float Min Skydiving Height;//[Offset: 0x250, Size: 1]
	ExponentialHeightFog* Height Fog;//[Offset: 0x258, Size: 1]
	bool Interpolate Fog Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	LinearColor Default Fog Color;//[Offset: 0x264, Size: 1]
	LinearColor Landing Fog Color;//[Offset: 0x274, Size: 1]
	float Characte Start  Skydiving Height;//[Offset: 0x284, Size: 1]
	float Max Skydiving Height;//[Offset: 0x288, Size: 1]
	bool Interpolate Fog Density;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	float Default Fog Density;//[Offset: 0x290, Size: 1]
	float Landing Fog Density;//[Offset: 0x294, Size: 1]
	bool Interpolate Fog Height Falloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	float Default Fog Height Falloff;//[Offset: 0x29c, Size: 1]
	float Landing Fog Height Falloff;//[Offset: 0x2a0, Size: 1]
	bool Interpolate Start Distance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	float Default Start Distance;//[Offset: 0x2a8, Size: 1]
	float Landing Start Distance;//[Offset: 0x2ac, Size: 1]
	enum Character Skydiving State;//[Offset: 0x2b0, Size: 1]
	enum BeginPlayState;//[Offset: 0x2b1, Size: 1]
	void Interpolation Start Distance(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x2649560
	void Interpolation Fog Height Falloff(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x2649560
	void Interpolation Fog Density(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x2649560
	void Interpolation Fog Color(out LinearColor Fog Color after Interpolation, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue);// 0x2649560
	void HeightFog(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void MaterialShadowDistance_Change(enum Character Skydiving State, float CallFunc_GetConsoleVariableFloatValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x2649560
	void TreeCullDistance_Change(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess);// 0x2649560
	void SetRenderParamerts(SolarCharacter* Solar Character);// 0x2649560
	void Set Render Paramerts With Height();// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ExecuteUbergraph_BP_SetRenderParametersBasedOnDifferentStates(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* K2Node_CustomEvent_Solar_Character, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool Temp_bool_IsClosed_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable);// 0x2649560

--------------------------------
Class: SolarRenderParametersBasedOnDifferentStates.Actor.Object
	DataTable* StreamingDistanceDataTable;//[Offset: 0x228, Size: 1]
	void SetRelativeStreamingDistanceScale(enum InCharacterSkydivingState);// 0x21ea380

--------------------------------
Class: BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb48, Size: 1]
	BPC_GM_Common_C* BPC_GM_Common;//[Offset: 0xb50, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xb58, Size: 1]
	Vector[] DeathLocations;//[Offset: 0xb60, Size: 1]
	Vector[] LandLocations;//[Offset: 0xb70, Size: 1]
	int ResurrectTime;//[Offset: 0xb80, Size: 1]
	Vector ResurrectLocation;//[Offset: 0xb84, Size: 1]
	class SolarUserWidget* ResurrectUI;//[Offset: 0xb90, Size: 1]
	S_ResurrectInfo ResurrectOptions;//[Offset: 0xbb8, Size: 1]
	MulticastInlineDelegateProperty OnResurrectionBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnResurrectionFinished;//[Size: 1]
	UI_Resurrect_C* ResurrectUIObj;//[Offset: 0xbe0, Size: 1]
	byte ResurrectType;//[Offset: 0xbe8, Size: 1]
	bool bIsResurrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 1]
	BP_Logic_Framework_C* Logic;//[Offset: 0xbf0, Size: 1]
	bool bShouldSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 1]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0xc00, Size: 1]
	ActorMarkBase* DeathBoxMark;//[Offset: 0xc10, Size: 1]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0xc18, Size: 1]
	TimerHandle LandedDetectionHandel;//[Offset: 0xc20, Size: 1]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0xc28, Size: 1]
	MulticastInlineDelegateProperty OnResurrectTimeChange;//[Size: 1]
	int AiCompCd;//[Offset: 0xc48, Size: 1]
	ActorMarkBase* RebirthedDeathBoxMark;//[Offset: 0xc50, Size: 1]
	bool bIsReviveSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xc60, Size: 1]
	Vector DeathBoxLoc;//[Offset: 0xc68, Size: 1]
	byte CharacterHealthState;//[Offset: 0xc74, Size: 1]
	enum ResurrectMethod;//[Offset: 0xc75, Size: 1]
	Vector TempDeathBoxLoc;//[Offset: 0xc78, Size: 1]
	FString GetModuleName();// 0x2649560
	void OnResurrectTimeChanged(int ResurrectTime);// 0xb43660
	void GetResurrectLocation(out Vector Location);// 0x2649560
	void Remove All Revive Mark(SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	Vector GetDeathBoxLocation(BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue);// 0x2649560
	bool PlayerCanRebirthBlueprint(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void OnRep_CharacterHealthState(GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void Handling Is Resurrecting(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x2649560
	void GetSpecialHitTypeArray(out int[] NewParam, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int[] K2Node_MakeArray_Array);// 0x2649560
	void Set Death Box Ref(BP_DI_DeathBoxA_TreasureBox_C* InDeathBox, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void OnRep_bIsReviveSkydiving(bool CallFunc_IsServer_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void Remove Punctuation(bool bKeepRebornLine, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage, int Multiplier, int ID, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, int[] CallFunc_GetSpecialHitTypeArray_NewParam, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_Behavior CallFunc_GetRowData_ReturnValue, const SolarTablesData_EscapeExp CallFunc_GetRowData_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_ItemBehavior CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x2649560
	void IsAiCompCdClear(out bool Result, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2649560
	void OnRep_bIsResurrecting();// 0x2649560
	void Create Punctuation(Vector InputPin, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, byte CallFunc_GetTeamID_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560
	void GetLogicBase(out BP_Logic_Framework_C* Output_Get, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void OnRep_ResurrectTime(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	void Death Cleanup UI(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x2649560
	void Get Resurrect UI(out UI_Resurrect_C* Output_Get, bool CallFunc_IsValid_ReturnValue, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get);// 0x2649560
	void GetLastDeathLocation(out Vector Output, int CallFunc_Array_LastIndex_ReturnValue, Vector CallFunc_Array_Get_Item);// 0x2649560
	void OnCharacterLanded();// 0x2649560
	void OnPlayerInteract(byte InteractType);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnCharacterEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x2649560
	void OnTimeCut();// 0x2649560
	void [s]RequestResurrectInTime(int Time, byte Type, Vector Location, S_ResurrectInfo options, bool bUseParamZ);// 0x2649560
	void [c]ShowResurrectUI(int Time, byte Type);// 0x2649560
	void DropPickableItem(Object* Item);// 0x2649560
	void PickupPickableItem(Object* Item);// 0x2649560
	void Event_CreateDeathBoxMark();// 0x2649560
	void Event_OnResEnd(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x2649560
	void AiCompCountDown();// 0x2649560
	void ResetAiCompTimer(int Time);// 0x2649560
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x2649560
	void [C]OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum Type);// 0x2649560
	void Event_EnterSkydiveFly();// 0x2649560
	void OnInteractBtnHit(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0x2649560
	void [S] Request Actor Removal(Actor* Target Actor);// 0x2649560
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x2649560
	void ExecuteUbergraph_BP_PlayerState_Framework(int EntryPoint, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, int Temp_int_Variable, UI_WorldMark_ReviveTeammatesDeathbox_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates_Deathbox, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, byte K2Node_CustomEvent_InteractType, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, int Temp_int_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_CustomEvent_bUseParamZ, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, UI_Resurrect_C* CallFunc_Get_Resurrect_UI_Output_Get, interface classNone K2Node_DynamicCast_AsI_Resurrect, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, int Temp_int_Variable, Object* K2Node_CustomEvent_Item, Object* K2Node_CustomEvent_Item, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_Time, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, int K2Node_CustomEvent_GainedExp, int K2Node_CustomEvent_CurrentExp, int K2Node_CustomEvent_TotalExp, enum K2Node_CustomEvent_Type, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata, enum Temp_byte_Variable, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int K2Node_Select_Default, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, const SolarTablesData_QuickVoice CallFunc_GetRowData_ReturnValue, Actor* K2Node_CustomEvent_Target_Actor, enum CallFunc_GetBuildConfiguration_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, SolarSpectateInfo* K2Node_Event_InSpectateInfo, Vector CallFunc_GetResurrectLocation_Location, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, float Temp_float_Variable, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, float Temp_float_Variable, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, byte Temp_byte_Variable, float K2Node_Select_Default);// 0x2649560
	void OnResurrectTimeChange__DelegateSignature(int Time);// 0x2649560
	void OnResurrectionFinished__DelegateSignature(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x2649560
	void OnResurrectionBegin__DelegateSignature(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x2649560

--------------------------------
Class: BPC_BuyResurrection_C.SolarResurrectionComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 1]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0x140, Size: 1]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x148, Size: 1]
	int SuccessTime;//[Offset: 0x150, Size: 1]
	bool BuyResurrectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float RemindTeammateEffectCooldown;//[Offset: 0x158, Size: 1]
	float BuyResurrectionInvincibleTime;//[Offset: 0x15c, Size: 1]
	Vector RebornLoc;//[Offset: 0x160, Size: 1]
	void CheckAllTeammateDied(out bool IfAllDied, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2649560
	void RefreshUI(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x2649560
	SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x2649560
	void On All Teammates Killed(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2649560
	void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool CallFunc___A_Is_Player_Reviving_Reviving, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_and_Display_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void Event_LeaveWhileWaiting();// 0x2649560
	void ClientDoCameraFade();// 0x2649560
	void Event_OnRevivingComplete(FString PlayerId);// 0x2649560
	void Event_OnRevivedComplete();// 0x2649560
	void Event_OnResurrectionStateChanged(enum LastState);// 0x2649560
	void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, GameplayEventData K2Node_MakeStruct_GameplayEventData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_SwitchEnum_CmpSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, enum K2Node_Event_LastState, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560

--------------------------------
Class: SolarResurrectionComponent.ActorComponent.Object
	byte bEnableResurrection;//[Offset: 0xb0, Size: 1]
	DeathTreasureBox* DeathBox;//[Offset: 0xb8, Size: 1]
	Vector DeathBoxLoc;//[Offset: 0xc0, Size: 1]
	enum ResurrectionState;//[Offset: 0xcc, Size: 1]
	MulticastInlineDelegateProperty OnResurrectionStateChanged;//[Size: 1]
	float CurrentCountDownStartTime;//[Offset: 0xe0, Size: 1]
	float CountDownAccTime;//[Offset: 0xe4, Size: 1]
	float ConfigCountDownTime;//[Offset: 0xf0, Size: 1]
	float ResurrectionClutchTime;//[Offset: 0xf4, Size: 1]
	bool bIsTimeoutCountDownPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnTimeoutCountDownStateChanged;//[Size: 1]
	WorldMark_ReviveTeammates* DeathBoxMark;//[Offset: 0x118, Size: 1]
	class WorldMark_ReviveTeammates* DeathBoxMarkClass;//[Offset: 0x120, Size: 1]
	Actor* RebornLine;//[Offset: 0x128, Size: 1]
	class Actor* RebornLineClass;//[Offset: 0x130, Size: 1]
	void TryContinueTimeoutCountDown();// 0x21f5c40
	void SetResurrectionState(enum NewState, bool bShouldNotifyOnServer);// 0x21f5650
	void SetDeathBox(DeathTreasureBox* InDeathBox);// 0x21f4fe0
	void ServerNotifyTeammatesHelp();// 0xc455a0
	void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused);// 0x2649560
	void OnResurrectionStateChanged__DelegateSignature(enum NewState);// 0x2649560
	void OnRep_ResurrectionState(enum LastState);// 0x21f4c50
	void OnRep_bIsTimeoutCountDownPaused();// 0x21f4cd0
	void MulticastPlayMarkNotify();// 0xc45560
	void LazyPauseTimeoutCountDownByClutchTime();// 0x21f4ba0
	float GetWaitTimeRemaining();// 0x21f4ae0
	Vector GetDeathBoxLoc();// 0x21f4850
	void Event_OnRevivingComplete(FString PlayerId);// 0x2649560
	void Event_OnRevivedComplete();// 0x2649560
	void Event_OnResurrectionStateChanged(enum LastState);// 0x2649560
	void EnterBuyResurrectionProcess();// 0x21f4740

--------------------------------
Class: WorldMark_ReviveTeammates.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* Panel;//[Offset: 0x3a8, Size: 1]
	ScaleBox* ScaleBox;//[Offset: 0x3b0, Size: 1]
	Image* Img_Light;//[Offset: 0x3b8, Size: 1]
	Image* img_HeadBg_Shadow;//[Offset: 0x3c0, Size: 1]
	Image* img_PlayerHead;//[Offset: 0x3c8, Size: 1]
	Image* ProgressCD;//[Offset: 0x3d0, Size: 1]
	SolarTextBlock* Txt_Recover;//[Offset: 0x3d8, Size: 1]
	TextBlock* Distance;//[Offset: 0x3e0, Size: 1]
	Image* Img_Arrow;//[Offset: 0x3e8, Size: 1]
	WidgetAnimation* Occupy_Anim;//[Offset: 0x3f0, Size: 1]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x3f8, Size: 1]
	SolarResurrectionComponent* ResurrectionComp;//[Offset: 0x400, Size: 1]
	FName ProgressParamName;//[Offset: 0x408, Size: 1]
	LinearColor ProgressParamDefaultValue;//[Offset: 0x410, Size: 1]
	FString TimeParamName;//[Offset: 0x420, Size: 1]
	int DistanceLocalTextID;//[Offset: 0x430, Size: 1]
	int RecoverLocalTextID;//[Offset: 0x434, Size: 1]
	int TimeFormatLocalTextID;//[Offset: 0x438, Size: 1]
	FString NotifySoundName;//[Offset: 0x440, Size: 1]
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x2649560

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x150, Size: 1]
	byte StretchDirection;//[Offset: 0x151, Size: 1]
	float UserSpecifiedScale;//[Offset: 0x154, Size: 1]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	float IgnoreSlightScaleModificationPercent;//[Offset: 0x15c, Size: 1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x3519d00
	void SetStretchDirection(byte InStretchDirection);// 0x3519b70
	void SetStretch(byte InStretch);// 0x3519af0
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x3519030

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 1]
	byte ArgumentValueType;//[Offset: 0x10, Size: 1]
	FText ArgumentValue;//[Offset: 0x18, Size: 1]
	int ArgumentValueInt;//[Offset: 0x30, Size: 1]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 1]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BP_ReviveItemManger_BattleRoyale_C.BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int PointError;//[Offset: 0x340, Size: 1]
	float R;//[Offset: 0x344, Size: 1]
	float X;//[Offset: 0x348, Size: 1]
	float Y;//[Offset: 0x34c, Size: 1]
	Vector LeftUp;//[Offset: 0x350, Size: 1]
	Vector RightDown;//[Offset: 0x35c, Size: 1]
	void RevivePlayer(SolarCharacter*                                                                                                     , out const Transform                                                                                                     , out bool bool, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int CallFunc_FTrunc_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFlyLocation_Location, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x2649560
	void GetFlyLocation(SCMPlayerState* PlayerSatate, out Vector Location, Vector Local_FlyPoint, Vector Local_CurFlyCriclePoint, float Local_Length, float Local_Distance, Vector Local_SelfLocation, int Local_Index, Vector Local_CircleLocation, float Local_CircleRadius, Vector[] Local_Location, float CallFunc_GetReviveHeight_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveHeight_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float K2Node_MathExpression_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D[] K2Node_MakeArray_Array, Vector2D CallFunc___S_Get_Point_On_Line_TargetPoint, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, FText CallFunc_Format_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2649560

--------------------------------
Class: BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 1]
	int ReviveItem;//[Offset: 0x250, Size: 1]
	<SolarPlayerState*,int> Player_ReviveTimes;//[Offset: 0x258, Size: 1]
	int AdvanceNoticeTime;//[Offset: 0x2a8, Size: 1]
	F_ReviveItemData[] ReviveItemData;//[Offset: 0x2b0, Size: 1]
	float MaxReviveRadius;//[Offset: 0x2c0, Size: 1]
	bool ClearItemNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	bool AdvanceNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	SolarPlayerState*[] InRevivingPlayerState;//[Offset: 0x2c8, Size: 1]
	int CurTime;//[Offset: 0x2d8, Size: 1]
	bool bCanReviveImmediatelyWhenDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	int ReviveDisableCountDown;//[Offset: 0x2e0, Size: 1]
	int ReviveStartRecycleTime;//[Offset: 0x2e4, Size: 1]
	<byte,FString> NoticeSound;//[Offset: 0x2e8, Size: 1]
	UI_Resurrect_C* ResurrectByItemUI;//[Offset: 0x338, Size: 1]
	void GetResurrectByItemUI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void SetPlayerReviveData(SolarPlayerState* Player, F_ReviveItemData Data, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void GetPlayerReviveData(SolarPlayerState* Player, out F_ReviveItemData Data, out bool bFind, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x2649560
	void [ A]Is Player Reviving(out const SolarPlayerState* InPlayerState, out bool Reviving, bool CallFunc_Array_Contains_ReturnValue);// 0x2649560
	bool IsPlayerReviving(const SolarPlayerState* InPlayerState, bool CallFunc_Array_Contains_ReturnValue);// 0x2649560
	void RemovePlayerFromRevivingPlayerArr(out const SolarPlayerState* Player, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x2649560
	void AddPlayerIntoRevivingPlayerArr(out const SolarPlayerState* Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x2649560
	void OnRep_AdvanceNotice(bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void OnRep_ClearItemNotice();// 0x2649560
	bool [ S]Try to Revive Player with Item(SolarPlayerState* Player, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_RevivePlayer_Bool, FString CallFunc_Vector2String_Str, bool CallFunc_PlayerTryUseReviveItem_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_CanPlayerUseReviveItem_ReturnValue);// 0x2649560
	void Set Player Use Revive Item Times(SolarPlayerState* Player, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData, int CallFunc_Add_IntInt_ReturnValue, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData);// 0x2649560
	void [ A]Get Player Use Revive Item Times(SolarPlayerState* Player, out int Value, int Local_Times, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind);// 0x2649560
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_IsOutBySelf_ReturnValue, bool CallFunc_IsPlayerOffline_ReturnValue, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	bool CanGlobalUseReviveItem(bool CallFunc_CanGlobalUseReviveItem_ReturnValue);// 0x2649560
	void RevivePlayer(SolarCharacter*                                                                                                     , out const Transform                                                                                                     , out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void Event_ClearRevive();// 0x2649560
	void OnPlayerResurrected(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x2649560
	void Event_ClearReviveNotifyInAdvance();// 0x2649560
	void Event_InitReviveItem();// 0x2649560
	void UpdateTime();// 0x2649560
	void DownReviveImmediately(SolarPlayerState* Player);// 0x2649560
	void OnPlayerHealthStateChanged(BP_PlayerState_Framework_C* InPlayerState, byte NewState);// 0x2649560
	void ReviveDisableNotice(int Time);// 0x2649560
	void Event_PlayerReconnect(SCMPlayerState* Player);// 0x2649560
	void OnStartReviveItemRecycleCountDownDataRequested();// 0x2649560
	void OnSpecTargetChanged_Event(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x2649560
	void ExecuteUbergraph_BP_ReviveItemManger(int EntryPoint, bool Temp_bool_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_ClearBackpackItem_ReturnValue, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, const FString[] Temp_string_Variable, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, const <FString,FString> K2Node_MakeMap_Map, SolarPlayerState* K2Node_CustomEvent_Player, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_InPlayerState, byte K2Node_CustomEvent_NewState, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Select_Default, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, int K2Node_CustomEvent_Time, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Round_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const byte Temp_byte_Variable, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarPlayerState* K2Node_CustomEvent_NewTarget, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get, bool CallFunc_IsValid_ReturnValue, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue);// 0x2649560

--------------------------------
Class: GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int MaxReviveUsage;//[Offset: 0x228, Size: 1]
	float ReviveItemRepoTime;//[Offset: 0x22c, Size: 1]
	float ReviveProximityRadius;//[Offset: 0x230, Size: 1]
	float ReviveHeight;//[Offset: 0x234, Size: 1]
	float ReviveWaitTime;//[Offset: 0x238, Size: 1]
	bool bGlobalUseRevieItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	float DownedReviveButtonDelayTime;//[Offset: 0x240, Size: 1]
	void SetGlobalUseReviveItem(const bool InCanUseItem);// 0x2052680
	bool PlayerTryUseReviveItem(SolarPlayerState* InPlayerState, const int InUseNum);// 0x20525b0
	void OnTeammateReviveManagerRefresh();// 0x2052590
	void OnStartReviveItemRecycleCountDownDataRequested();// 0x2649560
	void OnRep_GlobalUseRevieItem();// 0x2052590
	bool IsPlayerReviving(const SolarPlayerState* InPlayerState);// 0x2649560
	float GetReviveWaitTime();// 0x2052560
	float GetReviveProximityRadius();// 0x2052530
	float GetReviveItemRepoTime();// 0x2052500
	int GetReviveItemID();// 0x20524d0
	float GetReviveHeight();// 0x20524a0
	int GetPlayerReviveItemNum(const SolarPlayerState* InPlayerState);// 0x2052400
	int GetMaxReviveUsage();// 0x20523d0
	float GetDownedReviveButtonDelayTime();// 0x20523a0
	void ClearAllPlayersReviveItem();// 0x2649560
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum);// 0x20522c0
	bool CanGlobalUseReviveItem();// 0x2052290

--------------------------------
Class: GameManagerBase.Info.Actor.Object

--------------------------------
Class: UI_Resurrect_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* CountDown_Progress_Anim;//[Offset: 0x350, Size: 1]
	WidgetAnimation* CountDown_Anim;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Resurrecting_Enter_Anim;//[Offset: 0x360, Size: 1]
	WidgetAnimation* ReliveProp_Anim;//[Offset: 0x368, Size: 1]
	Overlay* CountDown;//[Offset: 0x370, Size: 1]
	Image* img_Props;//[Offset: 0x378, Size: 1]
	Image* Img_RebirthTimeMAT;//[Offset: 0x380, Size: 1]
	TextBlock* Txt_RebirthTimeNum;//[Offset: 0x388, Size: 1]
	int ReviveWaitTime;//[Offset: 0x390, Size: 1]
	BP_PlayerState_Framework_C* Player;//[Offset: 0x398, Size: 1]
	TimerHandle HandleEnterAnimEnd;//[Offset: 0x3a0, Size: 1]
	TimerHandle HandleFinishAnimEnd;//[Offset: 0x3a8, Size: 1]
	void TryCloseByPlayer(BP_PlayerState_Framework_C* OldPlayer, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560
	void Visible and Invisible Protection(out bool Exec, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x2649560
	void SetIcon(byte Type, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x2649560
	void UIEvent_Show(int ReviveWaitTime);// 0x2649560
	void ShowResurrectUI(int Time, byte Type, BP_PlayerState_Framework_C* Player);// 0x2649560
	void RebirthCountDown(int Time);// 0x2649560
	void CloseUI();// 0x2649560
	void BeginCountDown();// 0x2649560
	void EndEvent();// 0x2649560
	void ExecuteUbergraph_UI_Resurrect(int EntryPoint, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_ReviveWaitTime, FText CallFunc_Conv_IntToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_SafeDivide_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_Event_Time, byte K2Node_Event_Type, BP_PlayerState_Framework_C* K2Node_Event_Player, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Visible_and_Invisible_Protection_Exec, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int K2Node_CustomEvent_Time, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue);// 0x2649560

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x35135b0

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3514b00
	void SetPadding(Margin InPadding);// 0x3514510
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x35142e0

--------------------------------
Class: F_ReviveItemData
	FString PlayerID_3_454127FA49A9E9B7DFC44B8255034BF1;//[Offset: 0x0, Size: 1]
	int Times_5_60AE18DB4EC5A089DB2C648682EFCFC5;//[Offset: 0x10, Size: 1]

--------------------------------
Class: S_ResurrectInfo
	bool bClearWeapons_8_85433FCD494E4E2DDCA2F6AB69D508C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bClearAllItems_7_1B66870A49E70A4A31DBD1B93C1AE45D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEmptyEnergy_9_422079A04E20412A0DD60594501D7D8C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bReChargeJetToFull_10_2649F2CB4F2A722D287E91848E966DBF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	enum ResurrectMethod_15_E3E0A84B479C7DB70DAAF88AAF99DA23;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	float TimeOutSeconds;//[Offset: 0xd0, Size: 1]
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x2649560
	void ReceiveServerLevelLoaded(FString LevelName);// 0x2649560
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x2017e10
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x2017cf0
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x2649560
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x2649560
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x2649560
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x2649560
	void ReceivePlayerJoinData(FString PlayerId);// 0x2649560
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x2649560
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x2649560
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x2649560
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x2649560
	void ReceiveOBPlayersChanged();// 0x2649560
	void ReceiveGameModeInit();// 0x2649560
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x2649560
	void ReceiveBattleEnd();// 0x2649560
	void ReceiveBattleBegin();// 0x2649560
	void OnStartBattle();// 0x2017cd0
	void OnPlayerSettled(SCMPlayerState* Player);// 0x2649560
	void OnPlayerReconnect(SCMPlayerState* Player);// 0x2649560
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x2649560
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x2649560
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x2649560
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x2649560
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x2649560
	void OnMatchEnd(const int RPCID);// 0x2649560
	void OnDSClose();// 0x2649560
	void OnBotAIDataReady(int AICount);// 0x2649560
	bool IsAllowReconnectGame(SCMPlayerState* InPC);// 0x2017c10

--------------------------------
Class: CustomGameModeComponent.GameModeCompBase.ActorComponent.Object

--------------------------------
Class: BP_Logic_BattleRoyale_C.BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b8, Size: 1]
	int WaitTime;//[Offset: 0x1c0, Size: 1]
	PlayerStart*[] WaitinglandStart;//[Offset: 0x1c8, Size: 1]
	BP_GameState_BattleRoyale_C* GameState;//[Offset: 0x1d8, Size: 1]
	MulticastInlineDelegateProperty OnGoInToBattleState;//[Size: 1]
	bool bWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x1f8, Size: 1]
	DataTable* BattleTimeline;//[Offset: 0x260, Size: 1]
	<int,S_EventList_BattleRoyal> EventList;//[Offset: 0x268, Size: 1]
	BP_MapInfoComponent_C* MapInfo;//[Offset: 0x2b8, Size: 1]
	int ShrinkIndex;//[Offset: 0x2c0, Size: 1]
	BP_BattleRoylePoisonCircle_C* PoisonCircle;//[Offset: 0x2c8, Size: 1]
	BP_SolarBombingManager_C* BoomingManager;//[Offset: 0x2d0, Size: 1]
	byte ModeBattleState;//[Offset: 0x2d8, Size: 1]
	Vector[] AirDropPosHistoryRecord;//[Offset: 0x2e0, Size: 1]
	int AILevel;//[Offset: 0x2f0, Size: 1]
	int DSTime;//[Offset: 0x2f4, Size: 1]
	<byte,bool> ModeEventValid;//[Offset: 0x2f8, Size: 1]
	int TotalPlayer;//[Offset: 0x348, Size: 1]
	BP_ReviveItemManger_BattleRoyale_C* ReviveManager;//[Offset: 0x350, Size: 1]
	BP_Formula_BattleRoyale_C* BR Formula Manager;//[Offset: 0x358, Size: 1]
	int TeamMemberCount;//[Offset: 0x360, Size: 1]
	BehaviorTree* BotBehaviorTree;//[Offset: 0x368, Size: 1]
	SCMPlayerState*[] PlayersQuitOnWaitingLand;//[Offset: 0x370, Size: 1]
	int PlayerCountMax;//[Offset: 0x380, Size: 1]
	bool bCanSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	class BP_BattleRoylePoisonCircle_C* PoisonCircleClass;//[Offset: 0x388, Size: 1]
	class SolarBotAIController* AIController;//[Offset: 0x390, Size: 1]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x398, Size: 1]
	float[] RadiusArr;//[Offset: 0x3a0, Size: 1]
	int AILevelMax;//[Offset: 0x3b0, Size: 1]
	MulticastInlineDelegateProperty BattleStateChanged;//[Size: 1]
	int PlayerCountBattleStart;//[Offset: 0x3c8, Size: 1]
	int ChestSpawnerID;//[Offset: 0x3cc, Size: 1]
	BPC_AiManagerBattleRoyale_C* AiManager;//[Offset: 0x3d0, Size: 1]
	void PresettleAll(int TeamRank, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue);// 0x2649560
	void DealTeammateAISettle(SolarPlayerState* Player, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, FString CallFunc_Conv_TextToString_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void Custom Room Start(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560
	void SendItemToPlayer(SolarPlayerState* Player, out const <int,int> ItemMap, int[] CallFunc_Map_Keys_Keys, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Left_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void GetVehicleDataTrace(out const <FString,FString> Map, int NewLocalVar, <int,int> VehicleData, FString[] CarNum, int Temp_int_Array_Index_Variable, SolarVehicleSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, Actor*[] CallFunc_GetActiveVehicleList_OutActiveVehicles, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_Array_Get_Item, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, class Actor CallFunc_GetObjectClass_ReturnValue, int CallFunc_GetVehicleTypeID_ReturnValue, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void Init Poison Circle(out BP_MapInfoComponent_C* MapInfo, bool CallFunc_IsValid_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Vector CallFunc_Get_Safe_Area_Center_Pos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, int CallFunc__S_GetMapIDByName_MapID, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_BattleRoylePoisonCircle_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector K2Node_Select_Default);// 0x2649560
	void GetAiManager(out BPC_AiManagerBattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void SetSkillStateByBattleState(byte Temp_byte_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	int Get Shrink Index(bool Temp_bool_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int CallFunc_Get_Safe_Area_Centers_Len_Len, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int K2Node_Select_Default);// 0x2649560
	void TryPushBattleState(byte TargetState, bool ForcePush, byte StateOld, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc__A_GetBattleTime_Time, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, bool CallFunc_BooleanAND_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc__A_GetDSTime_Time, int CallFunc_Get_Current_Player_Count_Result, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, byte Temp_byte_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_ByteByte_ReturnValue);// 0x2649560
	void GetWeaponID(int ItemID, out int weaponid, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x2649560
	void VehicleDataTrace(<FString,FString> CallFunc_GetVehicleDataTrace_Map);// 0x2649560
	void GetPlayerDataTrace(BP_PlayerState_BattleRoyale_C* Player, out <FString,FString> Map, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Clamp_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, Vector CallFunc_GetCharacterLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void KickOutExcessAI(BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int K2Node_Copy_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg, bool Temp_bool_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString Temp_string_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x2649560
	void GetAiLevel(SolarPlayerState* Target, out int DefaultDifficultyLevel, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void Get Config(out CFG_BattleRoyale_C* CFG, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void DataTrace(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarPlayerState*[] K2Node_MakeArray_Array);// 0x2649560
	void UpdatePlayerData(SolarPlayerState* Target, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_SetDataByte_ReturnValue);// 0x2649560
	void PreSettleDeal(SCMPlayerState* Player, enum OutType, bool Lamster, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_QuitImmediately_SendToSettle, bool CallFunc_IsLamster_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_UpdateTeamData_bAced, bool CallFunc_HasBeenEliminated_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState*[] K2Node_MakeArray_Array, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, byte K2Node_Select_Default);// 0x2649560
	void Will Master Leaving Disband Room(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Is Master Disbanding Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Is Kick Out Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Is Side Switch Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void BuyResurrectionDeal(PlayerState* Player, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void UpdateWinnerData(FString Side, const byte[] Temp_byte_Variable, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x2649560
	bool IsLamster(SCMPlayerState* Player, enum Index, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x2649560
	bool CanPlayerBattle(SCMPlayerState* Player, byte State, bool IsBot, bool CanRevive, bool Alive, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue);// 0x2649560
	void UpdateTeamData(FString Side, out bool bAced, SolarTeamInfo* LocalTeam, bool Aced, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_HasBeenEliminated_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void GetConiReviveManager(out BP_ReviveItemManger_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue);// 0x2649560
	bool IsAllowReconnectGame(SCMPlayerState* InPC, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_PlayerCanRebirthByAllMeans_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void QuitImmediately(enum Index, SCMPlayerState* InputPin, out bool SendToSettle, bool ToSettle, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x2649560
	void TempSpawnAIGroup(FString Side, int count, int AILevel, FString[] NewLocalVar, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_CreateBotAISingle_ReturnValue, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue);// 0x2649560
	void Update Player Data Trace(SCMPlayerState* PlayerState, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, SolarInteractableManager* CallFunc_GetSolarInteractableManager_ReturnValue, int CallFunc_GetShieldUpgradeItemShopGroupID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetAiLevel_DefaultDifficultyLevel, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, FString CallFunc_Conv_IntToString_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetConiReviveManager_Output_Get, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetPlayerForceJumped_ReturnValue, Vector CallFunc_GetPlayerLandLocation_Location, bool CallFunc_GetPlayerLandLocation_Succeed, FString CallFunc_Bool2String_String, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Vector2String_Str, Vector CallFunc_GetPlayerEjectLocation_Location, bool CallFunc_GetPlayerEjectLocation_Succeed, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Vector2String_Str, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetTeamRank_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_VectorArray2String_Str, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetZomborg_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_GetAccountExp_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_VectorArray2String_Str, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void Create Airdrop(int ChestID, Transform TempPos, bool DuplicateFlag, Transform[] TempAirDropPos, int Temp_int_Array_Index_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Loop_Counter_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_GetTimeSeconds_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform[] CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr, int CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x2649560
	void StartCruising(CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetAirline_Airline, int CallFunc_GetAirline_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void InitElements(Vector CallFunc_MakeVector_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Formula_BattleRoyale_C* CallFunc_FinishSpawningActor_ReturnValue, BP_SolarBombingManager_C* CallFunc_FinishSpawningActor_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void Get Map Info(out BP_MapInfoComponent_C* MapInfo, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void Init Timeline Event(out DataTable* BattleTimeline, S_Event_BattleRoyale[] TempList, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, S_Event_BattleRoyale[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int Temp_int_Loop_Counter_Variable, const FString Temp_string_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2649560
	void ExecuteBattleEvent(out const S_Event_BattleRoyale S_Event_BattleRoyale, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, int CallFunc_Conv_StringToInt_ReturnValue, const FString Temp_string_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, const FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, bool Temp_bool_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString Temp_string_Variable, int CallFunc_Get_Shrink_Index_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Get_Shrink_Index_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, const byte[] Temp_byte_Variable, Vector CallFunc_Random_Get_Fake_Bomb_Point_Pos, bool CallFunc_Random_Get_Fake_Bomb_Point_Success, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_Select_Default, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString Temp_string_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Get_Safe_Area_Center_Pos, int CallFunc_Conv_StringToInt_ReturnValue);// 0x2649560
	void UpdateAliveSideAndPlayer(SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc__S_UpdateSideCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void UpdateBattleState(byte NewState, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void GetGameState(out BP_GameState_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void GetPlayerStartOnWaitingland(out PlayerStart*[] PlayerStarts, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2649560
	void GetBattleRoyaleMode(out BP_Mode_BattleRoyale_C* AsBP SCM Battle Royale, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Mode_BattleRoyale_C* K2Node_DynamicCast_AsBP_Mode_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void InitModeSetting(SolarTablesData_WarmGameMode NewLocalVar, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, FString CallFunc_Conv_BoolToString_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTeamPlayerCount_Num_Mode, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, int CallFunc_Clamp_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_GetAILevelCurrentMatch_ReturnValue, int K2Node_Select_Default, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void GMSpawnAI();// 0x2649560
	void OnMatchEnd(const int RPCID);// 0x2649560
	void OnBattleStateChanged(byte OldState, byte NewState);// 0x2649560
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x2649560
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x2649560
	void PlayerBuyResurrected(BP_PlayerState_BattleRoyale_C* Player);// 0x2649560
	void BattleInitFinished();// 0x2649560
	void OnDSClose();// 0x2649560
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x2649560
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x2649560
	void MatchEnd();// 0x2649560
	void VehicleSnapshot();// 0x2649560
	void Snapshot();// 0x2649560
	void CustomEvent();// 0x2649560
	void OnCountDownFinished();// 0x2649560
	void ExecuteUbergraph_BP_Logic_BattleRoyale(int EntryPoint, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool Temp_bool_Variable, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_Map, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsPackagedForDistribution_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, const int K2Node_Event_RPCId, byte K2Node_CustomEvent_OldState, byte K2Node_CustomEvent_NewState, int Temp_int_Variable, float K2Node_Event_BattleTime, float K2Node_Event_deltaTime, int CallFunc_FFloor_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, SCMPlayerState*[] K2Node_MakeArray_Array, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_CustomEvent_Player, int Temp_int_Variable, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_UpdatePlayerCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc__s_UpdateTeamCountMax_ReturnValue, int CallFunc__S_UpdateSideCount_Current, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_Select_Default, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc__S_SkyDiveFly_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_MapInfoComponent_C* CallFunc_Init_Poison_Circle_MapInfo, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, enum K2Node_Select_Default, bool Temp_bool_Variable, bool K2Node_Select_Default, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, byte Temp_byte_Variable, bool Temp_bool_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, S_SkillState K2Node_Select_Default, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool Temp_bool_Variable, const Transform CallFunc_GetTransform_ReturnValue, BP_CustomRoomManager_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList_____ID___, int[] CallFunc_GetSpawnList_____ID___, byte Temp_byte_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool K2Node_Select_Default, SolarTeamInfo* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, FString CallFunc_Conv_TextToString_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, int CallFunc__s_UpdateTeamCountMax_ReturnValue, bool K2Node_Select_Default, float CallFunc_GetTotalTime_TotalTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_Map, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void BattleStateChanged__DelegateSignature(byte NewState);// 0x2649560
	void OnGoInToBattleState__DelegateSignature();// 0x2649560

--------------------------------
Class: BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 1]
	MulticastInlineDelegateProperty OnBattleStart;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerOut;//[Size: 1]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bZeroMatchFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	MulticastInlineDelegateProperty OnPlayerJoin;//[Size: 1]
	MulticastInlineDelegateProperty OnZeroMatchFinished;//[Size: 1]
	bool bConfigInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	MulticastInlineDelegateProperty OnConfigInitiated;//[Size: 1]
	bool bUseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bDSClosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	MulticastInlineDelegateProperty OnPlayerReconnect;//[Size: 1]
	void Custom Room Start(const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void OnPlayerQuit(SCMPlayerState* Player, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_IsInPreparation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void PresettleAll(const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2649560
	void FinishConfigInitiate();// 0x2649560
	void Update();// 0x2649560
	void Get Current Player Count(out int Result, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x2649560
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x2649560
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x2649560
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x2649560
	void BattleInitFinished();// 0x2649560
	void ReceiveServerLevelLoaded(FString LevelName);// 0x2649560
	void ReceiveBattleBegin();// 0x2649560
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x2649560
	void OnMatchEnd(const int RPCID);// 0x2649560
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x2649560
	void OnDSClose();// 0x2649560
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x2649560
	void OnPlayerReconnect(SCMPlayerState* Player);// 0x2649560
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x2649560
	void ExecuteUbergraph_BP_Logic_Framework(int EntryPoint, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, enum K2Node_CustomEvent_OutType, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_LevelName, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, SCMPlayerState* K2Node_Event_OfflinePlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const int K2Node_Event_RPCId, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc__A_GetDSTime_Time, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc__S_PlayInEditor_bIsEditor, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_Event_CheatPlayer, SCMPlayerState* K2Node_Event_Player, SCMPlayerState* K2Node_Event_CheatPlayer);// 0x2649560
	void OnPlayerReconnect_0__DelegateSignature(SCMPlayerState* Player);// 0x2649560
	void OnConfigInitiated__DelegateSignature();// 0x2649560
	void OnZeroMatchFinished__DelegateSignature();// 0x2649560
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* NewPlayer, bool bIsAi);// 0x2649560
	void OnPlayerOut__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x2649560
	void OnBattleStart__DelegateSignature();// 0x2649560

--------------------------------
Class: CustomRoomManager.GameManagerBase.Info.Actor.Object
	int RoomTeamMemberLimit;//[Offset: 0x228, Size: 1]
	int RoomLeftTime;//[Offset: 0x22c, Size: 1]
	bool bIsGameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	FString JobName;//[Offset: 0x238, Size: 1]
	bool bIsWeaponSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bIsVehicleSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	<FString,CustomParamConfig> CustomParamConfigMap;//[Offset: 0x250, Size: 1]
	UserSetting[] UserSettingList;//[Offset: 0x2a0, Size: 1]
	byte[] WeaponTypeAvailableList;//[Offset: 0x2b0, Size: 1]
	byte[] VehicleClassAvailableList;//[Offset: 0x2c0, Size: 1]
	int[] WeaponSettingBlacklist;//[Offset: 0x2d0, Size: 1]
	int[] VehicleTypeSettingBlacklist;//[Offset: 0x2e0, Size: 1]
	MulticastInlineDelegateProperty WeaponTypeAvailableChangedEvent;//[Size: 1]
	MulticastInlineDelegateProperty WeaponSettingBlacklistChangedEvent;//[Size: 1]
	MulticastInlineDelegateProperty VehicleClassAvailableChangedEvent;//[Size: 1]
	MulticastInlineDelegateProperty VehicleTypeSettingBlacklistChangedEvent;//[Size: 1]
	void WeaponTypeAvailableChangedEvent__DelegateSignature(out const byte[] WeaponTypeAvailableList);// 0x2649560
	void WeaponSettingBlacklistChangedEvent__DelegateSignature(out const int[] WeaponSettingBlacklist);// 0x2649560
	void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(out const int[] VehicleTypeSettingBlacklist);// 0x2649560
	void VehicleClassAvailableChangedEvent__DelegateSignature(out const byte[] VehicleClassAvailableList);// 0x2649560
	void ReceiveUserSettingChanged(FString Name, FString Value);// 0x203aa30
	void ReceiveTournamentDealy();// 0x1571170
	void ReceivePlayerRemoved(const SCMPlayerState* Player, enum reason);// 0x203a960
	void OnUserSettingChangedEvent(FString Name, CustomParamConfig ConfigInfo, FString Value);// 0x2649560
	void OnTournamentDealy();// 0x2649560
	void OnRoomOwnerLeftRoom();// 0x203a940
	void OnRep_WeaponTypeAvailableList();// 0x203a920
	void OnRep_WeaponSettingBlacklist();// 0x203a900
	void OnRep_VehicleTypeSettingBlacklist();// 0x203a8e0
	void OnRep_VehicleClassAvailableList();// 0x203a8c0
	void OnPlayerRemovedFromRoom(const SCMPlayerState* Player, enum reason);// 0x2649560
	bool OnGameStart();// 0x2649560
	void OnClientRoomDataReady();// 0x2649560
	bool IsWeaponTypeAvailable(byte WeaponType);// 0x203a830
	bool IsWeaponSettingOpen();// 0x203a810
	bool IsWeaponAvailable(int weaponid);// 0x203a770
	bool IsVehicleTypeAvailable(int VehicleTypeID);// 0x203a6d0
	bool IsVehicleSettingOpen();// 0x203a6b0
	bool IsVehicleClassAvailable(byte VehicleClassValue);// 0x203a620
	bool IsRoomOwner(const SCMPlayerState* Player);// 0x203a580
	bool IsRoomHasMinimalSides();// 0x203a550
	bool IsRoomHasEnoughPlayers();// 0x203a520
	byte[] GetWeaponTypeAvailableList();// 0x203a2b0
	void GetWeaponSettingLists(out int[] OutWeaponBlacklist, out int[] OutWeaponWhitelist);// 0x203a190
	int[] GetWeaponSettingBlacklist();// 0x203a0c0
	void GetVehicleTypeSettingLists(out int[] OutVehicleBlacklist, out int[] OutVehicleWhitelist);// 0x2039fa0
	int[] GetVehicleTypeSettingBlacklist();// 0x2039ed0
	byte[] GetVehicleClassAvailableList();// 0x2039e00
	FString GetModeParam(FString Name, out CustomParamConfig ParamInfo);// 0x2039c00
	void ExecuteGameStart();// 0x7debe0
	bool CheckWeaponTypeCanSetting(enum WeaponUIType);// 0x2039af0
	bool CheckWeaponCanSetting(int weaponid);// 0x2039a50
	bool CheckVehicleTypeCanSetting(int VehicleTypeID);// 0x20399b0
	bool CheckVehicleClassCanSetting(enum VehicleClass);// 0x2039920

--------------------------------
Class: CustomParamConfig
	int DisplayName;//[Offset: 0x0, Size: 1]
	int Category;//[Offset: 0x4, Size: 1]
	int Desc;//[Offset: 0x8, Size: 1]
	enum ValueType;//[Offset: 0xc, Size: 1]
	FString DefaultValue;//[Offset: 0x10, Size: 1]
	FString[] ValueRange;//[Offset: 0x20, Size: 1]
	class UserWidget* StyleClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: UserSetting

--------------------------------
Class: BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x580, Size: 1]
	BPC_PlayerManager_C* PlayerManager;//[Offset: 0x588, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x590, Size: 1]
	MulticastInlineDelegateProperty OnBasicSystemReady;//[Size: 1]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	MulticastInlineDelegateProperty OnSideListChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnOBPlayerListChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRoomDataChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSidePosInteamChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSideDataPostChanged;//[Size: 1]
	int WarmGameID;//[Offset: 0x600, Size: 1]
	MulticastInlineDelegateProperty OnPlayerBattleStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGameStateChanged;//[Size: 1]
	enum GameState;//[Offset: 0x628, Size: 1]
	void OnRep_GameState();// 0x2649560
	void SetGameState(enum NewState);// 0x2649560
	void OnDataManagerPrepare();// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnSideListChange(out const SCMSideData[] SideList);// 0x2649560
	void OnOBPlayerListChange();// 0x2649560
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x2649560
	void OnSidePosInTeamChange(FString SideName);// 0x2649560
	void OnSideListPostChanged();// 0x2649560
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x2649560
	void ExecuteUbergraph_BP_GameState_Framework(int EntryPoint, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString Temp_string_Variable, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SCMSideData[] K2Node_Event_SideList, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, FString K2Node_Select_Default, const CustomRoomData K2Node_Event_InCustomRoomData, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString K2Node_Event_SideName, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, bool CallFunc_IsPlayingReplay_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, const SCMPlayerState* K2Node_Event_PlayerState, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void OnGameStateChanged__DelegateSignature(enum NewState);// 0x2649560
	void OnPlayerBattleStateChanged__DelegateSignature(SCMPlayerState* Player);// 0x2649560
	void OnSideDataPostChanged__DelegateSignature();// 0x2649560
	void OnSidePosInteamChanged__DelegateSignature(FString SideName);// 0x2649560
	void OnRoomDataChanged__DelegateSignature(CustomRoomData RoomData);// 0x2649560
	void OnOBPlayerListChanged__DelegateSignature();// 0x2649560
	void OnSideListChanged__DelegateSignature();// 0x2649560
	void OnBasicSystemReady__DelegateSignature();// 0x2649560

--------------------------------
Class: SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum InGameState;//[Offset: 0x470, Size: 1]
	CustomRoomData CustomRoomData;//[Offset: 0x490, Size: 1]
	bool bCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	GameManagerBase*[] GameManagers;//[Offset: 0x510, Size: 1]
	GameDataManager* GameDataManager;//[Offset: 0x520, Size: 1]
	GameJobManager* GameJobManager;//[Offset: 0x528, Size: 1]
	CGMManagerConfigComponent* ManagerConfigComponent;//[Offset: 0x540, Size: 1]
	CGFormula* InsFormula;//[Offset: 0x548, Size: 1]
	SolarPlayerState*[] PlayersWithTrackingAbility;//[Offset: 0x550, Size: 1]
	SpatializeInfoTrack*[] TrackInfos;//[Offset: 0x560, Size: 1]
	void SetRoomPoolPrizeType(int TypeID);// 0x20b35e0
	void SetRoomPasssd(FString Passwd);// 0x20b34f0
	void SetRoomName(FString Name);// 0x20b3400
	void SetRoomLevelLimit(int Level);// 0x20b3370
	void SetRoomEnableSwapPos(bool bIsEnabled);// 0x20b32e0
	void SetRoomEnableInvite(bool bIsEnabled);// 0x20b3250
	void OnTournamentBattleEnd();// 0x20b2d80
	void OnSidePosInTeamChange(FString SideName);// 0x2649560
	void OnSideListPostChanged();// 0x2649560
	void OnSideListChange(out const SCMSideData[] SideList);// 0x2649560
	void OnServerCustomRoomDataReady();// 0x20b2d60
	void OnRep_InGameState();// 0x20b2d40
	void OnRep_GameManagerList();// 0x8f2720
	void OnRep_GameJobManager();// 0x20b2d20
	void OnRep_GameDataManager();// 0x20b2d00
	void OnRep_CustomRoomData();// 0x20b2ce0
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x2649560
	void OnOBPlayerListChange();// 0x2649560
	void OnDataManagerPrepare();// 0x2649560
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x2649560
	void NotifyVipPlayerJoin(int FlagID, byte VipType, FString NickName, bool bCustomRoom, bool bInTournament);// 0x20b21d0
	void NotifyRoomDataChanged();// 0x20b21b0
	void MultiClientAllManagersOnRepDelegate__DelegateSignature();// 0x2649560
	bool IsNeedCalculateTournamentPoints();// 0x20b1e90
	bool IsInTournament();// 0x20b1e50
	bool IsCustomRoomMode();// 0x20b1e30
	bool IsAtNonSettlementStage();// 0x20b1e00
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x20b1d20
	TournamentData GetTournamentData();// 0x20b1c20
	CGMManagerConfigComponent* GetManagerConfigComponent();// 0x20b1aa0
	CGFormula* GetFormula();// 0x20b1a40
	CustomRoomData GetCustomRoomData();// 0x20b1790
	CGMGameplayConfig* GetCGMGameplayConfig();// 0x20b1760
	void ClearCustomRoomData();// 0x20b1370
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x20b11f0

--------------------------------
Class: SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool IsBattleSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	enum BattleEndType;//[Offset: 0x462, Size: 1]
	bool IsBattleOver();// 0x2095ea0
	bool GetIsBattleSettlement();// 0x2095ba0
	enum GetBattleEndType();// 0x2095b80

--------------------------------
Class: GameDataManager.GameManagerBase.Info.Actor.Object
	int[] IntegerValues;//[Offset: 0x230, Size: 1]
	float[] FloatValues;//[Offset: 0x240, Size: 1]
	byte[] ByteValues;//[Offset: 0x250, Size: 1]
	bool[] BoolValues;//[Offset: 0x260, Size: 1]
	Vector[] FVectorValues;//[Offset: 0x270, Size: 1]
	FString[] FStringValues;//[Offset: 0x280, Size: 1]
	SCMHostData GlobalDataMap;//[Offset: 0x2f0, Size: 1]
	<FString,SCMHostData> SideDataMap;//[Offset: 0x778, Size: 1]
	<FString,SCMHostData> PlayerDataMap;//[Offset: 0x7c8, Size: 1]
	SCMHostData SideDataDefaultTemplate;//[Offset: 0x818, Size: 1]
	SCMHostData PlayerDataDefaultTemplate;//[Offset: 0xca0, Size: 1]
	<FString,Rank*> RanKMap;//[Offset: 0x1128, Size: 1]
	DataTable* DataTable;//[Offset: 0x1198, Size: 1]
	DataTable* GeneralDataTable;//[Offset: 0x11a0, Size: 1]
	void RemoveHost(enum HostType, FString HostID);// 0x2047050
	void RemoveData(enum HostType, FString HostID, FString DataName, enum DataSetType);// 0x2046ed0
	void NotifyRemoveHost(enum HostType, FString HostID);// 0x2046980
	void AddDataByTableRow(FName RowName, out const SCMDataBoardRow InTableRow);// 0x2045740

--------------------------------
Class: SCMHostData
	HostChangeData DataChangeToGlobal;//[Offset: 0x0, Size: 1]
	HostChangeData DataChangeToSide;//[Offset: 0xf0, Size: 1]
	HostChangeData DataChangeToSelf;//[Offset: 0x1e0, Size: 1]
	<FString,SCMSaveData> DataMap;//[Offset: 0x2d0, Size: 1]
	<FString,SCMArrayData> ArrayDataMap;//[Offset: 0x320, Size: 1]
	<FString,SCMMapData> MapDataMap;//[Offset: 0x370, Size: 1]
	MulticastInlineDelegateProperty SCMDataChangeDelegate;//[Size: 1]
	FString Name;//[Offset: 0x470, Size: 1]
	enum HostType;//[Offset: 0x480, Size: 1]

--------------------------------
Class: HostChangeData
	<FString,enum> DataChangeMap;//[Offset: 0x0, Size: 1]
	<FString,SCMChangeDataArray> ArrayChangeMap;//[Offset: 0x50, Size: 1]
	<FString,SCMChangeDataMap> MapChangeMap;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: SCMChangeDataArray
	enum[] ChangeType;//[Offset: 0x0, Size: 1]
	uint32[] ChangeIndexArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SCMChangeDataMap
	enum[] ChangeType;//[Offset: 0x0, Size: 1]
	FString[] ChangeKeyArray;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SCMSaveData.SCMSaveDataBase

--------------------------------
Class: SCMSaveDataBase
	FString Name;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x10, Size: 1]
	enum RepType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: SCMArrayData.SCMSaveDataBase

--------------------------------
Class: SCMMapData.SCMSaveDataBase

--------------------------------
Class: Rank.Object
	<uint32,SpecificRankChangeEventMap(MulticastInlineDelegateProperty)> SpecificRankChangeEventMap;//[Offset: 0x28, Size: 1]
	SCMRankListMulticast[] RankListChangeMulticasts;//[Offset: 0x78, Size: 1]
	enum RankType;//[Offset: 0xa8, Size: 1]
	enum HostType;//[Offset: 0xa9, Size: 1]

--------------------------------
Class: SCMRankListMulticast
	int BeginRank;//[Offset: 0x0, Size: 1]
	int EndRank;//[Offset: 0x4, Size: 1]
	MulticastInlineDelegateProperty RankListChangeMulticast;//[Size: 1]

--------------------------------
Class: SCMDataBoardRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 1]
	enum DataSetType;//[Offset: 0x9, Size: 1]
	FString Default;//[Offset: 0x10, Size: 1]
	FString[] DefaultArray;//[Offset: 0x20, Size: 1]
	<FString,FString> DefaultMap;//[Offset: 0x30, Size: 1]
	enum HostType;//[Offset: 0x80, Size: 1]
	enum ReplicateType;//[Offset: 0x81, Size: 1]
	enum SettleGatherType;//[Offset: 0x82, Size: 1]
	enum Rank;//[Offset: 0x83, Size: 1]

--------------------------------
Class: GameJobManager.GameManagerBase.Info.Actor.Object
	MulticastInlineDelegateProperty SideListChangeEvent;//[Size: 1]
	SCMSideData[] SideData;//[Offset: 0x238, Size: 1]
	<FString,uint32> SideIndexMap;//[Offset: 0x248, Size: 1]
	<FString,SCMPlayerState*> PlayerIndexMap;//[Offset: 0x298, Size: 1]
	SCMPlayerState*[] OBPlayerList;//[Offset: 0x2e8, Size: 1]
	DataTable* JobDataTable;//[Offset: 0x318, Size: 1]
	SideAttributeSetArray SideAttributeSets;//[Offset: 0x320, Size: 1]
	bool SwitchPlayerSideAndJob(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x20476a0
	bool SwitchPlayers(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x2047770
	bool SwitchPlayerPosInTeam(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x20475d0
	bool SwitchOBPlayerAndPlayer(SCMPlayerState* OBPlayer, SCMPlayerState* Player);// 0x2047500
	void SideListChangeEvent__DelegateSignature(out const SCMSideData[] SideList);// 0x2649560
	void SetTimerToNoticeSideDataChanged();// 0x20474e0
	void ServerSidePosInTeamChange(FString SideName);// 0x2047150
	bool PreAssignOBToPlayer(SCMPlayerState* Player);// 0x2046e30
	bool PreAssignJobToPlayer(SCMPlayerState* Player, FString Side, FString Job, int PosInTeam);// 0x2046ca0
	void OnRep_SideDataList();// 0x2046bf0
	void OnRep_OBPlayerList();// 0x2046bd0
	void OnPlayerStateEndPlay(Actor* PlayerState, byte EndPlayReason);// 0x2046b00
	void OnOBPlayerListChanged(SCMPlayerState* ChangedPlayer);// 0x2046a70
	bool IsPlayerSameTeam(SCMPlayerState* TargetPlayer, FString TargetPlayerId);// 0x2046890
	bool IsExistSide(FString NewSide);// 0x20467e0
	int[] GetTeamAssignableNumArray();// 0x2046760
	bool GetSidePreJoinPlayerList(FString SideName, out SCMPlayerState*[] OutPreJoinPlayerList);// 0x2046650
	bool GetSidePlayerList(FString SideName, out SCMPlayerState*[] OutPlayerList);// 0x2046540
	bool GetSideJobPlayerList(FString SideName, FString JobName, out SCMPlayerState*[] OutPlayerList);// 0x20463d0
	bool GetSideData(FString InSideName, out SCMSideData outData);// 0x2046220
	bool GetSideAttributeSet(out SideAttributeSet OutSet, FString InSideName);// 0x2046080
	bool GetPreOBPlayerIDList(out FString[] OutPlayerIDList);// 0x2045fa0
	SCMPlayerState* GetPlayerByPlayerID(FString InPlayerID);// 0x2045ef0
	bool GetOBPlayerList(out SCMPlayerState*[] OutPlayerList);// 0x2045e30
	bool GetJobDataBySideAndJob(FString NewSide, FString NewJob, out SCMJobData outData);// 0x2045cb0
	int GetAssignedSideCount();// 0x2045ba0
	int GetAllSidePlayerNumber();// 0x2045b70
	SCMSideData[] GetAllSideData();// 0x2045b40
	bool ChangePlayerToOB(SCMPlayerState* Player);// 0x2045a70
	bool ChangePlayerJob(SCMPlayerState* Player, FString NewSide, FString NewJob, int PosInTeam);// 0x20458e0

--------------------------------
Class: SCMSideData
	SCMPlayerState*[] SidePlayerList;//[Offset: 0x0, Size: 1]
	SCMJobData[] JobMap;//[Offset: 0x10, Size: 1]
	MulticastInlineDelegateProperty OnPlayerJoinSideEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerQuitSideEvent;//[Size: 1]
	FString SideName;//[Offset: 0x40, Size: 1]
	byte TeamID;//[Offset: 0x50, Size: 1]
	int AssignableNum;//[Offset: 0x54, Size: 1]
	bool IsSideSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: SCMJobData
	FString JobName;//[Offset: 0x0, Size: 1]
	int MaxCount;//[Offset: 0x10, Size: 1]
	int MatchCount;//[Offset: 0x14, Size: 1]
	int CurrentMatchCount;//[Offset: 0x18, Size: 1]
	SCMPlayerState*[] JobPlayerList;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SideAttributeSetArray.FastArraySerializer
	SideAttributeSet[] AttributeSets_Internal;//[Offset: 0x110, Size: 1]

--------------------------------
Class: CGMManagerConfigComponent.SolarGameplayConfigComponent.ActorComponent.Object

--------------------------------
Class: BPC_PlayerManager_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	BP_PlayerState_Framework_C*[] AliveRealPlayers;//[Offset: 0xb8, Size: 1]
	BP_PlayerState_Framework_C*[] AliveAiPlayers;//[Offset: 0xc8, Size: 1]
	BPC_Death_Framework_C* DeathComponent;//[Offset: 0xd8, Size: 1]
	BP_PlayerState_Framework_C*[] RealPlayers;//[Offset: 0xe0, Size: 1]
	<FString,int> SideRealPlayerCount;//[Offset: 0xf0, Size: 1]
	BP_PlayerState_Framework_C*[] GetPlayerList(byte Type, byte Temp_byte_Variable, BP_PlayerState_Framework_C*[] K2Node_Select_Default);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnPlayerDie(BP_PlayerState_Framework_C* Player);// 0x2649560
	void OnPlayerResurrect(BP_PlayerState_Framework_C* Player);// 0x2649560
	void BattleStart();// 0x2649560
	void PlayerOut(BP_PlayerState_Framework_C* Player);// 0x2649560
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x2649560
	void ExecuteUbergraph_BPC_PlayerManager(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Copy_ReturnValue, int K2Node_Select_Default, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue);// 0x2649560

--------------------------------
Class: BPC_Death_Framework_C.CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 1]
	MulticastInlineDelegateProperty OnPlayerDie;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerResurrect;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerKill;//[Size: 1]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x108, Size: 1]
	S_SkillState SkillStateAfterRevive;//[Offset: 0x110, Size: 1]
	void GMRevive(SCMPlayerState* InKilled, out bool AutoRevive, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLastDeathLocation_Output, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void Try Buy Resurrect(SCMPlayerState* Player, SolarPointDamageEvent DamageEvent, out bool Succeed, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsOfflinePlayer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CheckAllTeammateDied_IfAllDied, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	bool CheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled, BP_DefenderManager_C* CallFunc_GetDefenderManager_AsBP_Defender_Manager, bool CallFunc_UpdateCheckTerminator_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void GetDefenderManager(out BP_DefenderManager_C* AsBP Defender Manager, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void UpdateDataTrace(byte Type, SCMPlayerState* Killer, SCMPlayerState* Killed, out const SolarPointDamageEvent DamageEvent, Actor* DamageCauser, <FString,FString> AdditionalData, int MoneyNum, <FString,FString> Temp, byte Temp_byte_Variable, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_DeathReason2String_TraceString, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, FString K2Node_Select_Default, FString CallFunc_Array_Get_Item, <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x2649560
	void ExecuteUbergraph_BPC_Death_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_Killer, SCMPlayerState* K2Node_Event_Killed, const SCMPlayerState*[] K2Node_Event_Assists, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, SCMPlayerState* K2Node_Event_InAttacker, SCMPlayerState* K2Node_Event_InDeathVergePlayer, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, bool CallFunc_CheckTerminator_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, SolarCharacter* K2Node_Event_ResurrectCharacter, SCMPlayerState* K2Node_Event_ResurrectPlayer, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void OnPlayerKill__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x2649560
	void OnPlayerResurrect__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x2649560
	void OnPlayerDie__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x2649560

--------------------------------
Class: CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x2649560
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2649560

--------------------------------
Class: CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	BP_ConfigSave_C* ModeConfig;//[Offset: 0x278, Size: 1]
	bool                                                                                                     ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	CustomRoomData GetCustomRoomData(bool Temp_bool_Variable, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, CustomRoomData K2Node_Select_Default);// 0x2649560
	bool IsCustomRoomMode(bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default);// 0x2649560
	void GetSavedConfig(out BP_ConfigSave_C* AsBP Config Save, out bool bSuccess, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ConfigSave_C* K2Node_DynamicCast_AsBP_Config_Save, bool K2Node_DynamicCast_bSuccess);// 0x2649560

--------------------------------
Class: BP_ConfigSave_C.SaveGame.Object
	bool bEnableAiTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	CustomRoomData CustomRoomConfig;//[Offset: 0x30, Size: 1]
	bool bIsCustomRoomHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]

--------------------------------
Class: BP_DefenderManager_C.DefenderManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 1]
	UI_OpeningShow_C* DefenderUI;//[Offset: 0x2c0, Size: 1]
	float ShowTime-Defender;//[Offset: 0x2c8, Size: 1]
	float ShowTime-Self;//[Offset: 0x2cc, Size: 1]
	byte UiState;//[Offset: 0x2d0, Size: 1]
	int TerminatorReward;//[Offset: 0x2d4, Size: 1]
	bool DataReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	UI_Common_Transition_Anim_C* Anim;//[Offset: 0x2e0, Size: 1]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	void OnRep_BattleStarted();// 0x2649560
	void DataTraceDefender(SolarPlayerState* Target, out FString Name, out FString Data, bool Temp_bool_Variable, bool CallFunc_IsTerminator_ReturnValue, bool CallFunc_IsDefender_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x2649560
	void GetExtraReward(out int Reward);// 0x2649560
	void SetShowTime(float ShowTime-Self, float ShowTime-Defender);// 0x2649560
	void GetTotalTime(out float TotalTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	void GetUI(out UI_OpeningShow_C* Output_Get, const FString[] Temp_string_Variable, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_OpeningShow_C* K2Node_DynamicCast_AsUI_Opening_Show, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, const enum[] Temp_byte_Variable, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x2649560
	void OnRep_UIState(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsOBPlayer_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void [S]ShowDefenderUI();// 0x2649560
	void OnUIStateChanged(byte UiState);// 0x2649560
	void OnDefenderDataReady();// 0x2649560
	void ShowDefenderUIForReplay();// 0x2649560
	void OnSideHeroPickEnd_Event(FString Side);// 0x2649560
	void CustomEvent(enum NewState);// 0x2649560
	void ExecuteUbergraph_BP_DefenderManager(int EntryPoint, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_UIState, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const SolarPlayerState*[] CallFunc_GetDefenderList_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString K2Node_CustomEvent_Side, bool CallFunc_IsOBPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_GetInGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: DefenderManager.GameManagerBase.Info.Actor.Object
	MulticastInlineDelegateProperty OnRepDefenderListNotify;//[Size: 1]
	TerminatorNotifyUIConfig TerminatorNotifyUIConfig;//[Offset: 0x238, Size: 1]
	class SolarTrailEffect* TrailEffect;//[Offset: 0x260, Size: 1]
	FString DefenderSide;//[Offset: 0x268, Size: 1]
	SolarPlayerState*[] DefenderList;//[Offset: 0x278, Size: 1]
	FString TerminatorPlayerId;//[Offset: 0x290, Size: 1]
	bool UpdateCheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled);// 0x203eb80
	void StartConfirmDefender();// 0x203eb40
	void ShowDefenderUIForReplay();// 0x2649560
	void OnRep_DefenderList();// 0x203e090
	bool IsTerminator(FString InSolarPlayerID);// 0x203da80
	bool IsDefender(FString InPlayerSide);// 0x203d8f0
	SolarPlayerState*[] GetDefenderList();// 0x203d7d0

--------------------------------
Class: UI_OpeningShow_C.UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x468, Size: 1]
	WidgetAnimation* Enter_Anim;//[Offset: 0x470, Size: 1]
	Image* de_img_Bg;//[Offset: 0x478, Size: 1]
	Image* Img_Bg;//[Offset: 0x480, Size: 1]
	Image* Img_Flash_Left;//[Offset: 0x488, Size: 1]
	Image* Img_Flash_Right;//[Offset: 0x490, Size: 1]
	Image* Img_TitleBg;//[Offset: 0x498, Size: 1]
	Image* M_Glitch_Blue_Left;//[Offset: 0x4a0, Size: 1]
	Image* M_Glitch_Blue_Right;//[Offset: 0x4a8, Size: 1]
	Image* my_img_Bg;//[Offset: 0x4b0, Size: 1]
	Overlay* Overlay_Tip;//[Offset: 0x4b8, Size: 1]
	RichTextBlock* Txt_Tips;//[Offset: 0x4c0, Size: 1]
	SolarTextBlock* Txt_Title;//[Offset: 0x4c8, Size: 1]
	SolarTextBlock* Txt_Title;//[Offset: 0x4d0, Size: 1]
	SolarTextBlock* Txt_Title_VX;//[Offset: 0x4d8, Size: 1]
	enum BP_TeamType;//[Offset: 0x4e0, Size: 1]
	int TerminatorReward;//[Offset: 0x4e4, Size: 1]
	void UpdateOpeningShow(enum TeamType);// 0x2649560
	void OnSolarUIOpened();// 0x2649560
	void OnSolarUIClosed();// 0x2649560
	void ExecuteUbergraph_UI_OpeningShow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum K2Node_Event_TeamType, UIDefenderPlaerShowWidget*[] K2Node_MakeArray_Array, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UIDefenderPlaerShowWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int K2Node_Select_Default, bool CallFunc_Conv_IntToBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, LinearColor K2Node_Select_Default);// 0x2649560

--------------------------------
Class: UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x348, Size: 1]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x350, Size: 1]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x358, Size: 1]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x360, Size: 1]
	WidgetAnimation* Exit_Anim;//[Offset: 0x368, Size: 1]
	int PlayerNum;//[Offset: 0x370, Size: 1]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	FName LevelName;//[Offset: 0x378, Size: 1]
	FString ActorName;//[Offset: 0x380, Size: 1]
	FString ActorName;//[Offset: 0x390, Size: 1]
	FString ActorName;//[Offset: 0x3a0, Size: 1]
	FString ActorName;//[Offset: 0x3b0, Size: 1]
	FString CameraName;//[Offset: 0x3c0, Size: 1]
	FString CameraName;//[Offset: 0x3d0, Size: 1]
	FString CameraName;//[Offset: 0x3e0, Size: 1]
	FString CameraName;//[Offset: 0x3f0, Size: 1]
	SolarPlayerState*[] MyTeamPlayerState;//[Offset: 0x400, Size: 1]
	SolarPlayerState*[] DefenderTeamPlayerState;//[Offset: 0x410, Size: 1]
	UIDefenderPlaerShowWidget*[] ShowWidget;//[Offset: 0x420, Size: 1]
	Actor*[] OutActors;//[Offset: 0x430, Size: 1]
	SceneCapture2D*[] OutSceneCapture2Ds;//[Offset: 0x440, Size: 1]
	WidgetTransform[] Transforms;//[Offset: 0x450, Size: 1]
	void UpdateOpeningShow(enum TeamType);// 0x2649560
	void SwitchTeamShow(enum TeamType);// 0x230fc50
	void ShowPlayerInfo();// 0x230fc30
	void SetMyTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x230f2c0
	void SetDefenderTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x230e570
	void CloseDefenderTeamShowWidget();// 0x230d140

--------------------------------
Class: UIDefenderPlaerShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScaleBox* ScaleBox_Card;//[Offset: 0x348, Size: 1]
	FString playerName;//[Offset: 0x350, Size: 1]
	int Level;//[Offset: 0x360, Size: 1]
	int RankLevelID;//[Offset: 0x364, Size: 1]
	int PlayerGender;//[Offset: 0x368, Size: 1]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	int PlayerSeat;//[Offset: 0x370, Size: 1]
	bool bIsMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	int CardPose;//[Offset: 0x378, Size: 1]
	int Cardbackground;//[Offset: 0x37c, Size: 1]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x380, Size: 1]
	int CharacterExp;//[Offset: 0x390, Size: 1]
	MedalInfo[] TargetCardMedalArray;//[Offset: 0x398, Size: 1]
	SolarPlayerState* PlayerState;//[Offset: 0x3a8, Size: 1]
	SolarBusinessCardCharacter* RTCharacter;//[Offset: 0x3b0, Size: 1]
	Actor* RTCharacterBackground;//[Offset: 0x3b8, Size: 1]
	Vector RTLocation;//[Offset: 0x3c0, Size: 1]
	void SetPlayerShowInfo(SolarPlayerState* PS, bool bIsSelf, int Seat, bool bIsSelfTeam, int SelfLevel, Vector CardRTLocation);// 0x230f370
	void SetPlayerBusinessInfo(SolarPlayerState* PS, int PlayerNumber, ExpRankMedalData ExpRankMedalData);// 0x2649560
	void SetCharacterSkin();// 0x8f2720
	void SetBusinessCard(int PoseId, int BackgroundId, int SkinId, ScaleBox* ParentPanel);// 0x2649560
	void OnRefreshWidget();// 0x230e250
	FString GetNameCardCharacterPathByCharacterIDAndCardPose(int CharacterId, int CardPoseID);// 0x2649560

--------------------------------
Class: SolarBusinessCardCharacter.Actor.Object
	void SetSkin(SkeletalMesh* LoadedSkinRes, MaterialInterface* LoadedCharaSkinRes);// 0x2649560

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x238, Size: 1]
	void OnInterpToggle(bool bEnable);// 0x3ed2320

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x228, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 1]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x3b0, Size: 1]
	float FOVAngle;//[Offset: 0x3b4, Size: 1]
	float OrthoWidth;//[Offset: 0x3b8, Size: 1]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x3c0, Size: 1]
	bool bAutoSceneCapture2DSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 1]
	byte CompositeMode;//[Offset: 0x3c9, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x3d0, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x970, Size: 1]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x974, Size: 1]
	float CustomNearClippingPlane;//[Offset: 0x978, Size: 1]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x980, Size: 1]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x9c4, Size: 1]
	Vector ClipPlaneNormal;//[Offset: 0x9d0, Size: 1]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9dc, Size: 1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9dc, Size: 1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	bool bControlSceneCaptureComponent2DFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 1]
	int MaxSceneCaptureComponent2DFPS;//[Offset: 0x9e4, Size: 1]
	void CaptureScene();// 0x3ef52b0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x3ef5150

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x318, Size: 1]
	byte CaptureSource;//[Offset: 0x319, Size: 1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31a, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31a, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x320, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x330, Size: 1]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x340, Size: 1]
	Actor*[] ShowOnlyActors;//[Offset: 0x350, Size: 1]
	float LODDistanceFactor;//[Offset: 0x360, Size: 1]
	float MaxViewDistanceOverride;//[Offset: 0x364, Size: 1]
	int CaptureSortPriority;//[Offset: 0x368, Size: 1]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x370, Size: 1]
	FString ProfilingEventName;//[Offset: 0x390, Size: 1]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x3ef8bc0
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x3ef8af0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x3ef8560
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x3ef8380
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x3ef82b0
	void HideComponent(PrimitiveComponent* InComponent);// 0x3ef5d60
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x3ef5c90
	void ClearShowOnlyComponents();// 0x3ef52f0
	void ClearHiddenComponents();// 0x3ef52d0

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 1]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x178, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x180, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x198, Size: 1]
	float MinDesiredWidth;//[Offset: 0x440, Size: 1]
	enum TextTransformPolicy;//[Offset: 0x444, Size: 1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x448, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x6f0, Size: 1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x3519c80
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x3519bf0
	void SetText(out const FText InText);// 0x20424b0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3519340
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3518e00
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3518c70
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x3518bf0
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3518b60
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3518a40
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3518950
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3518840
	FText GetText();// 0x3517bf0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x3517970
	void ClearAllDefaultStyleOverrides();// 0x3517490

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x68, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x90, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x98, Size: 1]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa8, Size: 1]
	LinearColor HighlightColor;//[Offset: 0xd0, Size: 1]
	SlateBrush HighlightShape;//[Offset: 0xe0, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x178, Size: 1]
	SlateBrush UnderlineBrush;//[Offset: 0x210, Size: 1]

--------------------------------
Class: BP_HeroPickManager_C.HeroPickManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 1]
	MulticastInlineDelegateProperty OnAllHeroPickEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnSideHeroPickEnd;//[Size: 1]
	void ReceiveAllHeroPickEnd();// 0x2649560
	void ReceiveSidePickHeroEnd(FString SideName);// 0x2649560
	void ExecuteUbergraph_BP_HeroPickManager(int EntryPoint, FString K2Node_Event_SideName);// 0x2649560
	void OnSideHeroPickEnd__DelegateSignature(FString Side);// 0x2649560
	void OnAllHeroPickEnd__DelegateSignature();// 0x2649560

--------------------------------
Class: HeroPickManager.GameManagerBase.Info.Actor.Object
	HeroPickInfo*[] HeroPickArray;//[Offset: 0x228, Size: 1]
	float HeroPickTime;//[Offset: 0x238, Size: 1]
	float TransitionAnimTime;//[Offset: 0x23c, Size: 1]
	float WaitingToStartTime;//[Offset: 0x240, Size: 1]
	float WaitingForEndTime;//[Offset: 0x244, Size: 1]
	HeroPickRuleBase* AIPickRule;//[Offset: 0x248, Size: 1]
	SoftObjectPath[] ElementLevels;//[Offset: 0x250, Size: 1]
	bool bIsAllPlayerSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool SideBeginHeroPick(FString SideName);// 0x2059d50
	void SetHeroPickTime(float InHeroPickTime);// 0x20598c0
	void ReceiveSidePickHeroEnd(FString SideName);// 0x2649560
	void ReceiveAllHeroPickEnd();// 0x2649560
	bool PlayerBeginHeroPick(SolarPlayerState* Player);// 0x2059480
	void On_RepAllPlayerSelectEnd();// 0x20593d0
	void AllPlayersGotoPickHero();// 0x2058a90

--------------------------------
Class: HeroPickRuleBase.Object

--------------------------------
Class: TerminatorNotifyUIConfig
	int LocalizationID;//[Offset: 0x0, Size: 1]
	class UINoticeBase* TerminatorNotifyUI;//[Offset: 0x18, Size: 1]
	enum NoticeType;//[Offset: 0x20, Size: 1]
	float NoticeTime;//[Offset: 0x24, Size: 1]

--------------------------------
Class: UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarRichTextBlock* TextWidget;//[Offset: 0x348, Size: 1]
	Image* TxtBg;//[Offset: 0x350, Size: 1]
	Image* Icon;//[Offset: 0x358, Size: 1]
	Image* IconBg;//[Offset: 0x360, Size: 1]
	void ShowEnterAnimation();// 0xbb7300
	void SetIconBrush(FString IconPath);// 0x23145e0
	void SetColor(out const NoticeColorData InColorData);// 0x2314480
	void ResetIsPlayingVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x23142e0
	WidgetAnimation* GetExitAnimation();// 0x2313b10
	WidgetAnimation* GetEnterAnimation();// 0x2313ae0
	void DefaultClose();// 0x2313ac0
	void CloseNotice();// 0x2313a10

--------------------------------
Class: SolarRichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	FText Text;//[Offset: 0x168, Size: 1]
	int LocTextID;//[Offset: 0x180, Size: 1]
	enum PreviewLang;//[Offset: 0x184, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x188, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x190, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a8, Size: 1]
	float MinDesiredWidth;//[Offset: 0x450, Size: 1]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x700, Size: 1]
	void SetWrapTextAt(float InWrapTextAt);// 0x21f5930
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x21f59b0
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x21f5810
	void SetText(out const FText InText);// 0x20424b0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x21f55d0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x21f5520
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x21f5390
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x21f5310
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x21f5280
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x21f5160
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x21f5070
	void SetAutoWrapText(bool InAutoTextWrap);// 0x21f4e30
	enum GetWrappingPolicy();// 0x21f4b40
	DataTable* GetTextStyleSet();// 0x21f4ab0
	FText GetText();// 0x21f4a10
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x21f4890
	void ClearAllDefaultStyleOverrides();// 0x21f4700

--------------------------------
Class: NoticeColorData
	LinearColor TextBg;//[Offset: 0x0, Size: 1]
	LinearColor IconBg;//[Offset: 0x10, Size: 1]
	LinearColor Icon;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 1]

--------------------------------
Class: UI_Common_Transition_Anim_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_Transition;//[Offset: 0x350, Size: 1]
	WidgetAnimation* Anim_Transition_Exit;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Anim_Transition_Loop;//[Offset: 0x360, Size: 1]
	WidgetAnimation* Anim_Transition_Enter;//[Offset: 0x368, Size: 1]
	void OnSolarUIOpened();// 0x2649560
	void ExecuteUbergraph_UI_Common_Transition_Anim(int EntryPoint, int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue);// 0x2649560

--------------------------------
Class: S_SkillState
	enum UniqueAbility_4_1687CEEF476DE16EEE6A42B53EC116E7;//[Offset: 0x0, Size: 1]
	enum TacticsAbility_5_36D081C34231A20607055BA95F67E65B;//[Offset: 0x1, Size: 1]

--------------------------------
Class: SolarVehicleSubsystem.WorldSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty OnVehicleSpawned;//[Size: 1]
	MulticastInlineDelegateProperty OnVehicleDestroyed;//[Size: 1]
	void GetActiveVehicleList(out Actor*[] OutActiveVehicles);// 0x22d9b70

--------------------------------
Class: BP_MapInfoComponent_C.CGMMapInfo.GameModeCompBase.ActorComponent.Object
	AirlineData Airline;//[Offset: 0x180, Size: 1]
	Vector[] SafeAreaCenters;//[Offset: 0x1a8, Size: 1]
	bool StaticAirline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool StaticSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	DataTable* DT_EventTimeline_BattleRoyale;//[Offset: 0x1c0, Size: 1]
	bool UsePoisonCircleMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	Vector2D TempDir;//[Offset: 0x1cc, Size: 1]
	bool UseFakePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	<int,Vector2D> FakePointRangeArr;//[Offset: 0x1d8, Size: 1]
	bool UseFakeBombPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	<int,Vector2D> FakeBombPointRangeArr;//[Offset: 0x230, Size: 1]
	Vector PreCirclePoint;//[Offset: 0x280, Size: 1]
	float[] CircleRadiusArr;//[Offset: 0x290, Size: 1]
	int StaticAirlineID;//[Offset: 0x2a0, Size: 1]
	Int32Range OverrideCenterIndex;//[Offset: 0x2a4, Size: 1]
	void Calculate Required Parameters(out float[] RadiusArr, int Index, out float Radius, out float MaxOffset, out float GoToTheCentreRadius, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_FMin_ReturnValue);// 0x2649560
	void Random Get Fake Bomb Point(out const int Key, out Vector Pos, out bool Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_RandomUnitVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2649560
	void SetFakeBombPointRangeArrr(<int,Vector2D> FakeBombPointRangeArr);// 0x2649560
	void SetFakePointRnageArr(<int,Vector2D> FakePointRnageArr);// 0x2649560
	void Get Safe Area Centers Len(out int Len, int CallFunc_Array_Length_ReturnValue);// 0x2649560
	void CalculateFakePoint(Vector Centre, float SmallRadiu, float LargeRadiu, int Index, out Vector Pos, Vector TempPos, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2649560
	void Join Next(float Radius, float MaxOffset, int LastIndex, out Vector[] TargetArray, float GoToTheCentreRadius, bool AddFlag, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Variable, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Random_Selection_Add, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void Random Selection(float TargetDisMax, float Radius, out Vector[] TargetArray, bool NeedCheckBoundary, out bool Add, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void JudgeBoundary(Vector Pos, float Radius, out bool DontInBoundary, Vector2D NewLocalVar, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsPointInBox_ReturnValue);// 0x2649560
	void Calculate Poison Circle Point Array(out float[] RadiusArr, Vector FirstPoint, bool Failed, int Index, Vector[] TempAreaPosArray, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Calculate_Required_Parameters_Radius, float CallFunc_Calculate_Required_Parameters_MaxOffset, float CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_PoisonCircleMarker_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_GetRandomVectorFromMapDarkData_ReturnValue, int CallFunc_Max_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void Get Safe Area Center(int Index, out Vector Pos, Vector Point, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_StructToJson_Json, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_InRange_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D[] CallFunc_Map_Values_Values, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_Array_Get_Item, Vector2D K2Node_Select_Default, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_CalculateFakePoint_Pos, bool CallFunc_BooleanAND_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item);// 0x2649560
	int GetAirline(out AirlineData Airline, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue);// 0x2649560
	void SetStaticSafeArea(out Vector[] SafeAreaCenters, Int32Range OverrideIndexRange);// 0x2649560
	void SetStaticAirline(AirlineData Airline, int StaticAirlineID);// 0x2649560

--------------------------------
Class: CGMMapInfo.GameModeCompBase.ActorComponent.Object
	Vector[] AreaPosArray;//[Offset: 0xd0, Size: 1]
	int MapID;//[Offset: 0xe0, Size: 1]
	int UsedAirlineID;//[Offset: 0xe4, Size: 1]
	AirlineData UsedAirlineData;//[Offset: 0xe8, Size: 1]
	<int,AirlineData> AirlineDataList;//[Offset: 0x120, Size: 1]
	int MaskWidth;//[Offset: 0x170, Size: 1]
	float MaskScale;//[Offset: 0x174, Size: 1]
	int MapWidth;//[Offset: 0x178, Size: 1]
	int MapHeight;//[Offset: 0x17c, Size: 1]
	void LoadAirlineData();// 0x201b8d0
	void InitInfo(int InMapID);// 0x201b840
	int GetUsedAirlineData(out AirlineData outData);// 0x201b790
	static int GetMapIDByName(SCustomGameState* InGameState, FString Name);// 0x201b660

--------------------------------
Class: BP_PoisonCircleMarker_C.SolarMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 1]
	void ReceiveBeginPlay();// 0x2649560
	void ExecuteUbergraph_BP_PoisonCircleMarker(int EntryPoint);// 0x2649560

--------------------------------
Class: AirlineData
	float AirlineHeight;//[Offset: 0x0, Size: 1]
	float AirlineSpeed;//[Offset: 0x4, Size: 1]
	Vector2D StartPoint;//[Offset: 0x8, Size: 1]
	Vector2D EndPoint;//[Offset: 0x10, Size: 1]
	Vector2D RealStartPoint;//[Offset: 0x18, Size: 1]
	Vector2D RealEndPoint;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CFG_BattleRoyale_C.CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	int                                                                                                     ;//[Offset: 0x284, Size: 1]
	int                                                                                                     ;//[Offset: 0x288, Size: 1]
	int                                                                                                     ;//[Offset: 0x28c, Size: 1]
	BehaviorTree* AI                                                                                                  ;//[Offset: 0x290, Size: 1]
	BehaviorTree* AI                                                                                                  ;//[Offset: 0x298, Size: 1]
	BehaviorTree* AI                                                                                                  ;//[Offset: 0x2a0, Size: 1]
	int                                                                                                     ;//[Offset: 0x2a8, Size: 1]
	DataTable*                                                                                                     ;//[Offset: 0x2b0, Size: 1]
	int AI                                                                                                  ;//[Offset: 0x2b8, Size: 1]
	class SolarBotAIController* AIController;//[Offset: 0x2c0, Size: 1]
	bool                                                                                                     ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float                                                                                                     ;//[Offset: 0x2cc, Size: 1]
	float                                                                                                     ;//[Offset: 0x2d0, Size: 1]
	int                                                                                                     ;//[Offset: 0x2d4, Size: 1]
	int                                                                                                     ;//[Offset: 0x2d8, Size: 1]
	int                                                                                                     ;//[Offset: 0x2dc, Size: 1]
	int                                                                                                     ;//[Offset: 0x2e0, Size: 1]
	int                                                                                                     ;//[Offset: 0x2e4, Size: 1]
	Int32Range                                                                                                     ;//[Offset: 0x2e8, Size: 1]
	Int32Range                                                                                                     ;//[Offset: 0x2f8, Size: 1]
	float                                                                                                     ;//[Offset: 0x308, Size: 1]
	S_SkillState                                                                                                     ;//[Offset: 0x30c, Size: 1]
	S_SkillState                                                                                                     ;//[Offset: 0x30e, Size: 1]
	<int,int>                                                                                                     ;//[Offset: 0x310, Size: 1]
	<int,int>                                                                                                     ;//[Offset: 0x360, Size: 1]
	S_SkillState                                                                                                     ;//[Offset: 0x3b0, Size: 1]
	S_SkillState                                                                                                     ;//[Offset: 0x3b2, Size: 1]
	bool                                                                                                     ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	S_SkillState                                                                                                     ;//[Offset: 0x3b5, Size: 1]

--------------------------------
Class: BP_BattleRoylePoisonCircle_C.BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	FString GetModuleName();// 0x2649560

--------------------------------
Class: BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 1]
	StaticMeshComponent* StaticMeshCicle;//[Offset: 0x4d0, Size: 1]
	StaticMeshComponent* SafeArea;//[Offset: 0x4d8, Size: 1]
	SceneComponent* Scene;//[Offset: 0x4e0, Size: 1]
	<SolarAbilitySystemComponent*,GameplayAbilitySpecHandle> AbilityMap;//[Offset: 0x4e8, Size: 1]
	class GameplayAbility* DamageAbility;//[Offset: 0x538, Size: 1]
	float Distance Threshold;//[Offset: 0x540, Size: 1]
	float InitRadius;//[Offset: 0x544, Size: 1]
	Vector InitPosition;//[Offset: 0x548, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetMeshVisibility(float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x2649560
	void DataTrace(int inInt, Vector Vector, float InFloat, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void ActorOutSpace(Actor* Target, float CallFunc_GetCurrentDamage_ReturnValue, SolarAbilitySystemComponent* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbilityAndActivateOnce_ReturnValue);// 0x2649560
	void ActorEnterSpace(Actor* Target, SolarAbilitySystemComponent* AbilityComponent, SolarAbilitySystemComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2649560
	void ClearAllAbilities(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarAbilitySystemComponent*[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, SolarAbilitySystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2649560
	void OnLoaded_2CF9BD9E4D7B992D773DE7AE62F29135(Object* Loaded);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void [S]SetNextArea(Vector Center, float Radius, float WaitTime, float MoveTime, int DamageLevel);// 0x2649560
	void ShowEffectInside(bool bInside);// 0x2649560
	void Evnet_ResetMaterial();// 0x2649560
	void ReceiveActorEnterPoisonCircle(Actor* Actor);// 0x2649560
	void ReceiveActorLeavePoisonCircle(Actor* Actor);// 0x2649560
	void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int EntryPoint, float CallFunc_GetCurBattleTime_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float K2Node_Event_DeltaSeconds, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_DamageLevel, bool K2Node_Event_bInside, float CallFunc_Conv_IntToFloat_ReturnValue, CircleSafeAreaInfo K2Node_MakeStruct_CircleSafeAreaInfo, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_Event_Actor, Actor* K2Node_Event_Actor);// 0x2649560

--------------------------------
Class: SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	<float,CurveFloat*> MiniMapScaleMap;//[Offset: 0x468, Size: 1]
	CircleSafeAreaInfo[] SafeAreaConfigArr;//[Offset: 0x4b8, Size: 1]
	void SetNextSafeArea(out const CircleSafeAreaInfo AreaInfo);// 0x21273d0
	void Init(out const Vector InSafeAreaCenterPos, float InPoisonCircleRadius);// 0x21261e0
	float GetNextSafeAreaRadius();// 0x2126120
	CurveFloat* GetMiniMapFOVCurveByRadius(float InRadius);// 0x2126090
	float GetCurrentSafeAreaRadius();// 0x2125e90

--------------------------------
Class: CircleSafeAreaInfo.SafeAreaInfoBase
	float Radius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SafeAreaInfoBase
	Vector Location;//[Offset: 0x0, Size: 1]
	float WaitTime;//[Offset: 0xc, Size: 1]
	float ShrinkTime;//[Offset: 0x10, Size: 1]
	float DamageValue;//[Offset: 0x14, Size: 1]

--------------------------------
Class: BPC_AiManagerBattleRoyale_C.BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 1]
	SCMPlayerState*[] TempAI;//[Offset: 0xf0, Size: 1]
	<FString,int> MemberAIOrder;//[Offset: 0x100, Size: 1]
	int SpawnIndex;//[Offset: 0x150, Size: 1]
	bool bCanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	<FString,int> PureAIOrder;//[Offset: 0x158, Size: 1]
	bool bSpawnPlayerTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	int AiCountPreSpawn;//[Offset: 0x1ac, Size: 1]
	int RealPlayer;//[Offset: 0x1b0, Size: 1]
	SCMPlayerState*[] TeammateAI;//[Offset: 0x1b8, Size: 1]
	bool bTeammateAiFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1d0, Size: 1]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	FString[] PureAiSides;//[Offset: 0x1f0, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	void ReplenishAITeammate(SolarPlayerState*[] NewLocalVar, FString[] AISide, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte[] Temp_byte_Variable, <FString,int> CallFunc_GetMemberAIOrder_Side_Count, const enum[] Temp_byte_Variable, FString CallFunc_PickSide_SIde, const byte[] Temp_byte_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const byte[] Temp_byte_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Map_Length_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SolarPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_PickSide_SIde);// 0x2649560
	BPC_CountDown_C* GetCountDownComponent(GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void StopAiBehavior(SCMPlayerState*[] Temp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetAIController_Controller, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	bool CanModeSpawnAiTeammate(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc__S_PlayInEditor_bIsEditor, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x2649560
	void GetAIController(SolarPlayerState* PlayerState, out SolarBotAIController* Controller, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue);// 0x2649560
	void SpawnAI(bool bTeammateAI, FString Side, out SCMPlayerState* PlayerState, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const SCMPlayerState*[] K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetRandomDifficulty_Difficulty, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, Vector CallFunc_SpawnLocation_ReturnValue, SolarPlayerState* CallFunc_CreateBotAIAndJoinTeamByName_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void GetSpawnInterval(out float Interval, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	void UpdatePureAiOrder(int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys);// 0x2649560
	void PickSide(bool RealPlayerTeam, out FString Side, FString tempSide, bool Temp_bool_Variable, <FString,int> K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	void DeleteTempAI(int count, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, const SCMPlayerState*[] K2Node_MakeArray_Array, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void RunBehaviourTree(SCMPlayerState* Player, BehaviorTree* BTAsset, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	Vector SpawnLocation(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x2649560
	bool IsPlayerFull(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2649560
	BP_Logic_BattleRoyale_C* GetLogicComponent(GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void MatchFinished();// 0x2649560
	void PreSpawnAI();// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void SpawnAIDynamic();// 0x2649560
	void OnBattleStateChanged(byte NewState);// 0x2649560
	void CustomEvent();// 0x2649560
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x2649560
	void ExecuteUbergraph_BPC_AiManagerBattleRoyale(int EntryPoint, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetSpawnInterval_Interval, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsPlayerFull_ReturnValue, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPlayerFull_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, int CallFunc_Map_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_NewState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BehaviorTree* K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, FString CallFunc_PickSide_SIde, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int K2Node_Select_Default, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_bIsAi, bool CallFunc_Not_PreBool_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BPC_WarmGame_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, int Temp_int_Variable, bool CallFunc_CanModeSpawnAiTeammate_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, <FString,int> CallFunc_GetMemberAIOrder_Side_Count);// 0x2649560

--------------------------------
Class: BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	FString PreSpawnAiSide;//[Offset: 0xb8, Size: 1]
	int TeammateCount;//[Offset: 0xc8, Size: 1]
	SCMPlayerState*[] AIList;//[Offset: 0xd0, Size: 1]
	int AILevelMax;//[Offset: 0xe0, Size: 1]
	int DefaultAiLevel;//[Offset: 0xe4, Size: 1]
	void GetRandomDifficulty(out int Difficulty, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey);// 0x2649560
	void GetMemberAIOrder(out <FString,int> Side-Count, SolarTeamInfo* NewLocalVar, SolarTeamInfo*[] RealPlayerTeams, <FString,int> TempSideCount, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetPlayerTeams_OutTeams, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SolarTeamInfo* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_HasTeammatesAI_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x2649560
	void CustomEvent();// 0x2649560
	void ExecuteUbergraph_BPC_AiManagerBase(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_Array_Add_ReturnValue, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue);// 0x2649560

--------------------------------
Class: BPC_CountDown_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	UI_CountDown_C* CountDownWidget;//[Offset: 0xb8, Size: 1]
	int Time;//[Offset: 0xc0, Size: 1]
	TimerHandle Timer;//[Offset: 0xc8, Size: 1]
	int LocalTime;//[Offset: 0xd0, Size: 1]
	TimerHandle LocalTimer;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnLocalTimeChange;//[Size: 1]
	MulticastInlineDelegateProperty OnCountDownFinished;//[Size: 1]
	int MatchingText;//[Offset: 0x100, Size: 1]
	int MatchingTime;//[Offset: 0x104, Size: 1]
	MulticastInlineDelegateProperty OnMatchCountDownFinished;//[Size: 1]
	TimerHandle TimerMatch;//[Offset: 0x118, Size: 1]
	bool bCountDownFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	FString CountSoundName;//[Offset: 0x128, Size: 1]
	void OnRep_CountSoundName(bool CallFunc_IsPlayingReplay_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void [C]CountEnd(bool CallFunc_IsPlayingReplay_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);// 0x2649560
	void [S]StopMatchCountDown(bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x2649560
	void [S]StartMatchCountDown(int MatchTime, out const delegate Event, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2649560
	void [S]StartCountDown(int Time, FString SoundName, out const delegate Event, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2649560
	void [C]StopCountDown(const <FString,FString> K2Node_MakeMap_Map, int CallFunc_StopSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void OnRep_Time(bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	void GetCountDownWidget(out UI_CountDown_C* Output_Get1, SolarUserWidget* CallFunc__c__Create_Widget_and_Display_ReturnValue, UI_CountDown_C* K2Node_DynamicCast_AsUI_Count_Down, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void StartCountdown(int Time);// 0x2649560
	void OnCountDownTime();// 0x2649560
	void [C]ClientCountDown();// 0x2649560
	void CountDownTick();// 0x2649560
	void MCountDownTick();// 0x2649560
	void CustomEvent(enum NewState);// 0x2649560
	void ExecuteUbergraph_BPC_CountDown(int EntryPoint, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsServer_ReturnValue, int K2Node_CustomEvent_Time, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, int CallFunc_PlaySound2D_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, GameStateBase* CallFunc_GetGameState_ReturnValue, enum K2Node_CustomEvent_NewState, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x2649560
	void OnMatchCountDownFinished__DelegateSignature();// 0x2649560
	void OnCountDownFinished__DelegateSignature();// 0x2649560
	void OnLocalTimeChange__DelegateSignature(int Time);// 0x2649560

--------------------------------
Class: UI_CountDown_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Flip;//[Offset: 0x350, Size: 1]
	TextBlock* Number;//[Offset: 0x358, Size: 1]
	UI_HUD_Notice_Lv3_C* UI_HUD_Notice_Lv3;//[Offset: 0x360, Size: 1]
	WidgetSwitcher* wStyle;//[Offset: 0x368, Size: 1]
	int Time;//[Offset: 0x370, Size: 1]
	FString TimeName;//[Offset: 0x378, Size: 1]
	void SequenceEvent__ENTRYPOINTUI_CountDown(Overlay* NumberContainer);// 0x2649560
	void SetMiniCountDownText(FString InText);// 0x2649560
	void SetCountDownStyle(byte Style, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x2649560
	void Finish();// 0x2649560
	void NumberContainer_Event(Overlay* NumberContainer);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void                                                                                                     (int Time);// 0x2649560
	void CustomEvent();// 0x2649560
	void                                                                                                     (FString                                                                                                     );// 0x2649560
	void CountDownBySingleNumber(int Number);// 0x2649560
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0x2649560
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0x2649560
	void ExecuteUbergraph_UI_CountDown(int EntryPoint, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Overlay* K2Node_CustomEvent_NumberContainer, bool K2Node_Event_IsDesignTime, FText CallFunc_Conv_IntToText_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_Time, FString K2Node_CustomEvent_____, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BindDataChangeEventInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_CustomEvent_Number, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_UnbindDataChangeEventInt_ReturnValue);// 0x2649560

--------------------------------
Class: UI_HUD_Notice_Lv3_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 1]
	WidgetAnimation* ant_exit;//[Offset: 0x378, Size: 1]
	WidgetAnimation* Appear_Anim;//[Offset: 0x380, Size: 1]
	Image* Img_Txt_bg;//[Offset: 0x388, Size: 1]
	SolarRichTextBlock* Txt_Ballte_Notice;//[Offset: 0x390, Size: 1]
	void SetNoticeText(FString InText, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560
	void Construct();// 0x2649560
	void ShowNotice(FString Text, float Duration);// 0x2649560
	void ExecuteUbergraph_UI_HUD_Notice_Lv3(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560

--------------------------------
Class: UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x150, Size: 1]
	void SetActiveWidgetIndex(int Index);// 0xbc20c0
	void SetActiveWidget(Widget* Widget);// 0xbc1fa0
	Widget* GetWidgetAtIndex(int Index);// 0xbc1b30
	int GetNumWidgets();// 0x3531f50
	int GetActiveWidgetIndex();// 0x3531c80
	Widget* GetActiveWidget();// 0x3531c50

--------------------------------
Class: BPC_WarmGame_BattleRoyale_C.SolarWarmGameComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xb8, Size: 1]
	SCMPlayerState* RealPlayer;//[Offset: 0xc0, Size: 1]
	Vector[] VehiclePos;//[Offset: 0xc8, Size: 1]
	bool GuidArrowVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	Vector[] SafeAreaCenter;//[Offset: 0xe0, Size: 1]
	Vector[] WeaponPos;//[Offset: 0xf0, Size: 1]
	Vector[] ItemPos;//[Offset: 0x100, Size: 1]
	SolarCharacter* LocalCharacter;//[Offset: 0x110, Size: 1]
	UI_WorldMark_Common_C* WorldMark;//[Offset: 0x118, Size: 1]
	Vector SafeCenter;//[Offset: 0x120, Size: 1]
	UI_HUD_Notice_Lv3_C* Notice;//[Offset: 0x130, Size: 1]
	Margin NoticePadding;//[Offset: 0x138, Size: 1]
	float ArrowScale;//[Offset: 0x148, Size: 1]
	BP_DirectionArrow_C* DirectionArrow;//[Offset: 0x150, Size: 1]
	bool isShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	<int,S_WarmGameConfig>                                                                                                     ;//[Offset: 0x160, Size: 1]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1b0, Size: 1]
	S_WarmGameAiConfig[] AIConfig;//[Offset: 0x1c8, Size: 1]
	<int,SolarBotAIConfig*> TeammatesAIConfig;//[Offset: 0x1d8, Size: 1]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x230, Size: 1]
	bool bCanAiReviveByItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	SolarBotAIConfig* DefaultAccompanyBotConfig;//[Offset: 0x2a0, Size: 1]
	bool IsWarmGame();// 0x2649560
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId, int SelectedSkin, int cid, S_WarmGameAiConfig[] NewLocalVar, int CallFunc_Array_Length_ReturnValue, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, S_WarmGameAiConfig CallFunc_Array_Get_Item, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, bool CallFunc_Array_Contains_ReturnValue, int K2Node_Select_Default);// 0x2649560
	void Create Warm Logic Actor And Exec(out bool Success, Transform CallFunc_MakeTransform_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_WarmGameLogicBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2649560
	void CheckSpAIForWarmGame(out bool SpecialAI, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2649560
	void [s]SetBotBT(BehaviorTree* BotBehaviorTree, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, FString CallFunc_GetDisplayName_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void [c]ShowNotice(bool Visible, FString Text, float Duration, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_and_Display_ReturnValue, UI_HUD_Notice_Lv3_C* K2Node_DynamicCast_AsUI_HUD_Notice_Lv, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void [c]RequestNearestPosition(byte Target, float Distance, Vector nearestLocation, Vector PlayerLocation, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void OnRep_WeaponPos();// 0x2649560
	void UpdatePos();// 0x2649560
	void [c]CreateWorldMark(Vector Pos, int                                                                                                     , out UI_WorldMark_Common_C* AsUI World Mark Common, SlateBrush K2Node_MakeStruct_SlateBrush, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_Common_C* K2Node_DynamicCast_AsUI_World_Mark_Common, bool K2Node_DynamicCast_bSuccess, Image* CallFunc_SpawnObject_ReturnValue);// 0x2649560
	SolarCharacter* [c]LocalCharacter(bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0x2649560
	void [c]PlayerHasWeapon(out bool HasWeapon, out bool HasVehicleWeapon, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2649560
	void UpdateArrowDirection(SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0x2649560
	void UpdateItemPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarItemSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarItemSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void UpdateWeaponPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarGroundPreviewActor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SolarGroundPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void GetGuidArrow(out BP_DirectionArrow_C* Output_Get, SolarPlayerCameraManager* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_DirectionArrow_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2649560
	void [C]ShowArrow(bool bNewVisibility, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0x2649560
	void UpdateVehiclePos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarVehicleSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarVehicleSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void GetNearestPosition(byte Target, out Vector Location, float Distance, Vector nearestLocation, Vector PlayerLocation, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2649560
	void [A]GetPlayBattleCount(out int count);// 0x2649560
	void [ S]Game Mode Special Config(out bool SpecialConfig, out int Order, out bool isB, <int> B_id, <int> A_id, <int> order3, <int> order2, <int> order1, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2649560
	void [C]PlayerABTest(out bool SpecialConfig);// 0x2649560
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void OnSystemReady();// 0x2649560
	void PlanyerEnterSafeArea(Actor* Actor);// 0x2649560
	void PlayerLeaveSafeArea(Actor* Actor);// 0x2649560
	void OnNextSafeAreaSetted(Vector Center, float Radius, float WaitTime, float MoveTime, int Index);// 0x2649560
	void OnRequestReceived(byte Type, Vector Pos);// 0x2649560
	void OnEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x2649560
	void ConfigFinished();// 0x2649560
	void CustomEvent();// 0x2649560
	void ExecuteUbergraph_BPC_WarmGame_BattleRoyale(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_IsServer_ReturnValue, const byte[] Temp_byte_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, Actor* K2Node_CustomEvent_Actor, Actor* K2Node_CustomEvent_Actor, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_Index, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc___S_Game_Mode_Special_Config_SpecialConfig, int CallFunc___S_Game_Mode_Special_Config_Order, bool CallFunc___S_Game_Mode_Special_Config_isB, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, UI_WorldMark_Common_C* CallFunc__c_CreateWorldMark_AsUI_World_Mark_Common, bool K2Node_SwitchEnum_CmpSuccess, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, bool CallFunc_CheckSpAIForWarmGame_SpecialAI, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Create_Warm_Logic_Actor_And_Exec_Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetPossessedCharacter_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, Actor* CallFunc_GetOwner_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess, SolarBotAIConfig* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameModeAIComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2649560

--------------------------------
Class: SolarWarmGameComponent.ActorComponent.Object
	bool IsWarmGame();// 0x2649560
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId);// 0x2649560

--------------------------------
Class: S_WarmGameAiConfig
	SolarBotAIConfig* ConfigPreset_9_F77484A9446F5428C612F982D27047AB;//[Offset: 0x0, Size: 1]
	int Difficulty_2_BC1C176F4C7CBB4D6FC889B2806BF007;//[Offset: 0x8, Size: 1]
	int Preference_6_7DE61082428EF32F3BEFE6AFA07875B9;//[Offset: 0xc, Size: 1]
	int Substitute_5_5FA843ED4EF730ADF049548C170D13E7;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SolarTablesData_WarmGameMode.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int UniqueId;//[Offset: 0x14, Size: 1]
	int CCUStart;//[Offset: 0x18, Size: 1]
	int CCUEnd;//[Offset: 0x1c, Size: 1]
	int NumOfAI;//[Offset: 0x20, Size: 1]
	int AILevel;//[Offset: 0x24, Size: 1]
	FString AILevelConfig;//[Offset: 0x28, Size: 1]
	int AITeamPresetsID;//[Offset: 0x38, Size: 1]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int MinPlayer;//[Offset: 0x40, Size: 1]
	int MaxRealGroup;//[Offset: 0x44, Size: 1]
	int LeastRealPlayer;//[Offset: 0x48, Size: 1]
	int MaxWait;//[Offset: 0x4c, Size: 1]
	bool HasMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int ReadyStateTime;//[Offset: 0x54, Size: 1]
	int StopMatchTime;//[Offset: 0x58, Size: 1]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	int AIAccompanyTimeline;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarTablesDataBase

--------------------------------
Class: S_WarmGameConfig
	class Object* WarmGameLogic_11_C4D3600041B8F0E806BDC09E30D6C1D0;//[Offset: 0x0, Size: 1]
	S_WarmGameAiConfig[] AiTeammates_15_B5CA8DEC448F508FECCA08B77C240AFC;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 1]
	void Event_ExecLogic();// 0x2649560
	void ExecuteUbergraph_BP_WarmGameLogicBase(int EntryPoint);// 0x2649560

--------------------------------
Class: BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc88, Size: 1]
	BPC_GM_BattleRoyal_C* BPC_GM_BattleRoyal;//[Offset: 0xc90, Size: 1]
	BPC_BuyResurrection_C* BPC_BuyResurrection;//[Offset: 0xc98, Size: 1]
	SolarUserWidget* DeathUI;//[Offset: 0xca0, Size: 1]
	byte PlayerBattleState;//[Offset: 0xca8, Size: 1]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xcb0, Size: 1]
	MulticastInlineDelegateProperty OnRequestReplied;//[Size: 1]
	int Intervened By AI;//[Offset: 0xcc8, Size: 1]
	bool bFirstDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xccc, Size: 1]
	void GetResurrectLocation(out Vector Location, bool Temp_bool_Variable, enum Temp_byte_Variable, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFlyLocation_Location, Vector CallFunc_GetResurrectLocation_Location, Vector K2Node_Select_Default, Vector K2Node_Select_Default);// 0x2649560
	bool PlayerCanRebirthBlueprint(bool Temp_bool_Variable, bool Temp_bool_Variable, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_PlayerCanRebirthBlueprint_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool K2Node_Select_Default);// 0x2649560
	bool PlayerIsResurrecting();// 0x2649560
	bool IsPlayerWaitingForTeammatesHelp(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560
	void GetItemData(int ItemID, out bool Valid, out int ID, out int Quality, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_ItemInBattle CallFunc_TryGetRowData_ReturnValue);// 0x2649560
	void GetPlayerChestOpen(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_GetItemData_Valid, int CallFunc_GetItemData_ID, int CallFunc_GetItemData_Quality, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void GetSinglePlayerItem(int ItemID, out bool HasItem, out int count, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue);// 0x2649560
	void GetWeaponPartData(int ItemID, out bool Valid, out int ID, out int Quality, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void GetPlayerItems(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetSinglePlayerItem_HasItem, int CallFunc_GetSinglePlayerItem_Count, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void Get Player Accessories(out FString Output, FString[] OutputString, <IntPoint,int> Accessories, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Variable, IntPoint[] CallFunc_Map_Keys_Keys, IntPoint CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x2649560
	void GetPlayerDataTrace(out <FString,FString> Map, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_GetCharacterLocation_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	void Set Intervened By AI(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void GetNearestPos(byte Index, Vector Nearest, float Distance, Vector CLocation, byte Temp_byte_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2649560
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void OnRep_PlayerBattleState(bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2649560
	void [s]SetPlayerState(byte State);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void Event_RespondReconnection();// 0x2649560
	void ResurrectionStateChange(enum NewState);// 0x2649560
	void RequestNearestPos(byte Type);// 0x2649560
	void OnNearestPosReceived(byte Type, Vector Pos);// 0x2649560
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x2649560
	void DelayAndBeginSpectate();// 0x2649560
	void ExecuteUbergraph_BP_PlayerState_BattleRoyale(int EntryPoint, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc___A_Bind_on_Basic_System_Ready_bReady, bool CallFunc_IsServer_ReturnValue, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, byte K2Node_CustomEvent_Type, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void OnRequestReplied__DelegateSignature(byte Type, Vector Pos);// 0x2649560

--------------------------------
Class: SolarTables_TablesReader.Object
	SolarTables_Reader_AccountFixedExp* AccountFixedExp;//[Offset: 0x28, Size: 1]
	SolarTables_Reader_AccountFlag* AccountFlag;//[Offset: 0x30, Size: 1]
	SolarTables_Reader_Airline* Airline;//[Offset: 0x38, Size: 1]
	SolarTables_Reader_Armory* Armory;//[Offset: 0x40, Size: 1]
	SolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent;//[Offset: 0x48, Size: 1]
	SolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect;//[Offset: 0x50, Size: 1]
	SolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool;//[Offset: 0x58, Size: 1]
	SolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement;//[Offset: 0x60, Size: 1]
	SolarTables_Reader_BpAward* BpAward;//[Offset: 0x68, Size: 1]
	SolarTables_Reader_Behavior* Behavior;//[Offset: 0x70, Size: 1]
	SolarTables_Reader_EscapeExp* EscapeExp;//[Offset: 0x78, Size: 1]
	SolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet;//[Offset: 0x80, Size: 1]
	SolarTables_Reader_UnitCharacter* UnitCharacter;//[Offset: 0x88, Size: 1]
	SolarTables_Reader_CharacterAbility* CharacterAbility;//[Offset: 0x90, Size: 1]
	SolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility;//[Offset: 0x98, Size: 1]
	SolarTables_Reader_GetPoint* GetPoint;//[Offset: 0xa0, Size: 1]
	SolarTables_Reader_ChestSpawn* ChestSpawn;//[Offset: 0xa8, Size: 1]
	SolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup;//[Offset: 0xb0, Size: 1]
	SolarTables_Reader_ClanFlag* ClanFlag;//[Offset: 0xb8, Size: 1]
	SolarTables_Reader_DayAndNight* DayAndNight;//[Offset: 0xc0, Size: 1]
	SolarTables_Reader_DsVariableRange* DsVariableRange;//[Offset: 0xc8, Size: 1]
	SolarTables_Reader_EShop* EShop;//[Offset: 0xd0, Size: 1]
	SolarTables_Reader_EShopDemoModel* EShopDemoModel;//[Offset: 0xd8, Size: 1]
	SolarTables_Reader_EShopGoodsPool* EShopGoodsPool;//[Offset: 0xe0, Size: 1]
	SolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup;//[Offset: 0xe8, Size: 1]
	SolarTables_Reader_EShopSpawn* EShopSpawn;//[Offset: 0xf0, Size: 1]
	SolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode;//[Offset: 0xf8, Size: 1]
	SolarTables_Reader_GameModeGroup* GameModeGroup;//[Offset: 0x100, Size: 1]
	SolarTables_Reader_GameModeMain* GameModeMain;//[Offset: 0x108, Size: 1]
	SolarTables_Reader_OutcomeSet* OutcomeSet;//[Offset: 0x110, Size: 1]
	SolarTables_Reader_GameTimeLine* GameTimeLine;//[Offset: 0x118, Size: 1]
	SolarTables_Reader_GlobalOutcome* GlobalOutcome;//[Offset: 0x120, Size: 1]
	SolarTables_Reader_GlobalSensitivity* GlobalSensitivity;//[Offset: 0x128, Size: 1]
	SolarTables_Reader_HeroPowerFormula* HeroPowerFormula;//[Offset: 0x130, Size: 1]
	SolarTables_Reader_InputAction* InputAction;//[Offset: 0x138, Size: 1]
	SolarTables_Reader_InputMapping* InputMapping;//[Offset: 0x140, Size: 1]
	SolarTables_Reader_Item* Item;//[Offset: 0x148, Size: 1]
	SolarTables_Reader_BackpackProperty* BackpackProperty;//[Offset: 0x150, Size: 1]
	SolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty;//[Offset: 0x158, Size: 1]
	SolarTables_Reader_CapsuleProperty* CapsuleProperty;//[Offset: 0x160, Size: 1]
	SolarTables_Reader_Dance* Dance;//[Offset: 0x168, Size: 1]
	SolarTables_Reader_Emote* Emote;//[Offset: 0x170, Size: 1]
	SolarTables_Reader_MaterialProperty* MaterialProperty;//[Offset: 0x178, Size: 1]
	SolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty;//[Offset: 0x180, Size: 1]
	SolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty;//[Offset: 0x188, Size: 1]
	SolarTables_Reader_ItemCustomType* ItemCustomType;//[Offset: 0x190, Size: 1]
	SolarTables_Reader_ItemInBattle* ItemInBattle;//[Offset: 0x198, Size: 1]
	SolarTables_Reader_ArmorProperty* ArmorProperty;//[Offset: 0x1a0, Size: 1]
	SolarTables_Reader_Chest* Chest;//[Offset: 0x1a8, Size: 1]
	SolarTables_Reader_EnergyProperty* EnergyProperty;//[Offset: 0x1b0, Size: 1]
	SolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty;//[Offset: 0x1b8, Size: 1]
	SolarTables_Reader_GunProperty* GunProperty;//[Offset: 0x1c0, Size: 1]
	SolarTables_Reader_ItemBehavior* ItemBehavior;//[Offset: 0x1c8, Size: 1]
	SolarTables_Reader_ItemWeaponParts* ItemWeaponParts;//[Offset: 0x1d0, Size: 1]
	SolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty;//[Offset: 0x1d8, Size: 1]
	SolarTables_Reader_ShieldProperty* ShieldProperty;//[Offset: 0x1e0, Size: 1]
	SolarTables_Reader_ItemQuality* ItemQuality;//[Offset: 0x1e8, Size: 1]
	SolarTables_Reader_ItemSound* ItemSound;//[Offset: 0x1f0, Size: 1]
	SolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload;//[Offset: 0x1f8, Size: 1]
	SolarTables_Reader_LanguageSwitcher* LanguageSwitcher;//[Offset: 0x200, Size: 1]
	SolarTables_Reader_Localization* Localization;//[Offset: 0x208, Size: 1]
	SolarTables_Reader_Localization_BattleUI* Localization_BattleUI;//[Offset: 0x210, Size: 1]
	SolarTables_Reader_Localization_EventSystem* Localization_EventSystem;//[Offset: 0x218, Size: 1]
	SolarTables_Reader_Localization_General* Localization_General;//[Offset: 0x220, Size: 1]
	SolarTables_Reader_Localization_Heroes* Localization_Heroes;//[Offset: 0x228, Size: 1]
	SolarTables_Reader_Localization_Item* Localization_Item;//[Offset: 0x230, Size: 1]
	SolarTables_Reader_Localization_Tournament* Localization_Tournament;//[Offset: 0x238, Size: 1]
	SolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized;//[Offset: 0x240, Size: 1]
	SolarTables_Reader_GameMap* GameMap;//[Offset: 0x248, Size: 1]
	SolarTables_Reader_MapMarkIcon* MapMarkIcon;//[Offset: 0x250, Size: 1]
	SolarTables_Reader_MatchRule* MatchRule;//[Offset: 0x258, Size: 1]
	SolarTables_Reader_RankMatch* RankMatch;//[Offset: 0x260, Size: 1]
	SolarTables_Reader_NameCardBackground* NameCardBackground;//[Offset: 0x268, Size: 1]
	SolarTables_Reader_NameCardPose* NameCardPose;//[Offset: 0x270, Size: 1]
	SolarTables_Reader_ObGift* ObGift;//[Offset: 0x278, Size: 1]
	SolarTables_Reader_OBSubtitle_Action2Feature* OBSubtitle_Action2Feature;//[Offset: 0x280, Size: 1]
	SolarTables_Reader_OBSubtitle_Feature2Emotion* OBSubtitle_Feature2Emotion;//[Offset: 0x288, Size: 1]
	SolarTables_Reader_OBSubtitle_Emotion2Pattern* OBSubtitle_Emotion2Pattern;//[Offset: 0x290, Size: 1]
	SolarTables_Reader_Outcome* Outcome;//[Offset: 0x298, Size: 1]
	SolarTables_Reader_OutcomeContent* OutcomeContent;//[Offset: 0x2a0, Size: 1]
	SolarTables_Reader_PickupPriorityItem* PickupPriorityItem;//[Offset: 0x2a8, Size: 1]
	SolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart;//[Offset: 0x2b0, Size: 1]
	SolarTables_Reader_CharacterVoiceover* CharacterVoiceover;//[Offset: 0x2b8, Size: 1]
	SolarTables_Reader_QuickChat* QuickChat;//[Offset: 0x2c0, Size: 1]
	SolarTables_Reader_QuickVoice* QuickVoice;//[Offset: 0x2c8, Size: 1]
	SolarTables_Reader_VODownload* VODownload;//[Offset: 0x2d0, Size: 1]
	SolarTables_Reader_RankLevel* RankLevel;//[Offset: 0x2d8, Size: 1]
	SolarTables_Reader_AutoDirector* AutoDirector;//[Offset: 0x2e0, Size: 1]
	SolarTables_Reader_AutoDirectorActivityScore* AutoDirectorActivityScore;//[Offset: 0x2e8, Size: 1]
	SolarTables_Reader_CircularCameras* CircularCameras;//[Offset: 0x2f0, Size: 1]
	SolarTables_Reader_HotSpot* HotSpot;//[Offset: 0x2f8, Size: 1]
	SolarTables_Reader_LookAtCameras* LookAtCameras;//[Offset: 0x300, Size: 1]
	SolarTables_Reader_Rescue* Rescue;//[Offset: 0x308, Size: 1]
	SolarTables_Reader_Skin* Skin;//[Offset: 0x310, Size: 1]
	SolarTables_Reader_Achievement* Achievement;//[Offset: 0x318, Size: 1]
	SolarTables_Reader_TaskProgress* TaskProgress;//[Offset: 0x320, Size: 1]
	SolarTables_Reader_TaskSystem* TaskSystem;//[Offset: 0x328, Size: 1]
	SolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout;//[Offset: 0x330, Size: 1]
	SolarTables_Reader_Variables* Variables;//[Offset: 0x338, Size: 1]
	SolarTables_Reader_Vehicle* Vehicle;//[Offset: 0x340, Size: 1]
	SolarTables_Reader_VehicleSkin* VehicleSkin;//[Offset: 0x348, Size: 1]
	SolarTables_Reader_VehicleType* VehicleType;//[Offset: 0x350, Size: 1]
	SolarTables_Reader_VehicleSpawn* VehicleSpawn;//[Offset: 0x358, Size: 1]
	SolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup;//[Offset: 0x360, Size: 1]
	SolarTables_Reader_WarmGame* WarmGame;//[Offset: 0x368, Size: 1]
	SolarTables_Reader_WarmGameMode* WarmGameMode;//[Offset: 0x370, Size: 1]
	SolarTables_Reader_WeaponDamage* WeaponDamage;//[Offset: 0x378, Size: 1]
	SolarTables_Reader_Weapon* Weapon;//[Offset: 0x380, Size: 1]
	SolarTables_Reader_WeaponAmmo* WeaponAmmo;//[Offset: 0x388, Size: 1]
	SolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade;//[Offset: 0x390, Size: 1]
	SolarTables_Reader_WeaponDefault* WeaponDefault;//[Offset: 0x398, Size: 1]
	SolarTables_Reader_WeaponKillTip* WeaponKillTip;//[Offset: 0x3a0, Size: 1]
	SolarTables_Reader_WeaponParts* WeaponParts;//[Offset: 0x3a8, Size: 1]
	SolarTables_Reader_WeaponPartsOp* WeaponPartsOp;//[Offset: 0x3b0, Size: 1]
	SolarTables_Reader_WeaponQuality* WeaponQuality;//[Offset: 0x3b8, Size: 1]
	SolarTables_Reader_SecondMode* SecondMode;//[Offset: 0x3c0, Size: 1]
	SolarTables_Reader_WeaponSkin* WeaponSkin;//[Offset: 0x3c8, Size: 1]
	SolarTables_Reader_WeaponSound* WeaponSound;//[Offset: 0x3d0, Size: 1]
	SolarTables_Reader_WeaponStatu* WeaponStatu;//[Offset: 0x3d8, Size: 1]

--------------------------------
Class: SolarTables_Reader_AccountFixedExp.SolarTableReaderBase.Object
	SolarTablesData_AccountFixedExp TryGetRowData(int Key, out bool HasKey);// 0x2218a80
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x22179a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217490
	SolarTablesData_AccountFixedExp GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2216cc0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTableReaderBase.Object
	static int RandomRangeInt(out const SolarTablesRangeInt InData);// 0x22afb90
	static float RandomRangeFloat(out const SolarTablesRangeFloat InData);// 0x22afaf0
	bool IsReaderValid();// 0x22afa60
	static FString GetLocText(out const SolarTablesLocalText InData);// 0x22af140
	static FString GetDeviceRes(out const SolarTablesDeviceRes InData);// 0x22af050
	static bool ContainsRangeInt(out const SolarTablesRangeInt InData, int In, bool bEqualMin, bool bEqualMax);// 0x22aecd0
	static bool ContainsRangeFloat(out const SolarTablesRangeFloat InData, float In, bool bEqualMin, bool bEqualMax);// 0x22aeb60

--------------------------------
Class: SolarTablesData_AccountFixedExp.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int Exp;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTablesRangeInt
	int Left;//[Offset: 0x0, Size: 1]
	int Right;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarTablesRangeFloat
	float Left;//[Offset: 0x0, Size: 1]
	float Right;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SolarTablesLocalText
	int ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarTablesDeviceRes
	FString res;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SolarTables_Reader_AccountFlag.SolarTableReaderBase.Object
	SolarTablesData_AccountFlag TryGetRowData(int Key, out bool HasKey);// 0x2218c60
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x2217a90
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_AccountFlag GetRowData(int Key);// 0x2216fc0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2216d00
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_AccountFlag.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int FlagType;//[Offset: 0x14, Size: 1]
	FString FlagIcon;//[Offset: 0x18, Size: 1]
	FString StateName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_Airline.SolarTableReaderBase.Object
	SolarTablesData_Airline TryGetRowData(int Key, out bool HasKey);// 0x2218f00
	bool HasRowKey(int Key);// 0x2218220
	bool HasColKey(FString Key);// 0x2217c70
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22176d0
	SolarTablesData_Airline GetRowData(int Key);// 0x22171c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2216d80
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Airline.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float[] AirlineCoordinateA;//[Offset: 0x18, Size: 1]
	float[] RealPointA;//[Offset: 0x28, Size: 1]
	float[] AirlineCoordinateB;//[Offset: 0x38, Size: 1]
	float[] RealPointB;//[Offset: 0x48, Size: 1]
	int UseGameMode;//[Offset: 0x58, Size: 1]
	int MapID;//[Offset: 0x5c, Size: 1]
	float AirlineAltitude;//[Offset: 0x60, Size: 1]
	float CapsuleSpeed;//[Offset: 0x64, Size: 1]

--------------------------------
Class: SolarTables_Reader_Armory.SolarTableReaderBase.Object
	SolarTablesData_Armory TryGetRowData(int Key, out bool HasKey);// 0x22191a0
	bool HasRowKey(int Key);// 0x2218410
	bool HasColKey(FString Key);// 0x2217e50
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217850
	SolarTablesData_Armory GetRowData(int Key);// 0x22173a0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2216e00
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Armory.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int WeaponType;//[Offset: 0x14, Size: 1]
	int WeaponDescription;//[Offset: 0x18, Size: 1]
	int SkillName;//[Offset: 0x1c, Size: 1]
	int SkillDescription;//[Offset: 0x20, Size: 1]
	FString UrlName;//[Offset: 0x28, Size: 1]
	FString WeaponMovie;//[Offset: 0x38, Size: 1]
	FString WeaponConfig;//[Offset: 0x48, Size: 1]
	int WeaponUnlockLevel;//[Offset: 0x58, Size: 1]
	int WeaponDamage;//[Offset: 0x5c, Size: 1]
	int WeaponRateOfFire;//[Offset: 0x60, Size: 1]
	int WeaponRecoil;//[Offset: 0x64, Size: 1]
	int WeaponSpread;//[Offset: 0x68, Size: 1]
	int WeaponRange;//[Offset: 0x6c, Size: 1]
	int WeaponMobility;//[Offset: 0x70, Size: 1]
	FString SilhouetteIcon;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SolarTables_Reader_BattleUpgradeContent.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeContent TryGetRowData(int Key, out bool HasKey);// 0x22293e0
	bool HasRowKey(int Key);// 0x2229100
	bool HasColKey(FString Key);// 0x2228a70
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228770
	SolarTablesData_BattleUpgradeContent GetRowData(int Key);// 0x2228160
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2227fa0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BattleUpgradeContent.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] ModelID;//[Offset: 0x18, Size: 1]
	int Grade;//[Offset: 0x28, Size: 1]
	int[] UpgradeContent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarTables_Reader_BattleUpgradeEffect.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffect TryGetRowData(int Key, out bool HasKey);// 0x2229530
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x2228b60
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228830
	SolarTablesData_BattleUpgradeEffect GetRowData(int Key);// 0x2228270
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2227fe0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BattleUpgradeEffect.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	enum Effect;//[Offset: 0x14, Size: 1]
	int EffectValue;//[Offset: 0x18, Size: 1]
	int StackingTimes;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SolarTables_Reader_BattleUpgradeEffectPool.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffectPool TryGetRowData(int Key, out bool HasKey);// 0x2229730
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x2228c50
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_BattleUpgradeEffectPool GetRowData(int Key);// 0x2228370
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2228020
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BattleUpgradeEffectPool.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] Pool;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_BattleEndRankSettlement.SolarTableReaderBase.Object
	SolarTablesData_BattleEndRankSettlement TryGetRowData(int Key, out bool HasKey);// 0x2221630
	bool HasRowKey(int Key);// 0x2220db0
	bool HasColKey(FString Key);// 0x22209f0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22204b0
	SolarTablesData_BattleEndRankSettlement GetRowData(int Key);// 0x2220080
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x221fd10
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BattleEndRankSettlement.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int RuleID;//[Offset: 0x14, Size: 1]
	int RealPerson;//[Offset: 0x18, Size: 1]
	int[] ItemDrop;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarTables_Reader_BpAward.SolarTableReaderBase.Object
	SolarTablesData_BpAward TryGetRowData(int Key, out bool HasKey);// 0x2229bd0
	bool HasRowKey(int Key);// 0x2220ea0
	bool HasColKey(FString Key);// 0x2228e30
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22288f0
	SolarTablesData_BpAward GetRowData(int Key);// 0x2228590
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22280a0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BpAward.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int BpID;//[Offset: 0x14, Size: 1]
	int Level;//[Offset: 0x18, Size: 1]
	int Exp;//[Offset: 0x1c, Size: 1]
	int UpdateValue;//[Offset: 0x20, Size: 1]
	int[] FreeAward;//[Offset: 0x28, Size: 1]
	int[] PayAward;//[Offset: 0x38, Size: 1]
	bool UnlockExtraTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool BuyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool LoopReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]

--------------------------------
Class: SolarTables_Reader_Behavior.SolarTableReaderBase.Object
	SolarTablesData_Behavior TryGetRowData(int Key, out bool HasKey);// 0x22299b0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x2228d40
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_Behavior GetRowData(int Key);// 0x2228470
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2228060
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Behavior.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	enum BehaviorType;//[Offset: 0x14, Size: 1]
	int CharacterGetExp;//[Offset: 0x18, Size: 1]
	int WeaponGetExp;//[Offset: 0x1c, Size: 1]
	int WeaponExp;//[Offset: 0x20, Size: 1]
	int WeaponExp;//[Offset: 0x24, Size: 1]
	int WeaponExp;//[Offset: 0x28, Size: 1]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x2c, Size: 1]
	int WeaponGetExpText;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarTables_Reader_EscapeExp.SolarTableReaderBase.Object
	SolarTablesData_EscapeExp TryGetRowData(int Key, out bool HasKey);// 0x223f5b0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x223edc0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_EscapeExp GetRowData(int Key);// 0x223e8e0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x223e6a0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EscapeExp.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	enum BehaviorType;//[Offset: 0x14, Size: 1]
	int CharacterGetExp;//[Offset: 0x18, Size: 1]
	int WeaponGetExp;//[Offset: 0x1c, Size: 1]
	int WeaponExp;//[Offset: 0x20, Size: 1]
	int WeaponExp;//[Offset: 0x24, Size: 1]
	int WeaponExp;//[Offset: 0x28, Size: 1]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x2c, Size: 1]
	int WeaponGetExpText;//[Offset: 0x30, Size: 1]
	int ExpID;//[Offset: 0x34, Size: 1]

--------------------------------
Class: SolarTables_Reader_CaseToggleAlphabet.SolarTableReaderBase.Object
	SolarTablesData_CaseToggleAlphabet TryGetRowData(int Key, out bool HasKey);// 0x222a050
	bool HasRowKey(int Key);// 0x22292e0
	bool HasColKey(FString Key);// 0x2229010
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22289b0
	SolarTablesData_CaseToggleAlphabet GetRowData(int Key);// 0x2228680
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2228120
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_CaseToggleAlphabet.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	bool IsLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	FString de;//[Offset: 0x18, Size: 1]
	FString fr;//[Offset: 0x28, Size: 1]
	FString es;//[Offset: 0x38, Size: 1]
	FString pt;//[Offset: 0x48, Size: 1]
	FString it;//[Offset: 0x58, Size: 1]
	FString pl;//[Offset: 0x68, Size: 1]
	FString tr;//[Offset: 0x78, Size: 1]
	FString ru;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarTables_Reader_UnitCharacter.SolarTableReaderBase.Object
	SolarTablesData_UnitCharacter TryGetRowData(int Key, out bool HasKey);// 0x22942f0
	bool HasRowKey(int Key);// 0x2293d20
	bool HasColKey(FString Key);// 0x2293960
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22935e0
	SolarTablesData_UnitCharacter GetRowData(int Key);// 0x2293140
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2292f50
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_UnitCharacter.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText name_extra;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x1c, Size: 1]
	int Gender;//[Offset: 0x20, Size: 1]
	int Body;//[Offset: 0x24, Size: 1]
	enum CharacterType;//[Offset: 0x28, Size: 1]
	FString ClassTypeIcon;//[Offset: 0x30, Size: 1]
	SolarTablesLocalText ClassTypeInfo;//[Offset: 0x40, Size: 1]
	bool defaultChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	int defaultSkin;//[Offset: 0x48, Size: 1]
	int defaultPose;//[Offset: 0x4c, Size: 1]
	int defaultBackground;//[Offset: 0x50, Size: 1]
	bool usableChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	FString CharacterProtrait;//[Offset: 0x58, Size: 1]
	FString UrlName;//[Offset: 0x68, Size: 1]
	<FString,FString> CharacterAttributesID;//[Offset: 0x78, Size: 1]
	float MaxNormalHP;//[Offset: 0xc8, Size: 1]
	int defaultArmor;//[Offset: 0xcc, Size: 1]
	int defaultShield;//[Offset: 0xd0, Size: 1]
	int defaultJetPackModule;//[Offset: 0xd4, Size: 1]
	FString BasicItemMax;//[Offset: 0xd8, Size: 1]
	float InitialSolarCharge;//[Offset: 0xe8, Size: 1]
	float RechargeFrequencyFromSky;//[Offset: 0xec, Size: 1]
	float RechargeFrequencyFromDeathBox;//[Offset: 0xf0, Size: 1]
	float RechargeFrequencyFromPile;//[Offset: 0xf4, Size: 1]
	float RechargeQuantityFromSky;//[Offset: 0xf8, Size: 1]
	float RechargeQuantityFromDeathBox;//[Offset: 0xfc, Size: 1]
	float RechargeQuantityFromPile;//[Offset: 0x100, Size: 1]
	float InitialEnergyLimit;//[Offset: 0x104, Size: 1]
	float InitialExtraEnergyLimit;//[Offset: 0x108, Size: 1]
	float InitialExtraEnergyCharge;//[Offset: 0x10c, Size: 1]
	float InitialChargeCD;//[Offset: 0x110, Size: 1]
	int ExpID;//[Offset: 0x114, Size: 1]
	float ExpBonus;//[Offset: 0x118, Size: 1]
	int CharaGiftID;//[Offset: 0x11c, Size: 1]
	FString CharacterIngameBP;//[Offset: 0x120, Size: 1]
	FString AnimBPResPath;//[Offset: 0x130, Size: 1]
	int StandJogSpeed;//[Offset: 0x140, Size: 1]
	int StandRunSpeed;//[Offset: 0x144, Size: 1]
	int StandSprintSpeed;//[Offset: 0x148, Size: 1]
	int CrouchJogSpeed;//[Offset: 0x14c, Size: 1]
	int CrouchRunSpeed;//[Offset: 0x150, Size: 1]
	int CrouchSprintSpeed;//[Offset: 0x154, Size: 1]
	int ItemID;//[Offset: 0x158, Size: 1]
	float BackpackScale;//[Offset: 0x15c, Size: 1]
	int CharacterSize;//[Offset: 0x160, Size: 1]
	int BotConfigID;//[Offset: 0x164, Size: 1]
	int CharacterSort;//[Offset: 0x168, Size: 1]
	int CharacterTag1;//[Offset: 0x16c, Size: 1]
	int CharacterTag2;//[Offset: 0x170, Size: 1]

--------------------------------
Class: SolarTables_Reader_CharacterAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterAbility TryGetRowData(int Key, out bool HasKey);// 0x2231a80
	bool HasRowKey(int Key);// 0x2231990
	bool HasColKey(FString Key);// 0x2231300
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22310c0
	SolarTablesData_CharacterAbility GetRowData(int Key);// 0x2230aa0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22308e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_CharacterAbility.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int CharacterId;//[Offset: 0x14, Size: 1]
	FString DataAssetsPath;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x28, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x2c, Size: 1]
	int DataID;//[Offset: 0x30, Size: 1]
	FString AbilityBP;//[Offset: 0x38, Size: 1]
	FString Icon;//[Offset: 0x48, Size: 1]
	int Data;//[Offset: 0x58, Size: 1]
	bool IfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]

--------------------------------
Class: SolarTables_Reader_CharacterPassiveAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterPassiveAbility TryGetRowData(int Key, out bool HasKey);// 0x2231bc0
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x22313f0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_CharacterPassiveAbility GetRowData(int Key);// 0x2230b90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2230920
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_CharacterPassiveAbility.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString DataAssetsPath;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_GetPoint.SolarTableReaderBase.Object
	SolarTablesData_GetPoint TryGetRowData(int Key, out bool HasKey);// 0x224f300
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x224e960
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228830
	SolarTablesData_GetPoint GetRowData(int Key);// 0x22386c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x224e180
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GetPoint.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int Point;//[Offset: 0x14, Size: 1]
	int TaskValue;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText TaskText;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SolarTables_Reader_ChestSpawn.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawn TryGetRowData(int Key, out bool HasKey);// 0x2232210
	bool HasRowKey(int Key);// 0x2229100
	bool HasColKey(FString Key);// 0x22316c0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228770
	SolarTablesData_ChestSpawn GetRowData(int Key);// 0x2230e90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22309e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ChestSpawn.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	enum ChestType;//[Offset: 0x14, Size: 1]
	int[] Chests;//[Offset: 0x18, Size: 1]
	int[] Weight;//[Offset: 0x28, Size: 1]
	int SpawnCount;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarTables_Reader_ChestSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x2232360
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x22317b0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_ChestSpawnGroup GetRowData(int Key);// 0x2228370
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2230a20
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ChestSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] ChestGroup;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_ClanFlag.SolarTableReaderBase.Object
	SolarTablesData_ClanFlag TryGetRowData(int Key, out bool HasKey);// 0x2239220
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x2238b80
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_ClanFlag GetRowData(int Key);// 0x22384c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2238340
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ClanFlag.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString FlagIcon;//[Offset: 0x18, Size: 1]
	FString WebIcon;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_DayAndNight.SolarTableReaderBase.Object
	SolarTablesData_DayAndNight TryGetRowData(int Key, out bool HasKey);// 0x22394c0
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x2238d60
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228830
	SolarTablesData_DayAndNight GetRowData(int Key);// 0x22386c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22383c0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_DayAndNight.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int TimeOfDays;//[Offset: 0x14, Size: 1]
	int ChangingSpeed;//[Offset: 0x18, Size: 1]
	float ChargingRate;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SolarTables_Reader_DsVariableRange.SolarTableReaderBase.Object
	SolarTablesData_DsVariableRange TryGetRowData(int Key, out bool HasKey);// 0x22396c0
	bool HasRowKey(int Key);// 0x2229100
	bool HasColKey(FString Key);// 0x2238e50
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228770
	SolarTablesData_DsVariableRange GetRowData(int Key);// 0x22387c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2238400
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_DsVariableRange.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString VariableName;//[Offset: 0x18, Size: 1]
	float ValueStart;//[Offset: 0x28, Size: 1]
	float ValueEnd;//[Offset: 0x2c, Size: 1]
	int ValueType;//[Offset: 0x30, Size: 1]
	int Tolerance;//[Offset: 0x34, Size: 1]
	int ProbeInterval;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarTables_Reader_EShop.SolarTableReaderBase.Object
	SolarTablesData_EShop TryGetRowData(int Key, out bool HasKey);// 0x223eeb0
	bool HasRowKey(int Key);// 0x2229100
	bool HasColKey(FString Key);// 0x223ea00
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228770
	SolarTablesData_EShop GetRowData(int Key);// 0x223e6e0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x223e5a0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EShop.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] PoolGroupID;//[Offset: 0x18, Size: 1]
	bool IfMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int[] PoolRefreshTime;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarTables_Reader_EShopDemoModel.SolarTableReaderBase.Object
	SolarTablesData_EShopDemoModel TryGetRowData(int Key, out bool HasKey);// 0x223f000
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x223eaf0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217490
	SolarTablesData_EShopDemoModel GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x223e5e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EShopDemoModel.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int ModelID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTables_Reader_EShopGoodsPool.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPool TryGetRowData(int Key, out bool HasKey);// 0x223f1e0
	bool HasRowKey(int Key);// 0x2231990
	bool HasColKey(FString Key);// 0x223ebe0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22310c0
	SolarTablesData_EShopGoodsPool GetRowData(int Key);// 0x223e7f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x223e620
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EShopGoodsPool.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] Equipments;//[Offset: 0x18, Size: 1]
	int[] Prize;//[Offset: 0x28, Size: 1]
	int[] Nums;//[Offset: 0x38, Size: 1]
	int[] Weight;//[Offset: 0x48, Size: 1]
	int NumbersToDisplay;//[Offset: 0x58, Size: 1]
	int ColdDown;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: SolarTables_Reader_EShopGoodsPoolGroup.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPoolGroup TryGetRowData(int Key, out bool HasKey);// 0x223f330
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x223ecd0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_EShopGoodsPoolGroup GetRowData(int Key);// 0x2228370
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x223e660
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EShopGoodsPoolGroup.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] PoolIDs;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_EShopSpawn.SolarTableReaderBase.Object
	SolarTablesData_EShopSpawn TryGetRowData(int Key, out bool HasKey);// 0x2247bb0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x2247300
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_EShopSpawn GetRowData(int Key);// 0x2246b30
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22469f0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EShopSpawn.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] Eshops;//[Offset: 0x18, Size: 1]
	int[] Weight;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_BattleRoyaleMode.SolarTableReaderBase.Object
	SolarTablesData_BattleRoyaleMode TryGetRowData(int Key, out bool HasKey);// 0x2221890
	bool HasRowKey(int Key);// 0x2220ea0
	bool HasColKey(FString Key);// 0x2220ae0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220570
	SolarTablesData_BattleRoyaleMode GetRowData(int Key);// 0x2220180
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x221fd50
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BattleRoyaleMode.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] GlobalOutcomes;//[Offset: 0x18, Size: 1]
	int BattleMap;//[Offset: 0x28, Size: 1]
	int ReadyMap;//[Offset: 0x2c, Size: 1]
	float ReadyStateTime;//[Offset: 0x30, Size: 1]
	int StartTime;//[Offset: 0x34, Size: 1]
	float EenTime;//[Offset: 0x38, Size: 1]
	int CharacterEXPCoefficient;//[Offset: 0x3c, Size: 1]
	FString[] EventSets;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarTables_Reader_GameModeGroup.SolarTableReaderBase.Object
	SolarTablesData_GameModeGroup TryGetRowData(int Key, out bool HasKey);// 0x2248220
	bool HasRowKey(int Key);// 0x22479b0
	bool HasColKey(FString Key);// 0x22475d0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247180
	SolarTablesData_GameModeGroup GetRowData(int Key);// 0x2246e20
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2246ab0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GameModeGroup.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText ModeGroupName;//[Offset: 0x14, Size: 1]
	int SortId;//[Offset: 0x18, Size: 1]
	int[] ModeID;//[Offset: 0x20, Size: 1]
	FString Icon_s;//[Offset: 0x30, Size: 1]
	FString Icon_mini;//[Offset: 0x40, Size: 1]
	FString Icon_recruit;//[Offset: 0x50, Size: 1]
	int DefaultSelect;//[Offset: 0x60, Size: 1]
	bool IfMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	FString GuideVideoUrl;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarTables_Reader_GameModeMain.SolarTableReaderBase.Object
	SolarTablesData_GameModeMain TryGetRowData(int Key, out bool HasKey);// 0x2248380
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x22476c0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_GameModeMain GetRowData(int Key);// 0x2246f10
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2246af0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GameModeMain.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int groupid;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Desc;//[Offset: 0x1c, Size: 1]
	SolarTablesLocalText DetailDes;//[Offset: 0x20, Size: 1]
	FString Icon;//[Offset: 0x28, Size: 1]
	FString Icon_s;//[Offset: 0x38, Size: 1]
	FString Icon_recruit;//[Offset: 0x48, Size: 1]
	FString Icon_recruit_issue;//[Offset: 0x58, Size: 1]
	FString Icon_mini;//[Offset: 0x68, Size: 1]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool IfRecruitShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	int ModeType;//[Offset: 0x7c, Size: 1]
	int OutcomeSet;//[Offset: 0x80, Size: 1]
	int LifeTime;//[Offset: 0x84, Size: 1]
	int[] AccessClient;//[Offset: 0x88, Size: 1]
	int[] AccessServer;//[Offset: 0x98, Size: 1]
	int[] AccessAccount;//[Offset: 0xa8, Size: 1]
	int[] AccessActivity;//[Offset: 0xb8, Size: 1]
	int UnlockLvl;//[Offset: 0xc8, Size: 1]
	int[] MatchRule;//[Offset: 0xd0, Size: 1]
	int DefaultMatchRule;//[Offset: 0xe0, Size: 1]
	int Backpack;//[Offset: 0xe4, Size: 1]
	FString UIConfig;//[Offset: 0xe8, Size: 1]
	FString ModeConfig;//[Offset: 0xf8, Size: 1]
	FString Parameters;//[Offset: 0x108, Size: 1]
	int DefaultSelect;//[Offset: 0x118, Size: 1]
	bool AIMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	FString SettlementBPPath;//[Offset: 0x120, Size: 1]
	bool ReEnterBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool IsAutoFillTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	int[] CustomRoomNum;//[Offset: 0x138, Size: 1]
	bool GetSupplyBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	int ChunkID;//[Offset: 0x14c, Size: 1]
	int[] ChunkIdList;//[Offset: 0x150, Size: 1]
	enum ClassModeType;//[Offset: 0x160, Size: 1]
	bool WarmUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	bool EnableCustomRoomReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 1]

--------------------------------
Class: SolarTables_Reader_OutcomeSet.SolarTableReaderBase.Object
	SolarTablesData_OutcomeSet TryGetRowData(int Key, out bool HasKey);// 0x2278be0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x2278420
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_OutcomeSet GetRowData(int Key);// 0x2246b30
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2277990
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_OutcomeSet.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] OutcomeRef;//[Offset: 0x18, Size: 1]
	int[] GlobalOutcome;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_GameTimeLine.SolarTableReaderBase.Object
	SolarTablesData_GameTimeLine TryGetRowData(int Key, out bool HasKey);// 0x224f000
	bool HasRowKey(int Key);// 0x2220ea0
	bool HasColKey(FString Key);// 0x224e870
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220570
	SolarTablesData_GameTimeLine GetRowData(int Key);// 0x224e2c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x224e140
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GameTimeLine.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] CheckEvent;//[Offset: 0x18, Size: 1]
	int GameMode;//[Offset: 0x28, Size: 1]
	int StartTime;//[Offset: 0x2c, Size: 1]
	int DaylightChange;//[Offset: 0x30, Size: 1]
	int AirDrops;//[Offset: 0x34, Size: 1]
	bool IfPoisonShrink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int[] RedZone;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarTables_Reader_GlobalOutcome.SolarTableReaderBase.Object
	SolarTablesData_GlobalOutcome TryGetRowData(int Key, out bool HasKey);// 0x224f510
	bool HasRowKey(int Key);// 0x224ee10
	bool HasColKey(FString Key);// 0x224ea50
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x224e6f0
	SolarTablesData_GlobalOutcome GetRowData(int Key);// 0x224e3f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x224e1c0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GlobalOutcome.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] ItemIDs;//[Offset: 0x18, Size: 1]
	int[] ItemNums;//[Offset: 0x28, Size: 1]
	int SingleMaxTimes;//[Offset: 0x38, Size: 1]
	int TotalMaxTimes;//[Offset: 0x3c, Size: 1]
	int TotalMinTimes;//[Offset: 0x40, Size: 1]
	int[] AffectedOutcomes;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SolarTables_Reader_GlobalSensitivity.SolarTableReaderBase.Object
	SolarTablesData_GlobalSensitivity TryGetRowData(int Key, out bool HasKey);// 0x224f690
	bool HasRowKey(int Key);// 0x224ef00
	bool HasColKey(FString Key);// 0x224eb40
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x224e7b0
	SolarTablesData_GlobalSensitivity GetRowData(int Key);// 0x224e510
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x224e200
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GlobalSensitivity.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float[] HoldWeaponSensitivity;//[Offset: 0x18, Size: 1]
	float[] FireWeaponSensitivity;//[Offset: 0x28, Size: 1]
	float ShoulderShootSenSItivity;//[Offset: 0x38, Size: 1]
	float ShoulderShootFireSenSItivity;//[Offset: 0x3c, Size: 1]
	float[] SkillSensitivity;//[Offset: 0x40, Size: 1]
	float[] SightSensitivity;//[Offset: 0x50, Size: 1]
	float[] VehicleDriverSensitivity;//[Offset: 0x60, Size: 1]
	float[] VehicleFireSensitivity;//[Offset: 0x70, Size: 1]
	float[] SuperSkillSensitivity;//[Offset: 0x80, Size: 1]
	float[] TacticalSkillSensitivity;//[Offset: 0x90, Size: 1]

--------------------------------
Class: SolarTables_Reader_HeroPowerFormula.SolarTableReaderBase.Object
	SolarTablesData_HeroPowerFormula TryGetRowData(int Key, out bool HasKey);// 0x224fb90
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x224ed20
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_HeroPowerFormula GetRowData(int Key);// 0x221fd90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x224e280
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_HeroPowerFormula.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int MatchRuleID;//[Offset: 0x14, Size: 1]
	int Battlerank;//[Offset: 0x18, Size: 1]
	int RankScore;//[Offset: 0x1c, Size: 1]
	float KillRealConfig;//[Offset: 0x20, Size: 1]
	float KillAiConfig;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SolarTables_Reader_InputAction.SolarTableReaderBase.Object
	SolarTablesData_InputAction TryGetRowData(FString Key, out bool HasKey);// 0x22568b0
	bool HasRowKey(FString Key);// 0x2256370
	bool HasColKey(FString Key);// 0x2255ec0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out FString[] OutKeys);// 0x2255c10
	SolarTablesData_InputAction GetRowData(FString Key);// 0x22556d0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2255490
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_InputAction.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 1]
	bool bFlagBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bFlagBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bFlagChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool bFlagParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool bFlagSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bFlagTeamDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]

--------------------------------
Class: SolarTables_Reader_InputMapping.SolarTableReaderBase.Object
	SolarTablesData_InputMapping TryGetRowData(FString Key, out bool HasKey);// 0x2256c20
	bool HasRowKey(FString Key);// 0x22564e0
	bool HasColKey(FString Key);// 0x2255fb0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out FString[] OutKeys);// 0x2255cf0
	SolarTablesData_InputMapping GetRowData(FString Key);// 0x22558a0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22554d0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_InputMapping.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 1]
	FString ActionName;//[Offset: 0x20, Size: 1]
	enum ActionType;//[Offset: 0x30, Size: 1]
	float Scale;//[Offset: 0x34, Size: 1]
	enum TriggerType;//[Offset: 0x38, Size: 1]
	FString FirstDefaultKeys;//[Offset: 0x40, Size: 1]
	FString SecondDefaultKeys;//[Offset: 0x50, Size: 1]
	FString ThirdDefaultKeys;//[Offset: 0x60, Size: 1]
	enum CtrlType;//[Offset: 0x70, Size: 1]
	enum ContextType;//[Offset: 0x71, Size: 1]
	enum RelatedType;//[Offset: 0x72, Size: 1]
	SolarTablesLocalText ActionDisplayName;//[Offset: 0x74, Size: 1]
	SolarTablesLocalText ActionTipsDesc;//[Offset: 0x78, Size: 1]
	enum TabType;//[Offset: 0x7c, Size: 1]
	int GroupIndex;//[Offset: 0x80, Size: 1]
	SolarTablesLocalText GroupTitle;//[Offset: 0x84, Size: 1]
	enum GroupType;//[Offset: 0x88, Size: 1]
	int GroupPriority;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: SolarTables_Reader_Item.SolarTableReaderBase.Object
	SolarTablesData_Item TryGetRowData(int Key, out bool HasKey);// 0x2256f90
	bool HasRowKey(int Key);// 0x2220ea0
	bool HasColKey(FString Key);// 0x22560a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220570
	SolarTablesData_Item GetRowData(int Key);// 0x2255a30
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2255510
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Item.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarTables_Reader_BackpackProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackProperty TryGetRowData(int Key, out bool HasKey);// 0x2221390
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x2220810
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220330
	SolarTablesData_BackpackProperty GetRowData(int Key);// 0x221fea0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x221fc90
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BackpackProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	FString BackpackMeshPath;//[Offset: 0x50, Size: 1]
	FString PreviewBpPath;//[Offset: 0x60, Size: 1]
	int StartFrame;//[Offset: 0x70, Size: 1]
	int EndFrame;//[Offset: 0x74, Size: 1]
	float Length;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SolarTables_Reader_BackpackTrailProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackTrailProperty TryGetRowData(int Key, out bool HasKey);// 0x22214e0
	bool HasRowKey(int Key);// 0x2220cc0
	bool HasColKey(FString Key);// 0x2220900
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22203f0
	SolarTablesData_BackpackTrailProperty GetRowData(int Key);// 0x221ff90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x221fcd0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_BackpackTrailProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	FString PreviewTrailPath;//[Offset: 0x50, Size: 1]
	FString AssemblingId;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarTables_Reader_CapsuleProperty.SolarTableReaderBase.Object
	SolarTablesData_CapsuleProperty TryGetRowData(int Key, out bool HasKey);// 0x2229f00
	bool HasRowKey(int Key);// 0x2220cc0
	bool HasColKey(FString Key);// 0x2228f20
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22203f0
	SolarTablesData_CapsuleProperty GetRowData(int Key);// 0x221ff90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22280e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_CapsuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	FString CapsuleBPPath;//[Offset: 0x50, Size: 1]
	FString PreviewBpPath;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarTables_Reader_Dance.SolarTableReaderBase.Object
	SolarTablesData_Dance TryGetRowData(int Key, out bool HasKey);// 0x2239370
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x2238c70
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217610
	SolarTablesData_Dance GetRowData(int Key);// 0x22385d0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2238380
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Dance.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	int LoopTime;//[Offset: 0x50, Size: 1]
	FString BlueprintPath;//[Offset: 0x58, Size: 1]
	int ShopID;//[Offset: 0x68, Size: 1]
	bool IfDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 1]
	FString BeginTime;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SolarTables_Reader_Emote.SolarTableReaderBase.Object
	SolarTablesData_Emote TryGetRowData(int Key, out bool HasKey);// 0x2239810
	bool HasRowKey(int Key);// 0x2239120
	bool HasColKey(FString Key);// 0x2238f40
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2238ac0
	SolarTablesData_Emote GetRowData(int Key);// 0x22388e0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2238440
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Emote.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	int EmoteType;//[Offset: 0x50, Size: 1]
	FString EmoteBlueprintPath;//[Offset: 0x58, Size: 1]
	FString EmoteResourcePath;//[Offset: 0x68, Size: 1]
	float EmoteDuration;//[Offset: 0x78, Size: 1]
	FString EmoteAppearSound;//[Offset: 0x80, Size: 1]
	FString EmoteSound;//[Offset: 0x90, Size: 1]
	int ShopID;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: SolarTables_Reader_MaterialProperty.SolarTableReaderBase.Object
	SolarTablesData_MaterialProperty TryGetRowData(int Key, out bool HasKey);// 0x2271940
	bool HasRowKey(int Key);// 0x2218220
	bool HasColKey(FString Key);// 0x22713a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22176d0
	SolarTablesData_MaterialProperty GetRowData(int Key);// 0x2270cd0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2270b50
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_MaterialProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	int Prize;//[Offset: 0x50, Size: 1]
	bool IfCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	int Level;//[Offset: 0x58, Size: 1]
	SolarTablesLocalText CoverName;//[Offset: 0x5c, Size: 1]
	int Substitution;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarTables_Reader_VehicleSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x229a950
	bool HasRowKey(int Key);// 0x22479b0
	bool HasColKey(FString Key);// 0x229a240
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247180
	SolarTablesData_VehicleSkinProperty GetRowData(int Key);// 0x2299cd0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2299a70
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_VehicleSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	int VehicleSkinId;//[Offset: 0x50, Size: 1]
	int VehicleSkinAquiredThre;//[Offset: 0x54, Size: 1]
	int JumpPage;//[Offset: 0x58, Size: 1]
	FString KillBroadcast;//[Offset: 0x60, Size: 1]
	bool DisplayInVehiclery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x22afe10
	bool HasRowKey(int Key);// 0x2218220
	bool HasColKey(FString Key);// 0x22af590
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22176d0
	SolarTablesData_WeaponSkinProperty GetRowData(int Key);// 0x22af220
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22aef90
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemClass;//[Offset: 0x30, Size: 1]
	int ItemType;//[Offset: 0x34, Size: 1]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	enum StackType;//[Offset: 0x3b, Size: 1]
	int[] JumpLink;//[Offset: 0x40, Size: 1]
	int WeaponSkinID;//[Offset: 0x50, Size: 1]
	FString WeaponIcon_M;//[Offset: 0x58, Size: 1]

--------------------------------
Class: SolarTables_Reader_ItemCustomType.SolarTableReaderBase.Object
	SolarTablesData_ItemCustomType TryGetRowData(int Key, out bool HasKey);// 0x2257210
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x2256280
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_ItemCustomType GetRowData(int Key);// 0x2228370
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2255590
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ItemCustomType.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] ItemIDs;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_ItemInBattle.SolarTableReaderBase.Object
	SolarTablesData_ItemInBattle TryGetRowData(int Key, out bool HasKey);// 0x225e6d0
	bool HasRowKey(int Key);// 0x22479b0
	bool HasColKey(FString Key);// 0x225ddd0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247180
	SolarTablesData_ItemInBattle GetRowData(int Key);// 0x225d500
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x225d380
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ItemInBattle.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: SolarTables_Reader_ArmorProperty.SolarTableReaderBase.Object
	SolarTablesData_ArmorProperty TryGetRowData(int Key, out bool HasKey);// 0x2219050
	bool HasRowKey(int Key);// 0x2218310
	bool HasColKey(FString Key);// 0x2217d60
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217790
	SolarTablesData_ArmorProperty GetRowData(int Key);// 0x22172b0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2216dc0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ArmorProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float MaxValue;//[Offset: 0x74, Size: 1]
	float RecoverySpeed;//[Offset: 0x78, Size: 1]
	float EnergyCost;//[Offset: 0x7c, Size: 1]
	float MaterialCost;//[Offset: 0x80, Size: 1]
	float MinMaterialCost;//[Offset: 0x84, Size: 1]
	int ArmorWorth;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarTables_Reader_Chest.SolarTableReaderBase.Object
	SolarTablesData_Chest TryGetRowData(int Key, out bool HasKey);// 0x22320c0
	bool HasRowKey(int Key);// 0x2218410
	bool HasColKey(FString Key);// 0x22315d0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2231180
	SolarTablesData_Chest GetRowData(int Key);// 0x2230da0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22309a0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Chest.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int openType;//[Offset: 0x74, Size: 1]
	int CostQuantity;//[Offset: 0x78, Size: 1]
	int CostType;//[Offset: 0x7c, Size: 1]
	int OpenTime;//[Offset: 0x80, Size: 1]
	int Drop;//[Offset: 0x84, Size: 1]

--------------------------------
Class: SolarTables_Reader_EnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_EnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x2239a90
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x2239030
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220330
	SolarTablesData_EnergyProperty GetRowData(int Key);// 0x22389d0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2238480
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_EnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float AddedEnergyMax;//[Offset: 0x74, Size: 1]
	int EnergyModuleWorth;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SolarTables_Reader_ExtraEnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_ExtraEnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x2247d00
	bool HasRowKey(int Key);// 0x22477b0
	bool HasColKey(FString Key);// 0x22473f0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247000
	SolarTablesData_ExtraEnergyProperty GetRowData(int Key);// 0x2246c40
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2246a30
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ExtraEnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int QualityColor;//[Offset: 0x74, Size: 1]
	float ExtraEnergyMax;//[Offset: 0x78, Size: 1]
	float ExtraEnergyCharge;//[Offset: 0x7c, Size: 1]
	float ChargeCD;//[Offset: 0x80, Size: 1]
	int ExtraEnergyWorth;//[Offset: 0x84, Size: 1]
	float RechargeFrequencyFromSky;//[Offset: 0x88, Size: 1]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x8c, Size: 1]
	float RechargeFrequencyFromPile;//[Offset: 0x90, Size: 1]
	float RechargeQuantityFromSky;//[Offset: 0x94, Size: 1]
	float RechargeQuantityFromDeathBox;//[Offset: 0x98, Size: 1]
	float RechargeQuantityFromPile;//[Offset: 0x9c, Size: 1]
	FString Sketch;//[Offset: 0xa0, Size: 1]
	int SketchLevel;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SolarTables_Reader_GunProperty.SolarTableReaderBase.Object
	SolarTablesData_GunProperty TryGetRowData(int Key, out bool HasKey);// 0x224f920
	bool HasRowKey(int Key);// 0x2239120
	bool HasColKey(FString Key);// 0x224ec30
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2238ac0
	SolarTablesData_GunProperty GetRowData(int Key);// 0x224e600
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x224e240
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GunProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int weaponid;//[Offset: 0x74, Size: 1]
	FString BigIcon;//[Offset: 0x78, Size: 1]
	int WeaponLv;//[Offset: 0x88, Size: 1]
	bool UseWeaponAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	int WeaponAccessory1;//[Offset: 0x90, Size: 1]
	int WeaponAccessory2;//[Offset: 0x94, Size: 1]
	int WeaponAccessory3;//[Offset: 0x98, Size: 1]
	int WeaponAccessory4;//[Offset: 0x9c, Size: 1]
	int WeaponAccessory5;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: SolarTables_Reader_ItemBehavior.SolarTableReaderBase.Object
	SolarTablesData_ItemBehavior TryGetRowData(int Key, out bool HasKey);// 0x22570c0
	bool HasRowKey(int Key);// 0x22479b0
	bool HasColKey(FString Key);// 0x2256190
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247180
	SolarTablesData_ItemBehavior GetRowData(int Key);// 0x2255b20
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2255550
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ItemBehavior.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int BehaviorExpID;//[Offset: 0x74, Size: 1]

--------------------------------
Class: SolarTables_Reader_ItemWeaponParts.SolarTableReaderBase.Object
	SolarTablesData_ItemWeaponParts TryGetRowData(int Key, out bool HasKey);// 0x225eb70
	bool HasRowKey(int Key);// 0x2218310
	bool HasColKey(FString Key);// 0x225e0a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x225dc30
	SolarTablesData_ItemWeaponParts GetRowData(int Key);// 0x225d7f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x225d440
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ItemWeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int PartsType;//[Offset: 0x74, Size: 1]
	int Level;//[Offset: 0x78, Size: 1]
	FString PreviewIcon;//[Offset: 0x80, Size: 1]

--------------------------------
Class: SolarTables_Reader_JetPackModuleProperty.SolarTableReaderBase.Object
	SolarTablesData_JetPackModuleProperty TryGetRowData(int Key, out bool HasKey);// 0x225ede0
	bool HasRowKey(int Key);// 0x22477b0
	bool HasColKey(FString Key);// 0x225e190
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247000
	SolarTablesData_JetPackModuleProperty GetRowData(int Key);// 0x2246c40
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x225d480
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_JetPackModuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int VerticalDashSpeedTimes;//[Offset: 0x74, Size: 1]
	int HorizontalDashSpeedTimes;//[Offset: 0x78, Size: 1]
	float VerticalDashSpeedScale;//[Offset: 0x7c, Size: 1]
	float HorizontalDashSpeedScale;//[Offset: 0x80, Size: 1]
	float VerticalDashCoolDownScale;//[Offset: 0x84, Size: 1]
	float HorizontalDashCoolDownScale;//[Offset: 0x88, Size: 1]
	float VerticalDashEnergyScale;//[Offset: 0x8c, Size: 1]
	float HorizontalDashEnergyScale;//[Offset: 0x90, Size: 1]
	float VerticalChargingScale;//[Offset: 0x94, Size: 1]
	float HorizontalChargingScale;//[Offset: 0x98, Size: 1]
	int JetPackModuleWorth;//[Offset: 0x9c, Size: 1]
	FString Sketch;//[Offset: 0xa0, Size: 1]
	int SketchLevel;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: SolarTables_Reader_ShieldProperty.SolarTableReaderBase.Object
	SolarTablesData_ShieldProperty TryGetRowData(int Key, out bool HasKey);// 0x228d200
	bool HasRowKey(int Key);// 0x228d100
	bool HasColKey(FString Key);// 0x228cf20
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x228ce60
	SolarTablesData_ShieldProperty GetRowData(int Key);// 0x228cc80
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x228cc00
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ShieldProperty.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 1]
	int Quality;//[Offset: 0x2c, Size: 1]
	int ItemType;//[Offset: 0x30, Size: 1]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int Pile;//[Offset: 0x38, Size: 1]
	FString AbilityBP;//[Offset: 0x40, Size: 1]
	FString ItemBP;//[Offset: 0x50, Size: 1]
	FString AudioEventName;//[Offset: 0x60, Size: 1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float MaxValue;//[Offset: 0x74, Size: 1]
	float RecoverySpeed;//[Offset: 0x78, Size: 1]
	float EnergyCost;//[Offset: 0x7c, Size: 1]
	int CoolDownTime;//[Offset: 0x80, Size: 1]
	float RecoveryDuration;//[Offset: 0x84, Size: 1]
	float RecoveryDurationB;//[Offset: 0x88, Size: 1]
	float RecoveryAmount;//[Offset: 0x8c, Size: 1]
	float EnergyConsumption;//[Offset: 0x90, Size: 1]
	int ShieldWorth;//[Offset: 0x94, Size: 1]
	FString Sketch;//[Offset: 0x98, Size: 1]
	int SketchLevel;//[Offset: 0xa8, Size: 1]
	int QualityColor;//[Offset: 0xac, Size: 1]
	int AutoRecharge;//[Offset: 0xb0, Size: 1]
	float LeaveCombatTime;//[Offset: 0xb4, Size: 1]
	float AutoRechargeInterval;//[Offset: 0xb8, Size: 1]
	float AutoRechargeValue;//[Offset: 0xbc, Size: 1]
	int NextUpgradeCost;//[Offset: 0xc0, Size: 1]
	int NextUpgradeItemID;//[Offset: 0xc4, Size: 1]
	int UpgradeItemCost;//[Offset: 0xc8, Size: 1]
	float UpgradeTimeCost;//[Offset: 0xcc, Size: 1]
	float ShieldRechargeDelayTime;//[Offset: 0xd0, Size: 1]
	float ShieldRecoveryTime;//[Offset: 0xd4, Size: 1]

--------------------------------
Class: SolarTables_Reader_ItemQuality.SolarTableReaderBase.Object
	SolarTablesData_ItemQuality TryGetRowData(int Key, out bool HasKey);// 0x225e820
	bool HasRowKey(int Key);// 0x225e370
	bool HasColKey(FString Key);// 0x225dec0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x225dab0
	SolarTablesData_ItemQuality GetRowData(int Key);// 0x225d5f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x225d3c0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ItemQuality.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float[] Color;//[Offset: 0x18, Size: 1]
	float[] HUDColor;//[Offset: 0x28, Size: 1]
	float[] OutsideColor;//[Offset: 0x38, Size: 1]
	float[] InsideColor;//[Offset: 0x48, Size: 1]
	float[] HighQualityColor;//[Offset: 0x58, Size: 1]
	float[] LowQualityColor;//[Offset: 0x68, Size: 1]
	float[] HUDBGColor;//[Offset: 0x78, Size: 1]
	float[] HUDDecorateColor;//[Offset: 0x88, Size: 1]
	FString Qualitypic;//[Offset: 0x98, Size: 1]
	FString QualityColor;//[Offset: 0xa8, Size: 1]
	FString Qualitystr;//[Offset: 0xb8, Size: 1]
	FString QualityBG;//[Offset: 0xc8, Size: 1]
	FString QualityBG2;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: SolarTables_Reader_ItemSound.SolarTableReaderBase.Object
	SolarTablesData_ItemSound TryGetRowData(int Key, out bool HasKey);// 0x225ea10
	bool HasRowKey(int Key);// 0x225e470
	bool HasColKey(FString Key);// 0x225dfb0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x225db70
	SolarTablesData_ItemSound GetRowData(int Key);// 0x225d6e0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x225d400
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ItemSound.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString PickupSound;//[Offset: 0x18, Size: 1]
	FString EquippedSound;//[Offset: 0x28, Size: 1]
	FString PassiveSound;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarTables_Reader_LobbyAutoDownload.SolarTableReaderBase.Object
	SolarTablesData_LobbyAutoDownload TryGetRowData(int Key, out bool HasKey);// 0x22640e0
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x2263b40
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228830
	SolarTablesData_LobbyAutoDownload GetRowData(int Key);// 0x2263940
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22637c0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_LobbyAutoDownload.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int ChunkID;//[Offset: 0x14, Size: 1]
	int ChunkName;//[Offset: 0x18, Size: 1]
	bool IncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: SolarTables_Reader_LanguageSwitcher.SolarTableReaderBase.Object
	SolarTablesData_LanguageSwitcher TryGetRowData(FString Key, out bool HasKey);// 0x225f050
	bool HasRowKey(FString Key);// 0x225e560
	bool HasColKey(FString Key);// 0x225e280
	FString GetTableName();// 0x2217910
	int GetRowKeys(out FString[] OutKeys);// 0x225dcf0
	SolarTablesData_LanguageSwitcher GetRowData(FString Key);// 0x225d8e0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x225d4c0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_LanguageSwitcher.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 1]
	FString ButtonText;//[Offset: 0x20, Size: 1]
	bool IfOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int LanguageIndex;//[Offset: 0x34, Size: 1]
	FString MarqueeDirection;//[Offset: 0x38, Size: 1]
	FString TextAbbr;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization.SolarTableReaderBase.Object
	SolarTablesData_Localization TryGetRowData(int Key, out bool HasKey);// 0x22642e0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2263c30
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2263800
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_BattleUI.SolarTableReaderBase.Object
	SolarTablesData_Localization_BattleUI TryGetRowData(int Key, out bool HasKey);// 0x22644d0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2263d20
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_BattleUI GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2263840
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_BattleUI.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_EventSystem.SolarTableReaderBase.Object
	SolarTablesData_Localization_EventSystem TryGetRowData(int Key, out bool HasKey);// 0x22646c0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2263e10
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_EventSystem GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2263880
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_EventSystem.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_General.SolarTableReaderBase.Object
	SolarTablesData_Localization_General TryGetRowData(int Key, out bool HasKey);// 0x22648b0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2263f00
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_General GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22638c0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_General.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_Heroes.SolarTableReaderBase.Object
	SolarTablesData_Localization_Heroes TryGetRowData(int Key, out bool HasKey);// 0x2264aa0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2263ff0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_Heroes GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2263900
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_Heroes.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_Item.SolarTableReaderBase.Object
	SolarTablesData_Localization_Item TryGetRowData(int Key, out bool HasKey);// 0x226a3f0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2269e50
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_Item GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22699e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_Item.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_Tournament.SolarTableReaderBase.Object
	SolarTablesData_Localization_Tournament TryGetRowData(int Key, out bool HasKey);// 0x226a5e0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x2269f40
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_Tournament GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2269a20
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_Tournament.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_Localization_Uncategorized.SolarTableReaderBase.Object
	SolarTablesData_Localization_Uncategorized TryGetRowData(int Key, out bool HasKey);// 0x226a7d0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x226a030
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_Localization_Uncategorized GetRowData(int Key);// 0x2263a50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2269a60
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Localization_Uncategorized.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString zh_TW;//[Offset: 0x58, Size: 1]
	FString ja;//[Offset: 0x68, Size: 1]
	FString ko;//[Offset: 0x78, Size: 1]
	FString fr;//[Offset: 0x88, Size: 1]
	FString de;//[Offset: 0x98, Size: 1]
	FString ru;//[Offset: 0xa8, Size: 1]
	FString ar;//[Offset: 0xb8, Size: 1]
	FString tr;//[Offset: 0xc8, Size: 1]
	FString tl;//[Offset: 0xd8, Size: 1]
	FString es;//[Offset: 0xe8, Size: 1]
	FString hi;//[Offset: 0xf8, Size: 1]
	FString vi;//[Offset: 0x108, Size: 1]
	FString th;//[Offset: 0x118, Size: 1]
	FString it;//[Offset: 0x128, Size: 1]
	FString pl;//[Offset: 0x138, Size: 1]
	FString po;//[Offset: 0x148, Size: 1]
	FString Op;//[Offset: 0x158, Size: 1]

--------------------------------
Class: SolarTables_Reader_GameMap.SolarTableReaderBase.Object
	SolarTablesData_GameMap TryGetRowData(int Key, out bool HasKey);// 0x2247f70
	bool HasRowKey(int Key);// 0x22478b0
	bool HasColKey(FString Key);// 0x22474e0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22470c0
	SolarTablesData_GameMap GetRowData(int Key);// 0x2246d30
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2246a70
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_GameMap.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString MapName;//[Offset: 0x18, Size: 1]
	FString ResPath;//[Offset: 0x28, Size: 1]
	int MapImage;//[Offset: 0x38, Size: 1]
	float[] MapImageSize;//[Offset: 0x40, Size: 1]
	float[] MapTopLeftCoord;//[Offset: 0x50, Size: 1]
	float[] MapRightBottomCoord;//[Offset: 0x60, Size: 1]
	int[] LocationIcon;//[Offset: 0x70, Size: 1]
	FString[] ItemSubLevels;//[Offset: 0x80, Size: 1]
	float HorizonLineZ;//[Offset: 0x90, Size: 1]
	float TopZ;//[Offset: 0x94, Size: 1]
	float BottomZ;//[Offset: 0x98, Size: 1]
	float AverageZ;//[Offset: 0x9c, Size: 1]
	float InitFogZ;//[Offset: 0xa0, Size: 1]
	float TargetFogZ;//[Offset: 0xa4, Size: 1]
	float MapFOV;//[Offset: 0xa8, Size: 1]
	int Speed1;//[Offset: 0xac, Size: 1]
	int Speed2;//[Offset: 0xb0, Size: 1]
	float MapFOV1;//[Offset: 0xb4, Size: 1]
	float MapFOV2;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: SolarTables_Reader_MapMarkIcon.SolarTableReaderBase.Object
	SolarTablesData_MapMarkIcon TryGetRowData(int Key, out bool HasKey);// 0x226abe0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x226a210
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_MapMarkIcon GetRowData(int Key);// 0x2269c70
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2269ae0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_MapMarkIcon.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString AtlasPath;//[Offset: 0x18, Size: 1]
	float[] IconSize;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_MatchRule.SolarTableReaderBase.Object
	SolarTablesData_MatchRule TryGetRowData(int Key, out bool HasKey);// 0x226aed0
	bool HasRowKey(int Key);// 0x2218220
	bool HasColKey(FString Key);// 0x226a300
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22176d0
	SolarTablesData_MatchRule GetRowData(int Key);// 0x2269d60
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2269b20
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_MatchRule.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int MatchType;//[Offset: 0x14, Size: 1]
	int MinPlayer;//[Offset: 0x18, Size: 1]
	int MaxPlayer;//[Offset: 0x1c, Size: 1]
	int NumMode;//[Offset: 0x20, Size: 1]
	int StopMatchTime;//[Offset: 0x24, Size: 1]
	int[] PlayerStructure;//[Offset: 0x28, Size: 1]
	int MinGroup;//[Offset: 0x38, Size: 1]
	int EloSettleType;//[Offset: 0x3c, Size: 1]
	int RankSettleType;//[Offset: 0x40, Size: 1]
	int groupid;//[Offset: 0x44, Size: 1]
	int RankGroupNameID;//[Offset: 0x48, Size: 1]
	bool MatchSameBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int KeepMatchTimeID;//[Offset: 0x50, Size: 1]
	int OBNum;//[Offset: 0x54, Size: 1]
	bool MaxPlayerStopMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int StatisticsType;//[Offset: 0x5c, Size: 1]
	int HistoryModeType;//[Offset: 0x60, Size: 1]
	bool HeroCombatAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: SolarTables_Reader_RankMatch.SolarTableReaderBase.Object
	SolarTablesData_RankMatch TryGetRowData(int Key, out bool HasKey);// 0x2280800
	bool HasRowKey(int Key);// 0x2231990
	bool HasColKey(FString Key);// 0x227ffa0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22310c0
	SolarTablesData_RankMatch GetRowData(int Key);// 0x227f930
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x227f5a0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_RankMatch.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int MatchType;//[Offset: 0x14, Size: 1]
	int NumOfAI;//[Offset: 0x18, Size: 1]
	int AILevel;//[Offset: 0x1c, Size: 1]
	FString AILevelConfig;//[Offset: 0x20, Size: 1]
	int AITeamPresetsID;//[Offset: 0x30, Size: 1]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int[] MLApplication;//[Offset: 0x38, Size: 1]
	int MLApply;//[Offset: 0x48, Size: 1]
	int MaxWait;//[Offset: 0x4c, Size: 1]
	int StopMatchTime;//[Offset: 0x50, Size: 1]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	int AIAccompanyTimeline;//[Offset: 0x58, Size: 1]
	int MinPlayer;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: SolarTables_Reader_NameCardBackground.SolarTableReaderBase.Object
	SolarTablesData_NameCardBackground TryGetRowData(int Key, out bool HasKey);// 0x2271a70
	bool HasRowKey(int Key);// 0x225e470
	bool HasColKey(FString Key);// 0x2271490
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22712e0
	SolarTablesData_NameCardBackground GetRowData(int Key);// 0x2270dc0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2270b90
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_NameCardBackground.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int ItemID;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 1]
	int ShopID;//[Offset: 0x1c, Size: 1]
	int Exclusive;//[Offset: 0x20, Size: 1]
	int IsAIEquiped;//[Offset: 0x24, Size: 1]
	FString BackgroundPath;//[Offset: 0x28, Size: 1]
	FString BackgroundTexturePath;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarTables_Reader_NameCardPose.SolarTableReaderBase.Object
	SolarTablesData_NameCardPose TryGetRowData(int Key, out bool HasKey);// 0x2271d80
	bool HasRowKey(int Key);// 0x22479b0
	bool HasColKey(FString Key);// 0x2271580
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247180
	SolarTablesData_NameCardPose GetRowData(int Key);// 0x2270ee0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2270bd0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_NameCardPose.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int ItemID;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 1]
	int ShopID;//[Offset: 0x1c, Size: 1]
	int Exclusive;//[Offset: 0x20, Size: 1]
	int IsAIEquiped;//[Offset: 0x24, Size: 1]
	FString PosePath;//[Offset: 0x28, Size: 1]
	FString PosePath_M;//[Offset: 0x38, Size: 1]
	FString PosePath_F;//[Offset: 0x48, Size: 1]
	FString PosePath_MCP;//[Offset: 0x58, Size: 1]
	FString PosePath_FFM;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarTables_Reader_ObGift.SolarTableReaderBase.Object
	SolarTablesData_ObGift TryGetRowData(int Key, out bool HasKey);// 0x22722a0
	bool HasRowKey(int Key);// 0x2220cc0
	bool HasColKey(FString Key);// 0x2271850
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22203f0
	SolarTablesData_ObGift GetRowData(int Key);// 0x22711f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2270c90
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_ObGift.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int gift_type;//[Offset: 0x14, Size: 1]
	FString item_name;//[Offset: 0x18, Size: 1]
	FString item_back_res;//[Offset: 0x28, Size: 1]
	FString item_text_res;//[Offset: 0x38, Size: 1]
	int gift_hot_num;//[Offset: 0x48, Size: 1]
	int currency_type;//[Offset: 0x4c, Size: 1]
	int item_price;//[Offset: 0x50, Size: 1]
	float item_back;//[Offset: 0x54, Size: 1]
	int item_show_time;//[Offset: 0x58, Size: 1]
	int item_id;//[Offset: 0x5c, Size: 1]
	int small_time;//[Offset: 0x60, Size: 1]
	int interact_num;//[Offset: 0x64, Size: 1]
	int CD;//[Offset: 0x68, Size: 1]

--------------------------------
Class: SolarTables_Reader_OBSubtitle_Action2Feature.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Action2Feature TryGetRowData(int Key, out bool HasKey);// 0x2271ee0
	bool HasRowKey(int Key);// 0x225e470
	bool HasColKey(FString Key);// 0x2271670
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22712e0
	SolarTablesData_OBSubtitle_Action2Feature GetRowData(int Key);// 0x2270fd0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2270c10
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_OBSubtitle_Action2Feature.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString ActionName;//[Offset: 0x18, Size: 1]
	int Priority;//[Offset: 0x28, Size: 1]
	int DefualtEmotion;//[Offset: 0x2c, Size: 1]
	int MaxSuccessiveCount;//[Offset: 0x30, Size: 1]
	int[] FeatureList;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarTables_Reader_OBSubtitle_Feature2Emotion.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Feature2Emotion TryGetRowData(int Key, out bool HasKey);// 0x22787e0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x2278150
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_OBSubtitle_Feature2Emotion GetRowData(int Key);// 0x2277a90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22778d0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_OBSubtitle_Feature2Emotion.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString FeatureName;//[Offset: 0x18, Size: 1]
	int[] EmotionList;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_OBSubtitle_Emotion2Pattern.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Emotion2Pattern TryGetRowData(int Key, out bool HasKey);// 0x2272040
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x2271760
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_OBSubtitle_Emotion2Pattern GetRowData(int Key);// 0x22710f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2270c50
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_OBSubtitle_Emotion2Pattern.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int EmotionLevel;//[Offset: 0x14, Size: 1]
	int[] PatternList;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_Outcome.SolarTableReaderBase.Object
	SolarTablesData_Outcome TryGetRowData(int Key, out bool HasKey);// 0x2278930
	bool HasRowKey(int Key);// 0x2220cc0
	bool HasColKey(FString Key);// 0x2278240
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22203f0
	SolarTablesData_Outcome GetRowData(int Key);// 0x2277ba0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2277910
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Outcome.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int OutcomeType;//[Offset: 0x14, Size: 1]
	int MaxTimes;//[Offset: 0x18, Size: 1]
	int MinTimes;//[Offset: 0x1c, Size: 1]
	int[] Contents;//[Offset: 0x20, Size: 1]
	int[] LimitId;//[Offset: 0x30, Size: 1]
	int[] LimitIdMax;//[Offset: 0x40, Size: 1]
	int[] LimitIdMin;//[Offset: 0x50, Size: 1]
	FString Refresh;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarTables_Reader_OutcomeContent.SolarTableReaderBase.Object
	SolarTablesData_OutcomeContent TryGetRowData(int Key, out bool HasKey);// 0x2278a90
	bool HasRowKey(int Key);// 0x2229100
	bool HasColKey(FString Key);// 0x2278330
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228770
	SolarTablesData_OutcomeContent GetRowData(int Key);// 0x2277c90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2277950
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_OutcomeContent.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int ItemID;//[Offset: 0x14, Size: 1]
	int Weight;//[Offset: 0x18, Size: 1]
	int[] RandomNum;//[Offset: 0x20, Size: 1]
	int MaxTimes;//[Offset: 0x30, Size: 1]
	int MinTimes;//[Offset: 0x34, Size: 1]
	int RelatedContentID;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SolarTables_Reader_PickupPriorityItem.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityItem TryGetRowData(int Key, out bool HasKey);// 0x2278d30
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x2278510
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2277fd0
	SolarTablesData_PickupPriorityItem GetRowData(int Key);// 0x2277db0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22779d0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_PickupPriorityItem.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int PriorityValue;//[Offset: 0x14, Size: 1]
	int MutiAutoPickup;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_PickupPriorityWeaponPart.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityWeaponPart TryGetRowData(int Key, out bool HasKey);// 0x2278f10
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x2278600
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2278090
	SolarTablesData_PickupPriorityWeaponPart GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2277a10
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_PickupPriorityWeaponPart.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int PriorityValue;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTables_Reader_CharacterVoiceover.SolarTableReaderBase.Object
	SolarTablesData_CharacterVoiceover TryGetRowData(int Key, out bool HasKey);// 0x2231e40
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x22314e0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_CharacterVoiceover GetRowData(int Key);// 0x2230c90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2230960
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_CharacterVoiceover.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int QuickVoiceID;//[Offset: 0x14, Size: 1]
	int CharacterId;//[Offset: 0x18, Size: 1]
	int SkinId;//[Offset: 0x1c, Size: 1]
	FString AudioEventName;//[Offset: 0x20, Size: 1]
	int LocalizationID;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarTables_Reader_QuickChat.SolarTableReaderBase.Object
	SolarTablesData_QuickChat TryGetRowData(int Key, out bool HasKey);// 0x2280370
	bool HasRowKey(int Key);// 0x2280270
	bool HasColKey(FString Key);// 0x227fcd0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x227fc10
	SolarTablesData_QuickChat GetRowData(int Key);// 0x227f660
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x227f4e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_QuickChat.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int LocalizationID;//[Offset: 0x14, Size: 1]
	FString zh_CN;//[Offset: 0x18, Size: 1]
	FString en;//[Offset: 0x28, Size: 1]
	FString pt;//[Offset: 0x38, Size: 1]
	FString ind;//[Offset: 0x48, Size: 1]
	FString fr;//[Offset: 0x58, Size: 1]
	FString de;//[Offset: 0x68, Size: 1]
	FString ru;//[Offset: 0x78, Size: 1]
	FString ar;//[Offset: 0x88, Size: 1]
	FString es;//[Offset: 0x98, Size: 1]
	FString hi;//[Offset: 0xa8, Size: 1]
	FString it;//[Offset: 0xb8, Size: 1]
	FString ja;//[Offset: 0xc8, Size: 1]
	FString ko;//[Offset: 0xd8, Size: 1]
	FString ms;//[Offset: 0xe8, Size: 1]
	FString pl;//[Offset: 0xf8, Size: 1]
	FString th;//[Offset: 0x108, Size: 1]
	FString tl;//[Offset: 0x118, Size: 1]
	FString tr;//[Offset: 0x128, Size: 1]
	FString vi;//[Offset: 0x138, Size: 1]
	FString zh_TW;//[Offset: 0x148, Size: 1]

--------------------------------
Class: SolarTables_Reader_QuickVoice.SolarTableReaderBase.Object
	SolarTablesData_QuickVoice TryGetRowData(int Key, out bool HasKey);// 0x2280560
	bool HasRowKey(int Key);// 0x2220cc0
	bool HasColKey(FString Key);// 0x227fdc0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22203f0
	SolarTablesData_QuickVoice GetRowData(int Key);// 0x227f750
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x227f520
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_QuickVoice.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString Icon;//[Offset: 0x18, Size: 1]
	int LocalizationID;//[Offset: 0x28, Size: 1]
	FString AudioEventName;//[Offset: 0x30, Size: 1]
	FString AudioEventNameFemale;//[Offset: 0x40, Size: 1]
	int IsMarkIcon;//[Offset: 0x50, Size: 1]
	int PassiveTriggeredCD;//[Offset: 0x54, Size: 1]
	int PassiveTriggeredProb;//[Offset: 0x58, Size: 1]
	FString ReplyMessageID;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarTables_Reader_VODownload.SolarTableReaderBase.Object
	SolarTablesData_VODownload TryGetRowData(int Key, out bool HasKey);// 0x229a7f0
	bool HasRowKey(int Key);// 0x225e470
	bool HasColKey(FString Key);// 0x229a150
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22712e0
	SolarTablesData_VODownload GetRowData(int Key);// 0x2299bb0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2299a30
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_VODownload.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString LobbyChunkDir;//[Offset: 0x18, Size: 1]
	int ChunkID;//[Offset: 0x28, Size: 1]
	FString ButtonText;//[Offset: 0x30, Size: 1]
	int LanguageIndex;//[Offset: 0x40, Size: 1]
	int IsDefaultChunk;//[Offset: 0x44, Size: 1]

--------------------------------
Class: SolarTables_Reader_RankLevel.SolarTableReaderBase.Object
	SolarTablesData_RankLevel TryGetRowData(int Key, out bool HasKey);// 0x22806b0
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x227feb0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220330
	SolarTablesData_RankLevel GetRowData(int Key);// 0x227f840
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x227f560
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_RankLevel.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int RankID;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText RankName;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x1c, Size: 1]
	int LevelID;//[Offset: 0x20, Size: 1]
	int RankStart;//[Offset: 0x24, Size: 1]
	int RankEnd;//[Offset: 0x28, Size: 1]
	int RankProtect;//[Offset: 0x2c, Size: 1]
	int FrustrationValue;//[Offset: 0x30, Size: 1]
	int RankReduce;//[Offset: 0x34, Size: 1]
	FString Icon;//[Offset: 0x38, Size: 1]
	FString Icon_s;//[Offset: 0x48, Size: 1]
	FString IconWord;//[Offset: 0x58, Size: 1]
	FString IconWord_s;//[Offset: 0x68, Size: 1]
	int RandomLowerLimit;//[Offset: 0x78, Size: 1]
	int RandomUpLimit;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: SolarTables_Reader_AutoDirector.SolarTableReaderBase.Object
	SolarTablesData_AutoDirector TryGetRowData(int Key, out bool HasKey);// 0x2220f90
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x2220630
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_AutoDirector GetRowData(int Key);// 0x221fd90
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x221fc10
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_AutoDirector.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int SpectateAreaRadius;//[Offset: 0x14, Size: 1]
	int MaxValidDist;//[Offset: 0x18, Size: 1]
	float MinFocusTime;//[Offset: 0x1c, Size: 1]
	float MaxFocusTime;//[Offset: 0x20, Size: 1]
	float PreFreeCameraTime;//[Offset: 0x24, Size: 1]

--------------------------------
Class: SolarTables_Reader_AutoDirectorActivityScore.SolarTableReaderBase.Object
	SolarTablesData_AutoDirectorActivityScore TryGetRowData(int Key, out bool HasKey);// 0x22211b0
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x2220720
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217490
	SolarTablesData_AutoDirectorActivityScore GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x221fc50
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_AutoDirectorActivityScore.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float Score;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTables_Reader_CircularCameras.SolarTableReaderBase.Object
	SolarTablesData_CircularCameras TryGetRowData(int Key, out bool HasKey);// 0x22325e0
	bool HasRowKey(int Key);// 0x2220db0
	bool HasColKey(FString Key);// 0x22318a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2231240
	SolarTablesData_CircularCameras GetRowData(int Key);// 0x2230fb0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2230a60
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_CircularCameras.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int MiniDistance;//[Offset: 0x14, Size: 1]
	float BorderRatio;//[Offset: 0x18, Size: 1]
	int FOV;//[Offset: 0x1c, Size: 1]
	int Pitch;//[Offset: 0x20, Size: 1]
	int InitAngleWithMainDir;//[Offset: 0x24, Size: 1]
	float BlendAlpha;//[Offset: 0x28, Size: 1]
	float AngularSpeed;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: SolarTables_Reader_HotSpot.SolarTableReaderBase.Object
	SolarTablesData_HotSpot TryGetRowData(int Key, out bool HasKey);// 0x2256650
	bool HasRowKey(int Key);// 0x2220db0
	bool HasColKey(FString Key);// 0x2255dd0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22204b0
	SolarTablesData_HotSpot GetRowData(int Key);// 0x22555d0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2255450
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_HotSpot.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString UIResource;//[Offset: 0x18, Size: 1]
	float JumpTime;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_LookAtCameras.SolarTableReaderBase.Object
	SolarTablesData_LookAtCameras TryGetRowData(int Key, out bool HasKey);// 0x226a9c0
	bool HasRowKey(int Key);// 0x2220db0
	bool HasColKey(FString Key);// 0x226a120
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2231240
	SolarTablesData_LookAtCameras GetRowData(int Key);// 0x2269b60
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2269aa0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_LookAtCameras.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int MiniDistance;//[Offset: 0x14, Size: 1]
	float BorderRatio;//[Offset: 0x18, Size: 1]
	int FOV;//[Offset: 0x1c, Size: 1]
	int Pitch;//[Offset: 0x20, Size: 1]
	int InitAngleWithMainDir;//[Offset: 0x24, Size: 1]
	float BlendAlpha;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_Rescue.SolarTableReaderBase.Object
	SolarTablesData_Rescue TryGetRowData(int Key, out bool HasKey);// 0x2280a10
	bool HasRowKey(int Key);// 0x224ee10
	bool HasColKey(FString Key);// 0x2280090
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x224e6f0
	SolarTablesData_Rescue GetRowData(int Key);// 0x227fa20
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x227f5e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Rescue.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float RescueMaxDistance;//[Offset: 0x14, Size: 1]
	float FallenHp;//[Offset: 0x18, Size: 1]
	float RescueRecoveryHp;//[Offset: 0x1c, Size: 1]
	int RescueTime;//[Offset: 0x20, Size: 1]
	float[] FallenLossHp;//[Offset: 0x28, Size: 1]
	float[] FallenMoveLossHp;//[Offset: 0x38, Size: 1]
	float FallenMoveSpeed;//[Offset: 0x48, Size: 1]
	float RescueMoveSpeed;//[Offset: 0x4c, Size: 1]
	float InvincibleTime;//[Offset: 0x50, Size: 1]
	float MaxRescueAngle;//[Offset: 0x54, Size: 1]

--------------------------------
Class: SolarTables_Reader_Skin.SolarTableReaderBase.Object
	SolarTablesData_Skin TryGetRowData(int Key, out bool HasKey);// 0x228d470
	bool HasRowKey(int Key);// 0x225e370
	bool HasColKey(FString Key);// 0x228d010
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x225dab0
	SolarTablesData_Skin GetRowData(int Key);// 0x228cd70
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x228cc40
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Skin.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int CharaId;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 1]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	FString BeginTime;//[Offset: 0x20, Size: 1]
	int ShopPropertyid;//[Offset: 0x30, Size: 1]
	int ItemID;//[Offset: 0x34, Size: 1]
	FString MVPDataAssetPath;//[Offset: 0x38, Size: 1]
	FString MVPSequencePath;//[Offset: 0x48, Size: 1]
	int SceneId;//[Offset: 0x58, Size: 1]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString CharacterSkinResource;//[Offset: 0x60, Size: 1]
	FString CharacterLobbySkinResource;//[Offset: 0x70, Size: 1]
	FString LobbyChunkDir;//[Offset: 0x80, Size: 1]
	int ChunkID;//[Offset: 0x90, Size: 1]
	FString CharacterLowSkinResource;//[Offset: 0x98, Size: 1]
	int[] CharacterPrologue;//[Offset: 0xa8, Size: 1]
	FString CharacterProtrait;//[Offset: 0xb8, Size: 1]
	int SkinSort;//[Offset: 0xc8, Size: 1]
	int MVPSettlementStartFrame;//[Offset: 0xcc, Size: 1]
	int MVPSettlementEndFrame;//[Offset: 0xd0, Size: 1]
	int MVPAnchorPoint;//[Offset: 0xd4, Size: 1]
	FString IdleShowSequencePath;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: SolarTables_Reader_Achievement.SolarTableReaderBase.Object
	SolarTablesData_Achievement TryGetRowData(int Key, out bool HasKey);// 0x2218db0
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x2217b80
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217610
	SolarTablesData_Achievement GetRowData(int Key);// 0x22170d0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2216d40
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Achievement.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int Order;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText AchieveName;//[Offset: 0x18, Size: 1]
	int AchieveTab;//[Offset: 0x1c, Size: 1]
	int AchieveType;//[Offset: 0x20, Size: 1]
	int AchieveScore;//[Offset: 0x24, Size: 1]
	int[] AwardList;//[Offset: 0x28, Size: 1]
	FString AchieveIcon;//[Offset: 0x38, Size: 1]
	FString AchieveIconS;//[Offset: 0x48, Size: 1]
	int AchieveTask;//[Offset: 0x58, Size: 1]
	int[] AchieveTV;//[Offset: 0x60, Size: 1]
	int AchieveTT;//[Offset: 0x70, Size: 1]
	int ReportType;//[Offset: 0x74, Size: 1]
	SolarTablesLocalText AchieveTC;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SolarTables_Reader_TaskProgress.SolarTableReaderBase.Object
	SolarTablesData_TaskProgress TryGetRowData(int Key, out bool HasKey);// 0x2293fa0
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x2293780
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217490
	SolarTablesData_TaskProgress GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2292ed0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_TaskProgress.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int isRefresh;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTables_Reader_TaskSystem.SolarTableReaderBase.Object
	SolarTablesData_TaskSystem TryGetRowData(int Key, out bool HasKey);// 0x2294180
	bool HasRowKey(int Key);// 0x22477b0
	bool HasColKey(FString Key);// 0x2293870
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247000
	SolarTablesData_TaskSystem GetRowData(int Key);// 0x2293050
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2292f10
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_TaskSystem.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int taskDesc;//[Offset: 0x14, Size: 1]
	int Task;//[Offset: 0x18, Size: 1]
	int TaskType;//[Offset: 0x1c, Size: 1]
	FString cond1_sheet;//[Offset: 0x20, Size: 1]
	int cond1;//[Offset: 0x30, Size: 1]
	FString cond2_sheet;//[Offset: 0x38, Size: 1]
	int cond2;//[Offset: 0x48, Size: 1]
	FString cond3_sheet;//[Offset: 0x50, Size: 1]
	int cond3;//[Offset: 0x60, Size: 1]
	int Target;//[Offset: 0x64, Size: 1]
	int[] Item;//[Offset: 0x68, Size: 1]
	int MinLevel;//[Offset: 0x78, Size: 1]
	int[] link;//[Offset: 0x80, Size: 1]
	int Weight;//[Offset: 0x90, Size: 1]
	int sort;//[Offset: 0x94, Size: 1]
	bool Progress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool isCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	int circleTimes;//[Offset: 0x9c, Size: 1]
	int resetType;//[Offset: 0xa0, Size: 1]
	int[] taskTips;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: SolarTables_Reader_PlayerOperationListLayout.SolarTableReaderBase.Object
	SolarTablesData_PlayerOperationListLayout TryGetRowData(int Key, out bool HasKey);// 0x22790f0
	bool HasRowKey(int Key);// 0x225e470
	bool HasColKey(FString Key);// 0x22786f0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x225db70
	SolarTablesData_PlayerOperationListLayout GetRowData(int Key);// 0x2277eb0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2277a50
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_PlayerOperationListLayout.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString UIName;//[Offset: 0x18, Size: 1]
	int Normal;//[Offset: 0x28, Size: 1]
	int Driver;//[Offset: 0x2c, Size: 1]
	int Passgner;//[Offset: 0x30, Size: 1]
	int EquipVehicleWeapon;//[Offset: 0x34, Size: 1]
	int Cruising;//[Offset: 0x38, Size: 1]
	int Parachuting;//[Offset: 0x3c, Size: 1]
	int Swimming;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SolarTables_Reader_Variables.SolarTableReaderBase.Object
	SolarTablesData_Variables TryGetRowData(FString Key, out bool HasKey);// 0x22944e0
	bool HasRowKey(FString Key);// 0x2293e20
	bool HasColKey(FString Key);// 0x2293a50
	FString GetTableName();// 0x2217910
	int GetRowKeys(out FString[] OutKeys);// 0x22936a0
	SolarTablesData_Variables GetRowData(FString Key);// 0x2293230
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2292f90
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Variables.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 1]
	FString Value;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarTables_Reader_Vehicle.SolarTableReaderBase.Object
	SolarTablesData_Vehicle TryGetRowData(int Key, out bool HasKey);// 0x2294870
	bool HasRowKey(int Key);// 0x2220db0
	bool HasColKey(FString Key);// 0x2293b40
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2231240
	SolarTablesData_Vehicle GetRowData(int Key);// 0x22933e0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2292fd0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Vehicle.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	FString VehicleBP;//[Offset: 0x18, Size: 1]
	int groupid;//[Offset: 0x28, Size: 1]
	int VehicleTypeID;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: SolarTables_Reader_VehicleSkin.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkin TryGetRowData(int Key, out bool HasKey);// 0x2294ae0
	bool HasRowKey(int Key);// 0x2218310
	bool HasColKey(FString Key);// 0x2293c30
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217790
	SolarTablesData_VehicleSkin GetRowData(int Key);// 0x22934f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2293010
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_VehicleSkin.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int VehicleTypeID;//[Offset: 0x14, Size: 1]
	int ItemID;//[Offset: 0x18, Size: 1]
	SolarTablesLocalText SkinName;//[Offset: 0x1c, Size: 1]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString BeginTime;//[Offset: 0x28, Size: 1]
	int[] JumpLink;//[Offset: 0x38, Size: 1]
	FString VehicleSkinBPPath;//[Offset: 0x48, Size: 1]
	FString VehiclePreviewBP;//[Offset: 0x58, Size: 1]
	FString VehicleIcon;//[Offset: 0x68, Size: 1]
	FString VehicleSound;//[Offset: 0x78, Size: 1]
	int AIRandomWeight;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarTables_Reader_VehicleType.SolarTableReaderBase.Object
	SolarTablesData_VehicleType TryGetRowData(int Key, out bool HasKey);// 0x229b150
	bool HasRowKey(int Key);// 0x229a6f0
	bool HasColKey(FString Key);// 0x229a510
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x229a090
	SolarTablesData_VehicleType GetRowData(int Key);// 0x2299eb0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2299b30
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_VehicleType.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int DefaultId;//[Offset: 0x14, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 1]
	FString VehicleIcon;//[Offset: 0x20, Size: 1]
	FString AudioEventName;//[Offset: 0x30, Size: 1]
	int VehicleClass;//[Offset: 0x40, Size: 1]
	float LobbyDurability;//[Offset: 0x44, Size: 1]
	float LobbySpeed;//[Offset: 0x48, Size: 1]
	float LobbyFirepower;//[Offset: 0x4c, Size: 1]
	float LobbyControl;//[Offset: 0x50, Size: 1]
	int SeatNum;//[Offset: 0x54, Size: 1]
	int[] Seat1WeaponID;//[Offset: 0x58, Size: 1]
	int[] Seat2WeaponID;//[Offset: 0x68, Size: 1]
	int[] Seat3WeaponID;//[Offset: 0x78, Size: 1]
	int[] Seat4WeaponID;//[Offset: 0x88, Size: 1]
	int[] Seat1SkillID;//[Offset: 0x98, Size: 1]
	int[] Seat2SkillID;//[Offset: 0xa8, Size: 1]
	int[] Seat3SkillID;//[Offset: 0xb8, Size: 1]
	int[] Seat4SkillID;//[Offset: 0xc8, Size: 1]
	FString VehicleLink;//[Offset: 0xd8, Size: 1]
	FString SilhouetteIcon;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: SolarTables_Reader_VehicleSpawn.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawn TryGetRowData(int Key, out bool HasKey);// 0x229aa90
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x229a330
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_VehicleSpawn GetRowData(int Key);// 0x2246b30
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2299ab0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_VehicleSpawn.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] VehicleSet;//[Offset: 0x18, Size: 1]
	int[] WeightSet;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SolarTables_Reader_VehicleSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x229abe0
	bool HasRowKey(int Key);// 0x22292e0
	bool HasColKey(FString Key);// 0x229a420
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22289b0
	SolarTablesData_VehicleSpawnGroup GetRowData(int Key);// 0x2299dc0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2299af0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_VehicleSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int[] VehicleIDs;//[Offset: 0x18, Size: 1]
	int[] VehicleCounts;//[Offset: 0x28, Size: 1]
	int[] VehicleSum;//[Offset: 0x38, Size: 1]
	FString VehicleWeightSet;//[Offset: 0x48, Size: 1]
	int[] AlternateId;//[Offset: 0x58, Size: 1]
	FString AlternateType;//[Offset: 0x68, Size: 1]
	FString AlternateTime;//[Offset: 0x78, Size: 1]
	FString AlternateDate;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarTables_Reader_WarmGame.SolarTableReaderBase.Object
	SolarTablesData_WarmGame TryGetRowData(int Key, out bool HasKey);// 0x229b340
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x229a600
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220330
	SolarTablesData_WarmGame GetRowData(int Key);// 0x2299fa0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x2299b70
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WarmGame.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int WarmType;//[Offset: 0x14, Size: 1]
	int MatchType;//[Offset: 0x18, Size: 1]
	int EloStart;//[Offset: 0x1c, Size: 1]
	int EloEnd;//[Offset: 0x20, Size: 1]
	int NumStart;//[Offset: 0x24, Size: 1]
	int NumEnd;//[Offset: 0x28, Size: 1]
	int KillStart;//[Offset: 0x2c, Size: 1]
	int KillEnd;//[Offset: 0x30, Size: 1]
	FString WarmSubType;//[Offset: 0x38, Size: 1]
	int UniqueId;//[Offset: 0x48, Size: 1]
	FString Abid;//[Offset: 0x50, Size: 1]
	FString WarmGameFillCheckBox;//[Offset: 0x60, Size: 1]
	FString WarmGameFillTeammate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SolarTables_Reader_WarmGameMode.SolarTableReaderBase.Object
	SolarTablesData_WarmGameMode TryGetRowData(int Key, out bool HasKey);// 0x22a1d50
	bool HasRowKey(int Key);// 0x2218220
	bool HasColKey(FString Key);// 0x22a18a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22176d0
	SolarTablesData_WarmGameMode GetRowData(int Key);// 0x22a1510
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a1410
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTables_Reader_WeaponDamage.SolarTableReaderBase.Object
	SolarTablesData_WeaponDamage TryGetRowData(int Key, out bool HasKey);// 0x22a8790
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x22a8000
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228830
	SolarTablesData_WeaponDamage GetRowData(int Key);// 0x2277db0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a79a0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponDamage.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float NpcDamageFactor;//[Offset: 0x14, Size: 1]
	float BotDamageFactor;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SolarTables_Reader_Weapon.SolarTableReaderBase.Object
	SolarTablesData_Weapon TryGetRowData(int Key, out bool HasKey);// 0x22a1ff0
	bool HasRowKey(int Key);// 0x22a1c60
	bool HasColKey(FString Key);// 0x22a1990
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22a17e0
	SolarTablesData_Weapon GetRowData(int Key);// 0x22a1600
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a1450
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_Weapon.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 1]
	enum WeaponType;//[Offset: 0x18, Size: 1]
	int WeaponBrand;//[Offset: 0x1c, Size: 1]
	bool SupportSecondaryAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int[] AccessoryID;//[Offset: 0x28, Size: 1]
	FString WeaponIcon;//[Offset: 0x38, Size: 1]
	bool Single;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool Burst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool Automatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool OneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	float HitHead;//[Offset: 0x4c, Size: 1]
	int SecModeLimitTypeID;//[Offset: 0x50, Size: 1]
	int BurstMaxCount;//[Offset: 0x54, Size: 1]
	FString WeaponDamage;//[Offset: 0x58, Size: 1]
	float MaxSpread;//[Offset: 0x68, Size: 1]
	float MinSpread;//[Offset: 0x6c, Size: 1]
	float HipFireBaseSpread;//[Offset: 0x70, Size: 1]
	float VhADSBaseSpread;//[Offset: 0x74, Size: 1]
	float ADSBaseSpread;//[Offset: 0x78, Size: 1]
	float SpreadStatuSpeed;//[Offset: 0x7c, Size: 1]
	float SpreadStatuIncreaseID;//[Offset: 0x80, Size: 1]
	float SpreadStatuReduceID;//[Offset: 0x84, Size: 1]
	int SpreadCOPID;//[Offset: 0x88, Size: 1]
	int PrimaryAmmo;//[Offset: 0x8c, Size: 1]
	int PrimaryAmmoCap;//[Offset: 0x90, Size: 1]
	int SecondaryAmmo;//[Offset: 0x94, Size: 1]
	int SecondaryAmmoCap;//[Offset: 0x98, Size: 1]
	bool CanOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float OverloadMaxValue;//[Offset: 0xa0, Size: 1]
	float NormalOverloadCoolingRate;//[Offset: 0xa4, Size: 1]
	float OverloadCoolingPeriod;//[Offset: 0xa8, Size: 1]
	float OverloadWarningRate;//[Offset: 0xac, Size: 1]
	bool CanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float AutoFireDelayMs;//[Offset: 0xb4, Size: 1]
	float AutoFireEndDelayMs;//[Offset: 0xb8, Size: 1]
	bool CanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float[] HipSoftZone;//[Offset: 0xc0, Size: 1]
	float HipAimAssistStepRatio;//[Offset: 0xd0, Size: 1]
	float HipMinAssistStepRatio;//[Offset: 0xd4, Size: 1]
	float HipAimAssistStepSpeed;//[Offset: 0xd8, Size: 1]
	float[] AdsSoftZone;//[Offset: 0xe0, Size: 1]
	float AdsAimAssistStepRatio;//[Offset: 0xf0, Size: 1]
	float AdsMinAssistStepRatio;//[Offset: 0xf4, Size: 1]
	float AdsAimAssistStepSpeed;//[Offset: 0xf8, Size: 1]
	bool CanOpenScopeAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float OpenScopeAimAssistStepRatio;//[Offset: 0x100, Size: 1]
	float OpenScopeMinAssistStepRatio;//[Offset: 0x104, Size: 1]
	float OpenScopeAssistStepSpeed;//[Offset: 0x108, Size: 1]
	float OnVehicleAssistStepRatio;//[Offset: 0x10c, Size: 1]
	float Weight;//[Offset: 0x110, Size: 1]
	float HipFireSpeed;//[Offset: 0x114, Size: 1]
	float ADSFireSpeed;//[Offset: 0x118, Size: 1]
	int[] DefaultParts;//[Offset: 0x120, Size: 1]
	float ScopeOpenTime;//[Offset: 0x130, Size: 1]
	float FovFactor;//[Offset: 0x134, Size: 1]
	float WeaponSwitchTime;//[Offset: 0x138, Size: 1]
	int[] PartSlots;//[Offset: 0x140, Size: 1]
	<FString,FString> EquipAttributeSub;//[Offset: 0x150, Size: 1]
	<FString,FString> HoldAttributeSub;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponAmmo.SolarTableReaderBase.Object
	SolarTablesData_WeaponAmmo TryGetRowData(int Key, out bool HasKey);// 0x22a21c0
	bool HasRowKey(int Key);// 0x2247ab0
	bool HasColKey(FString Key);// 0x22a1a80
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2247240
	SolarTablesData_WeaponAmmo GetRowData(int Key);// 0x22a16f0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a1490
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponAmmo.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int AmmoType;//[Offset: 0x14, Size: 1]
	int PropID;//[Offset: 0x18, Size: 1]
	int SoundID;//[Offset: 0x1c, Size: 1]
	bool IfTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int BounceTimes;//[Offset: 0x24, Size: 1]
	float LifeTime;//[Offset: 0x28, Size: 1]
	float BaseReloadTime;//[Offset: 0x2c, Size: 1]
	float ReloadBoltTime;//[Offset: 0x30, Size: 1]
	enum FireMethodType;//[Offset: 0x34, Size: 1]
	enum TrajectoryType;//[Offset: 0x35, Size: 1]
	float CustomValue;//[Offset: 0x38, Size: 1]
	enum TriggerType;//[Offset: 0x3c, Size: 1]
	float MaxRange;//[Offset: 0x40, Size: 1]
	float EffRange;//[Offset: 0x44, Size: 1]
	float ProjectileMaxGravity;//[Offset: 0x48, Size: 1]
	float DamageMaxRange;//[Offset: 0x4c, Size: 1]
	float DamageEffRange;//[Offset: 0x50, Size: 1]
	float Radius;//[Offset: 0x54, Size: 1]
	float PostFireOverload;//[Offset: 0x58, Size: 1]
	float InitSpeed;//[Offset: 0x5c, Size: 1]
	float FireStreakBreakTime;//[Offset: 0x60, Size: 1]
	enum FireCostType;//[Offset: 0x64, Size: 1]
	int FireCostPerAttack;//[Offset: 0x68, Size: 1]
	int FireSpeedChangeTime;//[Offset: 0x6c, Size: 1]
	float FireSpeedChangeCOP;//[Offset: 0x70, Size: 1]
	float FireIntervalRevertPreTime;//[Offset: 0x74, Size: 1]
	float FireIntervalReavertSpeed;//[Offset: 0x78, Size: 1]
	float FastestFireInterval;//[Offset: 0x7c, Size: 1]
	float SlowestFireInterval;//[Offset: 0x80, Size: 1]
	float BaseFireInterval;//[Offset: 0x84, Size: 1]
	float BoltActionTime;//[Offset: 0x88, Size: 1]
	float BurstShootInterval;//[Offset: 0x8c, Size: 1]
	float BurstFireInterval;//[Offset: 0x90, Size: 1]
	float StartBoltDuration;//[Offset: 0x94, Size: 1]
	bool UsePrimaryModeAmmoCap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool UseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	float[] SkillCDDiscountArray;//[Offset: 0xa0, Size: 1]
	int SkillType;//[Offset: 0xb0, Size: 1]
	float VhADSSpreadCOP;//[Offset: 0xb4, Size: 1]
	float ADSSpreadCOP;//[Offset: 0xb8, Size: 1]
	float SpreadFirePreTime;//[Offset: 0xbc, Size: 1]
	float SpreadPostFireSpeed;//[Offset: 0xc0, Size: 1]
	float SpreadRestorePreTime;//[Offset: 0xc4, Size: 1]
	float SpreadRestoreSpeed;//[Offset: 0xc8, Size: 1]
	float VRecoilCostTime;//[Offset: 0xcc, Size: 1]
	int VRecoilAPoint;//[Offset: 0xd0, Size: 1]
	float VRecoilAPointMax;//[Offset: 0xd4, Size: 1]
	float VRecoilAPointMin;//[Offset: 0xd8, Size: 1]
	int VRecoilBPoint;//[Offset: 0xdc, Size: 1]
	float VRecoilBPointMax;//[Offset: 0xe0, Size: 1]
	float VRecoilBPointMin;//[Offset: 0xe4, Size: 1]
	float HRecoilCostTime;//[Offset: 0xe8, Size: 1]
	int HRecoilAPoint;//[Offset: 0xec, Size: 1]
	float HRecoilAPointMax;//[Offset: 0xf0, Size: 1]
	float HRecoilAPointMin;//[Offset: 0xf4, Size: 1]
	int HRecoilBPoint;//[Offset: 0xf8, Size: 1]
	float HRecoilBPointMax;//[Offset: 0xfc, Size: 1]
	float HRecoilBPointMin;//[Offset: 0x100, Size: 1]
	int RecoilCOP;//[Offset: 0x104, Size: 1]
	float ADSRecoilCOP;//[Offset: 0x108, Size: 1]
	float RollCostTime;//[Offset: 0x10c, Size: 1]
	int RollAPoint;//[Offset: 0x110, Size: 1]
	int RollBPoint;//[Offset: 0x114, Size: 1]
	float RollHightestPointMax;//[Offset: 0x118, Size: 1]
	float RollHightestPointMin;//[Offset: 0x11c, Size: 1]
	float RollLowesttPointMax;//[Offset: 0x120, Size: 1]
	float RollLowesttPointMin;//[Offset: 0x124, Size: 1]
	float ADSRollCOP;//[Offset: 0x128, Size: 1]
	float ScopeRollCostTime;//[Offset: 0x12c, Size: 1]
	int ScopeRollAPoint;//[Offset: 0x130, Size: 1]
	int ScopeRollBPoint;//[Offset: 0x134, Size: 1]
	float ScopeRollHightestPointMax;//[Offset: 0x138, Size: 1]
	float ScopeRollHightestPointMin;//[Offset: 0x13c, Size: 1]
	float ScopeRollLowesttPointMax;//[Offset: 0x140, Size: 1]
	float ScopeRollLowesttPointMin;//[Offset: 0x144, Size: 1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x148, Size: 1]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x14c, Size: 1]
	float ScopeVVibrationDuration;//[Offset: 0x150, Size: 1]
	float ScopeHVibrationDuration;//[Offset: 0x154, Size: 1]
	float CrossHairVibrationScale;//[Offset: 0x158, Size: 1]
	float ScopeVContinuousFallingDuration;//[Offset: 0x15c, Size: 1]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x160, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponBattleUpgrade.SolarTableReaderBase.Object
	SolarTablesData_WeaponBattleUpgrade TryGetRowData(int Key, out bool HasKey);// 0x22a23e0
	bool HasRowKey(int Key);// 0x22291f0
	bool HasColKey(FString Key);// 0x22a1b70
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2228830
	SolarTablesData_WeaponBattleUpgrade GetRowData(int Key);// 0x22386c0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a14d0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponBattleUpgrade.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int Exp;//[Offset: 0x14, Size: 1]
	int Retrofit;//[Offset: 0x18, Size: 1]
	int UpgradeCost;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponDefault.SolarTableReaderBase.Object
	SolarTablesData_WeaponDefault TryGetRowData(int Key, out bool HasKey);// 0x22a8990
	bool HasRowKey(int Key);// 0x2218310
	bool HasColKey(FString Key);// 0x22a80f0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217790
	SolarTablesData_WeaponDefault GetRowData(int Key);// 0x22a7b60
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a79e0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponDefault.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	enum AccessoryType1;//[Offset: 0x14, Size: 1]
	int[] SlotSubtype1;//[Offset: 0x18, Size: 1]
	int AccessoryID1;//[Offset: 0x28, Size: 1]
	enum AccessoryType2;//[Offset: 0x2c, Size: 1]
	int[] SlotSubtype2;//[Offset: 0x30, Size: 1]
	int AccessoryID2;//[Offset: 0x40, Size: 1]
	enum AccessoryType3;//[Offset: 0x44, Size: 1]
	int[] SlotSubtype3;//[Offset: 0x48, Size: 1]
	int AccessoryID3;//[Offset: 0x58, Size: 1]
	enum AccessoryType4;//[Offset: 0x5c, Size: 1]
	int[] SlotSubtype4;//[Offset: 0x60, Size: 1]
	int AccessoryID4;//[Offset: 0x70, Size: 1]
	enum AccessoryType5;//[Offset: 0x74, Size: 1]
	int[] SlotSubtype5;//[Offset: 0x78, Size: 1]
	int AccessoryID5;//[Offset: 0x88, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponKillTip.SolarTableReaderBase.Object
	SolarTablesData_WeaponKillTip TryGetRowData(int Key, out bool HasKey);// 0x22a8af0
	bool HasRowKey(int Key);// 0x2218030
	bool HasColKey(FString Key);// 0x22a81e0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217550
	SolarTablesData_WeaponKillTip GetRowData(int Key);// 0x22a7c50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a7a20
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponKillTip.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int KillTipType;//[Offset: 0x14, Size: 1]
	int KillTipValue;//[Offset: 0x18, Size: 1]
	FString KillTipIcon;//[Offset: 0x20, Size: 1]
	SolarTablesLocalText KillTipname;//[Offset: 0x30, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponParts.SolarTableReaderBase.Object
	SolarTablesData_WeaponParts TryGetRowData(int Key, out bool HasKey);// 0x22a8c30
	bool HasRowKey(int Key);// 0x22a8690
	bool HasColKey(FString Key);// 0x22a82d0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22a7f40
	SolarTablesData_WeaponParts GetRowData(int Key);// 0x22a7d60
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a7a60
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int WeaponLevel;//[Offset: 0x14, Size: 1]
	enum PartsType;//[Offset: 0x18, Size: 1]
	<FString,FString> AttributeSub;//[Offset: 0x20, Size: 1]
	int PartsQuality;//[Offset: 0x70, Size: 1]
	FString PartsBPResource;//[Offset: 0x78, Size: 1]
	FString PartsIcon;//[Offset: 0x88, Size: 1]
	int EffectCondition;//[Offset: 0x98, Size: 1]
	int[] PartsEffect;//[Offset: 0xa0, Size: 1]
	float[] PartsValue;//[Offset: 0xb0, Size: 1]
	int[] PartsWeaponID;//[Offset: 0xc0, Size: 1]
	int PartsName;//[Offset: 0xd0, Size: 1]
	FString[] PartsDesc;//[Offset: 0xd8, Size: 1]
	int WeaponPartDamage;//[Offset: 0xe8, Size: 1]
	int WeaponPartRateOfFire;//[Offset: 0xec, Size: 1]
	int WeaponPartRecoil;//[Offset: 0xf0, Size: 1]
	int WeaponPartSpread;//[Offset: 0xf4, Size: 1]
	int WeaponPartRange;//[Offset: 0xf8, Size: 1]
	int WeaponPartMobility;//[Offset: 0xfc, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponPartsOp.SolarTableReaderBase.Object
	SolarTablesData_WeaponPartsOp TryGetRowData(int Key, out bool HasKey);// 0x22a8e20
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x22a83c0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217490
	SolarTablesData_WeaponPartsOp GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a7aa0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponPartsOp.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int EffectOperator;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponQuality.SolarTableReaderBase.Object
	SolarTablesData_WeaponQuality TryGetRowData(int Key, out bool HasKey);// 0x22a9000
	bool HasRowKey(int Key);// 0x2217f40
	bool HasColKey(FString Key);// 0x22a84b0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217490
	SolarTablesData_WeaponQuality GetRowData(int Key);// 0x2216ed0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a7ae0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponQuality.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int Quality;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SolarTables_Reader_SecondMode.SolarTableReaderBase.Object
	SolarTablesData_SecondMode TryGetRowData(int Key, out bool HasKey);// 0x2280d50
	bool HasRowKey(int Key);// 0x2220bd0
	bool HasColKey(FString Key);// 0x2280180
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2220270
	SolarTablesData_SecondMode GetRowData(int Key);// 0x227fb10
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x227f620
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_SecondMode.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int UpperLimit;//[Offset: 0x14, Size: 1]
	float RestoreProgressPerSec;//[Offset: 0x18, Size: 1]
	float RestoreProgressPerKill;//[Offset: 0x1c, Size: 1]
	float RestoreProgressPerDmg;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponSkin.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkin TryGetRowData(int Key, out bool HasKey);// 0x22a91e0
	bool HasRowKey(int Key);// 0x2218120
	bool HasColKey(FString Key);// 0x22a85a0
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x2217610
	SolarTablesData_WeaponSkin GetRowData(int Key);// 0x22a7e50
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22a7b20
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponSkin.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	int WeaponSkinType;//[Offset: 0x14, Size: 1]
	FString WeaponSkillQuality;//[Offset: 0x18, Size: 1]
	int SortId;//[Offset: 0x28, Size: 1]
	int weaponid;//[Offset: 0x2c, Size: 1]
	FString WeaponSkinResource;//[Offset: 0x30, Size: 1]
	int WeaponSkinAquiredThru;//[Offset: 0x40, Size: 1]
	int JumpPage;//[Offset: 0x44, Size: 1]
	FString KillBroadcast;//[Offset: 0x48, Size: 1]
	int ShopPropertyid;//[Offset: 0x58, Size: 1]
	int ItemID;//[Offset: 0x5c, Size: 1]
	bool DisplayInWeaponry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	FString LobbyChunkDir;//[Offset: 0x68, Size: 1]
	int ChunkID;//[Offset: 0x78, Size: 1]
	int AIRandomWeight;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponSound.SolarTableReaderBase.Object
	SolarTablesData_WeaponSound TryGetRowData(int Key, out bool HasKey);// 0x22aff50
	bool HasRowKey(int Key);// 0x22af860
	bool HasColKey(FString Key);// 0x22af680
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22af400
	SolarTablesData_WeaponSound GetRowData(int Key);// 0x22af310
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22aefd0
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponSound.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	FString Play_Fire_Auto_1P;//[Offset: 0x18, Size: 1]
	FString Play_Fire_Auto_3P;//[Offset: 0x28, Size: 1]
	FString Play_Fire_Auto_3P_Enemy;//[Offset: 0x38, Size: 1]
	FString Stop_Fire_Auto_1P;//[Offset: 0x48, Size: 1]
	FString Stop_Fire_Auto_3P;//[Offset: 0x58, Size: 1]
	FString Stop_Fire_Auto_3P_Enemy;//[Offset: 0x68, Size: 1]
	FString Play_Fire_Sigle_1P;//[Offset: 0x78, Size: 1]
	FString Play_Fire_Sigle_3P;//[Offset: 0x88, Size: 1]
	FString Play_Fire_Sigle_3P_Enemy;//[Offset: 0x98, Size: 1]
	FString Play_Fire_Burst_1P;//[Offset: 0xa8, Size: 1]
	FString Play_Fire_Burst_3P;//[Offset: 0xb8, Size: 1]
	FString Play_Fire_Burst_3P_Enemy;//[Offset: 0xc8, Size: 1]
	FString Stop_Fire_Burst_1P;//[Offset: 0xd8, Size: 1]
	FString Stop_Fire_Burst_3P;//[Offset: 0xe8, Size: 1]
	FString Stop_Fire_Burst_3P_Enemy;//[Offset: 0xf8, Size: 1]
	FString Play_FIRE_LAST_1P;//[Offset: 0x108, Size: 1]
	FString Play_FIRE_LAST_3P;//[Offset: 0x118, Size: 1]
	FString Play_FIRE_LAST_3P_Enemy;//[Offset: 0x128, Size: 1]
	FString Remain_Gun_RTPC_NAME;//[Offset: 0x138, Size: 1]
	FString Play_Skill_Cast_1P;//[Offset: 0x148, Size: 1]
	FString Play_Skill_Cast_3P;//[Offset: 0x158, Size: 1]
	FString Play_Skill_Cast_3P_Enemy;//[Offset: 0x168, Size: 1]
	FString Play_Fire_Lay_Tl_1P;//[Offset: 0x178, Size: 1]
	FString Play_Fire_Lay_Tl_3P;//[Offset: 0x188, Size: 1]
	FString Play_Fire_Lay_Tl_3P_Enemy;//[Offset: 0x198, Size: 1]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x1a8, Size: 1]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x1b8, Size: 1]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x1c8, Size: 1]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1d8, Size: 1]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e8, Size: 1]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1f8, Size: 1]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x208, Size: 1]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x218, Size: 1]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x228, Size: 1]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x238, Size: 1]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x248, Size: 1]
	FString Play_Fire_Overload_1P;//[Offset: 0x258, Size: 1]
	FString Play_Fire_Overload_3P;//[Offset: 0x268, Size: 1]
	FString Play_Fire_Overload_3P_Enemy;//[Offset: 0x278, Size: 1]
	FString Play_Reload_01_1P;//[Offset: 0x288, Size: 1]
	FString Play_Reload_01_3P;//[Offset: 0x298, Size: 1]
	FString Play_Reload_01_3P_Enemy;//[Offset: 0x2a8, Size: 1]
	FString Play_Reload_02_1P;//[Offset: 0x2b8, Size: 1]
	FString Play_Reload_02_3P;//[Offset: 0x2c8, Size: 1]
	FString Play_Reload_02_3P_Enemy;//[Offset: 0x2d8, Size: 1]
	FString Play_Reload_03_1P;//[Offset: 0x2e8, Size: 1]
	FString Play_Reload_03_3P;//[Offset: 0x2f8, Size: 1]
	FString Play_Reload_03_3P_Enemy;//[Offset: 0x308, Size: 1]
	FString Play_Bolt_1P;//[Offset: 0x318, Size: 1]
	FString Play_Bolt_3P;//[Offset: 0x328, Size: 1]
	FString Play_Bolt_3P_Enemy;//[Offset: 0x338, Size: 1]
	FString Play_Vehicle_Gun_On_3P;//[Offset: 0x348, Size: 1]
	FString Play_Vehicle_Gun_On_3P_Enemy;//[Offset: 0x358, Size: 1]
	FString Play_Vehicle_Gun_Loop_3P;//[Offset: 0x368, Size: 1]
	FString Play_Vehicle_Gun_Loop_3P_Enemy;//[Offset: 0x378, Size: 1]
	FString Play_Vehicle_Gun_Off_3P;//[Offset: 0x388, Size: 1]
	FString Play_Vehicle_Gun_Off_3P_Enemy;//[Offset: 0x398, Size: 1]
	FString Play_Fire_Auto_1P_Mute;//[Offset: 0x3a8, Size: 1]
	FString Play_Fire_Auto_3P_Mute;//[Offset: 0x3b8, Size: 1]
	FString Play_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3c8, Size: 1]
	FString Stop_Fire_Auto_1P_Mute;//[Offset: 0x3d8, Size: 1]
	FString Stop_Fire_Auto_3P_Mute;//[Offset: 0x3e8, Size: 1]
	FString Stop_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3f8, Size: 1]
	FString Play_Fire_Sigle_1P_Mute;//[Offset: 0x408, Size: 1]
	FString Play_Fire_Sigle_3P_Mute;//[Offset: 0x418, Size: 1]
	FString Play_Fire_Sigle_3P_Enemy_Mute;//[Offset: 0x428, Size: 1]
	FString Play_Fire_Burst_1P_Mute;//[Offset: 0x438, Size: 1]
	FString Play_Fire_Burst_3P_Mute;//[Offset: 0x448, Size: 1]
	FString Play_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x458, Size: 1]
	FString Stop_Fire_Burst_1P_Mute;//[Offset: 0x468, Size: 1]
	FString Stop_Fire_Burst_3P_Mute;//[Offset: 0x478, Size: 1]
	FString Stop_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x488, Size: 1]
	FString Play_Fire_Lay_Tl_1P_Mute;//[Offset: 0x498, Size: 1]
	FString Play_Fire_Lay_Tl_3P_Mute;//[Offset: 0x4a8, Size: 1]
	FString Play_Fire_Lay_Tl_3P_Enemy_Mute;//[Offset: 0x4b8, Size: 1]
	FString Play_Fire_Empty_1p;//[Offset: 0x4c8, Size: 1]
	FString Play_Fire_Empty_3p;//[Offset: 0x4d8, Size: 1]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x4e8, Size: 1]

--------------------------------
Class: SolarTables_Reader_WeaponStatu.SolarTableReaderBase.Object
	SolarTablesData_WeaponStatu TryGetRowData(int Key, out bool HasKey);// 0x22b0140
	bool HasRowKey(int Key);// 0x2220db0
	bool HasColKey(FString Key);// 0x22af770
	FString GetTableName();// 0x2217910
	int GetRowKeys(out int[] OutKeys);// 0x22204b0
	SolarTablesData_WeaponStatu GetRowData(int Key);// 0x2230fb0
	int GetRowCount();// 0x2216ea0
	int GetDataNum();// 0x2216e40
	FString[] GetColKeys();// 0x22af010
	int GetColCount();// 0x2216c90

--------------------------------
Class: SolarTablesData_WeaponStatu.SolarTablesDataBase
	int ID;//[Offset: 0x10, Size: 1]
	float Stand;//[Offset: 0x14, Size: 1]
	float CrouchDown;//[Offset: 0x18, Size: 1]
	float Still;//[Offset: 0x1c, Size: 1]
	float Run;//[Offset: 0x20, Size: 1]
	float Spint;//[Offset: 0x24, Size: 1]
	float Jump;//[Offset: 0x28, Size: 1]
	float Fly;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: WeaponPartsData
	int ScopeId;//[Offset: 0x0, Size: 1]
	int GripID;//[Offset: 0x4, Size: 1]
	int GunStockID;//[Offset: 0x8, Size: 1]
	int MuzzleID;//[Offset: 0xc, Size: 1]
	int ClipID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BPC_GM_BattleRoyal_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	<byte,bool> ModeEventValid;//[Offset: 0xb8, Size: 1]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0x108, Size: 1]
	byte CommandType;//[Offset: 0x110, Size: 1]
	FString[] CommandParams;//[Offset: 0x118, Size: 1]
	void                                                                                                     (Vector NewLocalVar, AirlineData AirlineData, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, SolarCharacter* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc_ResurrectCharacter_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, BP_Mode_BattleRoyale_C* CallFunc_GetBattleRoyaleMode_AsBP_SCM_Battle_Royale, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData K2Node_MakeStruct_AirlineData, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	BP_Logic_BattleRoyale_C* GetMainLogic(bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x2649560
	void SetModeEventValid(byte EventType, bool IsValid);// 0x2649560
	void [S]SetModeEvent(byte EventType, bool IsValid);// 0x2649560
	void [c]ExecuteGMCommand(byte Type, out const FString[] Params);// 0x2649560
	void ExecuteUbergraph_BPC_GM_BattleRoyal(int EntryPoint, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte K2Node_CustomEvent_EventType, bool K2Node_CustomEvent_IsValid, enum CallFunc__S_GetBuildPackageType_____, byte Temp_byte_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_ToBool_bool, byte Temp_byte_Variable, bool K2Node_Select_Default, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, bool CallFunc_MakeLiteralBool_ReturnValue, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte Temp_byte_Variable, int CallFunc_Conv_StringToInt_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte K2Node_CustomEvent_Type, const FString[] K2Node_CustomEvent_Params, byte Temp_byte_Variable, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte K2Node_Select_Default);// 0x2649560

--------------------------------
Class: BP_Mode_BattleRoyale_C.BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	BPC_AiManagerBattleRoyale_C* BPC_AiManagerBattleRoyale;//[Offset: 0x748, Size: 1]
	NgaiGameModeComponent* NgaiGameMode;//[Offset: 0x750, Size: 1]
	BattleRoyaleGameModeAIComp_Custom_C* BattleRoyaleGameModeAIComp_Custom;//[Offset: 0x758, Size: 1]
	BPC_AirlineCruise_C* BPC_AirlineCruise;//[Offset: 0x760, Size: 1]
	BP_MapInfoComponent_C* BP_MapInfoComponent;//[Offset: 0x768, Size: 1]
	AirlineCruiseComponent* GetAirlineCruiseComponent();// 0x2649560

--------------------------------
Class: BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x740, Size: 1]

--------------------------------
Class: SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	float TimeOutSeconds;//[Offset: 0x590, Size: 1]
	CGMLogicComponent* LogicComponent;//[Offset: 0x648, Size: 1]
	CGMDeathComponent* DeathComponent;//[Offset: 0x650, Size: 1]
	SCMPlayerController*[] WaitingPlayers;//[Offset: 0x668, Size: 1]
	MulticastInlineDelegateProperty OnPlayerJoin;//[Size: 1]
	MulticastInlineDelegateProperty OnAIJoin;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerOutEvent;//[Size: 1]
	class GameManagerBase[] GameManagerClasses;//[Offset: 0x6b8, Size: 1]
	class CGMLogicComponent* LogicComponentClass;//[Offset: 0x6c8, Size: 1]
	class CGMDeathComponent* DeathComponentClass;//[Offset: 0x6d0, Size: 1]
	class SCMPlayerRPCComponent* PlayerRPCComponentClass;//[Offset: 0x6d8, Size: 1]
	void TimerStartGame();// 0x209bc70
	void StartBattle();// 0x209bc50
	bool RequestAllowReconnectGame(SCMPlayerState* InPC);// 0x209a8f0
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x2649560
	void ReceiveServerLevelLoaded(FString LevelName);// 0x2649560
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x209a760
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x209a640
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x2649560
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x2649560
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x2649560
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x2649560
	void ReceivePlayerJoinData(FString PlayerId);// 0x2649560
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x2649560
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x2649560
	void ReceivePlayerCheat(SolarPlayerState* InCheater);// 0x2649560
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x2649560
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x2649560
	void ReceivePlayerAbnormal(SolarPlayerState* InAbnormalPlayer);// 0x2649560
	void ReceiveOBPlayersChanged();// 0x2649560
	void ReceiveGameModeInit();// 0x2649560
	void ReceiveBattleTick(float InBattleTime, float DeltaTime);// 0x2649560
	void ReceiveBattleEnd();// 0x2649560
	void ReceiveBattleBegin();// 0x2649560
	void OnTeamInTournamentSettled(FString Side, byte TeamID);// 0x209a4f0
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x2649560
	void OnReceivePlayerBattleStart(PlayerController* PlayerController);// 0x2649560
	void OnReceiveBattleStart();// 0x2649560
	void OnPlayerSettled(SCMPlayerState* Player);// 0x2649560
	void OnPlayerOut__DelegateSignature(SCMPlayerState* Player, enum OutType);// 0x2649560
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x2649560
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* Player);// 0x2649560
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x2649560
	void OnMatchEnd(const int RPCID);// 0x2649560
	void OnDSClose();// 0x2649560
	void OnBotAIDataReady(int AICount);// 0x209a3b0
	void OnAIJoin__DelegateSignature(SCMPlayerState* BotAI);// 0x2649560
	void NotifyDSBattleOver();// 0x209a2f0
	void NotifyBotAIDataReady(int AICount);// 0x2649560
	bool IsEnableLogicComp();// 0x209a1d0
	int GetCurMapID();// 0x2099fc0
	void CreateHomeActor(FString Path);// 0x2649560
	bool CheckLogicComponentIsA(class CGMLogicComponent ClassPath);// 0x2099eb0
	bool ChangePlayerCharacter(SCMPlayerState* Player, int CharacterId, int SkinId);// 0x2099da0
	bool ChangeBotAICharacter(SolarPlayerState* Player, int CharacterId, int SkinId);// 0x2099c90

--------------------------------
Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	MulticastInlineDelegateProperty OnPlayerDisconnectedGame;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerReconnectedGame;//[Size: 1]
	int SettlementStageConfigID;//[Offset: 0x580, Size: 1]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x20967a0
	void ReceiveBattleSettlement();// 0x2649560
	void ReceiveBattleOver();// 0x2649560
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x2096150
	bool IsAutoSettlementWhenKilled();// 0x2095e70
	bool IsAllowReconnectGame(SolarPlayerState* Player);// 0x2095dd0

--------------------------------
Class: AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	int UsedAirlineID;//[Offset: 0xd0, Size: 1]
	class SolarCapsuleRoot* CapsuleRootClass;//[Offset: 0xd8, Size: 1]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0xe0, Size: 1]
	<int,AirlineData> AirlineDataList;//[Offset: 0xe8, Size: 1]
	SolarCharacter* CruiseTemplate;//[Offset: 0x138, Size: 1]
	void OnPlayerJoin(SCMPlayerState* PlayerState);// 0x1ffe880
	void OnCruiseCompleted(Actor* DestroyedRoot);// 0x1ffeab0
	void OnAIJoin(SCMPlayerState* PlayerState);// 0x1ffe880
	int GetUsedAirlineData(out AirlineData outData);// 0x1ffd140

--------------------------------
Class: NgaiGameModeComponent.GameModeCompBase.ActorComponent.Object

--------------------------------
Class: BattleRoyaleGameModeAIComp_Custom_C.SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x180, Size: 1]
	int AllBOT_Num;//[Offset: 0x188, Size: 1]
	BP_SolarCharacterPlayer_C*[] AllBOT_Falling;//[Offset: 0x190, Size: 1]
	BP_SolarCharacterPlayer_C* Player;//[Offset: 0x1a0, Size: 1]
	bool IsCustomMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	SCMPlayerState*[] AllRealPlayers;//[Offset: 0x1b0, Size: 1]
	void Get All Bot Character and Set Bt Tree(BehaviorTree* BTAsset, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* K2Node_DynamicCast_AsAIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeHandleMatchHasStarted_bOutSuccess);// 0x2649560
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeStartPlay_bOutSuccess);// 0x2649560
	void Event_AIBeginPlay();// 0x2649560
	void MainTick();// 0x2649560
	void ExecuteUbergraph_BattleRoyaleGameModeAIComp_Custom(int EntryPoint, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2649560

--------------------------------
Class: SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	bool bBotSkipAICruise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	float MaxLootDistanceToAirline;//[Offset: 0x164, Size: 1]
	bool bCanSelectLootZoneOutPoisonCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]

--------------------------------
Class: BPC_AirlineCruise_C.AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x148, Size: 1]
	int AirlineID;//[Offset: 0x150, Size: 1]
	<SolarPlayerState*,Vector> EjectLocation;//[Offset: 0x158, Size: 1]
	<SolarPlayerState*,Vector> LandLocation;//[Offset: 0x1a8, Size: 1]
	SolarPlayerState*[] ForceJumpPlayerList;//[Offset: 0x1f8, Size: 1]
	SolarCharacter*[] CruisePlayers;//[Offset: 0x208, Size: 1]
	AirlineData AirlineData;//[Offset: 0x218, Size: 1]
	float Height;//[Offset: 0x240, Size: 1]
	float Speed;//[Offset: 0x244, Size: 1]
	bool ClearAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool GetPlayerForceJumped(out const SolarPlayerState* TargetPlayer, bool CallFunc_Array_Contains_ReturnValue);// 0x2649560
	void GetPlayerLandLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2649560
	void GetPlayerEjectLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2649560
	void GetAirlineData_RealWorld(out const AirlineData AirlineData, out Vector2D LineStart, out Vector2D LineEnd, out Vector2D JumpStart, out Vector2D JumpEnd, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x2649560
	void MiniMap2RealWorld(Vector2D JumpStart, Vector2D JumpEnd, Vector2D LineStart, Vector2D LineEnd, out Vector2D JumpStartR, out Vector2D JumpEndR, out Vector2D LineStartR, out Vector2D LineEndR, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x2649560
	void StartParachutingWithRandomAirline(out SolarCharacter*[] TargetCharacters, out int Air Line ID, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x2649560
	void StartParachuting(out const SolarCharacter*[] TargetCharacters, bool ClearAllItems, int AirlineID, out const AirlineData AirlineData);// 0x2649560
	void OnPlayerEjectingStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x2649560
	void ExecuteUbergraph_BPC_AirlineCruise(int EntryPoint, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const SolarCharacter*[] K2Node_CustomEvent_TargetCharacters, bool K2Node_CustomEvent_ClearAllItems, int K2Node_CustomEvent_AirlineID, const AirlineData K2Node_CustomEvent_AirlineData, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, int Temp_int_Loop_Counter_Variable, BoarderInfo CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte Temp_byte_Variable, SolarCharacter* CallFunc_Array_Get_Item, <SolarPlayerState*,Vector> K2Node_Select_Default, const Transform CallFunc_GetTransform_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x2649560

--------------------------------
Class: UI_WorldMark_Common_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 1]
	TextBlock* Distance;//[Offset: 0x3a8, Size: 1]
	VerticalBox* Panel;//[Offset: 0x3b0, Size: 1]
	ScaleBox* ScaleBox;//[Offset: 0x3b8, Size: 1]
	int HideDistance;//[Offset: 0x3c0, Size: 1]
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x2649560
	FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2649560
	void SetIcon(Widget* Content, int                                                                                                     , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void ExecuteUbergraph_UI_WorldMark_Common(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x2649560

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x3526fb0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 1]
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3528a30
	void SetSize(SlateChildSize InSize);// 0x35287b0
	void SetPadding(Margin InPadding);// 0x35282b0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3527cf0

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 1]
	byte SizeRule;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BP_DirectionArrow_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 1]
	StaticMeshComponent* FX_G_Mesh_Arrow_Guide_001;//[Offset: 0x230, Size: 1]
	SceneComponent* Scene;//[Offset: 0x238, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 1]
	void Init(Actor* AttachTarget, float Scale, Vector Position);// 0x2649560
	void SetVisiblity(bool NewVisiblity);// 0x2649560
	void UpdateDirection(Rotator Rotation);// 0x2649560
	void ExecuteUbergraph_BP_DirectionArrow(int EntryPoint, Actor* K2Node_CustomEvent_AttachTarget, float K2Node_CustomEvent_Scale, Vector K2Node_CustomEvent_Position, Vector CallFunc_MakeVector_ReturnValue, bool K2Node_CustomEvent_NewVisiblity, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Rotator K2Node_CustomEvent_Rotation, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2649560

--------------------------------
Class: BP_SolarItemSpawner_C.SolarItemSpawner.SolarMapElementBase.Actor.Object
	StaticMeshComponent* Cube;//[Offset: 0x390, Size: 1]
	BillboardComponent* Billboard;//[Offset: 0x398, Size: 1]
	SceneComponent* SceneRoot;//[Offset: 0x3a0, Size: 1]
	void UserConstructionScript(enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, Vector CallFunc_Divide_VectorFloat_ReturnValue, MaterialInterface* K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: SolarGroundPreviewActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 1]
	float SpawnOffset;//[Offset: 0x320, Size: 1]
	SphereComponent* SphereComponent;//[Offset: 0x328, Size: 1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x330, Size: 1]
	SoftObjectPath OutlineMatPath;//[Offset: 0x340, Size: 1]
	byte[] MarkedTeamIdList;//[Offset: 0x360, Size: 1]
	int WeaponLevel;//[Offset: 0x370, Size: 1]
	enum WeaponType;//[Offset: 0x374, Size: 1]
	int FireModeNameLocalizationID;//[Offset: 0x378, Size: 1]
	SlateBrush TriggerIcon;//[Offset: 0x380, Size: 1]
	int weaponid;//[Offset: 0x418, Size: 1]
	bool bIsItemWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool bIsSummonVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	bool bIsAntiVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x420, Size: 1]
	void UnMarkThisItem(byte TeamID);// 0x216a800
	void SetItemData(out const SolarItemData _ItemData);// 0x216a2e0
	void OnServerPawned();// 0x216a2b0
	void OnRep_ItemDataChange();// 0x816980
	void NotifyThisItemWasPickedUp();// 0x2169bb0
	void MarkThisItem(byte TeamID);// 0x2169b20
	int GetQuality();// 0x21696c0

--------------------------------
Class: BP_SolarVehicleSpawner_C.SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	BoxComponent* Box;//[Offset: 0x430, Size: 1]
	StaticMeshComponent* Cube1;//[Offset: 0x438, Size: 1]
	StaticMeshComponent* Cube;//[Offset: 0x440, Size: 1]
	SceneComponent* SceneRoot;//[Offset: 0x448, Size: 1]

--------------------------------
Class: BP_Formula_BattleRoyale_C.BP_FormulaBase_C.CGFormula.Info.Actor.Object
	int WarmGameExp;//[Offset: 0x25c, Size: 1]
	<SolarPlayerState*,bool> WeaponExp;//[Offset: 0x260, Size: 1]
	<int> WarmGameIdSet;//[Offset: 0x2b0, Size: 1]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x300, Size: 1]
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS, int MatchRuleID, int MaxRealPersonIndex, int MaxRealPerson, int ItemID, int[] ItemDrop, SolarPlayerState* PS, int RealPersonCount, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SolarGameState* K2Node_DynamicCast_AsSolar_Game_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SettlementReward K2Node_MakeStruct_SettlementReward, int CallFunc_Array_Get_Item, SettlementReward[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_LessEqual_IntInt_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	bool IsSettlementBagItem(SolarPlayerState* InPS, byte CallFunc_GetBattleState_State, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x2649560
	void GetDefenderManager(out BP_DefenderManager_C* Output_Get, bool CallFunc_IsValid_ReturnValue, DefenderManager* CallFunc_GetDefenderManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_GetStrategyGuideConditions_OutResult, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	int CalculateTeamRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	int CalculatePlayerRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x2649560
	float BattleStateDealFloat(float Input, byte Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetBattleState_State, float K2Node_Select_Default);// 0x2649560
	int BattleStateDealInt(int Input, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_GetBattleState_State, int K2Node_Select_Default);// 0x2649560
	void GetBattleState(out byte State, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x2649560
	float GetKDA(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float Temp_float_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x2649560
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS, SettlementParam_ExtraRewardInfo[] CommonRewards, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, bool Temp_bool_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, byte CallFunc_GetBattleState_State, FString CallFunc_FormatRewardItem_ItemString, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString[] K2Node_MakeArray_Array, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo[] Temp_struct_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo[] K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_FormatRewardItem_ItemString, FString K2Node_Select_Default, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x2649560
	void GetPlayerData(SolarPlayerState* Player, out int KillCount, out int KillDown, out int Assist, out int SaveCount, out float LifeTime, out float CauseDamage, out int Rank, out int TeamRank, out int DeathCount, out bool TeamAced, out bool IsMVP, out bool IsCustomRoomActive, out byte DefenderType, FString SideID, FString PlayerId, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue);// 0x2649560
	float CalculateMVPScore(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x2649560
	int GetZomborg(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool Temp_bool_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default);// 0x2649560
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID, int Exp, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_GetMapDataFloat_OutValue, bool CallFunc_GetMapDataFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const bool Temp_bool_Variable, int CallFunc_Round_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2649560
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason, int[] ExpReason, int Exp, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	int GetAccountExp(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int CallFunc_GetFixedLevelExp_ReturnValue, int K2Node_Select_Default);// 0x2649560
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult, SolarPlayerState* PlayerState, int[] SettlePages, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, const int Temp_int_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, SolarLuaHelper* CallFunc_GetSolarLuaHelper_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsBattlePassInfoUpdated_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: BP_FormulaBase_C.CGFormula.Info.Actor.Object
	float ExpGain-LifeTimeLimit;//[Offset: 0x258, Size: 1]
	int GetFixedLevelExp(int Origin, SolarPlayerState* Player, int finalExp, bool Temp_bool_Variable, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_AccountFixedExp CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default);// 0x2649560
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerStatisticsData* CallFunc_GetPlayerStatData_ReturnValue, int[] CallFunc_GetValue_IntArray_OutResult, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560

--------------------------------
Class: BP_SolarBombingManager_C.SolarBombingZoneManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 1]
	FString GetModuleName();// 0x2649560

--------------------------------
Class: SolarBombingZoneManager.Actor.Object
	class SolarBombActor* BPClass;//[Offset: 0x228, Size: 1]
	BombingZone[] ZoneArray;//[Offset: 0x230, Size: 1]
	int WeightInCar;//[Offset: 0x244, Size: 1]
	int WeightInPoision;//[Offset: 0x248, Size: 1]
	int WeightInRoom;//[Offset: 0x24c, Size: 1]
	Vector2D LocationLimit;//[Offset: 0x250, Size: 1]
	float NotifyTime;//[Offset: 0x258, Size: 1]
	void OnCreateBombingZone(int ID, bool bSpecificLocation, Vector TargetLocation);// 0x2649560
	BombingZoneBomb GetBombData(int ZoneId);// 0x2649560
	bool CreateBombingZone(out BombingZone Zone, bool bSpecificLocation, Vector TargetLocation);// 0x20dd2d0

--------------------------------
Class: SolarBombActor.Actor.Object
	bool bFireWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	BombingZoneBomb BombConfig;//[Offset: 0x22c, Size: 1]
	bool bAutoDestroyAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float TargetLandingTime;//[Offset: 0x254, Size: 1]
	ParticleSystem* WaterBombEffect;//[Offset: 0x258, Size: 1]
	ParticleSystem* BombEffect;//[Offset: 0x260, Size: 1]
	MaterialInstanceDynamic* GuideLine;//[Offset: 0x268, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x270, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x278, Size: 1]
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x20de300

--------------------------------
Class: BombingZoneBomb
	float Radius;//[Offset: 0x0, Size: 1]
	float MaxDamage;//[Offset: 0x4, Size: 1]
	float MinDamage;//[Offset: 0x8, Size: 1]
	float VehicleMaxDamage;//[Offset: 0xc, Size: 1]
	float VehicleMinDamage;//[Offset: 0x10, Size: 1]
	float InVehicleDamageScale;//[Offset: 0x14, Size: 1]
	float LandingTime;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BombingZone
	int instanceID;//[Offset: 0x0, Size: 1]
	int ConfigId;//[Offset: 0x4, Size: 1]
	float Radius;//[Offset: 0x8, Size: 1]
	float Duration;//[Offset: 0xc, Size: 1]
	int MinBomb;//[Offset: 0x10, Size: 1]
	int MaxBomb;//[Offset: 0x14, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	BombingZoneBomb Bomb;//[Offset: 0x24, Size: 1]
	enum State;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x630, Size: 1]
	BPC_WarmGame_BattleRoyale_C* BPC_WarmGame_BattleRoyale;//[Offset: 0x638, Size: 1]
	BPC_CountDown_C* BPC_CountDown;//[Offset: 0x640, Size: 1]
	int MapID;//[Offset: 0x648, Size: 1]
	int AirlineID;//[Offset: 0x64c, Size: 1]
	byte BattleState;//[Offset: 0x650, Size: 1]
	MulticastInlineDelegateProperty BroadcastBattleStateChange;//[Size: 1]
	FString WinSide;//[Offset: 0x668, Size: 1]
	UI_HUD_Notice_VICTORY_C* VICTORYUI;//[Offset: 0x678, Size: 1]
	float DelayShowVictoryTime;//[Offset: 0x680, Size: 1]
	void ShowVictoryUI(int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_and_Display_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, UI_HUD_Notice_VICTORY_C* K2Node_DynamicCast_AsUI_HUD_Notice_VICTORY, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x2649560
	void OnRep_WinSide(int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void OnRep_BattleState();// 0x2649560
	void OnRep_MapID(bool CallFunc_IsServer_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnBattleStateChange(byte ChangeType);// 0x2649560
	void StartCountdown(int Time);// 0x2649560
	void BattleEnd(FString WinSide);// 0x2649560
	void OnConfigInit();// 0x2649560
	void OnShowVictoryUI();// 0x2649560
	void ExecuteUbergraph_BP_GameState_BattleRoyale(int EntryPoint, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_Time, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString K2Node_CustomEvent_WinSide, bool CallFunc_IsSupportCharacterRole_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_SolarSpawnActor_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarCityName* CallFunc_Array_Get_Item, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void BroadcastBattleStateChange__DelegateSignature(byte Now State);// 0x2649560

--------------------------------
Class: UI_HUD_Notice_VICTORY_C.UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 1]
	WidgetAnimation* Appear_Anim;//[Offset: 0x448, Size: 1]
	SolarTextBlock* Txt_Result;//[Offset: 0x450, Size: 1]
	SolarTextBlock* Txt_Result;//[Offset: 0x458, Size: 1]
	int CountDownTime;//[Offset: 0x460, Size: 1]
	FString GetModuleName();// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ShowVictory(int Time);// 0x2649560
	void CloseSelf();// 0x2649560
	void ExecuteUbergraph_UI_HUD_Notice_VICTORY(int EntryPoint, FText CallFunc_GetText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_TextToString_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_Time, int CallFunc_PlaySound2Dbyname_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue);// 0x2649560

--------------------------------
Class: UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* BtnReturn;//[Offset: 0x370, Size: 1]
	Image* Img_Bg;//[Offset: 0x378, Size: 1]
	SoftObjectPath ImgBGPath;//[Offset: 0x428, Size: 1]
	void OnReturnBtnClick();// 0x2314040

--------------------------------
Class: S_Event_BattleRoyale
	int BattleTime_15_6488AAB44E84633B11E7DF844AD3B376;//[Offset: 0x0, Size: 1]
	enum EventType_11_8FC191774137C63ED18FD5987B59941D;//[Offset: 0x4, Size: 1]
	<FString,FString> EventParam_10_DC47076342DAE72F001FD1A032026480;//[Offset: 0x8, Size: 1]

--------------------------------
Class: S_EventList_BattleRoyal
	S_Event_BattleRoyale[] EventList_3_9C55B4BD476EE1024C917DAC11DB6F31;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BP_CustomRoomManager_BattleRoyale_C.BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object

--------------------------------
Class: BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x418, Size: 1]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	UI_CreateRoom_HUD_C* UI_RoomHUD;//[Offset: 0x428, Size: 1]
	UI_CreateRoom_Management_Main_C* UI_RoomOperate;//[Offset: 0x430, Size: 1]
	byte TeamMemberCount;//[Offset: 0x438, Size: 1]
	bool IsLocalPlayerOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool TEMP Flag UI Refreshed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	FString[] PlayerPendingRemoval;//[Offset: 0x440, Size: 1]
	int TeamCount;//[Offset: 0x450, Size: 1]
	int DeathmatchModeGroupID;//[Offset: 0x454, Size: 1]
	int SoloGameModeID;//[Offset: 0x458, Size: 1]
	void GetSpawnList(out int[]                                                                                                     , out int[]                                                                                                     , out int[]                                                                                                     , out int[]                                                                                                     , bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleBlacklist, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleWhitelist, int[] K2Node_Select_Default, int[] CallFunc_GetWeaponSettingLists_OutWeaponBlacklist, int[] CallFunc_GetWeaponSettingLists_OutWeaponWhitelist, int[] K2Node_Select_Default, int[] K2Node_Select_Default, int[] K2Node_Select_Default);// 0x2649560
	void GetModeRoomUIType(out byte NewParam, int CallFunc_GetGameModeGroupID_ReturnValue, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2649560
	CustomRoomData GetRoomInfo(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool CallFunc__S_PlayInEditor_bIsEditor);// 0x2649560
	void IsPlayerLocalPendingKill(SCMPlayerState* Player, out bool Result, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2649560
	bool IsRoomOwner(const SCMPlayerState* Player, bool Temp_bool_Variable, bool CallFunc_IsRoomOwner_ReturnValue, bool Temp_bool_Variable, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Switch Mgmt UI Display(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0x2649560
	void RemoveRoomUI(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Get Team Member Count(out int Result, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0x2649560
	void TEMP Delayed Flag Update(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0x2649560
	void PreUpdateOB(FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Refresh All Teams on UI(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, byte CallFunc_GetModeRoomUIType_NewParam, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, TileView* CallFunc_Get_Active_TileView_Result, TileView* CallFunc_Get_Active_TileView_Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Team_1M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_2M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_4M_C* CallFunc_Create_ReturnValue, int CallFunc_Get_Team_Member_Count_Result, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default);// 0x2649560
	void Init CustomRoom Info(bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc__S_PlayInEditor_bIsEditor, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_MatchRule CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, byte K2Node_Select_Default);// 0x2649560
	void Get Custom Room Mode(out byte RoomMode, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560
	void Get Mode Name Localization(out int Mode Local ID, out int Group Local ID, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SolarTablesData_GameModeMain CallFunc_GetRowData_ReturnValue, int K2Node_Select_Default);// 0x2649560
	void Refresh START in Top HUD(bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Create Room Manager Operate UI(byte CallFunc_GetModeRoomUIType_NewParam, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, byte CallFunc_Get_Custom_Room_Mode_RoomMode, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_and_Display_ReturnValue, int CallFunc_Get_Mode_Name_Localization_Mode_Local_ID, int CallFunc_Get_Mode_Name_Localization_Group_Local_ID, UI_CreateRoom_Management_Main_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Main, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void Create Room Manager HUD(SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_and_Display_ReturnValue, UI_CreateRoom_HUD_C* K2Node_DynamicCast_AsUI_Create_Room_HUD, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	bool OnGameStart(bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void Refresh All UI();// 0x2649560
	void Manual Trigger Refresh(FString DEBUG Reason);// 0x2649560
	void RefreshOB();// 0x2649560
	void RefreshRoomData(CustomRoomData RoomData);// 0x2649560
	void RefreshSideUI(FString SideName);// 0x2649560
	void RefreshUI();// 0x2649560
	void UnbaindAllEvents();// 0x2649560
	void RefreshSidePlayers(SCMPlayerState* Player);// 0x2649560
	void OnClientRoomDataReady();// 0x2649560
	void OnPlayerRemovedFromRoom(const SCMPlayerState* Player, enum reason);// 0x2649560
	void BiascSystemDeady();// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void OnTournamentDealy();// 0x2649560
	void ExecuteUbergraph_BP_CustomroomManager(int EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_DEBUG_Reason, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, CustomRoomData K2Node_CustomEvent_RoomData, FString K2Node_CustomEvent_SideName, GameJobManager* CallFunc_GetJobManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc___A_Bind_on_Basic_System_Ready_bReady, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_IsInPreparation_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_Reason, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Select_Default, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc__S_PlayInEditor_bIsEditor, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CommonTwiceConfirmWindowOneBtn_C* K2Node_DynamicCast_AsCommon_Twice_Confirm_Window_One_Btn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Team_1M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 1]
	HorizontalBox* HorizontalBox;//[Offset: 0x3e8, Size: 1]
	CanvasPanel* Panel_Owner;//[Offset: 0x3f0, Size: 1]
	Overlay* Panel_Team;//[Offset: 0x3f8, Size: 1]
	SolarTextBlock* Txt_SideName_P1;//[Offset: 0x400, Size: 1]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x408, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x410, Size: 1]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x418, Size: 1]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0x2649560
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_1M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	bool Team_Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	FString SideName;//[Offset: 0x358, Size: 1]
	FString[] SolarPlayerID;//[Offset: 0x368, Size: 1]
	byte Initial State;//[Offset: 0x378, Size: 1]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	bool bIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 1]
	UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List;//[Offset: 0x380, Size: 1]
	int MaxOBCount;//[Offset: 0x390, Size: 1]
	MulticastInlineDelegateProperty OnSlotClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnDeleteClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamUpdated;//[Size: 1]
	FString Room Master Player ID;//[Offset: 0x3c8, Size: 1]
	byte RoomMode;//[Offset: 0x3d8, Size: 1]
	void IsPreJobInThePos(out SCMPlayerState*[] PreJob, int Pos, out bool _Have, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	void IsPlayerInThePos(out SCMPlayerState*[] PS, int Pos, out bool _Have, out SCMPlayerState* _OutPS, bool _IsHave, SCMPlayerState* _PS, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void CanBeSelected(FString SelectedPlayer, out bool bResult, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0x2649560
	void InitOBCount(int count, byte RoomMode, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Texture2D* CallFunc_Get_Portrait_from_Avatar_ID_Portrait_Texture, int CallFunc_Array_Length_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void Try Update Team Widget(out SCMPlayerState*[] Updated Player List, out UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List, SCMPlayerState* _CACHE_PS, bool _CACHE_Have, bool _CACHE_IsPreJoin, int _CACHE_PreJoinedNum, int _CACHE_PosInTeam, bool _CACHE Is Owner, FString _CACHE Player ID, FText _CACHE Player Name, bool Have New Player, FString[] Player ID Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString Temp_string_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, SolarTextBlock* CallFunc_Get_SideText_by_Panel_Target_Panel, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Len_ReturnValue, bool K2Node_Select_Default, int Temp_int_Variable, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsPlayerInThePos__Have, SCMPlayerState* CallFunc_IsPlayerInThePos__OutPS, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2649560
	void Get SideText by Panel(out SolarTextBlock* Target Panel);// 0x2649560
	void Init Data(FString Side Name, byte Init State);// 0x2649560
	void Set State(bool Team Owner, bool Locked, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, Widget* CallFunc_Get_UI_Refs_from_Panel_Horizontal_Box_Ref, WidgetSwitcher* CallFunc_Get_UI_Refs_from_Panel_WidgetSwitcher_IsOwner, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void BP_OnEntryReleased();// 0x2649560
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x2649560
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x2649560
	void OnListItemObjectSet(Object* ListItemObject);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void Update Team UI(out const SCMPlayerState*[] Team Players);// 0x2649560
	void Do Deselection();// 0x2649560
	void Portrait Clicked(FString Solar Player ID, int PosIndex, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0x2649560
	void Delete Clicked(FString Solar Player ID);// 0x2649560
	void Do Selection(bool SelectedOB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget, FString SelectedSide);// 0x2649560
	void Init OB UI();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, const SCMPlayerState*[] K2Node_CustomEvent_Team_Players, FString K2Node_CustomEvent_Solar_Player_ID, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Solar_Player_ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_CustomEvent_SelectedOB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, FString K2Node_CustomEvent_SelectedSide, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void OnTeamUpdated__DelegateSignature();// 0x2649560
	void OnDeleteClicked__DelegateSignature(FString Clicked Player, FString Clicked Side);// 0x2649560
	void OnSlotClicked__DelegateSignature(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Player_Info_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	Button* Btn_delete;//[Offset: 0x350, Size: 1]
	Button* Btn_Portrait;//[Offset: 0x358, Size: 1]
	SolarImage* Img_Frame;//[Offset: 0x360, Size: 1]
	SolarImage* Img_Owner;//[Offset: 0x368, Size: 1]
	SolarImage* Img_Portrait;//[Offset: 0x370, Size: 1]
	SolarImage* Img_Selected;//[Offset: 0x378, Size: 1]
	Overlay* Overlay_Change;//[Offset: 0x380, Size: 1]
	Overlay* Overlay_Closed;//[Offset: 0x388, Size: 1]
	CanvasPanel* Overlay_Delete;//[Offset: 0x390, Size: 1]
	Overlay* Overlay_Locked;//[Offset: 0x398, Size: 1]
	Overlay* Overlay_Owner;//[Offset: 0x3a0, Size: 1]
	Overlay* Overlay_Portrait;//[Offset: 0x3a8, Size: 1]
	Overlay* overlay_yourself;//[Offset: 0x3b0, Size: 1]
	CanvasPanel* Panel_Name;//[Offset: 0x3b8, Size: 1]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x3c0, Size: 1]
	SolarTextBlock* Txt_YourSelf;//[Offset: 0x3c8, Size: 1]
	UI_Anim_Waiting_C* UI_Anim_Waiting;//[Offset: 0x3d0, Size: 1]
	UI_Component_PlayerHead_C* UI_Component_PlayerHead;//[Offset: 0x3d8, Size: 1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	bool Change_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 1]
	bool Delete_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	FString Current_Player_ID;//[Offset: 0x3e8, Size: 1]
	UI_CreateRoom_Management_Team_C* Team UI Ref;//[Offset: 0x3f8, Size: 1]
	bool Yourself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool Closed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool Waiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	int PosIndex;//[Offset: 0x404, Size: 1]
	byte RoomMode;//[Offset: 0x408, Size: 1]
	FString GetModuleName();// 0x2649560
	void IsSoloMode(out bool bIsSoloMode, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetModeRoomUIType_NewParam, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560
	void RestoreSelcetion();// 0x2649560
	void SetSelectedState(bool bSelected, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x2649560
	void SetDeleteState(bool bDelete, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x2649560
	void SetChangeState(bool bChange, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x2649560
	void RefreshState(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x2649560
	void CallLuaRefreshByPS(SCMPlayerState* PS);// 0x2649560
	void GetClickedEnable(out bool Enable, bool CallFunc_IsSoloMode_bIsSoloMode, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560
	void Setup State(bool Locked, bool Selected, bool Owner, bool Change_Btn, bool Delete_Btn, bool Yourself, bool Closed, bool Waiting);// 0x2649560
	void BP_OnEntryReleased();// 0x2649560
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x2649560
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x2649560
	void OnListItemObjectSet(Object* ListItemObject);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void BndEvt__Btn_Portrait_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void BndEvt__Btn_Delete_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Player_Info(int EntryPoint, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, bool CallFunc_GetClickedEnable_Enable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2649560

--------------------------------
Class: SolarImage.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x138, Size: 1]
	byte FillType;//[Offset: 0x1d0, Size: 1]
	SolarImageProgressInfo ImageProgressInfo;//[Offset: 0x1d8, Size: 1]
	delegate BrushDelegate;//[Offset: 0x1f8, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x208, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x218, Size: 1]
	bool bEnableLocImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	FText ImagePath;//[Offset: 0x230, Size: 1]
	int LocTextID;//[Offset: 0x248, Size: 1]
	enum PreviewLang;//[Offset: 0x24c, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x250, Size: 1]
	delegate OnMouseButtonUpEvent;//[Offset: 0x260, Size: 1]
	delegate OnMouseMoveEvent;//[Offset: 0x270, Size: 1]
	void UpdateImageAsync(int NewLocTextID);// 0x217d670
	void UpdateImage(int NewLocTextID);// 0x217d5e0
	void SetOpacity(float InOpacity);// 0x217d440
	void SetImageProgressInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x217d390
	void SetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x217d2e0
	void SetImageProgress(float InProgress);// 0x217d260
	void SetImageFillType(byte InImageFillType);// 0x217d1e0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x217d0c0
	void SetBrushTintColor(SlateColor TintColor);// 0x217cee0
	void SetBrushSize(Vector2D DesiredSize);// 0x217cde0
	void SetBrushResourceObject(Object* ResourceObject);// 0x217ccc0
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x217cb20
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x217c980
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x217c6e0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x217c4c0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0xbc1fa0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x217c250
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x217c130
	void SetBrush(out const SlateBrush InBrush);// 0x217bdf0
	float GetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x217bb40
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x217bae0

--------------------------------
Class: SolarImageProgressInfo
	byte ProgressType;//[Offset: 0x0, Size: 1]
	byte LineProgressDir;//[Offset: 0x1, Size: 1]
	byte QuaterProgressPrivot;//[Offset: 0x2, Size: 1]
	byte HalfProgressPrivot;//[Offset: 0x3, Size: 1]
	float CircleProgressInitDegree;//[Offset: 0x4, Size: 1]
	bool bInvertProgressDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float Progress;//[Offset: 0xc, Size: 1]
	Material* Material;//[Offset: 0x10, Size: 1]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UI_Anim_Waiting_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_Loop;//[Offset: 0x350, Size: 1]
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_Anim_Waiting(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: UI_Component_PlayerHead_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	SolarButton* Btn_ShowCard;//[Offset: 0x350, Size: 1]
	CanvasPanel* Canvas_Frame;//[Offset: 0x358, Size: 1]
	SolarImageURL* Img_Avatar;//[Offset: 0x360, Size: 1]
	Image* Img_AvatarFrame;//[Offset: 0x368, Size: 1]
	Image* Img_Bg;//[Offset: 0x370, Size: 1]
	Image* Img_BGLine;//[Offset: 0x378, Size: 1]
	Image* img_Empty;//[Offset: 0x380, Size: 1]
	Image* Img_Gender;//[Offset: 0x388, Size: 1]
	Image* Img_Gender_Bg;//[Offset: 0x390, Size: 1]
	Image* Img_Social;//[Offset: 0x398, Size: 1]
	Overlay* Overlay_Normal;//[Offset: 0x3a0, Size: 1]
	CanvasPanel* Panel_FrameAnim;//[Offset: 0x3a8, Size: 1]
	SizeBox* Size;//[Offset: 0x3b0, Size: 1]
	SizeBox* Size;//[Offset: 0x3b8, Size: 1]
	SizeBox* Size_Avatar;//[Offset: 0x3c0, Size: 1]
	SizeBox* Size_Vip;//[Offset: 0x3c8, Size: 1]
	UI_Vip_Icon_Type_C* UI_Vip;//[Offset: 0x3d0, Size: 1]
	bool ShowBusinessCardBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	bool IsNonuseFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool Empty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	byte Social;//[Offset: 0x402, Size: 1]
	bool GenderOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x403, Size: 1]
	byte Gender;//[Offset: 0x404, Size: 1]
	float Size;//[Offset: 0x408, Size: 1]
	bool Vip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool IsExamine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	bool IsCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetAvatarSize(bool IsCustom, bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D K2Node_Select_Default);// 0x2649560
	void SetDefaultSteamAvatar();// 0x2649560
	void SetVipType(byte VipType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0xb43660
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Unhandled_ReturnValue);// 0x2649560
	void SetAvatarState(bool IsCollapsed, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2649560
	void SetAvatarIcon(int InAvatarID, Texture2D* CallFunc_GetAvatarIconWithID_OutAvatar);// 0x2649560
	void SetEmptyState(bool IsEmpty, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x2649560
	void SetPlayerGender(byte Gender, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, Object* K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Margin K2Node_MakeStruct_Margin, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0x2649560
	void SetSocialIcon(byte Social, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue);// 0x2649560
	void Update();// 0x2649560
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x2649560
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_Component_PlayerHead(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, enum K2Node_Select_Default, bool K2Node_Event_IsDesignTime, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0x2649560
	void OnReleased__DelegateSignature();// 0x2649560
	void OnClicked__DelegateSignature();// 0x2649560

--------------------------------
Class: SolarButton.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x158, Size: 1]
	byte ImageFillType;//[Offset: 0x410, Size: 1]
	float ImageFillRatioHorizontal;//[Offset: 0x414, Size: 1]
	float ImageFillRatioVertical;//[Offset: 0x418, Size: 1]
	float ImageFillPixelLeft;//[Offset: 0x41c, Size: 1]
	float ImageFillPixelTop;//[Offset: 0x420, Size: 1]
	float ImageFillPixelRight;//[Offset: 0x424, Size: 1]
	float ImageFillPixelBottom;//[Offset: 0x428, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x42c, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x43c, Size: 1]
	bool bReleaseUnfocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool bEnableClickSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	FString ClickSoundEventName;//[Offset: 0x450, Size: 1]
	byte ClickMethod;//[Offset: 0x460, Size: 1]
	byte TouchMethod;//[Offset: 0x461, Size: 1]
	byte PressMethod;//[Offset: 0x462, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusLosted;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x20f2a10
	void SetStyle(out const ButtonStyle InStyle);// 0x20f2930
	void SetPressMethod(byte InPressMethod);// 0x20f28b0
	void SetImageFillType(byte InImageFillType);// 0x20f27a0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x20f2690
	void SetClickMethod(byte InClickMethod);// 0x20f2610
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x20f2580
	bool IsPressed();// 0x20f2200

--------------------------------
Class: SolarImageURL.Widget.Visual.Object
	FString URL;//[Offset: 0x138, Size: 1]
	bool bDownloadFailedResetToPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bDownloadFailedAutoRetry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	int AutoRetryDelayTime;//[Offset: 0x14c, Size: 1]
	int AutoRetryTimes;//[Offset: 0x150, Size: 1]
	SlateBrush Brush;//[Offset: 0x158, Size: 1]
	SlateBrush PlaceholderBrush;//[Offset: 0x1f0, Size: 1]
	delegate BrushDelegate;//[Offset: 0x288, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x298, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x2a8, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x2bc, Size: 1]
	MulticastInlineDelegateProperty OnURLDownloadFinish;//[Size: 1]
	void URLDownloadFinish__DelegateSignature(bool bSuccess);// 0x2649560
	void UpdateURLImage();// 0x217d700
	void SetURLForNextTick(FString URLForNextTick);// 0x217d540
	void SetOpacity(float InOpacity);// 0x217d4c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x217d150
	void SetBrushTintColor(SlateColor TintColor);// 0x217cfd0
	void SetBrushSize(Vector2D DesiredSize);// 0x217ce60
	void SetBrushResourceObject(Object* ResourceObject);// 0x217cd50
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x217cbf0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x217ca50
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x217c830
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x217c5d0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x217c430
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x217c340
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x217c1c0
	void SetBrush(out const SlateBrush InBrush);// 0x217bf90
	void ResetToPlaceholder();// 0x217bdd0
	void LoadURLImage(Texture2DDynamic* Texture);// 0x217bcb0
	FString GetUrl();// 0x217bc00
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x217bb10
	enum GetDownloadState();// 0x217bab0
	void CancelDownload();// 0x1570c70

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x160, Size: 1]
	float HeightOverride;//[Offset: 0x164, Size: 1]
	float MinDesiredWidth;//[Offset: 0x168, Size: 1]
	float MinDesiredHeight;//[Offset: 0x16c, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x170, Size: 1]
	float MaxDesiredHeight;//[Offset: 0x174, Size: 1]
	float MinAspectRatio;//[Offset: 0x178, Size: 1]
	float MaxAspectRatio;//[Offset: 0x17c, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x3519f00
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x35193c0
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x35192c0
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3519240
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x35191c0
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3519140
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x35190c0
	void SetHeightOverride(float InHeightOverride);// 0x3518eb0
	void ClearWidthOverride();// 0x3517590
	void ClearMinDesiredWidth();// 0x3517570
	void ClearMinDesiredHeight();// 0x3517550
	void ClearMinAspectRatio();// 0x3517530
	void ClearMaxDesiredWidth();// 0x3517510
	void ClearMaxDesiredHeight();// 0x35174f0
	void ClearMaxAspectRatio();// 0x35174d0
	void ClearHeightOverride();// 0x35174b0

--------------------------------
Class: UI_Vip_Icon_Type_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	SolarImage* Img_Vip_Icon;//[Offset: 0x350, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x358, Size: 1]
	int Type;//[Offset: 0x360, Size: 1]
	void SetType(int Type, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Object* Temp_object_Variable, enum K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_Vip_Icon_Type(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x350df30

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	SlateChildSize Size;//[Offset: 0x50, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3510390
	void SetSize(SlateChildSize InSize);// 0x3510200
	void SetPadding(Margin InPadding);// 0x350fc20
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x350f7c0

--------------------------------
Class: UI_CreateRoom_Management_Team_2M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 1]
	HorizontalBox* HorizontalBox;//[Offset: 0x3e8, Size: 1]
	CanvasPanel* Panel_Owner;//[Offset: 0x3f0, Size: 1]
	Overlay* Panel_Team;//[Offset: 0x3f8, Size: 1]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x400, Size: 1]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x408, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x410, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x418, Size: 1]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x420, Size: 1]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0x2649560
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_2M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Team_4M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 1]
	HorizontalBox* HorizontalBox;//[Offset: 0x3e8, Size: 1]
	CanvasPanel* Panel_Owner;//[Offset: 0x3f0, Size: 1]
	Overlay* Panel_Team;//[Offset: 0x3f8, Size: 1]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x400, Size: 1]
	SolarTextBlock* Txt_SideName_P4;//[Offset: 0x408, Size: 1]
	SolarTextBlock* Txt_Team_P4;//[Offset: 0x410, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x418, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x420, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x428, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x430, Size: 1]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x438, Size: 1]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0x2649560
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_4M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Main_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_OB_Exit;//[Offset: 0x350, Size: 1]
	WidgetAnimation* Anim_OB_Enter;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Enter_Anim;//[Offset: 0x360, Size: 1]
	UI_Component_Btn_C* Btn_Invite;//[Offset: 0x368, Size: 1]
	UI_Component_Btn_C* Btn_Setting;//[Offset: 0x370, Size: 1]
	SolarButton* Btn_SpectateList;//[Offset: 0x378, Size: 1]
	UI_Component_Btn_C* Btn_StartGame;//[Offset: 0x380, Size: 1]
	Button* Button_BanSwap;//[Offset: 0x388, Size: 1]
	SolarCheckBox* Guest_Invite;//[Offset: 0x390, Size: 1]
	SolarCheckBox* Guest_Swap;//[Offset: 0x398, Size: 1]
	HorizontalBox* HorizontalBox_SubGameModeInfo;//[Offset: 0x3a0, Size: 1]
	Overlay* MessageBox;//[Offset: 0x3a8, Size: 1]
	UI_Component_Option_C* Option_Invite;//[Offset: 0x3b0, Size: 1]
	UI_Component_Option_C* Option_Swap;//[Offset: 0x3b8, Size: 1]
	CanvasPanel* Panel_Guest;//[Offset: 0x3c0, Size: 1]
	CanvasPanel* Panel_Homeowner;//[Offset: 0x3c8, Size: 1]
	CanvasPanel* panel_Spectate;//[Offset: 0x3d0, Size: 1]
	ParticleSystemWidget* Par_Spark;//[Offset: 0x3d8, Size: 1]
	SolarRichTextBlock* RichText_Members;//[Offset: 0x3e0, Size: 1]
	UI_CreateRoom_Management_Solo_C* Solo;//[Offset: 0x3e8, Size: 1]
	WidgetSwitcher* Switcher_Mode;//[Offset: 0x3f0, Size: 1]
	UI_CreateRoom_Management_TDM_C* TDM;//[Offset: 0x3f8, Size: 1]
	TileView* TileView_Player_Info_1M;//[Offset: 0x400, Size: 1]
	TileView* TileView_Player_Info_2M;//[Offset: 0x408, Size: 1]
	TileView* TileView_Player_Info_4M;//[Offset: 0x410, Size: 1]
	SolarTextBlock* Txt_Countdown;//[Offset: 0x418, Size: 1]
	SolarTextBlock* Txt_Map;//[Offset: 0x420, Size: 1]
	SolarTextBlock* Txt_Members;//[Offset: 0x428, Size: 1]
	SolarTextBlock* Txt_Mode;//[Offset: 0x430, Size: 1]
	SolarTextBlock* Txt_Password;//[Offset: 0x438, Size: 1]
	SolarTextBlock* Txt_RankedMatch;//[Offset: 0x440, Size: 1]
	SolarTextBlock* Txt_Room_ID;//[Offset: 0x448, Size: 1]
	SolarRichTextBlock* Txt_Viewer_Num;//[Offset: 0x450, Size: 1]
	UI_Component_ReturnBtn_C* UI_Component_ReturnBtn;//[Offset: 0x458, Size: 1]
	UI_CreateRoom_SocialList_C* UI_CreateRoom_SocialList;//[Offset: 0x460, Size: 1]
	UI_CreateRoom_Management_Team_OB_C* UI_Management_OB;//[Offset: 0x468, Size: 1]
	WidgetSwitcher* WidgetSwitcher_Down;//[Offset: 0x470, Size: 1]
	byte Team_Member_Count;//[Offset: 0x478, Size: 1]
	int Max Member Count;//[Offset: 0x47c, Size: 1]
	FString Selected Player;//[Offset: 0x480, Size: 1]
	int SelcetedPos;//[Offset: 0x490, Size: 1]
	FString Selected Side;//[Offset: 0x498, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget;//[Offset: 0x4a8, Size: 1]
	FString ToDeletePlayer;//[Offset: 0x4b0, Size: 1]
	int MaxOBPlayerCount;//[Offset: 0x4c0, Size: 1]
	bool SelectedOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	int NowOBPlayerCount;//[Offset: 0x4c8, Size: 1]
	UI_CreateRoom_Management_Team_C*[] All Team Widgets;//[Offset: 0x4d0, Size: 1]
	Object* _TileViewInitItem;//[Offset: 0x4e0, Size: 1]
	Object* _TileViewInitWidget;//[Offset: 0x4e8, Size: 1]
	MulticastInlineDelegateProperty OnEnableInviteChanged;//[Size: 1]
	byte RoomMode;//[Offset: 0x500, Size: 1]
	byte ModeRoomUIType;//[Offset: 0x501, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetModeRoomUI(byte ModeRoomUIType, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams);// 0x2649560
	void OnConfirmKickPlayerOut(SCMPlayerState* Player, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue);// 0x2649560
	void RestoreSelectedWidgets(bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void RestoreSelectedParams();// 0x2649560
	void CallLuaShowKickConfirmWindow(SCMPlayerState* PS);// 0x2649560
	void IsGuestSwapOpen(out bool bIsOpen, bool CallFunc_IsChecked_ReturnValue);// 0x2649560
	void CallLuaOnGuestInviteChanged(bool bIsChecked);// 0x2649560
	void RefreshGuestData(bool bEnableSwap, bool bEnableInvite, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x2649560
	void Get Active TileView(out TileView* Result, byte Temp_byte_Variable, TileView* K2Node_Select_Default);// 0x2649560
	void Trim Pending Removal Players(out SCMPlayerState*[] Player List, out SCMPlayerState*[] Trimmed Player List, SCMPlayerState*[] LOCAL Player List, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocalPendingKill_Result, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void PlayEnter(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2649560
	void Set Room Mode(byte RoomMode, bool K2Node_SwitchEnum_CmpSuccess);// 0x2649560
	void GetPlayerByIDAndOB(FString PlayerId, bool bIsOB, out SCMPlayerState* Player, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_FindOBPlayerByPlayerID_ReturnValue);// 0x2649560
	void RefreshOB(SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560
	void Init OB(int OBPlayerCount, bool CallFunc_Greater_IntInt_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void Update Button State(bool Can Start, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_Select_Default);// 0x2649560
	void State Team();// 0x2649560
	void Init Room Mgmt UI(byte Team Type, FString Master Name, FString Room PW, FString Room ID, int ModeName LocalID, int ModeGroup LocalID, int MaxOBPlayerCount, byte RoomMode, byte ModeRoomUIType, FText Temp_text_Variable, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const <FString,FString> Temp_string_Variable, const <FString,FString> Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FText Temp_text_Variable, byte Temp_byte_Variable, FText K2Node_Select_Default, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, enum K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Start Ticking();// 0x2649560
	void TikTok();// 0x2649560
	void OnMemberCountChanged(int NowCount, int MaxCount, bool Can Start);// 0x2649560
	void BndEvt__Btn_StartGame_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0x2649560
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_2_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0x2649560
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_4_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0x2649560
	void InitDeletePanel();// 0x2649560
	void ALL_WIDGET Selection(bool Selection is OB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget);// 0x2649560
	void ALL_WIDGET Deselection();// 0x2649560
	void ALL_WIDGET Update();// 0x2649560
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_5_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0x2649560
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_6_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0x2649560
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_7_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0x2649560
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_8_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0x2649560
	void BndEvt__Option_Swap_K2Node_ComponentBoundEvent_12_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0x2649560
	void BndEvt__Option_Invite_K2Node_ComponentBoundEvent_13_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0x2649560
	void BndEvt__Button_BanSwap_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void BndEvt__Guest_Invite_K2Node_ComponentBoundEvent_9_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x2649560
	void Side_WIDGET Update(FString Side);// 0x2649560
	void BndEvt__UI_Component_ReturnBtn_K2Node_ComponentBoundEvent_11_OnClicked__DelegateSignature();// 0x2649560
	void OnShow();// 0x2649560
	void OnEvnetCloseAction();// 0x2649560
	void ReceiveHide();// 0x2649560
	void BindTeams(out const UI_CreateRoom_Management_Team_C*[] Teams);// 0x2649560
	void BindSimpleTeam(UI_CreateRoom_Management_Team_C* Team);// 0x2649560
	void OB UI EventBinding();// 0x2649560
	void Trigger Flag Update();// 0x2649560
	void OnDeleteClicked(FString Clicked Player, FString Clicked Side);// 0x2649560
	void OnSlotClicked(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Main(int EntryPoint, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_NowCount, int K2Node_CustomEvent_MaxCount, bool K2Node_CustomEvent_Can_Start, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Selection_is_OB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, FString K2Node_CustomEvent_Side, int Temp_int_Array_Index_Variable, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, FText CallFunc___________, bool K2Node_SwitchEnum_CmpSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, const UI_CreateRoom_Management_Team_C*[] K2Node_CustomEvent_Teams, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_Team, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, bool K2Node_CustomEvent_Is_OB, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_TeamWidget, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_ListenForInputActionEx_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item);// 0x2649560
	void OnEnableInviteChanged__DelegateSignature(bool bEnable);// 0x2649560

--------------------------------
Class: UI_Component_Btn_C.ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x350, Size: 1]
	WidgetAnimation* Anim_Remind;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Anim_Hold;//[Offset: 0x360, Size: 1]
	WidgetAnimation* Anim_Hover;//[Offset: 0x368, Size: 1]
	SolarImage* Img_Btn;//[Offset: 0x370, Size: 1]
	SolarImage* Img_Icon;//[Offset: 0x378, Size: 1]
	SolarImage* img_Mask;//[Offset: 0x380, Size: 1]
	SolarImage* Img_Shadow;//[Offset: 0x388, Size: 1]
	CanvasPanel* Panel_Press;//[Offset: 0x390, Size: 1]
	ScaleBox* ScaleBox;//[Offset: 0x398, Size: 1]
	SizeBox* Size_Btn;//[Offset: 0x3a0, Size: 1]
	SizeBox* Size_Icon;//[Offset: 0x3a8, Size: 1]
	SolarTextBlock* Text_Btn;//[Offset: 0x3b0, Size: 1]
	NamedSlot* WidgetSlot;//[Offset: 0x3b8, Size: 1]
	byte BtnType;//[Offset: 0x3c0, Size: 1]
	byte BtnState;//[Offset: 0x3c1, Size: 1]
	Vector2D BtnSize;//[Offset: 0x3c4, Size: 1]
	bool IsUseBtnImag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool IsUseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	FString Text;//[Offset: 0x3d0, Size: 1]
	bool IsUseLocID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	int LocID;//[Offset: 0x3e4, Size: 1]
	enum PreviewLang;//[Offset: 0x3e8, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	bool IsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Object* Icon;//[Offset: 0x428, Size: 1]
	Vector2D Icon_Size;//[Offset: 0x430, Size: 1]
	void IsAvailable(out bool Availble, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x2649560
	void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560
	void SetBtnState(byte State, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2649560
	FString GetLocalText(FString CallFunc_GetLocalText_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void Update(bool IsDesignTime);// 0x2649560
	void SetBtnText(FString                                                                                                     , byte                                                                                                     );// 0x2649560
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x2649560
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0x2649560
	void OnLocLangChanged(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0x2649560
	void ExecuteUbergraph_UI_Component_Btn(int EntryPoint, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_IsDesignTime, FString K2Node_CustomEvent_____, byte K2Node_CustomEvent_____, FString CallFunc_GetLocalText_ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, enum K2Node_Select_Default, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata);// 0x2649560
	void OnReleased__DelegateSignature();// 0x2649560
	void OnClicked__DelegateSignature();// 0x2649560
	void OnPressed__DelegateSignature();// 0x2649560

--------------------------------
Class: ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarButton* OperateArea;//[Offset: 0x348, Size: 1]

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: UI_Component_Option_C.SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 1]
	CanvasPanel* Panel_Disabled;//[Offset: 0x370, Size: 1]
	SolarCheckBox* SolarCheckBox_Option;//[Offset: 0x378, Size: 1]
	SolarTextBlock* Txt_Option;//[Offset: 0x380, Size: 1]
	bool UseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	FText Text;//[Offset: 0x390, Size: 1]
	int TextID;//[Offset: 0x3a8, Size: 1]
	enum TextPreviewLang;//[Offset: 0x3ac, Size: 1]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x3b0, Size: 1]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	MulticastInlineDelegateProperty OnOptionCheckStateChanged;//[Size: 1]
	bool bCustomClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	int OptionType;//[Offset: 0x3e4, Size: 1]
	void SetEnabled(bool Enabled, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default);// 0x2649560
	void SetOptionType(int OptionType, int Temp_int_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, CheckBoxStyle K2Node_MakeStruct_CheckBoxStyle);// 0x2649560
	void ManualOptionSetIsChecked(bool bIsChecked);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void BndEvt__SolarCheckBox_Option_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x2649560
	void OnSelected(bool bSelected);// 0x2649560
	void SetDisbaled(bool Disabled);// 0x2649560
	void RefreshOptionTxtUI();// 0x2649560
	void ExecuteUbergraph_UI_Component_Option(int EntryPoint, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default, enum K2Node_Select_Default, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_Event_bSelected, bool K2Node_CustomEvent_Disabled);// 0x2649560
	void OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0x2649560

--------------------------------
Class: SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnClickedEvent;//[Size: 1]
	void SetButtonIndex(int InButtonIndex);// 0x2127050
	void PostClickedEvent();// 0x2126de0
	void OnStateChanged(bool bIsChecked);// 0x21268e0
	void OnSelected(bool bSelected);// 0x2649560
	ReturnValue(MulticastInlineDelegateProperty) GetOnClickedEvent();// 0x21261a0
	int GetButtonIndex();// 0x2125e50

--------------------------------
Class: ParticleSystemWidget.Widget.Visual.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x138, Size: 1]
	bool bReactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool bActiveSysWhenInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	ParticleSystemComponent* WorldParticleComponent;//[Offset: 0x148, Size: 1]
	Actor* WorldParticleActor;//[Offset: 0x150, Size: 1]
	void SetReactivate(bool bActivateAndReset);// 0x81dca0
	void ActivateParticles(bool bActive, bool bReset);// 0x81dbd0

--------------------------------
Class: UI_CreateRoom_Management_Solo_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_Loop;//[Offset: 0x350, Size: 1]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x358, Size: 1]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x360, Size: 1]
	void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0x2649560
	void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Solo(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Team_Solo_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3e8, Size: 1]
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_Solo(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_TDM_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_Loop;//[Offset: 0x350, Size: 1]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x358, Size: 1]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x360, Size: 1]
	void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0x2649560
	void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_TDM(int EntryPoint, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Team_TDM_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3e8, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3f0, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3f8, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x400, Size: 1]
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_TDM(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: UI_Component_ReturnBtn_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	SolarButton* Btn_Return;//[Offset: 0x268, Size: 1]
	Image* Image;//[Offset: 0x270, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 1]
	SolarTextBlock* Txt_Title;//[Offset: 0x280, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	bool UseTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	FText Title;//[Offset: 0x2b0, Size: 1]
	int TitleID;//[Offset: 0x2c8, Size: 1]
	bool UseID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	enum PreviewLang;//[Offset: 0x2cd, Size: 1]
	float SizeX;//[Offset: 0x2d0, Size: 1]
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x2649560
	void ExecuteUbergraph_UI_Component_ReturnBtn(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default);// 0x2649560
	void OnPressed__DelegateSignature();// 0x2649560
	void OnClicked__DelegateSignature();// 0x2649560

--------------------------------
Class: UI_CreateRoom_SocialList_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* Btn_LeftTeam;//[Offset: 0x348, Size: 1]
	FString GetModuleName();// 0x2649560

--------------------------------
Class: UI_CreateRoom_Management_Team_OB_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 1]
	Overlay* Panel_Spectator;//[Offset: 0x3e8, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x3f0, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x3f8, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x400, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x408, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x410, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x418, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x420, Size: 1]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x428, Size: 1]
	void UpdateOB(out SCMPlayerState*[] PlayerStateList, bool T_Waiting, FString T_PlayerID, SCMPlayerState* T_PS, int T_Index, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, byte Temp_byte_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Select_Default, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_OB(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2649560

--------------------------------
Class: UI_CreateRoom_HUD_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_DesktopLayout;//[Offset: 0x350, Size: 1]
	UI_Component_Btn_C* Btn_GameStart;//[Offset: 0x358, Size: 1]
	UI_Component_Btn_C* Btn_RoomManage;//[Offset: 0x360, Size: 1]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x368, Size: 1]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x370, Size: 1]
	HorizontalBox* panel_spectators;//[Offset: 0x378, Size: 1]
	UI_CreateRoom_HUD_Prize_C* PrizePool;//[Offset: 0x380, Size: 1]
	SolarRichTextBlock* Txt_Countdown;//[Offset: 0x388, Size: 1]
	SolarTextBlock* Txt_Spectators;//[Offset: 0x390, Size: 1]
	WidgetSwitcher* WidgetSwitcher_Manage;//[Offset: 0x398, Size: 1]
	WidgetSwitcher* WidgetSwitcher_Start;//[Offset: 0x3a0, Size: 1]
	bool bIsOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetOnwerMode(bool IsOwner, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue);// 0x2649560
	void ShowSpectator(bool Show);// 0x2649560
	void Construct();// 0x2649560
	void Start Ticking();// 0x2649560
	void TikTok();// 0x2649560
	void BndEvt__UI_Component_Btn_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();// 0x2649560
	void BndEvt__UI_Component_Btn_1_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0x2649560
	void Update Button State(bool Can Start);// 0x2649560
	void OnRoomInfoSwitch();// 0x2649560
	void OnStartGame();// 0x2649560
	void Event_RoomInfoSwitch();// 0x2649560
	void Event_GameStart();// 0x2649560
	void OnShow();// 0x2649560
	void OnHide();// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_HUD(int EntryPoint, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte Temp_byte_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, bool K2Node_CustomEvent_Can_Start, byte K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPlatformDesktop_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsAvailable_Availble, FText CallFunc___________, FString CallFunc_Conv_TextToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560

--------------------------------
Class: UI_KeyPrompt_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	Button* BtnKey;//[Offset: 0x268, Size: 1]
	SolarAdapterWidget* Panel_Shortcut;//[Offset: 0x270, Size: 1]
	byte                                                                                                     ;//[Offset: 0x278, Size: 1]
	FString ActionName;//[Offset: 0x280, Size: 1]
	byte                                                                                                     ;//[Offset: 0x290, Size: 1]
	bool bEnableBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	int ActionDescLocID;//[Offset: 0x2ac, Size: 1]
	void GetSplitActionName(FString SourceString, out FString NewParam, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue);// 0x2649560
	void BuildOverrideActionDescParam(int LocTextID, out WidgetOverrideParam WidgetOverrideParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam);// 0x2649560
	void BuildOverrideParams(out const WidgetOverrideParam[] Array, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSplitActionName_NewParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_InputMapping CallFunc_TryGetRowData_ReturnValue, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, const WidgetOverrideParam[] K2Node_MakeArray_Array);// 0x2649560
	void SetOperationType(byte Type, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void BndEvt__BtnKey_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void ExecuteUbergraph_UI_KeyPrompt(int EntryPoint, bool K2Node_Event_IsDesignTime, WidgetOverrideParam[] CallFunc_BuildOverrideParams_Array, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void OnClicked__DelegateSignature();// 0x2649560

--------------------------------
Class: WidgetOverrideParam
	enum Type;//[Offset: 0x0, Size: 1]
	FName ChildName;//[Offset: 0x4, Size: 1]
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FText Text;//[Offset: 0x10, Size: 1]
	int LocTextID;//[Offset: 0x28, Size: 1]
	SlateBrush Brush;//[Offset: 0x30, Size: 1]
	FString CustomParameter;//[Offset: 0xc8, Size: 1]
	GameplayTag GameplayTag;//[Offset: 0xd8, Size: 1]
	FString[] MetaData;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: UI_KeyMappingPrompt_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_Press;//[Offset: 0x350, Size: 1]
	Overlay* Empty;//[Offset: 0x358, Size: 1]
	Overlay* EmptyDisable;//[Offset: 0x360, Size: 1]
	UI_Component_Gamepad_C* Gamepad;//[Offset: 0x368, Size: 1]
	HorizontalBox* HorizontalLayout;//[Offset: 0x370, Size: 1]
	SizeBox* Icon;//[Offset: 0x378, Size: 1]
	Image* Img_Bg;//[Offset: 0x380, Size: 1]
	UI_Component_Keyboard_C* Keyboard;//[Offset: 0x388, Size: 1]
	WidgetSwitcher* KeySwitcher;//[Offset: 0x390, Size: 1]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x398, Size: 1]
	Overlay* Overlay_Root;//[Offset: 0x3a0, Size: 1]
	SolarTextBlock* Txt_Hold;//[Offset: 0x3a8, Size: 1]
	TextBlock* Txt_Key;//[Offset: 0x3b0, Size: 1]
	SolarTextBlock* Txt_Shortcut;//[Offset: 0x3b8, Size: 1]
	VerticalBox* VerticalLayOut;//[Offset: 0x3c0, Size: 1]
	byte Style;//[Offset: 0x3c8, Size: 1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetEnableInputSettingHide(bool bEnable);// 0x2649560
	void SetOperationTypeImpl(byte InType, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2649560
	void RefreshEmptyDisplay(bool bInEmpty, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue);// 0x2649560
	void SetEnableEmptyDispaly(bool bEnable);// 0x2649560
	void SetStyle(byte Style, Margin Temp_struct_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, VerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, Margin K2Node_Select_Default, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* K2Node_Select_Default, Margin K2Node_Select_Default, Widget* K2Node_Select_Default, Widget* K2Node_Select_Default, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void OnChangeAdapterSlotWidgetGameplayTag(out const GameplayTag InGameplayTag, out const FString[] MetaData);// 0x2649560
	void OnChangeAdapterSlotWidgetParameters(out const WidgetOverrideParam[] Params);// 0xb43660
	void OnLoadAdapterSlotWidgetFinished();// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_KeyMappingPrompt(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const GameplayTag K2Node_Event_InGameplayTag, const FString[] K2Node_Event_MetaData, const WidgetOverrideParam[] K2Node_Event_Params, FText CallFunc_GetText_ReturnValue, bool K2Node_Event_IsDesignTime, bool CallFunc_TextIsEmpty_ReturnValue, enum K2Node_Select_Default);// 0x2649560

--------------------------------
Class: UI_Component_Gamepad_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_DoubleClick;//[Offset: 0x348, Size: 1]
	Image* img_Hold;//[Offset: 0x350, Size: 1]
	Image* Img_MainKey;//[Offset: 0x358, Size: 1]
	Image* Img_ModifierKey;//[Offset: 0x360, Size: 1]
	SolarImage* Img_PlusIcon;//[Offset: 0x368, Size: 1]
	Overlay* Overlay_Normal;//[Offset: 0x370, Size: 1]
	SizeBox* SizeBox_MainKey;//[Offset: 0x378, Size: 1]
	SizeBox* SizeBox_ModifierKey;//[Offset: 0x380, Size: 1]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	FString ActionName;//[Offset: 0x390, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetMainKeySelection();// 0x2649560
	void SetMainKeyNormal();// 0x2649560
	void GetGamepadIconByKey(Key InKey, out PaperSprite* GamepadIcon);// 0x2649560
	void SetData(Key ModifierKey, Key MainKey, Key LocalMainKey, Key LocalModifierKey, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue);// 0x2649560

--------------------------------
Class: UI_Component_Keyboard_C.SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 1]
	Image* Img_Bg;//[Offset: 0x2a8, Size: 1]
	Image* Img_Bg;//[Offset: 0x2b0, Size: 1]
	SolarImage* Img_PlusIcon;//[Offset: 0x2b8, Size: 1]
	WidgetSwitcher* KeyAndMouseSwitcher;//[Offset: 0x2c0, Size: 1]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x2c8, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x2d0, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x2d8, Size: 1]
	TextBlock* Txt_Key;//[Offset: 0x2e0, Size: 1]
	TextBlock* Txt_Key;//[Offset: 0x2e8, Size: 1]
	bool Red;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool Yellow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	int Font_Size;//[Offset: 0x2f4, Size: 1]
	Vector2D BG_Size;//[Offset: 0x2f8, Size: 1]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	TextBlock* NewVar;//[Offset: 0x308, Size: 1]
	FString GetModuleName();// 0x2649560
	void BP_RefreshKeyboardUI(TextBlock* InTxtKey, Image* InImgBg, SizeBox* InSizeBox, Image* LocalImgBg, SizeBox* LocalSizeBox, TextBlock* LocalTxtKey, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0xb43660
	void ExecuteUbergraph_UI_Component_Keyboard(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	FString ActionName;//[Offset: 0x260, Size: 1]
	FString KeyBoardText;//[Offset: 0x270, Size: 1]
	FString[] KeyBoardTextArray;//[Offset: 0x280, Size: 1]
	MulticastInlineDelegateProperty UpdateKeyboardMappingDelegate;//[Size: 1]
	void UpdateKeyboardMappingInternal(FString ModifyActionName);// 0x2100560
	void OnUpdateKeyboardMapping(out const <FString> ActionNames);// 0x2126ac0

--------------------------------
Class: UI_Component_Mouse_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	CanvasPanel* Direction;//[Offset: 0x268, Size: 1]
	Image* Img_Mouse;//[Offset: 0x270, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 1]
	byte Mouse;//[Offset: 0x280, Size: 1]
	bool HUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	FString ActionName;//[Offset: 0x288, Size: 1]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	Vector2D Size;//[Offset: 0x29c, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetData(Key KeySetting, out byte Type, out bool Succeed, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Key_IsMouseButton_ReturnValue);// 0x2649560
	void UpdateImage(byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_Component_Mouse(int EntryPoint, byte Temp_byte_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool K2Node_Event_IsDesignTime, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default);// 0x2649560

--------------------------------
Class: SolarAdapterWidget.ContentWidget.PanelWidget.Widget.Visual.Object
	enum WidgetLoadType;//[Offset: 0x150, Size: 1]
	SoftClassPath MobileWidgetPath;//[Offset: 0x158, Size: 1]
	SoftClassPath DesktopWidgetPath;//[Offset: 0x170, Size: 1]
	WidgetOverrideParam[] OverrideParamList;//[Offset: 0x188, Size: 1]
	SoftClassPath CurWidgetPath;//[Offset: 0x198, Size: 1]
	UserWidget* AdapteeWidget;//[Offset: 0x1b0, Size: 1]
	void RefreshUIByOverrideParams(out const WidgetOverrideParam[] WidgetOverrideParams);// 0x20c7310
	void LoadUserWidgetResource();// 0x20c6140
	UserWidget* GetAdapteeWidget();// 0x20c5a80

--------------------------------
Class: UI_CreateRoom_HUD_Prize_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Anim_DesktopLayout;//[Offset: 0x350, Size: 1]
	WidgetAnimation* Anim_Fold_Expanded;//[Offset: 0x358, Size: 1]
	WidgetAnimation* Anim_Refresh_Folded;//[Offset: 0x360, Size: 1]
	UI_Component_Btn_C* Btn_Details;//[Offset: 0x368, Size: 1]
	SolarInputButton* Btn_Expand;//[Offset: 0x370, Size: 1]
	SolarInputButton* Btn_Fold;//[Offset: 0x378, Size: 1]
	Image* Img_Arrow;//[Offset: 0x380, Size: 1]
	Image* Img_Arrow;//[Offset: 0x388, Size: 1]
	Image* Img_Bg;//[Offset: 0x390, Size: 1]
	Image* img_Btn_Bg;//[Offset: 0x398, Size: 1]
	Image* img_Btn_Bg;//[Offset: 0x3a0, Size: 1]
	Image* img_ExpandedBg;//[Offset: 0x3a8, Size: 1]
	Image* img_PlayerPrize;//[Offset: 0x3b0, Size: 1]
	Image* img_PlayerPrize;//[Offset: 0x3b8, Size: 1]
	Image* img_PlayerPrize;//[Offset: 0x3c0, Size: 1]
	Image* img_Prize;//[Offset: 0x3c8, Size: 1]
	Image* Img_Refresh_Light;//[Offset: 0x3d0, Size: 1]
	Image* Img_Refresh_Wipes;//[Offset: 0x3d8, Size: 1]
	WidgetSwitcher* Switcher_Prize;//[Offset: 0x3e0, Size: 1]
	SolarTextBlock* Txt_Prize;//[Offset: 0x3e8, Size: 1]
	SolarTextBlock* Txt_Prize;//[Offset: 0x3f0, Size: 1]
	SolarTextBlock* Txt_Prize;//[Offset: 0x3f8, Size: 1]
	SolarTextBlock* Txt_Prize;//[Offset: 0x400, Size: 1]
	SolarTextBlock* Txt_PrizePool;//[Offset: 0x408, Size: 1]
	int PrizeType;//[Offset: 0x410, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetPrizeType(int PrizeType, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_CreateRoom_HUD_Prize(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: SolarInputButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SolarVirtualInput VirtualActionInput;//[Offset: 0x498, Size: 1]

--------------------------------
Class: SolarVirtualInput
	enum InputBindType;//[Offset: 0x0, Size: 1]
	Key VirtualKey;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CommonTwiceConfirmWindowOneBtn_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	WidgetAnimation* Enter_Anim;//[Offset: 0x350, Size: 1]
	BackgroundBlur* BlurMask;//[Offset: 0x358, Size: 1]
	UI_Component_Close_C* CloseBtn;//[Offset: 0x360, Size: 1]
	UI_Component_Btn_C* ConfirmBtn;//[Offset: 0x368, Size: 1]
	SolarTextBlock* ConfirmBtnText;//[Offset: 0x370, Size: 1]
	TextBlock* ConfirmText;//[Offset: 0x378, Size: 1]
	Image* ConfirmTextBG;//[Offset: 0x380, Size: 1]
	SolarRichTextBlock* Context;//[Offset: 0x388, Size: 1]
	Image* Mask;//[Offset: 0x390, Size: 1]
	SolarTextBlock* Title;//[Offset: 0x398, Size: 1]
	UI_Option_C* UI_Option;//[Offset: 0x3a0, Size: 1]
	SlateColor HiddenColor;//[Offset: 0x3a8, Size: 1]
	SlateColor VisibleColor;//[Offset: 0x3d0, Size: 1]
	FString GetModuleName();// 0x2649560
	void Construct();// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void ExecuteUbergraph_CommonTwiceConfirmWindowOneBtn(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x2649560

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x150, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x160, Size: 1]
	byte VerticalAlignment;//[Offset: 0x161, Size: 1]
	bool bBlurOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 1]
	bool bBlurState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163, Size: 1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float BlurStrength;//[Offset: 0x168, Size: 1]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	int BlurRadius;//[Offset: 0x170, Size: 1]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x178, Size: 1]
	void StopOnFirstBlur();// 0x3507f00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3507c70
	void SetPadding(Margin InPadding);// 0x35074c0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x3507110
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3506de0
	void SetBlurStrength(float InStrength);// 0x22b9190
	void SetBlurState(bool BlurState, bool RefreshCount);// 0x35066b0
	void SetBlurRadius(int InBlurRadius);// 0x3506620
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x3506470

--------------------------------
Class: UI_Component_Close_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	SolarButton* Btn_Close;//[Offset: 0x350, Size: 1]
	Image* Img_Close_Nml;//[Offset: 0x358, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	bool Black;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	bool White;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	Vector2D Icon_Size;//[Offset: 0x38c, Size: 1]
	FString GetModuleName();// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0xb43660
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2649560
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2649560
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2649560
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x2649560
	void ExecuteUbergraph_UI_Component_Close(int EntryPoint, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_IsDesignTime, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0x2649560
	void OnPressed__DelegateSignature();// 0x2649560
	void OnClicked__DelegateSignature();// 0x2649560

--------------------------------
Class: UI_Option_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Tick;//[Offset: 0x348, Size: 1]
	Image* Img_Tick;//[Offset: 0x350, Size: 1]
	SolarCheckBox* SolarCheckBox_Switch;//[Offset: 0x358, Size: 1]
	SolarTextBlock* SolarTxt_metion;//[Offset: 0x360, Size: 1]
	FString GetModuleName();// 0x2649560

--------------------------------
Class: UI_BuyResurrectionPanel_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	Panel_Interact_Progress_C* Panel_Interact_Progress;//[Offset: 0x350, Size: 1]
	CanvasPanel* Root;//[Offset: 0x358, Size: 1]
	UI_HUD_Notice_BuyResurrection_C* UI_HUD_Notice_BuyResurrection;//[Offset: 0x360, Size: 1]
	BPC_BuyResurrection_C* BuyComp;//[Offset: 0x368, Size: 1]
	FString NotifyString;//[Offset: 0x370, Size: 1]
	bool IsBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	void Set Btn Vis(bool Show);// 0x2649560
	void Set Btna And Tip Visibility(bool Visibility, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560
	void Event_Init(BPC_BuyResurrection_C* BuyComp);// 0x2649560
	void EventOnStateChange(enum NewState);// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void OnReviveStateChange(SolarPlayerState* RevivingMePlayer);// 0x2649560
	void BndEvt__Panel_Interact_Progress_K2Node_ComponentBoundEvent_1_SimpleDynamicMulticastDelegate__DelegateSignature();// 0x2649560
	void Notify Teammate Revive();// 0x2649560
	void ExecuteUbergraph_UI_BuyResurrectionPanel(int EntryPoint, const <FString,FString> Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetNoticeFormatText_ReturnValue, BPC_BuyResurrection_C* K2Node_CustomEvent_BuyComp, enum K2Node_CustomEvent_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetWaitTimeRemaining_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_IsValid_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerState* K2Node_CustomEvent_RevivingMePlayer, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: Panel_Interact_Progress_C.SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e8, Size: 1]
	WidgetAnimation* Enter_Anim;//[Offset: 0x3f0, Size: 1]
	WidgetAnimation* Select_Anim;//[Offset: 0x3f8, Size: 1]
	SolarButton* Btn_Interact;//[Offset: 0x400, Size: 1]
	WidgetSwitcher* CancelableSwitcher;//[Offset: 0x408, Size: 1]
	Image* Img_Icon;//[Offset: 0x410, Size: 1]
	Image* img_Icon_Light;//[Offset: 0x418, Size: 1]
	Image* Img_Light;//[Offset: 0x420, Size: 1]
	Image* Img_Light;//[Offset: 0x428, Size: 1]
	WidgetSwitcher* InteractableSwitcher;//[Offset: 0x430, Size: 1]
	CanvasPanel* Panel_CD;//[Offset: 0x438, Size: 1]
	SolarAdapterWidget* Panel_Interact_KeyMapping;//[Offset: 0x440, Size: 1]
	CanvasPanel* Panel_Progress_CountDown;//[Offset: 0x448, Size: 1]
	CanvasPanel* Panel_ReduceCD;//[Offset: 0x450, Size: 1]
	UI_Button_ReduceCD_Clock_C* ReduceCD_Clock;//[Offset: 0x458, Size: 1]
	UI_Button_ReduceCD_Light_C* ReduceCD_Light;//[Offset: 0x460, Size: 1]
	SolarTextBlock* Txt_Cancel;//[Offset: 0x468, Size: 1]
	SolarTextBlock* Txt_Interact;//[Offset: 0x470, Size: 1]
	UI_Button_Selected_Anim_C* UI_Button_Selected_Anim;//[Offset: 0x478, Size: 1]
	UI_Skill_CDRefresh_Anim_C* UI_Skill_CDRefresh_Anim;//[Offset: 0x480, Size: 1]
	enum State;//[Offset: 0x488, Size: 1]
	byte InteractType;//[Offset: 0x489, Size: 1]
	bool ShowProgressBarPrevInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 1]
	bool NonProgressText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b, Size: 1]
	bool HideNonCancellableTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	void RefreshToNonCancellableInteracting();// 0x2649560
	void RefreshToCancellableInteracting();// 0x2649560
	void RefreshToPreInteract();// 0x2649560
	void PlayFadeInAnim();// 0x2649560
	void HidePassiveBuff();// 0x2649560
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x2649560
	void EnablePassiveBuffDisplay(int CharacterId, int LocalTextId);// 0x2649560
	void SetProgressBarRatio(float Ratio);// 0x2649560
	void SetProgressBarVisiblity(bool bShow, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2649560
	void SetInteractType(byte InteractType, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, enum Temp_byte_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, int Temp_int_Variable, SlateColor K2Node_MakeStruct_SlateColor, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, int K2Node_Select_Default, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, byte Temp_byte_Variable, Vector2D K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x2649560
	void UpdateStateView(enum InState, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void BP_UpdateStateView(enum InState);// 0x2649560
	void BndEvt__Btn_Interact_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x2649560
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x2649560
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x2649560
	void ExecuteUbergraph_Panel_Interact_Progress(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Event_InState, bool CallFunc_IsPlatformDesktop_ReturnValue, enum K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560

--------------------------------
Class: SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnCompleteDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCancelDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnStartInteract;//[Size: 1]
	bool bIsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 1]
	GaugeImage* Image_GameProgressBar;//[Offset: 0x3a0, Size: 1]
	SolarTextBlock* Text_GameProgressTime;//[Offset: 0x3a8, Size: 1]
	Button* BTN_GameProgressCancel;//[Offset: 0x3b0, Size: 1]
	TextBlock* Text_GameProgressTips;//[Offset: 0x3b8, Size: 1]
	HorizontalBox* HorizontalBox_Cancel;//[Offset: 0x3c0, Size: 1]
	HUDPassiveHeadWidget* Panel_PassiveBuff;//[Offset: 0x3c8, Size: 1]
	Overlay* Overlay_CD;//[Offset: 0x3d0, Size: 1]
	GaugeImage* Image_CD;//[Offset: 0x3d8, Size: 1]
	SolarTextBlock* Txt_CDTime;//[Offset: 0x3e0, Size: 1]
	void UpdateGameProgressTipsText(const int InTextId);// 0x21e3c20
	void UpdateGameProgressText();// 0x21e3c00
	void UpdateGameProgressBarPercent(const float InPercent);// 0x21e3b80
	void UpdateGameProgress(const float InAddition);// 0x21e3b00
	void TryCancelInteraction();// 0x21e2960
	void StopGameProgress(const int InActionID);// 0x21e3210
	void StopCountDownProgress(const int InActionID);// 0x21e3180
	void StartCountDownProgress(out const CountDownInfo InCountInfo);// 0x21e3040
	void SimpleDynamicMulticastDelegate__DelegateSignature();// 0x2649560
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x2649560
	void RefreshToPreInteract();// 0x2649560
	void RefreshToNonCancellableInteracting();// 0x2649560
	void RefreshToCancellableInteracting();// 0x2649560
	void OnSteamCancelCountDown();// 0x8f2720
	void OnParentVisibilityChanged(const bool bVisible);// 0x21e2bd0
	void OnCompleteInternal();// 0x21e2a90
	void OnCancelButtonClicked();// 0x21e2960
	void HidePassiveBuff();// 0x2649560
	void EnterCD(float TotalTime, float StartTime);// 0x21e2090
	void BP_UpdateStateView(enum InState);// 0x2649560

--------------------------------
Class: HUDPassiveHeadWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Head;//[Offset: 0x348, Size: 1]
	SolarTextBlock* Txt_Buff;//[Offset: 0x350, Size: 1]
	void SetData(int InContributorCharacterId, int InLocalTipsID);// 0x2066fb0

--------------------------------
Class: UI_Button_ReduceCD_Clock_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 1]
	Image* Img_Light;//[Offset: 0x350, Size: 1]
	Image* MI_Clock;//[Offset: 0x358, Size: 1]
	LinearColor ClockColor;//[Offset: 0x360, Size: 1]
	LinearColor LightColor;//[Offset: 0x370, Size: 1]
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_Button_ReduceCD_Clock(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: UI_Button_ReduceCD_Light_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	Image* MI_RingGlow;//[Offset: 0x268, Size: 1]
	Image* MI_RingGlow;//[Offset: 0x270, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 1]
	float Size;//[Offset: 0x280, Size: 1]
	LinearColor Color;//[Offset: 0x284, Size: 1]
	void RefreshColor();// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_UI_Button_ReduceCD_Light(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: UI_Button_Selected_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Select_Anim;//[Offset: 0x268, Size: 1]
	Image* MI_Circle_01;//[Offset: 0x270, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 1]
	float Size;//[Offset: 0x280, Size: 1]
	LinearColor Color;//[Offset: 0x284, Size: 1]
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x2649560
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x2649560
	void ExecuteUbergraph_UI_Button_Selected_Anim(int EntryPoint, const WidgetAnimation* K2Node_Event_Animation, bool K2Node_Event_IsDesignTime, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560

--------------------------------
Class: UI_Skill_CDRefresh_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* Refresh_Anim;//[Offset: 0x268, Size: 1]
	Image* MI_Glow;//[Offset: 0x270, Size: 1]
	Image* MI_RingGlow;//[Offset: 0x278, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x280, Size: 1]
	float Size;//[Offset: 0x288, Size: 1]
	LinearColor Color;//[Offset: 0x28c, Size: 1]
	void SetColor(LinearColor Color);// 0x2649560
	void Play(bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2649560
	void RefreshColor();// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Construct();// 0x2649560
	void ExecuteUbergraph_UI_Skill_CDRefresh_Anim(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: UI_HUD_Notice_BuyResurrection_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 1]
	WidgetAnimation* ant_exit;//[Offset: 0x378, Size: 1]
	WidgetAnimation* Appear_Anim;//[Offset: 0x380, Size: 1]
	Image* Img_Txt_bg;//[Offset: 0x388, Size: 1]
	RichTextBlock* Txt_Ballte_Notice;//[Offset: 0x390, Size: 1]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x398, Size: 1]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x3a0, Size: 1]
	void Construct();// 0x2649560
	void ShowNotice(FString Text, float Duration);// 0x2649560
	void ExecuteUbergraph_UI_HUD_Notice_BuyResurrection(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560

--------------------------------
Class: BP_DI_DeathBoxA_TreasureBox_C.DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x728, Size: 1]
	SceneComponent* FX_Position;//[Offset: 0x730, Size: 1]
	SceneComponent* Charge_VFX;//[Offset: 0x738, Size: 1]
	ParticleSystemComponent*[] ChargeEffects;//[Offset: 0x740, Size: 1]
	bool ResurrectionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	LinearColor[] QualityMap;//[Offset: 0x758, Size: 1]
	ParticleSystem*[] DeadBox_Particle;//[Offset: 0x768, Size: 1]
	ParticleSystemComponent* QualityEffect;//[Offset: 0x778, Size: 1]
	int NewBoxParticle;//[Offset: 0x780, Size: 1]
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter, SCMPlayerState* OwnerPlayer, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue);// 0x2649560
	bool IsSameTeam(byte CharacterTeamID, FString CallFunc_Conv_ByteToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2649560
	void RemoveEffect(SolarCharacter* NewParam, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560
	void Add Effect(SolarCharacter* NewParam, int Temp_int_Array_Index_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetComponentLocation_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2649560
	void UserConstructionScript();// 0x2649560
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x2649560
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x2649560
	void ReceiveSetUIEnable(bool IsShow);// 0x2649560
	void ReceiveEndPlay(byte EndPlayReason);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ExecuteUbergraph_BP_DI_DeathBoxA_TreasureBox(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, const SolarCharacter* K2Node_Event_SolarChar, const SolarCharacter* K2Node_Event_SolarChar, bool K2Node_Event_IsShow, byte K2Node_Event_EndPlayReason, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2649560

--------------------------------
Class: UI_WorldMark_ReviveTeammates_C.WorldMark_ReviveTeammates.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x480, Size: 1]
	int HideDistance;//[Offset: 0x488, Size: 1]
	LinearColor[] Color;//[Offset: 0x490, Size: 1]
	LinearColor[] Color;//[Offset: 0x4a0, Size: 1]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, CharacterSkinConfig* CallFunc_GetSkinConfig_ReturnValue, SoftObjectPath CallFunc_GetSkinIcon_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x2649560
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x2649560
	void SetIcon(Widget* Content, int                                                                                                     , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void OnInitialized();// 0x2649560
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x2649560
	void ExecuteUbergraph_UI_WorldMark_ReviveTeammates(int EntryPoint, FString K2Node_Event_PlayerID, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x2649560

--------------------------------
Class: BP_SI_RebornLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 1]
	StaticMeshComponent* FX_Tag;//[Offset: 0x230, Size: 1]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x238, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 1]
	void ReceiveBeginPlay();// 0x2649560
	void Event_SetWaitingColor();// 0x2649560
	void Event_SetFinishColor();// 0x2649560
	void ExecuteUbergraph_BP_SI_RebornLine(int EntryPoint);// 0x2649560

--------------------------------
Class: UI_WorldMark_ReviveTeammatesDeathbox_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 1]
	TextBlock* Distance;//[Offset: 0x3a8, Size: 1]
	Image* Img_Bg;//[Offset: 0x3b0, Size: 1]
	Image* Img_Light;//[Offset: 0x3b8, Size: 1]
	Image* Img_Light;//[Offset: 0x3c0, Size: 1]
	Image* Img_Revival;//[Offset: 0x3c8, Size: 1]
	VerticalBox* Panel;//[Offset: 0x3d0, Size: 1]
	ScaleBox* ScaleBox;//[Offset: 0x3d8, Size: 1]
	int HideDistance;//[Offset: 0x3e0, Size: 1]
	LinearColor[] Color;//[Offset: 0x3e8, Size: 1]
	LinearColor[] Color;//[Offset: 0x3f8, Size: 1]
	FString PlayerId;//[Offset: 0x408, Size: 1]
	FString DistanceLocalString;//[Offset: 0x418, Size: 1]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x2649560
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x2649560
	FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560
	void SetIcon(Widget* Content, int                                                                                                     , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void OnInitialized();// 0x2649560
	void ExecuteUbergraph_UI_WorldMark_ReviveTeammatesDeathbox(int EntryPoint, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FText CallFunc_Get_Distance_Text_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: BPC_GM_Common_C.CustomConsoleCommandsComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	bool OpenDetailedLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	SCMPlayerState* TargetPlayer;//[Offset: 0xc0, Size: 1]
	FString[] Args;//[Offset: 0xc8, Size: 1]
	byte CommandType;//[Offset: 0xd8, Size: 1]
	int DrawCircleID;//[Offset: 0xdc, Size: 1]
	bool UseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	FString WarmGameTimeLine;//[Offset: 0xe8, Size: 1]
	MulticastInlineDelegateProperty OnNewAiCompChange;//[Size: 1]
	void                                                                                                     (bool CallFunc_IsServer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue);// 0x2649560
	void                                                                                                     (CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, FString CallFunc_Array_Get_Item, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ToBool_bool);// 0x2649560
	void InfiniteJet(FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_ToBool_bool, SolarCheatManager* K2Node_DynamicCast_AsSolar_Cheat_Manager, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default);// 0x2649560
	void SetSkillCD(enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Variable, FString CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, enum K2Node_Select_Default, byte K2Node_Select_Default);// 0x2649560
	void HPLock(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, bool CallFunc_ToBool_bool, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue);// 0x2649560
	void TPToAI(SolarCharacter*[] Character, SCMPlayerState*[] NewLocalVar, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, const FString[] K2Node_MakeArray_Array, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_ToBool_bool, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FString[] K2Node_Select_Default, int K2Node_Select_Default, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int K2Node_Select_Default, SolarCharacter* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue);// 0x2649560
	void KillAI(int NewLocalVar, SCMPlayerState*[] NewLocalVar, bool Temp_bool_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FString[] K2Node_Select_Default, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int K2Node_Select_Default);// 0x2649560
	void SpawnAI(int AIType, int Counter, int Difficulty, int count, bool CanMove, int Character, FString TargetSide, bool Temp_bool_Variable, class SolarBotAIController Temp_class_Variable, class SolarBotAIController Temp_class_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsServer_ReturnValue, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, class SolarBotAIController K2Node_Select_Default, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_GetRandomCharacter_Output, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, enum Temp_byte_Variable, enum Temp_byte_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, enum K2Node_Select_Default, Vector CallFunc_K2_GetActorLocation_ReturnValue, enum[] K2Node_MakeArray_Array, Vector CallFunc_Add_VectorFloat_ReturnValue, SolarPlayerState* CallFunc_CreateBotAISingle_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int K2Node_Select_Default, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool, int CallFunc_Conv_StringToInt_ReturnValue);// 0x2649560
	void OnRep_WarmGameTimeLine();// 0x2649560
	void OnRep_UseNewAiComp();// 0x2649560
	void EggAbility(bool CallFunc_IsServer_ReturnValue, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void DrawPoisonCircleInClient(int Index, int Temp_int_Array_Index_Variable, const FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, Vector CallFunc_Get_Safe_Area_Center_Pos, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_VectorToString_ReturnValue, int[] CallFunc_Map_Keys_Keys, Vector CallFunc_Add_VectorVector_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Conv_IntToFloat_ReturnValue);// 0x2649560
	void OpenDetailLog(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, bool K2Node_SwitchString_CmpSuccess);// 0x2649560
	void                                                                                                     (bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue);// 0x2649560
	void                                                                                                     (bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue);// 0x2649560
	void GetCommandType(FString Command, out byte Type, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2649560
	void SetCharacter(SCMPlayerState* Player, int CharacterId, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, const SolarTablesData_Skin CallFunc_GetRowData_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2649560
	void OnLoaded_C6AD5CEF49C118922616E194AD23CE46(class Object Loaded);// 0x2649560
	void OnLoaded_518ADE834F1B5CC1BB900E9CF5982B48(class Object Loaded);// 0x2649560
	void ExecGMCommand(FString CommandParameters, out const FString[] ArgsStr);// 0x2649560
	void [s]OnCommandExec(byte CommandType, SCMPlayerState* PlayerState, out const FString[] Args);// 0x2649560
	void Event_DrawPoisonCircleInClient(float Radius, Vector Center);// 0x2649560
	void Event_ClearPoisonCircleInClient();// 0x2649560
	void [CS]OnCommandExec();// 0x2649560
	void ExecuteUbergraph_BPC_GM_Common(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, FString K2Node_Event_CommandParameters, const FString[] K2Node_Event_ArgsStr, byte K2Node_CustomEvent_CommandType, SCMPlayerState* K2Node_CustomEvent_PlayerState, const FString[] K2Node_CustomEvent_Args, byte CallFunc_GetCommandType_Type, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float K2Node_CustomEvent_Radius, Vector K2Node_CustomEvent_Center, MiniMapUMG_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, MiniMapUMG_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MiniMapUMG_C* CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, BPC_WarmGame_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_ToBool_bool, FString CallFunc_Array_Get_Item, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, bool CallFunc_ToBool_bool, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, MiniMapUMG_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_AddCircle_ReturnValue, int CallFunc_Max_ReturnValue, class Object Temp_class_Variable, bool CallFunc_IsServer_ReturnValue, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, class Object K2Node_CustomEvent_Loaded, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, const enum[] K2Node_MakeArray_Array, Transform CallFunc_MakeTransform_ReturnValue, const byte[] Temp_byte_Variable, FString CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Array_Get_Item, const FString[] Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsAIPlayer_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Array_Get_Item, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, SoftClassPath CallFunc_MakeSoftClassPath_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, class Object CallFunc_Conv_SoftClassPathToSoftClassRef_ReturnValue, class Object K2Node_CustomEvent_Loaded, SoftClassPath CallFunc_MakeSoftClassPath_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, class Object CallFunc_Conv_SoftClassPathToSoftClassRef_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, FString CallFunc_Array_Get_Item, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_WarmGameLogic_NoramlWarmGame_C* CallFunc_FinishSpawningActor_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarPoisonDamageEvent K2Node_MakeStruct_SolarPoisonDamageEvent, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, SolarPointDamageEvent K2Node_MakeStruct_SolarPointDamageEvent);// 0x2649560
	void OnNewAiCompChange__DelegateSignature();// 0x2649560

--------------------------------
Class: CustomConsoleCommandsComponent.ActorComponent.Object
	void ExecGMCommand(FString CommandParameters, out const FString[] ArgsStr);// 0x2649560

--------------------------------
Class: SolarCheatManager.CheatManager.Object
	SoftObjectPath VehicleSpawnerMarkWidgetPath;//[Offset: 0x3d8, Size: 1]
	MapMarkBase*[] VehicleSpawnerMarks;//[Offset: 0x3f0, Size: 1]
	SoftObjectPath PSOGatherCubeBPAssetPath;//[Offset: 0x400, Size: 1]
	float PSOGatherCubeDistanceToCamera;//[Offset: 0x418, Size: 1]
	FString PSOGatherBPHuntAssetPath;//[Offset: 0x420, Size: 1]
	FString PSOGatherBPTutorialAssetPath;//[Offset: 0x430, Size: 1]
	SoftObjectPath AirShipBPAssetPath;//[Offset: 0x488, Size: 1]
	void StopEffectScreen(int InHandle);// 0x21228a0
	void StopEffectActor(int InHandle);// 0x2122810
	void StartPSOGatheringiOSTutorial();// 0x8f2720
	void StartPSOGatheringiOSHunt();// 0x8f2720
	void StartPSOGathering();// 0x21227f0
	void StartEffectScreen(FString RowName);// 0x2122750
	void StartEffectActor(FString RowName);// 0x21226b0
	void SpawnVehicleWithVehicleID(const int VehicleID);// 0x2122620
	void SpawnVehicle(const int SpawnID);// 0x2122590
	void SpawnTreasureBox(const int TreasureBoxID);// 0x2122500
	void SpawnSolarRadar(FString BpPath);// 0x2122460
	void SpawnPSOGatherCube();// 0x2122440
	void SpawnOutcomeContent(const int OutcomeID);// 0x21223b0
	void SpawnChargingPile(FString BpPath);// 0x2122310
	void SpawnAirdrop(const int AirdropID);// 0x2122280
	void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x2122080
	void SolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x2121fb0
	void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x2121e50
	void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x2121c70
	void SolarTestReportAbnormalPlayerWeapon(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x21219c0
	void SolarTestReportAbnormalPlayerVehicle(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x2121760
	void SolarTestReportAbnormalPlayer(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x2121610
	void SolarTeleport(const float DestLocationX, const float DestLocationY, const float DestLocationZ);// 0x21214f0
	void SolarServerCmd(FString Cmd);// 0x2121450
	void SolarGMSetPlayerValueInternal(FString InType, FString InValue);// 0x21201b0
	void SolarGM_WeaponShowCurrentInfo();// 0x8f2720
	void SolarGM_ValidateAirline(float InBufferX, float InBufferY, float InBufferZ);// 0x2121330
	void SolarGM_UnforbidCharacterUniqueSkillCD();// 0x8f2720
	void SolarGM_TestEnsureMsgWithBP();// 0x8f2720
	void SolarGM_TestEnsureMsg();// 0x8f2720
	void SolarGM_TestCrashWithBP();// 0x8f2720
	void SolarGM_TestCrash();// 0x8f2720
	void SolarGM_TeleportToBotAI(uint32 CtrlIndex);// 0x21212a0
	void SolarGM_StopBotAIBehaviorTree(bool bStop);// 0x2121210
	void SolarGM_SpawnBotAIAtCrosshairByNum(int Num);// 0x2121180
	void SolarGM_ShowEmojiBubble(int EmojiID);// 0x21210f0
	void SolarGM_ShowAspectRatio(float InDuration);// 0xb44b00
	void SolarGM_SetWeaponAdditionalBaseDamage(float AdditionalBaseDamage, bool bSelfOnly);// 0x2121010
	void SolarGM_SetPlayerValue(FString InType, FString InValue);// 0x2120f10
	void SolarGM_SetPlayerLevel(int InLv);// 0x2120e80
	void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight);// 0x2120db0
	void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ);// 0x2120940
	void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD);// 0xb44b00
	void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed);// 0x2120db0
	void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x2120c30
	void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x2120c30
	void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x2120c30
	void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(FString BodyType, FString status, FString CharacterTagStr, float ExtentX, float ExtentY);// 0x2120a60
	void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(FString BodyType, FString status, FString CharacterTagStr, float ExtentX, float ExtentY);// 0x2120a60
	void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale);// 0x2120940
	void SolarGM_SetAssistAimBaseFollowSpeed(FString StatusTagStr, float HorizontalSpeed, float VerticalSpeed);// 0x2120810
	void SolarGM_RestoreRecommend();// 0x8f2720
	void SolarGM_ResetCharacterUniqueSkillCD();// 0x8f2720
	void SolarGM_PlayerUpgrade(int InLv);// 0x2120780
	void SolarGM_MarkVehicleSpawnLocationInMap(int Index);// 0x21206f0
	void SolarGM_KillAllAI(bool KillBot);// 0x2120660
	void SolarGM_GainExperience(int InExp);// 0x21205d0
	void SolarGM_ClearCharacterUniqueSkillCD();// 0x8f2720
	void SolarGM_CleanUpShootingTarget();// 0x8f2720
	void SolarGM_CharacterUpgradeBattleUpgradeEffectLevel(int UpgradeTo);// 0x15b05a0
	void SolarGM_CharacterSuicide();// 0x8f2720
	void SolarGM_CharacterSelectBattleUpgradeEffect(int Level, int SelectedIndex);// 0x2120500
	void SolarGM_CharacterEnableDebugAutoMove(bool bEnabled, float SwitchInterval);// 0x2120430
	void SolarGM_CharacterDamageSelf(int InDamage);// 0x15b05a0
	void SolarGM_CharacterChangeTailFlameId(int InTailFlameId);// 0x15b05a0
	void SolarGM_CharacterChangeBagId(int InBagId);// 0x15b05a0
	void SolarGM_CallAirdropByAirShipHere();// 0x2120410
	void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y);// 0x2120340
	void SolarGM_ApplyVehicleSkin(int SkinId);// 0x21202b0
	void SolarAsyncLoad(FString ResPath);// 0x2120110
	void SolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x211fef0
	void SolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x211fc40
	void SolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x211f9e0
	void SolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x211f840
	void SolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float LifeTime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x211f620
	void SetGameplayVibrateIntensity(FString Category, FString Intensity);// 0x211f520
	void ExecuteGMCommandsInCustomMode(FString CommandParameters, FString ArgsStr);// 0x211f180
	void BookmarkEnd(FString Message);// 0x211ee70
	void BookmarkBegin(FString Message);// 0x211edd0

--------------------------------
Class: MiniMapUMG_C.MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6f8, Size: 1]
	WidgetAnimation* Anim_Exit;//[Offset: 0x700, Size: 1]
	HorizontalBox* Airline;//[Offset: 0x708, Size: 1]
	UI_DrawLinePanel_C* DrawLinePanel;//[Offset: 0x710, Size: 1]
	Image* Img_Airdrop;//[Offset: 0x718, Size: 1]
	CanvasPanel* MapRotate;//[Offset: 0x720, Size: 1]
	CanvasPanel* Panel_Capsule;//[Offset: 0x728, Size: 1]
	Image* Route_line;//[Offset: 0x730, Size: 1]
	Image* Route_line_end;//[Offset: 0x738, Size: 1]
	Image* Route_line_start;//[Offset: 0x740, Size: 1]
	CanvasPanel* RTIconLayer;//[Offset: 0x748, Size: 1]
	Image* SolarCapsule;//[Offset: 0x750, Size: 1]
	float RefreshTime;//[Offset: 0x758, Size: 1]
	<int,PlayerMark_C*> PlayerMarkMap;//[Offset: 0x760, Size: 1]
	MarkIcon_C*[] MarkersPool;//[Offset: 0x7b0, Size: 1]
	Vector2D MapScaleRange;//[Offset: 0x7c0, Size: 1]
	float SliderBarValue;//[Offset: 0x7c8, Size: 1]
	Vector2D FOVOffset;//[Offset: 0x7cc, Size: 1]
	Vector2D SizeSet;//[Offset: 0x7d4, Size: 1]
	Vector2D VectorCenter;//[Offset: 0x7dc, Size: 1]
	Vector2D RealVector;//[Offset: 0x7e4, Size: 1]
	int Index;//[Offset: 0x7ec, Size: 1]
	<int,FString> PlayerIconMap;//[Offset: 0x7f0, Size: 1]
	<int,FString> PlayerOutOfMapMap;//[Offset: 0x840, Size: 1]
	MarkIcon_C* VehicleMark;//[Offset: 0x890, Size: 1]
	float MiniFOV;//[Offset: 0x898, Size: 1]
	MapMarkBase*[] MarkList;//[Offset: 0x8a0, Size: 1]
	bool IsCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	FString GetModuleName();// 0x2649560
	void ClearAirline(bool bFaded, TimerHandle CallFunc_K2_SetTimer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2649560
	void CloseAirline();// 0x2649560
	void InitAirline(MiniMapAirlineData InData, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x2649560
	void InitCapsule(MiniMapAirlineData InData, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	void SetAirlineType(MiniMapAirlineData InData, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x2649560
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor, int CallFunc_AddDotLine_ReturnValue);// 0x2649560
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, MapMarkBase* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2649560
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, MapMarkBase* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Add_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x2649560
	void DisableOneFinger(PointerEvent Event, BP_MapInputManager_C* K2Node_DynamicCast_AsBP_Map_Input_Manager, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	void GetTwoFingerDistance(out float Distance, Vector2D FirstFinger, <int,Vector2D> FingerMapRef, int[] TuchedFingers, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Distance2D_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void UpdateAirlineData(float MovePercent, Vector2D InIconPos, float CallFunc_Subtract_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2649560
	void InitMapAirline(MiniMapAirlineData AirlineData);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x2649560
	void RemoveDotLineOnMap(int DotLineID);// 0x2649560
	void Event_EndOfInitialization();// 0x2649560
	void Destruct();// 0xb43660
	void FormatAirline(float InScaleValue);// 0x2649560
	void ExecuteUbergraph_MiniMapUMG(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Event_IsDesignTime, MapMarkBase* K2Node_Event_InMapMark, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int K2Node_Event_DotLineID, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, PlayerMark_C*[] CallFunc_Map_Values_Values, PlayerMark_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerNav_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_InScaleValue, Vector2D CallFunc_MakeVector2D_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerMark_C* CallFunc_Create_ReturnValue, int Temp_int_Array_Index_Variable, MapMarkBase* CallFunc_Array_Get_Item, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapData MiniMapData;//[Offset: 0x3b4, Size: 1]
	bool AutoOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool OnCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool WithIconScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 1]
	float AspectRatio;//[Offset: 0x3d0, Size: 1]
	enum CurrentState;//[Offset: 0x3d4, Size: 1]
	Vector2D SelfNavSlotSize;//[Offset: 0x3d8, Size: 1]
	<int,PlayerNavWidget*> PlayerNavMap;//[Offset: 0x3e0, Size: 1]
	SizeBox* MapFOVSizeBox;//[Offset: 0x430, Size: 1]
	CanvasPanel* MapOffset;//[Offset: 0x438, Size: 1]
	SolarImage* SolarImageMap;//[Offset: 0x440, Size: 1]
	CanvasPanel* ImageFrameLayer;//[Offset: 0x448, Size: 1]
	CanvasPanel* MarkerLayer;//[Offset: 0x450, Size: 1]
	ScaleBox* MapScale;//[Offset: 0x458, Size: 1]
	CanvasPanel* RenderTargetCanvas;//[Offset: 0x460, Size: 1]
	SolarImage* Img_EMP;//[Offset: 0x468, Size: 1]
	MeshRectangleWidget* IconMeshRectangleWidget;//[Offset: 0x470, Size: 1]
	MeshRectangleWidget* AnimIconMeshWidget;//[Offset: 0x478, Size: 1]
	ConfigMiniMapMeshWidgetData MiniMapMeshWidgetConfigData;//[Offset: 0x480, Size: 1]
	PlayerNavWidget* SelfNav;//[Offset: 0x498, Size: 1]
	Vector2D CurrentMapOffset;//[Offset: 0x4a0, Size: 1]
	Vector2D MapIconScale;//[Offset: 0x4a8, Size: 1]
	SolarMapManager* MapMgr;//[Offset: 0x4b0, Size: 1]
	MiniMapBGWidget* MapImageWidget;//[Offset: 0x4b8, Size: 1]
	bool bBelongToBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	float ClampMarkTickRate;//[Offset: 0x4c4, Size: 1]
	<enum,AirdropMeshWidgetData> AirdropMeshWidgetDataMap;//[Offset: 0x4c8, Size: 1]
	float AdjustMapRatio;//[Offset: 0x518, Size: 1]
	float AdjustWorldDis;//[Offset: 0x51c, Size: 1]
	float AirdropAnimOutsideScale;//[Offset: 0x520, Size: 1]
	float AirdropClearTime;//[Offset: 0x524, Size: 1]
	ConfigMiniMapMeshWidgetData ReviveMarkNormalParms;//[Offset: 0x52c, Size: 1]
	ConfigMiniMapMeshWidgetData ReviveMarkAnimParms;//[Offset: 0x544, Size: 1]
	float ReviveMarkAnimTime;//[Offset: 0x55c, Size: 1]
	float IconSizeFormatInterval;//[Offset: 0x560, Size: 1]
	bool bUpdateSelfNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	CurveFloat* CacheFOVScaleCurve;//[Offset: 0x5c8, Size: 1]
	void VehicleClear(bool IsOwner);// 0x2649560
	void UpdateVehicleModeMapFOV();// 0x2075270
	void UpdatePoisonEffect(float PosX, float PosY, float Radius);// 0x2075150
	void UpdateMeshWidgetMarkSlotSize(FString MarkKey, out const Vector2D InMarkSlotSize);// 0x2075060
	void UpdateMeshWidgetMarkColorOpacityIndex(FString MarkKey, const int InColorOpacityIndex);// 0x2074f80
	void UpdateMeshWidgetIconTexId(FString MarkKey, const int InIconTexId);// 0x2074ea0
	void UpdateEmp();// 0x2074e80
	void StopReviveTeammateAnim(FString InKey);// 0x2074de0
	FString SpawnMeshWidgetMapMarkInfo(enum InMarkType, out const Vector2D InMarkPos, FString InMarkName, int InMarkIndex);// 0x2074c00
	void SetMapFOVBySpeed(float InSpeed);// 0x2074b80
	void SetMapFOVAutoOffset(float InNewFOV);// 0x2074b00
	void SetMapFOV(float InNewFOV, out const Vector2D InScaleCenter);// 0x2074a20
	void SetBelongToBigMap(bool bIsBelongToBigMap);// 0x2074990
	void SetAirdropMeshWidgetStatus(FString InKey, enum InNewStatus);// 0x20748b0
	void RemoveMeshWidgetMark(FString MarkKey);// 0x2074790
	void RemoveAllNav();// 0x2074770
	void RegisterDataProvider();// 0x2074750
	void RefreshLastVehicleLocation();// 0x2649560
	void PlayReviveTeammateAnim(FString InKey, byte InColorIdx);// 0x2074670
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x20745a0
	void OnReviveWorldMarkRemoved(FString InPlayerID);// 0x2074500
	void OnReviveWorldMarkPlayAnim(SolarPlayerState* InPlayerState);// 0x2649560
	void OnReviveWorldMarkCreated(FString InPlayerID);// 0x2074460
	void OnRemoveReviveWorldMark(SolarPlayerState* InPlayerState);// 0x2649560
	void OnRemoveAllReviveWorldMark();// 0x2649560
	void OnMiniMapDataInitialized();// 0x2074440
	void OnFOVScaleChangedByPoison(CurveFloat* InCurve);// 0x20743b0
	void OnCreateReviveWorldMark(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x2649560
	void OnAllReviveWorldMarkRemoved();// 0x2074390
	void KeepSelfInTheCenter();// 0x2074270
	bool IsReviveWorldMarkCreated(FString InPlayerID);// 0x2074130
	void InitMinFOV(float InFOV);// 0x20740b0
	void InitMapFovAndSize();// 0x2649560
	void InitFovAndSize();// 0x2074090
	void IconSizeFormat();// 0x2074070
	PlayerNavWidget* GetSelfNav();// 0x2074050
	Vector2D GetMinAndMaxFOV();// 0x2074020
	SolarPlayerState* GetCameraFocusedCharacterState();// 0x2073ff0
	void FormatAirline(float InScaleValue);// 0x2649560
	void ClearVehicleMarkWidget();// 0x2649560
	void ClearPlayerMarkPoint();// 0x2649560
	void ClearMiniMapMarkWidget();// 0x2649560
	void AdjustMapOffset(Vector2D MapLocation);// 0x20739e0
	FString AddMeshWidgetMark(out const Vector2D InPosition, out const Vector2D InMarkSlotSize, const enum InMarkType, const float InRenderTransformScaleX, FString InMarkName, const int InMarkIndex);// 0x2073790

--------------------------------
Class: PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetSwitcher* IconSwitcher;//[Offset: 0x348, Size: 1]
	CanvasPanel* PlayerNav;//[Offset: 0x350, Size: 1]
	CanvasPanel* PlayerOutOfMapNav;//[Offset: 0x358, Size: 1]
	Image* FOV;//[Offset: 0x360, Size: 1]
	Image* ImageRoleNav;//[Offset: 0x368, Size: 1]
	TextBlock* PlayerOrder;//[Offset: 0x370, Size: 1]
	void SwitchPlayerNav(bool bOutOfBounds);// 0x208d9b0
	void SetBrushResourceObject(Object* InSprite);// 0x208d3c0
	void ResetPlayerNav();// 0x2649560
	void ReceivePlayerDead();// 0x2649560
	void OnAllPlayerNavVisibilityChanged(bool bVisible);// 0x208b310

--------------------------------
Class: MiniMapData
	bool bUseAsBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float MinFOV;//[Offset: 0x4, Size: 1]
	float MaxFOV;//[Offset: 0x8, Size: 1]
	float CurrentFOV;//[Offset: 0xc, Size: 1]
	Vector2D MapSize;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MeshRectangleWidget.MeshWidgetUWidget.Widget.Visual.Object
	MaterialInterface* BaseMaterial;//[Offset: 0x148, Size: 1]
	int NumFloat4PerInstance;//[Offset: 0x150, Size: 1]
	void SetInstanceNum(int NewNum);// 0x15b05a0
	void ModifyInstanceNum(int dNum);// 0x15b05a0
	void InitUnitTestProvider();// 0x8f2720

--------------------------------
Class: MeshWidgetUWidget.Widget.Visual.Object

--------------------------------
Class: ConfigMiniMapMeshWidgetData
	float TimeSpeed;//[Offset: 0x0, Size: 1]
	byte IconTexId;//[Offset: 0x4, Size: 1]
	byte ColorOpacityIndex;//[Offset: 0x5, Size: 1]
	Vector2D OpacityCoeff;//[Offset: 0x8, Size: 1]
	Vector2D ScaleAndRipplingCoeff;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MiniMapBGWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarImage* Img_Map;//[Offset: 0x348, Size: 1]

--------------------------------
Class: AirdropMeshWidgetData
	ConfigMiniMapMeshWidgetData IconData;//[Offset: 0x0, Size: 1]
	ConfigMiniMapMeshWidgetData DiffuseData;//[Offset: 0x18, Size: 1]
	ConfigMiniMapMeshWidgetData FlashData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: BP_MapInputManager_C.WidgetInputManager.Object
	void On Input Leave(PointerEvent Event, PointerEvent tmpEvent, bool CallFunc_PointerEvent_IsTouchEvent_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, bool CallFunc_Map_Contains_ReturnValue);// 0x2649560

--------------------------------
Class: PlayerMark_C.PlayerMark.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 1]
	int OrderId;//[Offset: 0x288, Size: 1]
	Color Color1;//[Offset: 0x28c, Size: 1]
	Color Color2;//[Offset: 0x290, Size: 1]
	Color Color3;//[Offset: 0x294, Size: 1]
	Color Color4;//[Offset: 0x298, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetOrder(int OrderId, bool K2Node_SwitchInteger_CmpSuccess);// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void ExecuteUbergraph_PlayerMark(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x2649560

--------------------------------
Class: PlayerMark.UserWidget.Widget.Visual.Object
	Image* PlayerMarkImage;//[Offset: 0x260, Size: 1]
	TextBlock* Length;//[Offset: 0x268, Size: 1]
	SolarMapManager* MapManager;//[Offset: 0x270, Size: 1]
	Vector2D MarkPoint;//[Offset: 0x278, Size: 1]

--------------------------------
Class: PlayerNav_C.PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 1]
	Image* Arror;//[Offset: 0x388, Size: 1]
	Image* OutOfMapArror;//[Offset: 0x390, Size: 1]
	Image* OutOfMapImageRole;//[Offset: 0x398, Size: 1]
	int OrderId;//[Offset: 0x3a0, Size: 1]
	SlateColor Color1;//[Offset: 0x3a8, Size: 1]
	SlateColor Color2;//[Offset: 0x3d0, Size: 1]
	SlateColor Color3;//[Offset: 0x3f8, Size: 1]
	SlateColor Color4;//[Offset: 0x420, Size: 1]
	LinearColor DeadColor;//[Offset: 0x448, Size: 1]
	bool isOutOfMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	int EditorOrder;//[Offset: 0x45c, Size: 1]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	float Rotate;//[Offset: 0x464, Size: 1]
	bool HasDeadHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetOrder(int OrderId, bool K2Node_SwitchInteger_CmpSuccess);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ResetPlayerNav();// 0x2649560
	void ReceivePlayerDead();// 0x2649560
	void ExecuteUbergraph_PlayerNav(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: UI_DrawLinePanel_C.DrawLinePanel.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: DrawLinePanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	float MapSize;//[Offset: 0x348, Size: 1]
	float CurrentFOV;//[Offset: 0x34c, Size: 1]
	LinearColor SafeAreaColor;//[Offset: 0x388, Size: 1]
	LinearColor PosionCircleColor;//[Offset: 0x398, Size: 1]
	LinearColor DotLineColor;//[Offset: 0x3a8, Size: 1]
	LinearColor AirlineProgressColor;//[Offset: 0x3b8, Size: 1]
	LinearColor CapsuleBackgroundColor;//[Offset: 0x3c8, Size: 1]
	LinearColor AirdropBackgroundColor;//[Offset: 0x3d8, Size: 1]
	float AirdropAirlineSizeY;//[Offset: 0x3e8, Size: 1]
	float MaterialCircleSize;//[Offset: 0x3ec, Size: 1]
	float DotLineDottedLength;//[Offset: 0x3f0, Size: 1]
	float DotLineDottedInterval;//[Offset: 0x3f4, Size: 1]
	DotLineData[] DotLineDataList;//[Offset: 0x400, Size: 1]
	CircleData[] CircleDataList;//[Offset: 0x410, Size: 1]
	SolarMapManager* MapManager;//[Offset: 0x420, Size: 1]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0x428, Size: 1]
	SoftObjectPath CircleMaterialPath;//[Offset: 0x430, Size: 1]
	SoftObjectPath DottedLineMaterialPath;//[Offset: 0x448, Size: 1]
	MaterialInstanceDynamic*[] CircleMaterialInstanceArray;//[Offset: 0x460, Size: 1]
	MaterialInstanceDynamic*[] DottedLineMaterialInstanceArray;//[Offset: 0x470, Size: 1]
	float InitFOV;//[Offset: 0x480, Size: 1]
	void RemoveDotLine(int DotLineID);// 0x203ea20
	void RemoveCircle(int CircleID);// 0x203e990
	void OnAirlineUpdate(out const Vector2D InNewPos);// 0x203dc50
	void OnAirlineSet(const MiniMapAirlineData InData);// 0x203db50
	void OnAirlineClear();// 0x203db30
	void InitializePanelFOV(float InFOV);// 0x203d860
	int AddDotLine(Actor* StartPointActor, Actor* EndPointActor, LinearColor Color);// 0x203d540
	int AddCircle(Vector2D Center, float Radius, LinearColor Color);// 0x203d420

--------------------------------
Class: DotLineData
	Actor* StartActor;//[Offset: 0x0, Size: 1]
	Actor* EndActor;//[Offset: 0x8, Size: 1]
	LinearColor DotLineColor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CircleData
	Vector2D Center;//[Offset: 0x0, Size: 1]
	float Radius;//[Offset: 0x8, Size: 1]
	LinearColor LineColor;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MarkIcon_C.MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3c0, Size: 1]
	bool IsAddToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	Object* Texture;//[Offset: 0x3d0, Size: 1]
	int OrderId;//[Offset: 0x3d8, Size: 1]
	Color Color1;//[Offset: 0x3dc, Size: 1]
	Color Color2;//[Offset: 0x3e0, Size: 1]
	Color Color3;//[Offset: 0x3e4, Size: 1]
	Color Color4;//[Offset: 0x3e8, Size: 1]
	FString GetModuleName();// 0x2649560
	void SetOutWindowStateOrder(int OrderId, bool K2Node_SwitchInteger_CmpSuccess, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x2649560
	void PreConstruct(bool IsDesignTime);// 0x2649560
	void ExecuteUbergraph_MarkIcon(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2649560

--------------------------------
Class: MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	FString AtlasPath;//[Offset: 0x388, Size: 1]
	FString SpriteType;//[Offset: 0x398, Size: 1]
	Image* ImageMarker;//[Offset: 0x3a8, Size: 1]
	void SetTransparent(float TransparentPercent);// 0x20711b0
	void SetMarkerType(enum Type, bool bRefreshSlot, bool bNeedSyncLoadIcon);// 0x2070f40

--------------------------------
Class: BP_WarmGameLogic_NoramlWarmGame_C.BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	<int,Vector2D>                                                                                                     ;//[Offset: 0x240, Size: 1]
	<int,Vector2D>                                                                                                     ;//[Offset: 0x290, Size: 1]
	DataTable* BattleTimelineConfig;//[Offset: 0x2e0, Size: 1]
	<int,Vector2D>                                                                                                     ;//[Offset: 0x2e8, Size: 1]
	int AirlineID;//[Offset: 0x338, Size: 1]
	Vector[] PoisonCircleCenterArray;//[Offset: 0x340, Size: 1]
	Int32Range                                                                                                     ;//[Offset: 0x350, Size: 1]
	void                                                                                                     (BP_MapInfoComponent_C* InputPin, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2649560
	void                                                                                                     (BP_MapInfoComponent_C* MapInfo, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int[] CallFunc_Map_Keys_Keys, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Array_Length_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_Airline CallFunc_GetRowData_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, AirlineData K2Node_MakeStruct_AirlineData);// 0x2649560
	void Event_ExecLogic();// 0x2649560
	void ExecuteUbergraph_BP_WarmGameLogic_NoramlWarmGame(int EntryPoint, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: SolarPoisonDamageEvent.SolarSystemDamage.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: SolarSystemDamage.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: UI_MapMark_ReviveTeammates_C.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x388, Size: 1]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x390, Size: 1]
	Image* Img_Bg;//[Offset: 0x398, Size: 1]
	Image* Img_Light;//[Offset: 0x3a0, Size: 1]
	Image* Img_Light;//[Offset: 0x3a8, Size: 1]
	Image* Img_Revival;//[Offset: 0x3b0, Size: 1]
	VerticalBox* Panel;//[Offset: 0x3b8, Size: 1]
	ScaleBox* ScaleBox;//[Offset: 0x3c0, Size: 1]
	int HideDistance;//[Offset: 0x3c8, Size: 1]
	LinearColor[] Color;//[Offset: 0x3d0, Size: 1]
	LinearColor[] Color;//[Offset: 0x3e0, Size: 1]
	FString PlayerId;//[Offset: 0x3f0, Size: 1]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default);// 0x2649560
	void SetIcon(Widget* Content, int                                                                                                     , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2649560
	void Event_PlayAnim();// 0x2649560
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2649560
	void ExecuteUbergraph_UI_MapMark_ReviveTeammates(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0x2649560

--------------------------------
Class: ABP_SolarCharacter_FPP_C.AnimInstance.Object
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x268, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x298, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2c0, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e8, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x360, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x390, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x408, Size: 1]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x438, Size: 1]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4e8, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x530, Size: 1]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5a8, Size: 1]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x648, Size: 1]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x668, Size: 1]
	SolarCharacter* SolarCharacter;//[Offset: 0x688, Size: 1]
	bool IsScopeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	float ScopeFadeTime;//[Offset: 0x694, Size: 1]
	bool IsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	bool ShootDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 1]
	float Horizontal;//[Offset: 0x69c, Size: 1]
	float Vertical;//[Offset: 0x6a0, Size: 1]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	float K2Node_Event_DeltaTimeX;//[Offset: 0x6a8, Size: 1]
	SolarCharacter* K2Node_DynamicCast_AsSolar_Character;//[Offset: 0x6b0, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_768665AB4918F96C9C3C8F92EF926EE4();// 0x15647e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_01B670704C4A0F8E519CD8A192C5E1D6();// 0x1564660
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendListByBool_F136F87A4DDCD2678555C9B592100DA7();// 0x15645c0
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);// 0x15646c0
	void BlueprintInitializeAnimation();// 0x1570b30
	void BlueprintBeginPlay();// 0x1564800
	void AnimGraph(out PoseLink bpp__AnimGraph__pf);// 0x15708d0

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 1]
	FName Name;//[Offset: 0x20, Size: 1]
	FName Group;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x30, Size: 1]
	float PlayRateBasis;//[Offset: 0x38, Size: 1]
	float PlayRate;//[Offset: 0x3c, Size: 1]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x40, Size: 1]
	float StartPosition;//[Offset: 0x70, Size: 1]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x10, Size: 1]
	byte GroupRole;//[Offset: 0x14, Size: 1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float BlendWeight;//[Offset: 0x18, Size: 1]
	float InternalTimeAccumulator;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	InputRange InRange;//[Offset: 0x4, Size: 1]
	InputRange OutRange;//[Offset: 0xc, Size: 1]
	float Scale;//[Offset: 0x14, Size: 1]
	float Bias;//[Offset: 0x18, Size: 1]
	float ClampMin;//[Offset: 0x1c, Size: 1]
	float ClampMax;//[Offset: 0x20, Size: 1]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 1]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 1]
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 1]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 1]
	FName SlotName;//[Offset: 0x20, Size: 1]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 1]
	float[] BlendTime;//[Offset: 0x20, Size: 1]
	enum TransitionType;//[Offset: 0x30, Size: 1]
	enum BlendType;//[Offset: 0x31, Size: 1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 1]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: S_AiItem
	enum ItemType_2_314140C646418678444E9DB5DBB9CB11;//[Offset: 0x0, Size: 1]
	int ItemID_5_9414785640F928576D3321856C20F5FD;//[Offset: 0x4, Size: 1]
	int Count_7_49130AA64D9339657AC5579D1E066466;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SolarGameModeWeaponAction.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnCompleted;//[Size: 1]
	static SolarGameModeWeaponAction* SetCharacterWeaponBySeq(Object* WorldContextObject, SolarCharacter* TargetCharacter, const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x20ab4b0
	void OnWeaponCreated(byte SlotIndex, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x20a9860
	void CreateWeaponAsync(const byte SlotIndex, bool bDestroyPrevWeapon, out const SolarItemData InItemData, SolarBackpackComponent* InSolarBackpackComponent);// 0x20a2a70

--------------------------------
Class: GameMapElementManager.GameManagerBase.Info.Actor.Object
	<FString,SCMMapElementBase*> MapElementListWithID;//[Offset: 0x228, Size: 1]
	SCMMapElementBase*[] MapElementList;//[Offset: 0x278, Size: 1]
	SCMPlayerStart*[] PlayerStartList;//[Offset: 0x288, Size: 1]
	void OnAddNewMapElement(Actor* InNewActor);// 0x204b050

--------------------------------
Class: SCMPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x258, Size: 1]
	FString Side;//[Offset: 0x260, Size: 1]
	FString Job;//[Offset: 0x270, Size: 1]
	FString ElementID;//[Offset: 0x280, Size: 1]
	enum Type;//[Offset: 0x290, Size: 1]
	enum State;//[Offset: 0x291, Size: 1]
	enum Visibility;//[Offset: 0x292, Size: 1]
	FName ElementName;//[Offset: 0x294, Size: 1]
	Vector[] PlayerLocations;//[Offset: 0x2a0, Size: 1]
	enum SetElementVisibility(const enum NewType);// 0x2096600
	enum SetElementState(const enum NewState);// 0x20964e0
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x2649560
	void OnElementStateChanged(const enum CurrentState);// 0x2649560

--------------------------------
Class: GameLevelManager.GameManagerBase.Info.Actor.Object
	FString DesiredLoadLevel;//[Offset: 0x248, Size: 1]
	FString[] DesiredLoadElementLevels;//[Offset: 0x268, Size: 1]
	FString[] DesiredUnLoadElementLevels;//[Offset: 0x278, Size: 1]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x330, Size: 1]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x380, Size: 1]
	FString[] LoadingElementLevelNames;//[Offset: 0x430, Size: 1]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x440, Size: 1]
	GameMapElementManager* MapElementManager;//[Offset: 0x468, Size: 1]
	void SetMinimapFootprintVisible(bool bVisible);// 0xb43660
	void OnStreamingLevelLoaded();// 0x204b750
	void OnScoutPlayerDepart();// 0x204b730
	void OnRep_DesiredUnLoadElementLevels();// 0x204b710
	void OnRep_DesiredLoadLevel();// 0x204b6f0
	void OnRep_DesiredLoadElementLevels();// 0x204b6d0
	void OnLevelLoaded();// 0x204b6b0
	void OnElementStreamingLevelUnLoaded();// 0x204b1d0
	void OnElementStreamingLevelLoaded();// 0x204b1b0
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x204b0e0
	void LevelManagerTick();// 0x204b030
	int GetCurrentMapID();// 0x204ab90
	FString GetCurrentLevel();// 0x204aad0

--------------------------------
Class: BP_PlayerState_BattleRoyaleMap01_C.BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: BP_SolarItemRoot_C.SolarItemRootActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 1]

--------------------------------
Class: BP_GameState_BattleRoyaleMap01_C.BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: BP_PBagsTrail_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 1]
	ParticleSystemComponent* FX_PowerBag_WallRunLoop;//[Offset: 0x288, Size: 1]
	ParticleSystemComponent* FX_PowerBag_Trail;//[Offset: 0x290, Size: 1]
	ParticleSystemComponent* FX_PowerBag_DropSlowDown;//[Offset: 0x298, Size: 1]
	ParticleSystemComponent* FX_PowerBag_SkyDivingLanding;//[Offset: 0x2a0, Size: 1]
	SceneComponent* VFX;//[Offset: 0x2a8, Size: 1]
	float TrailFade_Size_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b0, Size: 1]
	byte TrailFade__Direction_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b4, Size: 1]
	TimelineComponent* TrailFade;//[Offset: 0x2b8, Size: 1]
	void OnWallRun();// 0x2649560
	void BackpackSFXEnd();// 0x2649560
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal, Rotator CallFunc_MakeRotFromZ_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0x2649560
	void BackpackSFXBegin(byte InJetType, bool GroundDetected, bool K2Node_SwitchEnum_CmpSuccess);// 0x2649560
	void UpdateTrailParticle(BackpackTrailAssemblingParams SoftObjectRef, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	ParticleSystemComponent* GetTrailEffectComponent();// 0x2649560
	void FX_FinishDeactive();// 0x2649560
	void SkyDivingLanding();// 0x2649560
	void DropSlowDown();// 0x2649560
	void Normal Jet Fly();// 0x2649560
	void FX_InitializeDeactive();// 0x2649560
	void TrailFade__FinishedFunc();// 0x2649560
	void TrailFade__UpdateFunc();// 0x2649560
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x2649560
	void TryFadeOutTrail();// 0x2649560
	void ExecuteUbergraph_BP_PBagsTrail_Common(int EntryPoint, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, bool CallFunc_IsActive_ReturnValue);// 0x2649560

--------------------------------
Class: BackpackTrailAssemblingParams.TableRowBase
	ParticleSystem* TrailParticle;//[Offset: 0x8, Size: 1]
	ParticleSystem* WallRunTrailParticle;//[Offset: 0x30, Size: 1]
	ParticleSystem* OffgasParticle;//[Offset: 0x58, Size: 1]
	ParticleSystem* WallRunOffgasParticle;//[Offset: 0x80, Size: 1]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x3f24e20
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x3f24d50
	void SetTimelineLengthMode(byte NewLengthMode);// 0x3f24cd0
	void SetTimelineLength(float NewLength);// 0x3f24c50
	void SetPlayRate(float NewRate);// 0x220bd10
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x3f24b30
	void SetNewTime(float NewTime);// 0x3f24ab0
	void SetLooping(bool bNewLooping);// 0x3f24a20
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x3f24950
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x3f248c0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x3f247f0
	void ReverseFromEnd();// 0x3f247d0
	void Reverse();// 0x3f247b0
	void PlayFromStart();// 0x3f24790
	void Play();// 0x3f24770
	void OnRep_Timeline();// 0x3f24750
	bool IsReversing();// 0x3f24720
	bool IsPlaying();// 0x3f246f0
	bool IsLooping();// 0x3f246c0
	float GetTimelineLength();// 0x3f24690
	float GetPlayRate();// 0x220b720
	float GetPlaybackPosition();// 0x220b7e0
	bool GetIgnoreTimeDilation();// 0x3f245b0

--------------------------------
Class: BP_PBagsOffgas_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 1]
	ParticleSystemComponent* FX_BoostClimb_Start;//[Offset: 0x288, Size: 1]
	ParticleSystemComponent* FX_PowerBag_MainJet;//[Offset: 0x290, Size: 1]
	SceneComponent* VFX;//[Offset: 0x298, Size: 1]
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x2649560
	void BackpackSFXEnd();// 0x2649560
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x2649560
	void ExecuteUbergraph_BP_PBagsOffgas_Common(int EntryPoint, byte K2Node_Event_InJetType, bool K2Node_Event_GroundDetected, bool K2Node_SwitchEnum_CmpSuccess, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: BP_SETTFormula_BigEscape_C.SettlementFormula.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 1]
	int[] PersonalRankExpReward;//[Offset: 0x230, Size: 1]
	SettlementParam_ExtraRewardInfo RankReward;//[Offset: 0x240, Size: 1]
	SettlementParam_ExtraRewardInfo[] CommonRewards;//[Offset: 0x280, Size: 1]
	int WarmGame Account Exp;//[Offset: 0x290, Size: 1]
	float GetKDA(out const SettlementParam_KDA InParam, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2649560
	void TEMP Is Player In NewPlayer Games(out bool Result, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam, int Temp_int_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x2649560
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam, FString[] K2Node_MakeArray_Array);// 0x2649560
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam, int[] FullPage, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int[] K2Node_MakeArray_Array, int K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x2649560
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2649560
	int GetZomborg(out const SettlementParam_Zomborg InParam, int Result, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Round_ReturnValue);// 0x2649560
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue);// 0x2649560
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, int CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2649560
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_TEMP_Is_Player_In_NewPlayer_Games_Result, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0x2649560

--------------------------------
Class: BP_PBags_PQD_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	MaterialInstanceDynamic* TryCreateDynamicMaterialInstance(PrimitiveComponent* Component, int ElementIndex, MaterialInterface* SourceMaterial, FName OptionlName, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2649560
	void FX_Idle();// 0x2649560
	void FX_Flying();// 0x2649560
	void FX_Charging();// 0x2649560
	void FX_LowPower();// 0x2649560
	void FX_Default(bool CallFunc_IsFly_ReturnValue);// 0x2649560

--------------------------------
Class: ChaGCBP_TeamPerspective_LocalPlayer_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	CueContent[] CueContents;//[Offset: 0x298, Size: 1]
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x202e0c0
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters);// 0x202d520
	void OnLocalPlayerSpectateMeStatusChanged(SolarCharacter* Character, bool bIsSpectating);// 0x202d450
	bool OnExecuteInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x202d280
	bool OnActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x202d0b0
	bool ListenLocalPlayerSpectateMeStatus();// 0x202d080

--------------------------------
Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	float AutoDestroyDelay;//[Offset: 0x22c, Size: 1]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	GameplayTag GameplayCueTag;//[Offset: 0x234, Size: 1]
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x240, Size: 1]
	FName GameplayCueName;//[Offset: 0x250, Size: 1]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	int NumPreallocatedInstances;//[Offset: 0x260, Size: 1]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x7e6b60
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x7e67c0
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x7e6730
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x7e6390
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x7e5ff0
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x2649560
	void K2_EndGameplayCue();// 0x7e5fd0

--------------------------------
Class: CueContent
	enum PlayTiming;//[Offset: 0x0, Size: 1]
	FName CustomEvent;//[Offset: 0x4, Size: 1]
	byte VisibleTargetFlag;//[Offset: 0xc, Size: 1]
	GameplayTagRequirements PlayTagRequirements;//[Offset: 0x10, Size: 1]
	ActorEffectContent[] ActorEffectContents;//[Offset: 0x60, Size: 1]
	BuffEffectContent[] BuffEffectContents;//[Offset: 0x70, Size: 1]
	SoundContent[] SoundContents;//[Offset: 0x80, Size: 1]
	ParticleSystemContent[] ParticleSystemContents;//[Offset: 0x90, Size: 1]

--------------------------------
Class: ActorEffectContent
	class ActorEffect* ActorEffectClass;//[Offset: 0x0, Size: 1]
	enum AffectedActorType;//[Offset: 0x8, Size: 1]
	bool bHideFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	GameplayTag VisibilityFlagTag;//[Offset: 0xc, Size: 1]

--------------------------------
Class: BuffEffectContent
	FName BuffEffectID;//[Offset: 0x0, Size: 1]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundContent
	FName SoundGroupName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleSystemContent
	ActorParticleEffectSpawnInfo SpawnInfo;//[Offset: 0x0, Size: 1]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: ActorParticleEffectSpawnInfo
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 1]
	enum AttachOption;//[Offset: 0x28, Size: 1]
	FName AttachPointName;//[Offset: 0x2c, Size: 1]
	byte LocationType;//[Offset: 0x34, Size: 1]
	Vector Location;//[Offset: 0x38, Size: 1]
	Rotator Rotation;//[Offset: 0x44, Size: 1]
	Vector Scale;//[Offset: 0x50, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bEnablePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]

--------------------------------
Class: GameplayTagReferenceHelper

--------------------------------
Class: BP_KillinfoManager_C.KillInfoManager.GameManagerBase.Info.Actor.Object

--------------------------------
Class: KillInfoManager.GameManagerBase.Info.Actor.Object
	enum[] KillEffectsOrder;//[Offset: 0x228, Size: 1]
	enum[] GlobalInfoList;//[Offset: 0x238, Size: 1]
	FString KillLeaderID;//[Offset: 0x398, Size: 1]
	int KillLeaderKillNum;//[Offset: 0x3a8, Size: 1]
	FString AnnihilatorID;//[Offset: 0x3b0, Size: 1]
	FString KillLeaderChangeVoiceName;//[Offset: 0x3c8, Size: 1]
	FString KillLeaderShutDownVoiceName;//[Offset: 0x3d8, Size: 1]
	FString BeKillLeaderVoiceName;//[Offset: 0x3e8, Size: 1]
	FString ShutDownKillLeaderVoiceName;//[Offset: 0x3f8, Size: 1]
	<int,FString> KillTotalVoiceMap;//[Offset: 0x408, Size: 1]
	FString RevengeVoiceName;//[Offset: 0x458, Size: 1]
	FString KillDownVoiceName;//[Offset: 0x468, Size: 1]
	FString ClearTeamVoiceName;//[Offset: 0x478, Size: 1]
	FString ShutDownVoiceName;//[Offset: 0x488, Size: 1]
	FString KillDefenderVoiceName;//[Offset: 0x498, Size: 1]
	CustomNoticeImageTable* NoticeImageConfig;//[Offset: 0x4a8, Size: 1]
	bool PlayKillInfoVoice(const int InNoticeID, const int InKillNum, out const delegate InDelegate);// 0x206b6f0
	void OnRep_KillLeaderID();// 0x206b540
	void ClientKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillExtraInfoHashValue);// 0x206aa70
	void ClientKillEffectNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillEffectExtraInfoHashValue);// 0x206a960

--------------------------------
Class: CustomNoticeImageTable.DataTable.Object

--------------------------------
Class: ChaGCBP_TeamPerspective_Teammate_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: SplineActor_C.SolarWeaponProjectileSpline.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 1]
	StaticMeshComponent* Sphere;//[Offset: 0x258, Size: 1]
	SplineMeshComponent* SplineMesh;//[Offset: 0x260, Size: 1]
	SplineMeshComponent* GetSplineMeshComponent();// 0x2649560
	void CreateSpline(out Vector[] Pos);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void SetPoints(out const Vector[] Points);// 0x2649560
	void Hide();// 0x2649560
	void ShowHitPointAt(out const Vector Loc);// 0x2649560
	void HideHitPoint();// 0x2649560
	void ExecuteUbergraph_SplineActor(int EntryPoint, const Vector[] K2Node_Event_Points, const Vector K2Node_Event_Loc, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x2649560

--------------------------------
Class: BP_PBags_MphyEAF_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 1]
	void FX_Flying();// 0x2649560
	void FX_Idle();// 0x2649560
	void FX_LowPower();// 0x2649560
	void FX_Charging();// 0x2649560
	void FX_Default();// 0x2649560
	void OnMeshEffectFactorChange();// 0x2649560
	void ExecuteUbergraph_BP_PBags_MphyEAF_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0x2649560

--------------------------------
Class: BP_SolarFlyTrail_C.SolarFlyTrail.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x570, Size: 1]

--------------------------------
Class: ChaGCBP_SkydiveSound_C.ChaGC_SkydiveSound.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b8, Size: 1]

--------------------------------
Class: ChaGC_SkydiveSound.GameplayCueNotify_Actor.Actor.Object
	FName[] StartSoundGroups;//[Offset: 0x298, Size: 1]
	FName[] StopSoundGroups;//[Offset: 0x2a8, Size: 1]

--------------------------------
Class: ChaGCBP_SkydiveFly_C.ChaGC_SkydiveFly.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c8, Size: 1]
	ParticleSystemComponent* Particle;//[Offset: 0x2d0, Size: 1]
	ParticleSystem* EnemyParticleAsset;//[Offset: 0x2d8, Size: 1]
	ParticleSystem* FriendParticleAsset;//[Offset: 0x2e0, Size: 1]
	ParticleSystem* DefenderParticleAsset;//[Offset: 0x2e8, Size: 1]
	bool ShowParticleInLowLevelGraphicsQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender, bool Temp_bool_Variable, bool CallFunc_IsLowLevelGraphicsQuality_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ParticleSystem* K2Node_Select_Default, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue);// 0x2649560
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters, bool CallFunc_OnRemoveInternal_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters, bool CallFunc_WhileActiveInternal_ReturnValue);// 0x2649560

--------------------------------
Class: ChaGC_SkydiveFly.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	float MinBoostDuration;//[Offset: 0x2b0, Size: 1]
	bool bIsBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender);// 0x202dff0

--------------------------------
Class: ChaGCBP_TeamPerspective_Opponent_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: ChaGCBP_ParkourVertAcc_C.ChaGC_ParkourAcceleration.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 1]

--------------------------------
Class: ChaGC_ParkourAcceleration.GameplayCueNotify_Actor.Actor.Object
	FName FlushEffectID;//[Offset: 0x298, Size: 1]
	FName TrailEffectID;//[Offset: 0x2a0, Size: 1]
	<FName,Vector2D> TrailEmitterParameters;//[Offset: 0x2a8, Size: 1]
	GameplayTag DurationTag;//[Offset: 0x2f8, Size: 1]

--------------------------------
Class: BP_FX_Exp_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240, Size: 1]
	StaticMeshComponent* 3DIcon;//[Offset: 0x248, Size: 1]
	TextRenderComponent* TextRender;//[Offset: 0x250, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 1]
	void ReceiveBeginPlay();// 0x2649560
	void SetItemCount(int count);// 0x2649560
	void ExecuteUbergraph_BP_FX_Exp(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560

--------------------------------
Class: SolarItemCountActor.Actor.Object
	TextRenderComponent* TextPtr;//[Offset: 0x228, Size: 1]
	FString TextPrefix;//[Offset: 0x230, Size: 1]
	void SetItemCount(int count);// 0x2649560

--------------------------------
Class: ChaGCBP_InWater_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: ChaGCBP_RapidBoost_C.SolarSkillGC_RapidBoost.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c0, Size: 1]
	TimerHandle PlayEndSoundHandle;//[Offset: 0x2c8, Size: 1]
	int CachedScreenEffectHandle;//[Offset: 0x2d0, Size: 1]
	void OnPlayEndSound(Actor* CallFunc_GetOwner_ReturnValue, TimerHandle CallFunc_K2_InvalidateTimerHandle_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* CachedCharacter, int CallFunc_StartScreenEffect_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, int CallFunc_StartActorEffect_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_TimeRemaining, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_Duration, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x2649560
	ParticleSystemComponent* SpawnEmitter(ParticleSystem* EmitterTemplate, SceneComponent* Mesh, FName BoneName, enum PoolingMethod, bool bAbsoluteRotation, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue);// 0x2649560
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x2649560
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_TimeRemaining, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_Duration, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, int CallFunc_StartActorEffect_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x2649560
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void ExecuteUbergraph_ChaGCBP_RapidBoost(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x2649560

--------------------------------
Class: SolarSkillGC_RapidBoost.GameplayCueNotify_Actor.Actor.Object
	SolarAbilitySystemComponent* CachedAbilitySystemComponent;//[Offset: 0x298, Size: 1]
	int InBackpackFXHandle;//[Offset: 0x2a0, Size: 1]
	GameplayTag EffectTag;//[Offset: 0x2a4, Size: 1]
	FName EffectName;//[Offset: 0x2ac, Size: 1]

--------------------------------
Class: AirDropAudioActor.Actor.Object
	Vector DropBeginLocation;//[Offset: 0x228, Size: 1]
	Vector DropEndLocation;//[Offset: 0x234, Size: 1]
	float CurrZ;//[Offset: 0x240, Size: 1]
	Actor* SpawnedWarningEffect;//[Offset: 0x248, Size: 1]
	class Actor* WarningEffect;//[Offset: 0x250, Size: 1]
	int ThisID;//[Offset: 0x258, Size: 1]
	bool bSummonedByCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	FString SNameAirDropSpawnWarning;//[Offset: 0x268, Size: 1]
	FString SNameAirDropStopSpawnWarning;//[Offset: 0x278, Size: 1]
	FString SNameAirDropApprochWarning;//[Offset: 0x288, Size: 1]
	FString SNameAirDropStopApprochWarning;//[Offset: 0x298, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 1]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 1]
	bool bHasLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	void OnAirDropTreasureBoxStateChanged(int ItemID, enum MovementState, enum OpenState);// 0x1ffe9a0
	void OnAirDropApproch(int InThisID);// 0x1ffe910
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x1ffe0b0

--------------------------------
Class: BP_SI_AirdropBox_TreasureBox_C.AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xcb0, Size: 1]
	ParticleSystemComponent* TrailFlame4;//[Offset: 0xcb8, Size: 1]
	ParticleSystemComponent* TrailFlame3;//[Offset: 0xcc0, Size: 1]
	ParticleSystemComponent* TrailFlame2;//[Offset: 0xcc8, Size: 1]
	ParticleSystemComponent* TrailFlame1;//[Offset: 0xcd0, Size: 1]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0xcd8, Size: 1]
	StaticMeshComponent* FX_Light_Flow02;//[Offset: 0xce0, Size: 1]
	StaticMeshComponent* FX_Light_Flow01;//[Offset: 0xce8, Size: 1]
	StaticMeshComponent* FX_Mesh_000;//[Offset: 0xcf0, Size: 1]
	StaticMeshComponent* FX_Mesh_001;//[Offset: 0xcf8, Size: 1]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0xd00, Size: 1]
	StaticMeshComponent* FX_Tag;//[Offset: 0xd08, Size: 1]
	SceneComponent* Position;//[Offset: 0xd10, Size: 1]
	SceneComponent* VFX;//[Offset: 0xd18, Size: 1]
	StaticMeshComponent* FX_Mesh_002;//[Offset: 0xd20, Size: 1]
	float FallingTrialFade_FadeAlpha_1A747A8947E4DBF6C38523A7ADB44EA3;//[Offset: 0xd28, Size: 1]
	byte FallingTrialFade__Direction_1A747A8947E4DBF6C38523A7ADB44EA3;//[Offset: 0xd2c, Size: 1]
	TimelineComponent* FallingTrialFade;//[Offset: 0xd30, Size: 1]
	void FallingTrialFade__FinishedFunc();// 0x2649560
	void FallingTrialFade__UpdateFunc();// 0x2649560
	void PlayOpenAnimation();// 0x2649560
	void PlayLandingAnimation();// 0x2649560
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x2649560
	void OnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x2649560
	void OnFadeOutFallingEffect();// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ExecuteUbergraph_BP_SI_AirdropBox_TreasureBox(int EntryPoint, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCustomGameMode* K2Node_DynamicCast_AsSCustom_Game_Mode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckLogicComponentIsA_ReturnValue, bool CallFunc_CheckLogicComponentIsA_ReturnValue, bool CallFunc_CheckLogicComponentIsA_ReturnValue, enum K2Node_Event_InPrevMovementState, enum K2Node_Event_InCurrMovementState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_Event_InPrevOpenState, enum K2Node_Event_InCurrOpenState, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsActive_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2649560

--------------------------------
Class: ChaGCBP_RescueSuccceed_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 1]
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess);// 0x2649560
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess);// 0x2649560

--------------------------------
Class: BP_SolarSpectateLevelSequenceActor_C.SolarSpectateLevelSequenceActor.LevelSequenceActor.Actor.Object

--------------------------------
Class: TickWhenPauseCineCameraActor.CineCameraActor.CameraActor.Actor.Object

--------------------------------
Class: BP_PBags_MphyMM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 1]
	StaticMeshComponent* FX_G_Mesh_PBags_MphyMM_Set01;//[Offset: 0x318, Size: 1]
	void FX_Flying(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2649560
	void FX_Idle(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2649560
	void FX_LowPower(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2649560
	void FX_Charging(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2649560
	void OnMeshEffectFactorChange();// 0x2649560
	void ExecuteUbergraph_BP_PBags_MphyMM_Set01(int EntryPoint);// 0x2649560

--------------------------------
Class: BP_PBags_MC_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_VH_RocketLauncher_C.SolarVehicleRocketLauncherWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x16d0, Size: 1]
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void ExecuteUbergraph_BP_VH_RocketLauncher(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x2649560

--------------------------------
Class: SolarVehicleRocketLauncherWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	BombingAreaData[] BombingAreaDatas;//[Offset: 0x12a8, Size: 1]
	enum RocketFireMode;//[Offset: 0x12b8, Size: 1]
	<int,BombingAreaAsset> BombingAreaAssetMap;//[Offset: 0x12c0, Size: 1]
	SpawnedRocketData[] SpawnedRocketDatas;//[Offset: 0x1340, Size: 1]
	BombingAreaAsset PreviewRangeAsset;//[Offset: 0x14b0, Size: 1]
	BombingAreaAsset BombingAreaAimAsset;//[Offset: 0x1510, Size: 1]
	BombingAreaAsset BombingAreaWarningAsset;//[Offset: 0x1570, Size: 1]
	StaticMesh* AlertLineMeshClass;//[Offset: 0x15d0, Size: 1]
	ParticleSystem* FireMuzzleParticle;//[Offset: 0x15f8, Size: 1]
	float BombingAreaBlendTime;//[Offset: 0x1620, Size: 1]
	FireModeSetting RocketFireModeSettings;//[Offset: 0x1624, Size: 2]
	float ResetOwnerTimer;//[Offset: 0x1694, Size: 1]
	float SpawnRocketHight;//[Offset: 0x1698, Size: 1]
	FName[] MuzzleSocketNames;//[Offset: 0x16a0, Size: 1]
	FString RocketLaunchSound_1P;//[Offset: 0x16b0, Size: 1]
	FString RocketLaunchSound_3P;//[Offset: 0x16c0, Size: 1]
	void ServerRocketLauncherRealFire(int InFireCounter);// 0x22d65c0
	void ServerActivateRocketLauncherFire(const Vector_NetQuantize InTargetLocation, int InFireCount);// 0x22d64f0
	void OnRocketLauncherRealFire(int InFireCounter);// 0x22d6460
	void OnRep_RocketSpawnerChanged();// 0x22d6420
	void OnRep_RocketFireModeChanged();// 0x22d6400
	void OnLocallyActiveFire(int InFireCount);// 0x22d6370
	void MulticastRocketLauncherRealFire(int InFireCounter);// 0x22d62c0
	void MulticastPrepareRocketSpawn(const Vector_NetQuantize InLocation, enum InFireMode);// 0x22d6200

--------------------------------
Class: BombingAreaData
	int AreaIndex;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize CenterLocation;//[Offset: 0x4, Size: 1]
	enum SpawnedFireMode;//[Offset: 0x10, Size: 1]
	float ServerStartedTime;//[Offset: 0x14, Size: 1]
	byte MaxRocketCounter;//[Offset: 0x18, Size: 1]
	byte SpawnedRocketCounter;//[Offset: 0x19, Size: 1]
	Vector2D LastLandLocation2D;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: BombingAreaAsset
	StaticMesh* BombingAreaMeshClass;//[Offset: 0x0, Size: 1]
	MaterialInterface* BombingDecalMaterialClass;//[Offset: 0x28, Size: 1]
	StaticMeshComponent* BombingAreaMeshComponent;//[Offset: 0x50, Size: 1]
	DecalComponent* BombingAreaDecalComponent;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x318, Size: 1]
	int SortOrder;//[Offset: 0x320, Size: 1]
	float FadeScreenSize;//[Offset: 0x324, Size: 1]
	float FadeStartDelay;//[Offset: 0x328, Size: 1]
	float FadeDuration;//[Offset: 0x32c, Size: 1]
	float FadeInDuration;//[Offset: 0x330, Size: 1]
	float FadeInStartDelay;//[Offset: 0x334, Size: 1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	Vector DecalSize;//[Offset: 0x33c, Size: 1]
	void SetSortOrder(int Value);// 0x3e07430
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x3e07330
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x3e07210
	void SetFadeIn(float StartDelay, float Duaration);// 0x3e07140
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x3e070b0
	float GetFadeStartDelay();// 0x3e06d80
	float GetFadeInStartDelay();// 0x3e06d50
	float GetFadeInDuration();// 0x3e06d20
	float GetFadeDuration();// 0x3e06cf0
	MaterialInterface* GetDecalMaterial();// 0x3e06cc0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x3e063c0

--------------------------------
Class: SpawnedRocketData
	Vector RocketSpawnLocation;//[Offset: 0x0, Size: 1]
	float RocketSpawnDelayTime;//[Offset: 0xc, Size: 1]
	float AlertLineRemainTime;//[Offset: 0x10, Size: 1]
	float SpawnedTime;//[Offset: 0x14, Size: 1]
	bool bRocketSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	StaticMeshComponent* AlertLineBombingMesh;//[Offset: 0x20, Size: 1]

--------------------------------
Class: FireModeSetting
	float AreaMeshScale;//[Offset: 0x0, Size: 1]
	Vector BombingAreaDecalSize;//[Offset: 0x4, Size: 1]
	float FirstRocketSpawnTimer;//[Offset: 0x10, Size: 1]
	float RocketSpawnDelay;//[Offset: 0x14, Size: 1]
	float AlertLineRemainTime;//[Offset: 0x18, Size: 1]
	float RocketSpawnInterval;//[Offset: 0x1c, Size: 1]
	float BombingAreaDisplayDelay;//[Offset: 0x20, Size: 1]
	int LaunchRocketNum;//[Offset: 0x24, Size: 1]
	float BombingAreaRadius;//[Offset: 0x28, Size: 1]
	float MiniSpawnDistance;//[Offset: 0x2c, Size: 1]
	Vector2D AimDistanceRange;//[Offset: 0x30, Size: 1]

--------------------------------
Class: BP_VH_Tire_WL02_TurretA1_C.BP_SolarVehicleSiegeWeapon_C.SolarVehicleSiegeWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object

--------------------------------
Class: BP_SolarVehicleSiegeWeapon_C.SolarVehicleSiegeWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object

--------------------------------
Class: SolarVehicleSiegeWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	ParticleSystem* BulletTargetAreaInSameTeam;//[Offset: 0x12a8, Size: 1]
	MaterialInterface* BulletDecalMaterialInSameTeam;//[Offset: 0x12d0, Size: 1]
	ParticleSystem* BulletTargetAreaInEnemy;//[Offset: 0x12f8, Size: 1]
	MaterialInterface* BulletDecalMaterialInEnemy;//[Offset: 0x1320, Size: 1]
	float AreaParticleScale;//[Offset: 0x1348, Size: 1]
	Vector AreaDecalSize;//[Offset: 0x134c, Size: 1]
	float AreaFadeOutTime;//[Offset: 0x1358, Size: 1]
	FName AreaFadeOutName;//[Offset: 0x135c, Size: 1]
	float AreaDisplayDistance;//[Offset: 0x1364, Size: 1]
	float AreaBlockThreshold;//[Offset: 0x1368, Size: 1]
	<FireUniqueID,BulletExplodedAreaData> BulletAreaParticleMap;//[Offset: 0x1370, Size: 1]
	void OnBulletSpawned(out const PredictProjectilePathResult InHitResult);// 0x2649560

--------------------------------
Class: BulletExplodedAreaData
	ParticleSystemComponent* TargetParticleComponent;//[Offset: 0x0, Size: 1]
	DecalComponent* TargetDecalComponent;//[Offset: 0x8, Size: 1]
	bool bPendingFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float FadeOutSpentTime;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 1]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 1]
	HitResult HitResult;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 1]
	Vector Velocity;//[Offset: 0xc, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BP_PBags_PsmTM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 1]
	void FX_Flying();// 0x2649560
	void FX_Idle();// 0x2649560
	void FX_LowPower(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x2649560
	void FX_Charging();// 0x2649560
	void OnMeshEffectFactorChange();// 0x2649560
	void ExecuteUbergraph_BP_PBags_PsmTM_Set01(int EntryPoint);// 0x2649560

--------------------------------
Class: BP_PBags_BDogF_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 1]
	void FX_Flying();// 0x2649560
	void FX_Idle();// 0x2649560
	void FX_LowPower();// 0x2649560
	void FX_Charging();// 0x2649560
	void FX_Default();// 0x2649560
	void OnMeshEffectFactorChange();// 0x2649560
	void ExecuteUbergraph_BP_PBags_BDogF_Set01(int EntryPoint);// 0x2649560

--------------------------------
Class: BP_VH_Legged_WL09_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SphereComponent* BlockForVehicle;//[Offset: 0x13d0, Size: 1]

--------------------------------
Class: SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarLeggedVehicleMovement* LeggedVehicleMovement;//[Offset: 0x1380, Size: 1]
	CapsuleComponent* VehicleCapsule;//[Offset: 0x1388, Size: 1]
	PrimitiveComponent* BlockForVehicleComp;//[Offset: 0x1390, Size: 1]
	float BlockForVehicleCollisionDelay;//[Offset: 0x1398, Size: 1]
	enum ReplicatedAnimState;//[Offset: 0x13a8, Size: 1]
	Vector_NetQuantize[] InitialFootIkLocations;//[Offset: 0x13b0, Size: 1]
	float StandOnVehicleRadiusMultiplier;//[Offset: 0x13c0, Size: 1]
	void OnStandOnVehicle(bool bOnVehicle);// 0x219ef00
	void OnRep_ReplicatedAnimState(enum PreviousState);// 0x219ee80
	void OnRep_InitialFootIkLocations();// 0x219ee60

--------------------------------
Class: SolarLeggedVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LandingSweepTraceDistance;//[Offset: 0x138, Size: 1]
	float LandedVFXHeightThreshold;//[Offset: 0x13c, Size: 1]
	<byte,VehicleVFX> JumpLandedVFXs;//[Offset: 0x140, Size: 1]
	VehicleLocomotionData LocomotionDatas;//[Offset: 0x190, Size: 3]
	float MaxControllableDegreeOffset;//[Offset: 0x1e4, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x1e8, Size: 1]
	float GravityZ;//[Offset: 0x1ec, Size: 1]
	bool bDelayInputForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bEnableProceduralAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool bAdvancedProceduralAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	float StepHeight;//[Offset: 0x1f4, Size: 1]
	float StepDistanceForward;//[Offset: 0x1f8, Size: 1]
	float StepDistanceRight;//[Offset: 0x1fc, Size: 1]
	float StepSequencePercent;//[Offset: 0x200, Size: 1]
	float MinStepDuration;//[Offset: 0x204, Size: 1]
	float MinDistanceToUnplant;//[Offset: 0x208, Size: 1]
	float FixFeetTargetsAfterPercent;//[Offset: 0x20c, Size: 1]
	float FeetTipBonesRotationInterpSpeed;//[Offset: 0x210, Size: 1]
	RuntimeFloatCurve SpeedCurve;//[Offset: 0x218, Size: 1]
	RuntimeFloatCurve HeightCurve;//[Offset: 0x2a0, Size: 1]
	RuntimeFloatCurve BodyRelativeZCurve;//[Offset: 0x328, Size: 1]
	float AdditionalBodyRelativeZ;//[Offset: 0x3b0, Size: 1]
	CurveVector* BodyRelativeRotatorCurve;//[Offset: 0x3b8, Size: 1]
	float BodyTransformLerpSpeedWithoutDriver;//[Offset: 0x3c0, Size: 1]
	float TraceLength;//[Offset: 0x3c4, Size: 1]
	float DistanceCheckMultiplier;//[Offset: 0x3c8, Size: 1]
	float RadiusCheckMultiplier;//[Offset: 0x3cc, Size: 1]
	float BodyAlignTerrainBlendSpeed;//[Offset: 0x3d0, Size: 1]
	float BodyZOffsetMultiplier;//[Offset: 0x3d4, Size: 1]
	float MaxBodyZOffset;//[Offset: 0x3d8, Size: 1]
	float MinBodyZOffset;//[Offset: 0x3dc, Size: 1]
	float MinBodyAlignPitchDegree;//[Offset: 0x3e0, Size: 1]
	float MaxBodyAlignPitchDegree;//[Offset: 0x3e4, Size: 1]
	float MinBodyAlignRollDegree;//[Offset: 0x3e8, Size: 1]
	float MaxBodyAlignRollDegree;//[Offset: 0x3ec, Size: 1]
	float SkipIkTraceDurationWhenReceiveUpdateFromServer;//[Offset: 0x3f0, Size: 1]
	bool bRotateOnInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	float MinRotateDegree;//[Offset: 0x3f8, Size: 1]
	float LerpSpeedWithinMinRotateDegree;//[Offset: 0x3fc, Size: 1]
	float DegreeForRotatePiAnimation;//[Offset: 0x400, Size: 1]
	float DegreeForRotateHalfPiAnimation;//[Offset: 0x404, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x408, Size: 1]
	LeggedVehiclePostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4a0, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	float MaxStepHeight;//[Offset: 0x5a4, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x5a8, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x5ac, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x5b4, Size: 1]
	bool bJumpIgnoreInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	float JumpZVelocity;//[Offset: 0x5bc, Size: 1]
	float JumpXYVelocityOnInput;//[Offset: 0x5c0, Size: 1]
	GameplayTag JumpFailedTagForNotice;//[Offset: 0x5c4, Size: 1]
	int JumpFailedNoticeID;//[Offset: 0x5cc, Size: 1]
	float AirControl;//[Offset: 0x5d0, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x5d4, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x5d8, Size: 1]
	float FallingLateralFriction;//[Offset: 0x5dc, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x5e0, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x5e8, Size: 1]
	float MoveSpeedFactorForPiRotation;//[Offset: 0x5ec, Size: 1]
	float MoveSpeedFactorForHalfPiRotation;//[Offset: 0x5f0, Size: 1]
	float MinFootIKEffectorZ;//[Offset: 0x5f4, Size: 1]
	float MaxFootIKEffectorZ;//[Offset: 0x5f8, Size: 1]
	VehicleFootIKData[] FootIKDataArray;//[Offset: 0x600, Size: 1]
	float IKSweepTraceRadius;//[Offset: 0x610, Size: 1]
	float IKEffectorBlendSpeed;//[Offset: 0x614, Size: 1]
	float FloorAndMeshAngleForDoubleSweep;//[Offset: 0x618, Size: 1]
	int MaxBrokenWeakPointForLocomotion;//[Offset: 0x61c, Size: 1]
	float RefreshBoneTransformTimerForDedicatedServer;//[Offset: 0x620, Size: 1]
	VehicleVFX[] WeakPointParticles;//[Offset: 0x628, Size: 1]
	float MaxJoyStickYaw;//[Offset: 0x638, Size: 1]
	float MinJoyStickYaw;//[Offset: 0x63c, Size: 1]
	float MaxJoyStickPitch;//[Offset: 0x640, Size: 1]
	float MinJoyStickPitch;//[Offset: 0x644, Size: 1]
	float RotationBlendSpeed;//[Offset: 0x648, Size: 1]
	float MaxFootZValueForAlignGround;//[Offset: 0x64c, Size: 1]
	FName LeaningBone;//[Offset: 0x650, Size: 1]
	byte LeaningBoneForwardAxis;//[Offset: 0x658, Size: 1]
	float SpeedThresholdForLeaning;//[Offset: 0x65c, Size: 1]
	float LeaningAnimationBlendSpeed;//[Offset: 0x660, Size: 1]
	float LeaningDegree;//[Offset: 0x664, Size: 1]
	float BaseDegreeForLeaningDegree;//[Offset: 0x668, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x66c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x670, Size: 1]
	float LandingTimerForAnitCheating;//[Offset: 0x674, Size: 1]
	float EnablePhysicsCollisionTimer;//[Offset: 0x678, Size: 1]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x680, Size: 1]
	CapsuleComponent* UpdatedCapsule;//[Offset: 0x688, Size: 1]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x690, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x698, Size: 1]
	SolarVehicleStateMachine* VehicleStateMachine;//[Offset: 0x6a0, Size: 1]
	void OnPlayerGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x219ed90
	void OnCapsuleComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x219ebb0
	void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic);// 0x219e7f0

--------------------------------
Class: VehicleLocomotionData
	float Speed;//[Offset: 0x0, Size: 1]
	float Acceleration;//[Offset: 0x4, Size: 1]
	float Deceleration;//[Offset: 0x8, Size: 1]
	float Friction;//[Offset: 0xc, Size: 1]
	float RotateFriction;//[Offset: 0x10, Size: 1]
	float RotationSpeed;//[Offset: 0x14, Size: 1]
	float MovementDegree;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LeggedVehiclePostPhysicsTickFunction.TickFunction

--------------------------------
Class: VehicleFootIKData
	FName LegBoneName;//[Offset: 0x0, Size: 1]
	FName FootBoneName;//[Offset: 0x8, Size: 1]
	FName FootVirtualBoneName;//[Offset: 0x10, Size: 1]
	FName FootVirtualBoneForGround;//[Offset: 0x18, Size: 1]
	FName FootIKBoneName;//[Offset: 0x20, Size: 1]
	float FootHorizontalOffsetAfterBroken;//[Offset: 0x28, Size: 1]
	float FootVerticalOffsetAfterBroken;//[Offset: 0x2c, Size: 1]
	float FootUnderWaterOffset;//[Offset: 0x30, Size: 1]
	float RaiseDustEffectScale;//[Offset: 0x34, Size: 1]
	float BrokenFootMultiplier;//[Offset: 0x38, Size: 1]
	Vector FootBoneOffset;//[Offset: 0x3c, Size: 1]
	FName ParentBone;//[Offset: 0x48, Size: 1]
	int GroupIndex;//[Offset: 0x50, Size: 1]
	float StepDistanceMultiplier;//[Offset: 0x54, Size: 1]
	float StepDistanceMultiplierForVelocity;//[Offset: 0x58, Size: 1]
	float MinVelocityDegreeForStepDistance;//[Offset: 0x5c, Size: 1]
	float MaxVelocityDegreeForStepDistance;//[Offset: 0x60, Size: 1]

--------------------------------
Class: SolarVehicleStateMachine.Object
	SolarVehiclePawn* Owner;//[Offset: 0x28, Size: 1]
	SolarLeggedVehicleMovement* MovementComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: BP_PBags_MCP_Set02_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_SolarVH_Tire_9A04_new_C.BP_SiegeVehicleBase_C.SolarSiegeVehicle.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1410, Size: 1]
	void ReceiveTick(float DeltaSeconds);// 0x2649560
	void ExecuteUbergraph_BP_SolarVH_Tire_9A04_new(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x2649560

--------------------------------
Class: BP_SiegeVehicleBase_C.SolarSiegeVehicle.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: SolarSiegeVehicle.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SiegeVehicleOpenTraceData[] CheckOpenTraceBox;//[Offset: 0x13a8, Size: 1]
	SiegeVehicleOpenCapsuleData[] CheckOpenTraceCap;//[Offset: 0x13b8, Size: 1]
	float CheckOffsetZ;//[Offset: 0x13c8, Size: 1]
	SolarSiegeVehicleAnimInstance* SolarVehicleAnimInstance;//[Offset: 0x13d0, Size: 1]
	FName[] HolerBoneNames;//[Offset: 0x13d8, Size: 1]
	ParticleSystem* SiegeWeaponFire;//[Offset: 0x13e8, Size: 1]
	class CameraShake* OpenCameraShake;//[Offset: 0x13f8, Size: 1]
	float OpenCameraShakeSpeed;//[Offset: 0x1400, Size: 1]
	ParticleSystemComponent* MuzzlePSC;//[Offset: 0x1408, Size: 1]
	bool IsSiegeWeaponOpened();// 0x21fd490
	byte GetCurrentVehicleAnimation();// 0x21fd390

--------------------------------
Class: SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarWheeledVehicleMovement* VehicleMovement;//[Offset: 0x1388, Size: 1]
	bool bReplicatedDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1390, Size: 1]
	bool bReplicatedIsBurnout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1391, Size: 1]
	float PlatformDetachImpulse;//[Offset: 0x1394, Size: 1]
	void StatVehicleAutoSteering(bool bInSameDirection);// 0x22b97a0
	void ServerSetIsDrift(bool bInDrift, byte InDriveType);// 0x22b89a0
	void ServerSetIsBurnout(bool bInBurnout);// 0x209ad40
	void OnRep_IsBurnout();// 0x22f60b0
	void OnRep_Drift();// 0x22f6090

--------------------------------
Class: SolarWheeledVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LowFrameRateDeltaTime;//[Offset: 0x138, Size: 1]
	float MinLocationDiffForSuspensionTrace;//[Offset: 0x13c, Size: 1]
	float Mass;//[Offset: 0x140, Size: 1]
	float CenterOfMassOffsetOnZ;//[Offset: 0x144, Size: 1]
	float CenterOfMassOffsetOnX;//[Offset: 0x148, Size: 1]
	float SuspensionClampRatioInLowFrame;//[Offset: 0x14c, Size: 1]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x150, Size: 1]
	RuntimeFloatCurve AccelerationCurveReverse;//[Offset: 0x1d8, Size: 1]
	int ReverseEvaluationAccuracy;//[Offset: 0x260, Size: 1]
	RuntimeFloatCurve SteerAngleLimit;//[Offset: 0x268, Size: 1]
	RuntimeFloatCurve SteeringResetSpeed;//[Offset: 0x2f0, Size: 1]
	RuntimeFloatCurve SteeringSpeed;//[Offset: 0x378, Size: 1]
	RuntimeFloatCurve SteeringFraction;//[Offset: 0x400, Size: 1]
	RuntimeFloatCurve SteerAngleMutiplier;//[Offset: 0x488, Size: 1]
	float LowSteeringSpeed;//[Offset: 0x510, Size: 1]
	float LowSteeringSpeedAccelerationMultiplier;//[Offset: 0x514, Size: 1]
	float LowSteeringSpeedAngleLimitMultiplier;//[Offset: 0x518, Size: 1]
	float LowSpeedSteeringThresholdOnHorizontalInput;//[Offset: 0x51c, Size: 1]
	float FlightStabilizationDamping;//[Offset: 0x520, Size: 1]
	float LateralFrictionWhenOnlySteeringWheelsOnGround;//[Offset: 0x524, Size: 1]
	WheelData[] Wheels;//[Offset: 0x528, Size: 1]
	float RotationMinAngle;//[Offset: 0x538, Size: 1]
	float MaxPitchRotation;//[Offset: 0x53c, Size: 1]
	float MaxRollRotation;//[Offset: 0x540, Size: 1]
	float RotationTimeLimit;//[Offset: 0x544, Size: 1]
	bool bOpenTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	float PitchTorqueInDegree;//[Offset: 0x54c, Size: 1]
	float RollTorqueInDegree;//[Offset: 0x550, Size: 1]
	float TorqueForUpsideDown;//[Offset: 0x554, Size: 1]
	float MaxAngularVelocityInAir;//[Offset: 0x558, Size: 1]
	float TorqueLerpAcceleration;//[Offset: 0x55c, Size: 1]
	float BalanceAngularVelocityWheelsOnGround;//[Offset: 0x560, Size: 1]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x568, Size: 1]
	<byte,ParticleSystem*> BrokenWheelDustEffect;//[Offset: 0x570, Size: 1]
	float WheelDecelerationInBrakeLock;//[Offset: 0x5c0, Size: 1]
	float WheelLerpSpeedInSlip;//[Offset: 0x5c4, Size: 1]
	float GravityAcceleration;//[Offset: 0x5c8, Size: 1]
	float GravityAccelerationInAir;//[Offset: 0x5cc, Size: 1]
	float MinHeightForGravityAccelerationInAir;//[Offset: 0x5d0, Size: 1]
	float MaxHeightForGravityAccelerationInAir;//[Offset: 0x5d4, Size: 1]
	float GravityTransitionDuration;//[Offset: 0x5d8, Size: 1]
	float MaxStaticDegree;//[Offset: 0x5dc, Size: 1]
	RuntimeFloatCurve GravityMultiplierForAcceleration;//[Offset: 0x5e0, Size: 1]
	float DecelerationUnderWater;//[Offset: 0x668, Size: 1]
	bool bAutoSteeringEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	float AutoSteeringThresholdTime;//[Offset: 0x670, Size: 1]
	float AutoSteeringSpeedThreshold;//[Offset: 0x674, Size: 1]
	float AutoSteeringTraceRadius;//[Offset: 0x678, Size: 1]
	Vector LeftAutoSteeringTraceStart;//[Offset: 0x67c, Size: 1]
	Vector RightAutoSteeringTraceStart;//[Offset: 0x688, Size: 1]
	float LeftToRightTangentDegree;//[Offset: 0x694, Size: 1]
	float AutoSteeringAngleLimit;//[Offset: 0x698, Size: 1]
	float AutoSteeringSpeed;//[Offset: 0x69c, Size: 1]
	float AutoSteeringResetSpeed;//[Offset: 0x6a0, Size: 1]
	float AutoSteeringLimitInputY;//[Offset: 0x6a4, Size: 1]
	float ThrottleInputThreshold;//[Offset: 0x6a8, Size: 1]
	RuntimeFloatCurve SteerInputCurve;//[Offset: 0x6b0, Size: 1]
	float BrakeDelayTime;//[Offset: 0x738, Size: 1]
	float ThrottleReleaseDelayTime;//[Offset: 0x73c, Size: 1]
	float MicroThrottleInputThreshold;//[Offset: 0x740, Size: 1]
	float MicroThrottleInputSpeed;//[Offset: 0x744, Size: 1]
	float SteeringLimitMultiplierInDrift;//[Offset: 0x748, Size: 1]
	float AccelerationMultiplierInDrift;//[Offset: 0x74c, Size: 1]
	float AccelerationInDriftLerpSpeed;//[Offset: 0x750, Size: 1]
	float AccelerationOutDriftLerpSpeed;//[Offset: 0x754, Size: 1]
	float MinDriftSpeed;//[Offset: 0x758, Size: 1]
	float DriftCompensationRate;//[Offset: 0x75c, Size: 1]
	float DriftCancelTimeWithoutInput;//[Offset: 0x760, Size: 1]
	<byte,ParticleSystem*> DriftParticles;//[Offset: 0x768, Size: 1]
	float TimerForAntiStuck;//[Offset: 0x7b8, Size: 1]
	float StuckAcceleration;//[Offset: 0x7bc, Size: 1]
	float StuckAccelerationLerpSpeed;//[Offset: 0x7c0, Size: 1]
	float MinAntiRollThreshold;//[Offset: 0x7c4, Size: 1]
	float MaxAntiRollThreshold;//[Offset: 0x7c8, Size: 1]
	GearSetting[] ForwardGears;//[Offset: 0x7d0, Size: 1]
	float ReverseRpm;//[Offset: 0x7e0, Size: 1]
	float SlipRpmMultiplier;//[Offset: 0x7e4, Size: 1]
	float RpmSlipSpeed;//[Offset: 0x7e8, Size: 1]
	float BurnoutDelayTime;//[Offset: 0x7ec, Size: 1]
	float BurnoutSoundRatio;//[Offset: 0x7f0, Size: 1]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x930, Size: 1]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x938, Size: 1]
	float InputVecXForRotateInAir;//[Offset: 0x940, Size: 1]
	float InputVecYForRotateInAir;//[Offset: 0x944, Size: 1]
	float BalanceRotateSpendTime;//[Offset: 0x948, Size: 1]
	float InputRotateSpendTime;//[Offset: 0x94c, Size: 1]
	byte[] InAirWheelsIndex;//[Offset: 0x950, Size: 1]
	AkComponent* AkAudioComponent;//[Offset: 0x970, Size: 1]
	void SetIsDrift(bool bInDrift, bool bResetDrift);// 0x22f6580
	void SetIsBurnout(bool bInBurnout);// 0x22f64f0
	static void SetDriveType(enum InType);// 0x22f6480
	static void SetCanAutoSteering(bool bCan);// 0x22f6400
	static void SetCanAdjustInAir(bool bCan);// 0x22f6380
	void OnVehicleSkinSoundUpdate(SolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, SolarVehicleSoundDataAsset* NewVehicleSoundDataAsset);// 0x22f62b0
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x22f60d0
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x22f5fc0

--------------------------------
Class: WheelData
	bool bIsPowered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsPoweredInDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]
	Vector Offset;//[Offset: 0xc, Size: 1]
	Vector WheelForceOffset;//[Offset: 0x18, Size: 1]
	float Radius;//[Offset: 0x24, Size: 1]
	float RadiusAfterBroken;//[Offset: 0x28, Size: 1]
	float Width;//[Offset: 0x2c, Size: 1]
	float MaxRaise;//[Offset: 0x30, Size: 1]
	float MaxDrop;//[Offset: 0x34, Size: 1]
	float SpringStiffness;//[Offset: 0x38, Size: 1]
	float DamperStiffness;//[Offset: 0x3c, Size: 1]
	float LaterialFriction;//[Offset: 0x40, Size: 1]
	float LaterialFrictionAfterBroken;//[Offset: 0x44, Size: 1]
	float LaterialFrictionInDrift;//[Offset: 0x48, Size: 1]
	float DriftingLaterialFrictionLerpSpeed;//[Offset: 0x4c, Size: 1]
	RuntimeFloatCurve EndDriftFrictionCurve;//[Offset: 0x50, Size: 1]
	VehicleVFX DriftDecal;//[Offset: 0xe0, Size: 1]
	float RollingFriction;//[Offset: 0x170, Size: 1]
	float BrakeDeceleration;//[Offset: 0x174, Size: 1]
	float DustEffectScale;//[Offset: 0x178, Size: 1]
	float DustEffectScaleAfterBroken;//[Offset: 0x17c, Size: 1]
	float DriftEffectScale;//[Offset: 0x180, Size: 1]
	ParticleSystemComponent* RaiseDustParticleComponent;//[Offset: 0x260, Size: 1]
	ParticleSystemComponent* DriftParticleComponent;//[Offset: 0x268, Size: 1]

--------------------------------
Class: GearSetting
	float MinSpeed;//[Offset: 0x0, Size: 1]
	float MaxSpeed;//[Offset: 0x4, Size: 1]
	float StartRpm;//[Offset: 0x8, Size: 1]
	float MaxRpm;//[Offset: 0xc, Size: 1]
	float RpmDescendSpeed;//[Offset: 0x10, Size: 1]
	float MinDescendRPM;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SiegeVehicleOpenTraceData
	Vector BoxPostion;//[Offset: 0x0, Size: 1]
	Vector TraceBox;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SiegeVehicleOpenCapsuleData
	Vector Postion;//[Offset: 0x0, Size: 1]
	float HalfHeight;//[Offset: 0xc, Size: 1]
	float Radius;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SolarSiegeVehicleAnimInstance.SolarWheeledVehicleAnimInstance.SolarVehicleAnimInstance.AnimInstance.Object
	Vector[] SiegeHolderLocations;//[Offset: 0x410, Size: 1]
	float PreStopSpeed;//[Offset: 0x424, Size: 1]
	float WeaponFireAlphaF;//[Offset: 0x428, Size: 1]
	float WeaponFireAlphaB;//[Offset: 0x42c, Size: 1]
	float WeaponFireAlphaR;//[Offset: 0x430, Size: 1]
	float WeaponFireAlphaL;//[Offset: 0x434, Size: 1]
	float StopSoundMinSpeed;//[Offset: 0x438, Size: 1]
	void AnimNotify_StopLeft();// 0x21fd340
	void AnimNotify_CloseIdleLeft();// 0x21fd320
	void AnimNotify_CloseIdleEnter();// 0x21fd300

--------------------------------
Class: SolarWheeledVehicleAnimInstance.SolarVehicleAnimInstance.AnimInstance.Object
	Vector FLWheelBoneScale;//[Offset: 0x330, Size: 1]
	Vector FRWheelBoneScale;//[Offset: 0x33c, Size: 1]
	Vector MLWheelBoneScale;//[Offset: 0x348, Size: 1]
	Vector MRWheelBoneScale;//[Offset: 0x354, Size: 1]
	Vector BLWheelBoneScale;//[Offset: 0x360, Size: 1]
	Vector BRWheelBoneScale;//[Offset: 0x36c, Size: 1]
	Vector FLWheelBoneLocation;//[Offset: 0x378, Size: 1]
	Vector FRWheelBoneLocation;//[Offset: 0x384, Size: 1]
	Vector MLWheelBoneLocation;//[Offset: 0x390, Size: 1]
	Vector MRWheelBoneLocation;//[Offset: 0x39c, Size: 1]
	Vector BLWheelBoneLocation;//[Offset: 0x3a8, Size: 1]
	Vector BRWheelBoneLocation;//[Offset: 0x3b4, Size: 1]
	Rotator FLWheelBoneRotation;//[Offset: 0x3c0, Size: 1]
	Rotator FRWheelBoneRotation;//[Offset: 0x3cc, Size: 1]
	Rotator MLWheelBoneRotation;//[Offset: 0x3d8, Size: 1]
	Rotator MRWheelBoneRotation;//[Offset: 0x3e4, Size: 1]
	Rotator BLWheelBoneRotation;//[Offset: 0x3f0, Size: 1]
	Rotator BRWheelBoneRotation;//[Offset: 0x3fc, Size: 1]
	void AnimNotify_EnablePlatform();// 0x22f5ee0
	void AnimNotify_DisablePlatform();// 0x22f5ec0
	void AnimNotify_ClosePlatform();// 0x22f5ea0

--------------------------------
Class: SolarVehicleAnimInstance.AnimInstance.Object
	Rotator VehicleRudderRotator;//[Offset: 0x270, Size: 1]
	float VehicleRotationValue;//[Offset: 0x27c, Size: 1]
	float VehicleRotationPercent;//[Offset: 0x280, Size: 1]
	float VehicleCameraYaw;//[Offset: 0x284, Size: 1]
	float VehicleCameraPitch;//[Offset: 0x288, Size: 1]
	bool bWithDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	bool bAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	float Speed;//[Offset: 0x290, Size: 1]
	float VelocityDegree;//[Offset: 0x294, Size: 1]
	Vector2D PlayerInputVector;//[Offset: 0x298, Size: 1]
	bool bVehicleInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x2a8, Size: 1]
	AnimMontage* VehicleWeaponRechamberMontage;//[Offset: 0x2b0, Size: 1]
	Rotator VehicleWeaponPitchRot;//[Offset: 0x2b8, Size: 1]
	Rotator VehicleWeaponYawRot;//[Offset: 0x2c4, Size: 1]
	Vector LeftBoneIKOffset;//[Offset: 0x2d0, Size: 1]
	Vector RightBoneIKOffset;//[Offset: 0x2dc, Size: 1]
	bool bUpdateVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	Vector ExternalForceScale;//[Offset: 0x2ec, Size: 1]
	float MinAddForceDistance;//[Offset: 0x2f8, Size: 1]
	FName MoveReferenceBone;//[Offset: 0x2fc, Size: 1]
	Vector AnimExternalForce;//[Offset: 0x304, Size: 1]
	void OnFireMontageStart(float InMontageLength);// 0x15646c0
	void OnFireMontageEnd(AnimMontage* InMontage, bool bInterrupted);// 0x22cc450
	SolarVehiclePawn* GetVehiclePawnOwner();// 0x22cbe00
	static float GetPlayTimeAgainstFootLocationCurve(AnimSequence* InAnimSequence, out const FName InCurveName, float InFootLocationValue);// 0x22cbbc0

--------------------------------
Class: BP_VH_Hover_Soroll02_C.BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarHoverVehicleMovement* VehicleMovement;//[Offset: 0x1380, Size: 1]
	VehicleBasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x1388, Size: 1]
	void OnVehicleRootHitForAttachPlatform(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x2178180
	void OnRep_ReplicatedBasedMovement(VehicleBasedMovementInfo PreviousBasedMovement);// 0x2177f10
	void OnPlatformActorEndplay(Actor* Actor, byte EndPlayReason);// 0x2177e40

--------------------------------
Class: SolarHoverVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x230, Size: 1]
	float MinLocationDiffForThrusterTrace;//[Offset: 0x238, Size: 1]
	float MinRotationDiffForThrusterTrace;//[Offset: 0x23c, Size: 1]
	float DriverJustOnTimer;//[Offset: 0x240, Size: 1]
	Vector MassOffset;//[Offset: 0x244, Size: 1]
	float HoverForce;//[Offset: 0x250, Size: 1]
	float HoverSpringCoefficient;//[Offset: 0x254, Size: 1]
	float HoverDampingCoefficient;//[Offset: 0x258, Size: 1]
	float HoverHeight;//[Offset: 0x25c, Size: 1]
	float MinHoverHeight;//[Offset: 0x260, Size: 1]
	float BouncinessForMinHoverHeight;//[Offset: 0x264, Size: 1]
	ThrusterData[] ThrusterDataArray;//[Offset: 0x268, Size: 1]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x278, Size: 1]
	float ThrusterTargetAnimationBlendSpeed;//[Offset: 0x280, Size: 1]
	float YawDegreeDifference;//[Offset: 0x284, Size: 1]
	float SpoilerRotateSpeed;//[Offset: 0x288, Size: 1]
	float MaxRudderRoll;//[Offset: 0x28c, Size: 1]
	float MinRudderRoll;//[Offset: 0x290, Size: 1]
	float MaxRudderYaw;//[Offset: 0x294, Size: 1]
	float MinRudderYaw;//[Offset: 0x298, Size: 1]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x2a0, Size: 1]
	float MaxSideMovingSpeed;//[Offset: 0x328, Size: 1]
	float MaxBackwardMovingSpeed;//[Offset: 0x32c, Size: 1]
	float DecelerationDegree;//[Offset: 0x330, Size: 1]
	float DecelerationOnInput;//[Offset: 0x334, Size: 1]
	float DecelerationOnMovingDirection;//[Offset: 0x338, Size: 1]
	float MinDecelerationOnMovingDirection;//[Offset: 0x33c, Size: 1]
	GameplayTagContainer IgnoreDecelerationOnMovingDirectionTags;//[Offset: 0x340, Size: 1]
	RuntimeFloatCurve DecelerationOnSide;//[Offset: 0x360, Size: 1]
	RuntimeFloatCurve AccelerationMultiplierForSideVelocity;//[Offset: 0x3e8, Size: 1]
	float MaxControllableDegree;//[Offset: 0x470, Size: 1]
	GameplayTagContainer InAirControllableTags;//[Offset: 0x478, Size: 1]
	float AdditionalDegreeForStabilize;//[Offset: 0x498, Size: 1]
	RuntimeFloatCurve StabilizeDampingCurve;//[Offset: 0x4a0, Size: 1]
	RuntimeFloatCurve StabilizeSpeedCurve;//[Offset: 0x528, Size: 1]
	float TimerForAntiStuck;//[Offset: 0x5b0, Size: 1]
	float StuckAcceleration;//[Offset: 0x5b4, Size: 1]
	float StuckAccelerationLerpSpeed;//[Offset: 0x5b8, Size: 1]
	float GravityAcceleration;//[Offset: 0x5bc, Size: 1]
	float GravityWithoutDriver;//[Offset: 0x5c0, Size: 1]
	float LandingDuration;//[Offset: 0x5c4, Size: 1]
	float MaximumVelocityOnZWithoutDriver;//[Offset: 0x5c8, Size: 1]
	float DecelerationRateWithoutDriver;//[Offset: 0x5cc, Size: 1]
	float AngularDampingWithoutDriver;//[Offset: 0x5d0, Size: 1]
	float WaterLineForFloatingForce;//[Offset: 0x5d4, Size: 1]
	float UpwardAccelerationFloatingOnWater;//[Offset: 0x5d8, Size: 1]
	float WaterAlignSpeed;//[Offset: 0x5dc, Size: 1]
	float WaterHeightWithoutDriver;//[Offset: 0x5e0, Size: 1]
	PIDController UpwardForcePIDController;//[Offset: 0x5e4, Size: 1]
	float RotateAccelaration;//[Offset: 0x600, Size: 1]
	float RotateDecelaration;//[Offset: 0x604, Size: 1]
	float MaxAngularSpeed;//[Offset: 0x608, Size: 1]
	float HoverHeightMultiplierAfterBroken;//[Offset: 0x60c, Size: 1]
	float ParticleMultiplierAfterBroken;//[Offset: 0x610, Size: 1]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x618, Size: 1]
	VehicleVFX MovementParticles;//[Offset: 0x630, Size: 4]
	ThrusterState[] ThrusterStateArray;//[Offset: 0x8e8, Size: 1]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x8f8, Size: 1]
	SolarNetMovementComponent* VehicleNetMovement;//[Offset: 0x900, Size: 1]
	AkComponent* AkComponent;//[Offset: 0x908, Size: 1]
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x2177fa0
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x2177d70
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x2177ca0

--------------------------------
Class: ThrusterData
	float HoverHeightMultiplierInForward;//[Offset: 0x0, Size: 1]
	float HoverHeightMultiplierInBackward;//[Offset: 0x4, Size: 1]
	float HoverHeightMultiplierInLeft;//[Offset: 0x8, Size: 1]
	float HoverHeightMultiplierInRight;//[Offset: 0xc, Size: 1]
	bool bRaiseDust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float DustEffectScale;//[Offset: 0x14, Size: 1]
	Vector DustEffectOffest;//[Offset: 0x18, Size: 1]
	FName ThrusterSocket;//[Offset: 0x24, Size: 1]
	Vector ThrusterOffsetIfNoValidSocket;//[Offset: 0x2c, Size: 1]
	float SweepRadius;//[Offset: 0x38, Size: 1]

--------------------------------
Class: PIDController
	float PCoeff;//[Offset: 0x0, Size: 1]
	float ICoeff;//[Offset: 0x4, Size: 1]
	float DCoeff;//[Offset: 0x8, Size: 1]
	float Minimum;//[Offset: 0xc, Size: 1]
	float Maximum;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ThrusterState
	HitResult TouchGroundHit;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleBasedMovementInfo
	SolarVehiclePawn* MovementBaseActor;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 RelativeLocation;//[Offset: 0x8, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 1]

--------------------------------
Class: BP_VH_Hover_Soroll02_AutoGun_C.BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x12b0, Size: 1]
	float Timeline_NewTrack_0_DE7B3CD04D17559AA815FB881A64E7DE;//[Offset: 0x12b8, Size: 1]
	byte Timeline__Direction_DE7B3CD04D17559AA815FB881A64E7DE;//[Offset: 0x12bc, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x12c0, Size: 1]
	int Which?;//[Offset: 0x12c8, Size: 1]
	void Timeline__FinishedFunc();// 0x2649560
	void Timeline__UpdateFunc();// 0x2649560
	void OnVehicleWeaponControlled();// 0x2649560
	void OnVehicleWeaponUnControlled();// 0x2649560
	void ExecuteUbergraph_BP_VH_Hover_Soroll02_AutoGun(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x2649560

--------------------------------
Class: BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object

--------------------------------
Class: BP_PBags_MCP_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 1]
	void OnMeshEffectFactorChange();// 0x2649560
	void ExecuteUbergraph_BP_PBags_MCP_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0x2649560

--------------------------------
Class: BP_PBags_FDS_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	ParticleSystemComponent* FX_StarSmoke;//[Offset: 0x310, Size: 1]

--------------------------------
Class: BP_VH_Leg_Spider01_ShapedGun_C.BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x12b0, Size: 1]
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x2649560
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ExecuteUbergraph_BP_VH_Leg_Spider01_ShapedGun(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, ParticleSystemComponent* K2Node_Event_PSC, const Vector K2Node_Event_Position, const float K2Node_Event_Scale, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, const HitResult K2Node_Event_InHit, const float K2Node_Event_DamageScale, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, int CallFunc_PostEventAtLocation_ReturnValue);// 0x2649560

--------------------------------
Class: BP_VH_Leg_WL03_New_Procedural_C.BP_VH_Leg_WL03_New_C.BP_LeggedVehicleBase_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: BP_VH_Leg_WL03_New_C.BP_LeggedVehicleBase_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SphereComponent* BlockForVehicle;//[Offset: 0x13d0, Size: 1]

--------------------------------
Class: BP_LeggedVehicleBase_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object

--------------------------------
Class: BP_PBags_Default_Set02_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: GC_Weapon_Scan_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 1]
	float Duration;//[Offset: 0x2a0, Size: 1]
	float ScanRadius;//[Offset: 0x2a4, Size: 1]
	void PlaySound(SolarCharacter* CueOwner, Vector CueLocation, PlayerController* CallFunc_GetPlayerController_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEventAtLocation_ReturnValue, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, Vector CallFunc_Conv_FloatToVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0x2649560

--------------------------------
Class: BP_SI_ElectricboxB_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x610, Size: 1]
	StaticMeshComponent* 3DIcon;//[Offset: 0x618, Size: 1]
	float OpenAnimation_OpenCurve_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x620, Size: 1]
	byte OpenAnimation__Direction_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x624, Size: 1]
	TimelineComponent* OpenAnimation;//[Offset: 0x628, Size: 1]
	void OpenAnimation__FinishedFunc();// 0x2649560
	void OpenAnimation__UpdateFunc();// 0x2649560
	void PlayOpenAnimation();// 0x2649560
	void ExecuteUbergraph_BP_SI_ElectricboxB(int EntryPoint);// 0x2649560

--------------------------------
Class: ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	FString OnFinishSpawnLoopAudio;//[Offset: 0x5d0, Size: 1]
	FString OnStopLoopAudio;//[Offset: 0x5e0, Size: 1]
	FString OnOpenAudio;//[Offset: 0x5f0, Size: 1]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x600, Size: 1]

--------------------------------
Class: BP_SI_ElectricboxC_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x610, Size: 1]
	StaticMeshComponent* SM_SI_ElectricboxC_FX;//[Offset: 0x618, Size: 1]
	SceneComponent* VFX;//[Offset: 0x620, Size: 1]
	StaticMeshComponent* 3DIcon;//[Offset: 0x628, Size: 1]
	float OpenAnimation_OpenCurve_89E5397146EB1D36476B268C4D975163;//[Offset: 0x630, Size: 1]
	byte OpenAnimation__Direction_89E5397146EB1D36476B268C4D975163;//[Offset: 0x634, Size: 1]
	TimelineComponent* OpenAnimation;//[Offset: 0x638, Size: 1]
	void OpenAnimation__FinishedFunc();// 0x2649560
	void OpenAnimation__UpdateFunc();// 0x2649560
	void PlayOpenAnimation();// 0x2649560
	void ExecuteUbergraph_BP_SI_ElectricboxC(int EntryPoint);// 0x2649560

--------------------------------
Class: BP_PBags_SCG_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_Rifle_B9A03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2649560

--------------------------------
Class: BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xdb0, Size: 1]
	WeaponPartStaticMeshComponent* RedCrosshair;//[Offset: 0xdb8, Size: 1]
	WeaponPartStaticMeshComponent* Crosshair;//[Offset: 0xdc0, Size: 1]
	WeaponPartMuzzleComp* WeaponPartMuzzleComp;//[Offset: 0xdc8, Size: 1]
	WeaponPartGripComp* WeaponPartGripComp;//[Offset: 0xdd0, Size: 1]
	WeaponPartGunStockComp* WeaponPartGunStockComp;//[Offset: 0xdd8, Size: 1]
	WeaponPartClipComp* WeaponPartClipComp;//[Offset: 0xde0, Size: 1]
	WeaponPartScopeComp* WeaponPartScopeComp;//[Offset: 0xde8, Size: 1]
	void ReceiveBeginPlay();// 0x2649560
	void K2_SwitchDrawDistance(bool Hold);// 0x2649560
	void ExecuteUbergraph_BP_SolarPlayerWeapon(int EntryPoint, bool K2Node_Event_hold);// 0x2649560

--------------------------------
Class: SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	WeaponPartsComponent* WeaponPartsComponent;//[Offset: 0xda8, Size: 1]
	bool QueryCanEquipPart(const enum Type, const int InWeaponID);// 0x21de4b0
	bool GetEquippedScopeTypeAndLevel(out enum Type, out int Level);// 0x21db710
	int GetEquippedPartLevel(const enum Type);// 0x21db680
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int OldLevel, int NewLevel, int reason);// 0x21db2e0
	bool CanEquipPart(const enum Type);// 0x21dab50

--------------------------------
Class: BP_Rifle_B9A05_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2649560

--------------------------------
Class: BP_Sniper_9A06_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2649560

--------------------------------
Class: GC_Invincible_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 1]
	MaterialChangeHandle Mat_Invincible;//[Offset: 0x2a0, Size: 1]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, ActorMaterialSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, CharacterSkinConfig* CallFunc_GetSkinConfig_ReturnValue, AddMaterialChangeParams K2Node_MakeStruct_AddMaterialChangeParams, SoftObjectPath CallFunc_GetInvincibleMAT_ReturnValue, MaterialChangeHandle CallFunc_K2_AddMaterialChangeByPath_ReturnValue);// 0x2649560
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x2649560
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, ActorMaterialSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_RemoveMaterialChange_ReturnValue);// 0x2649560

--------------------------------
Class: ActorMaterialSubsystem.WorldSubsystem.Subsystem.Object
	<Actor*,ActorMaterialInfo> ActorMaterialsMap;//[Offset: 0x30, Size: 1]
	bool SetStaticMesh(const Actor* Actor, StaticMeshComponent* MeshComp, StaticMesh* NewMesh);// 0x1ff9260
	bool SetSkeletalMesh(const Actor* Actor, SkeletalMeshComponent* MeshComp, SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x1ff90a0
	bool SetOriginalMultiplePassMaterial(const Actor* Actor, MeshComponent* MeshComp, MaterialInterface* Material, bool bNeedMultiplePass);// 0x1ff8f40
	bool SetOriginalMaterials(const Actor* Actor, MeshComponent* MeshComp, out const MaterialInterface*[] Materials);// 0x1ff8e10
	bool SetOriginalMaterial(const Actor* Actor, MeshComponent* MeshComp, int MaterialIndex, MaterialInterface* Material);// 0x1ff8cb0
	void RemoveNoChangeMaterials(out const SoftObjectPath[] Materials);// 0x1ff8be0
	bool RemoveMaterialChange(Actor* Actor, MaterialChangeHandle Handle);// 0x1ff8b10
	bool RemoveAllMaterialChanges(Actor* Actor);// 0x1ff8a70
	void RebuildMaterialChangesOnMeshAddedOrRemoved(const Actor* Actor);// 0x1ff89e0
	void RebuildMaterialChangesOnAllOriginalMaterialsChanged(const Actor* Actor);// 0x1ff8950
	static MaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameterByIndex(MaterialInstanceDynamic* TargetMaterial, const PrimitiveComponent* SourcePrimitiveComponent, int SourceElementIndex, FName ParameterName, enum ParameterType, bool bOverridenOnly);// 0x1ff8780
	static MaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameter(MaterialInstanceDynamic* TargetMaterial, const MaterialInterface* SourceMaterial, FName ParameterName, enum ParameterType, bool bOverridenOnly);// 0x1ff85f0
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x1ff8520
	bool K2_SetVectorMaterialParameter(const Actor* Actor, MaterialChangeHandle Handle, FName ParameterName, Vector ParameterValue, MaterialFilter Filter);// 0x1ff8220
	bool K2_SetScalarMaterialParameter(const Actor* Actor, MaterialChangeHandle Handle, FName ParameterName, float ParameterValue, MaterialFilter Filter);// 0x1ff7f30
	void K2_RebuildMaterialChangesOnOriginalMaterialChanged(const Actor* Actor, MeshComponent*[] ChangedMeshes);// 0x1ff7e00
	static MaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParametersByIndex(MaterialInstanceDynamic* TargetMaterial, const PrimitiveComponent* PrimitiveComponent, int SourceElementIndex, int ParameterTypeFlags, out const MaterialParameterFilter ParameterFilter, bool bOverridenOnly);// 0x1ff7c00
	static MaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParameters(MaterialInstanceDynamic* TargetMaterial, const MaterialInterface* SourceMaterial, int ParameterTypeFlags, out const MaterialParameterFilter ParameterFilter, bool bOverridenOnly);// 0x1ff7a40
	static MaterialInstanceDynamic* K2_CreateDynamicMaterialInstanceOverrideAllParameters(PrimitiveComponent* TargetPrimitiveComponent, MaterialInterface* SourceMaterial, int ParameterTypeFlags, out const MaterialParameterFilter ParameterFilter, int TargetElementIndex, bool bOverridenOnly, FName OptionalMaterialName);// 0x1ff77e0
	MaterialChangeHandle K2_AddMaterialChangeByPath(Actor* Actor, out const SoftObjectPath MaterialPath, AddMaterialChangeParams Params);// 0x1ff75f0
	MaterialChangeHandle K2_AddMaterialChange(Actor* Actor, MaterialInterface* SourceMaterial, AddMaterialChangeParams Params);// 0x1ff7420
	bool EmptyOriginalOverrideMaterials(const Actor* Actor, MeshComponent* MeshComp);// 0x1ff6ff0
	bool ContainsMaterialChangeByPriority(const Actor* Actor, int Priority);// 0x1ff6f20
	bool ContainsMaterialChange(const Actor* Actor, MaterialChangeHandle Handle);// 0x1ff6e50
	bool ContainsAnyMaterialChange(const Actor* Actor);// 0x1ff6db0
	void AddNoChangeMaterials(out const SoftObjectPath[] Materials);// 0x1ff6ce0

--------------------------------
Class: MaterialFilter
	bool bIgnoreChangeability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	MeshComponent*[] IncludingMeshes;//[Offset: 0x8, Size: 1]
	int[] IncludingMaterialIndices;//[Offset: 0x18, Size: 1]
	MeshComponent*[] ExcludingMeshes;//[Offset: 0x28, Size: 1]
	int[] ExcludingMaterialIndices;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MaterialParameterFilter
	FName[] IncludingNames;//[Offset: 0x0, Size: 1]
	FName[] ExcludingNames;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AddMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x8, Size: 1]
	enum ResolveStrategy;//[Offset: 0x10, Size: 1]
	enum TextureOverrideMode;//[Offset: 0x11, Size: 1]
	FName[] TextureParameterNamesToOverride;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ActorMaterialInfo
	<MaterialChangeHandle,MaterialInterface*> SourceMaterials;//[Offset: 0x10, Size: 1]
	<MaterialChangeHandle,AddMaterialChangeParams> NormalParams;//[Offset: 0x60, Size: 1]
	<MaterialChangeHandle,AddMultiplePassMaterialChangeParams> MultiplePassParams;//[Offset: 0xb0, Size: 1]
	<MaterialChangeHandle,LimitedMeshContainer> LimitedMeshes;//[Offset: 0x100, Size: 1]
	MeshMaterialInfo[] MeshMaterials;//[Offset: 0x150, Size: 1]

--------------------------------
Class: LimitedMeshContainer
	MeshComponent*[] Meshes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MeshMaterialInfo
	MaterialChange[] NormalMaterialChanges;//[Offset: 0x18, Size: 1]
	MaterialChange[] MultiplePassMaterialChanges;//[Offset: 0x40, Size: 1]

--------------------------------
Class: MaterialChange
	MaterialInterface*[] Materials;//[Offset: 0x28, Size: 1]

--------------------------------
Class: GC_Freeze_C.SolarSkillGC_Freeze.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x360, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x368, Size: 1]
	MaterialChangeHandle MaterialChangeHandle;//[Offset: 0x370, Size: 1]
	<int,FString> SoundPlayMap;//[Offset: 0x378, Size: 1]
	<int,FString> SoundStopMap;//[Offset: 0x3c8, Size: 1]
	ParticleSystemComponent* ParticleHandle;//[Offset: 0x418, Size: 1]
	FString PlayingAudioEventName;//[Offset: 0x420, Size: 1]
	void RemoveFunc(const Actor* Actor, FString CallFunc_GetObjectName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ActorMaterialSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_RemoveMaterialChange_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void ActiveFunc(Actor* TartgetActor, Actor* TargetActor, AddMaterialChangeParams K2Node_MakeStruct_AddMaterialChangeParams, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ActorMaterialSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, MaterialChangeHandle CallFunc_K2_AddMaterialChange_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ContainsMaterialChange_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2649560
	void Is Teammate(SolarCharacter* Actor1, Actor* Actor2, out bool IsTeammate, bool bIsTeammate, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsTeammateWith_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsTeammateWith_ReturnValue);// 0x2649560
	void PlaySoundEvent(Actor* TargetActor, bool bPlay, FString CallFunc_Replace_ReturnValue, int CallFunc_PlaySoundbyname_ReturnValue, int CallFunc_PlaySoundbyname_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, bool CallFunc_Is_Teammate_IsTeammate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2649560
	void ReceiveBeginPlay();// 0x2649560
	void ReceiveEndPlay(byte EndPlayReason);// 0x2649560
	void ExecuteUbergraph_GC_Freeze(int EntryPoint, byte K2Node_Event_EndPlayReason);// 0x2649560

--------------------------------
Class: SolarSkillGC_Freeze.GameplayCueNotify_Actor.Actor.Object
	ParticleSystem* IceSmokeParticle;//[Offset: 0x298, Size: 1]
	FName IceSmokeAttachPointName;//[Offset: 0x2a0, Size: 1]
	Transform IceSmokeTransform;//[Offset: 0x2b0, Size: 1]
	ParticleSystemComponent* IceSmokeParticleHandle;//[Offset: 0x2e0, Size: 1]
	FString FreezeStartSoundName1P;//[Offset: 0x2e8, Size: 1]
	FString FreezeStartSoundName3P;//[Offset: 0x2f8, Size: 1]
	FString FreezeStartSoundName3PEnemy;//[Offset: 0x308, Size: 1]
	FString FreezeEndSoundName1P;//[Offset: 0x318, Size: 1]
	FString FreezeEndSoundName3P;//[Offset: 0x328, Size: 1]
	FString FreezeEndSoundName3PEnemy;//[Offset: 0x338, Size: 1]
	class MaterialSimpleEffect* FreezeMatEffectClass;//[Offset: 0x348, Size: 1]

--------------------------------
Class: MaterialSimpleEffect.MaterialEffectBase.ActorEffect.Object
	NormalMaterialChange MaterialChange;//[Offset: 0x160, Size: 1]
	SoftObjectPath[] NoChangeMaterials;//[Offset: 0x1b0, Size: 1]

--------------------------------
Class: MaterialEffectBase.ActorEffect.Object

--------------------------------
Class: NormalMaterialChange
	MaterialInterface* SourceMaterial;//[Offset: 0x0, Size: 1]
	AddMaterialChangeParams Params;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BP_FX_Def_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240, Size: 1]
	StaticMeshComponent* 3DIcon;//[Offset: 0x248, Size: 1]
	TextRenderComponent* TextRender;//[Offset: 0x250, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 1]
	void ReceiveBeginPlay();// 0x2649560
	void SetItemCount(int count);// 0x2649560
	void ExecuteUbergraph_BP_FX_Def(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2649560

--------------------------------
Class: BP_Rifle_Mphy03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2649560

--------------------------------
Class: BP_Sniper_9A01_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2649560

--------------------------------
Class: BP_PBags_CPB_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
